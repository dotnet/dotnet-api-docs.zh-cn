<Type Name="KerberosSecurityTokenProvider" FullName="System.IdentityModel.Selectors.KerberosSecurityTokenProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db09eb1ece72226c495db15cfe73a13aa37448bf" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86340767" /></Metadata><TypeSignature Language="C#" Value="public class KerberosSecurityTokenProvider : System.IdentityModel.Selectors.SecurityTokenProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KerberosSecurityTokenProvider extends System.IdentityModel.Selectors.SecurityTokenProvider" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class KerberosSecurityTokenProvider&#xA;Inherits SecurityTokenProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class KerberosSecurityTokenProvider : System::IdentityModel::Selectors::SecurityTokenProvider" />
  <TypeSignature Language="F#" Value="type KerberosSecurityTokenProvider = class&#xA;    inherit SecurityTokenProvider" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Selectors.SecurityTokenProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示为 SOAP 消息发送方提供 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的安全令牌提供程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多数情况下无需直接调用 <xref:System.IdentityModel.Selectors.KerberosSecurityTokenProvider> 类，因为它在客户端发送需要 <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken> 安全令牌的 SOAP 消息时调用。 具体来说，客户端使用 <xref:System.ServiceModel.Description.ClientCredentials> 类指定所需的安全令牌的类型，然后 <xref:System.ServiceModel.Description.ClientCredentials> 类调用 <xref:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken%2A> 方法来获取安全令牌。 如果所需的安全令牌为 <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken> 安全令牌，则 <xref:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken%2A> 方法调用 <xref:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.GetTokenCore%28System.TimeSpan%29> 方法。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Selectors.SecurityTokenManager" />
    <altmember cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" />
    <related type="Article" href="/dotnet/framework/wcf/extending/how-to-create-a-custom-token">如何：创建自定义令牌</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KerberosSecurityTokenProvider (string servicePrincipalName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string servicePrincipalName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (servicePrincipalName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KerberosSecurityTokenProvider(System::String ^ servicePrincipalName);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider : string -&gt; System.IdentityModel.Selectors.KerberosSecurityTokenProvider" Usage="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider servicePrincipalName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="servicePrincipalName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="servicePrincipalName">要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</param>
        <summary>使用指定的服务主体名称初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将客户端允许的模拟级别设置为 <xref:System.Security.Principal.TokenImpersonationLevel>`Identification`。 调用线程的当前上下文 (<xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A>) 将用作客户端标识。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="servicePrincipalName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KerberosSecurityTokenProvider (string servicePrincipalName, System.Security.Principal.TokenImpersonationLevel tokenImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string servicePrincipalName, valuetype System.Security.Principal.TokenImpersonationLevel tokenImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (servicePrincipalName As String, tokenImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KerberosSecurityTokenProvider(System::String ^ servicePrincipalName, System::Security::Principal::TokenImpersonationLevel tokenImpersonationLevel);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider : string * System.Security.Principal.TokenImpersonationLevel -&gt; System.IdentityModel.Selectors.KerberosSecurityTokenProvider" Usage="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider (servicePrincipalName, tokenImpersonationLevel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="servicePrincipalName" Type="System.String" />
        <Parameter Name="tokenImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="servicePrincipalName">要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</param>
        <param name="tokenImpersonationLevel">一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。</param>
        <summary>通过使用指定的服务主体名称以及有关客户端是否允许 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 安全令牌的接收方模拟客户端的凭据的信息，初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用线程的当前上下文 (<xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A>) 将用作客户端标识。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tokenImpersonationLevel" /> 不是 <see langword="Identification" /> 或 <see langword="Impersonation" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="servicePrincipalName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KerberosSecurityTokenProvider (string servicePrincipalName, System.Security.Principal.TokenImpersonationLevel tokenImpersonationLevel, System.Net.NetworkCredential networkCredential);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string servicePrincipalName, valuetype System.Security.Principal.TokenImpersonationLevel tokenImpersonationLevel, class System.Net.NetworkCredential networkCredential) cil managed" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (servicePrincipalName As String, tokenImpersonationLevel As TokenImpersonationLevel, networkCredential As NetworkCredential)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KerberosSecurityTokenProvider(System::String ^ servicePrincipalName, System::Security::Principal::TokenImpersonationLevel tokenImpersonationLevel, System::Net::NetworkCredential ^ networkCredential);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider : string * System.Security.Principal.TokenImpersonationLevel * System.Net.NetworkCredential -&gt; System.IdentityModel.Selectors.KerberosSecurityTokenProvider" Usage="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider (servicePrincipalName, tokenImpersonationLevel, networkCredential)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public KerberosSecurityTokenProvider (string servicePrincipalName, System.Security.Principal.TokenImpersonationLevel tokenImpersonationLevel, System.Net.NetworkCredential credential);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string servicePrincipalName, valuetype System.Security.Principal.TokenImpersonationLevel tokenImpersonationLevel, class System.Net.NetworkCredential credential) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (servicePrincipalName As String, tokenImpersonationLevel As TokenImpersonationLevel, credential As NetworkCredential)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KerberosSecurityTokenProvider(System::String ^ servicePrincipalName, System::Security::Principal::TokenImpersonationLevel tokenImpersonationLevel, System::Net::NetworkCredential ^ credential);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider : string * System.Security.Principal.TokenImpersonationLevel * System.Net.NetworkCredential -&gt; System.IdentityModel.Selectors.KerberosSecurityTokenProvider" Usage="new System.IdentityModel.Selectors.KerberosSecurityTokenProvider (servicePrincipalName, tokenImpersonationLevel, credential)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="servicePrincipalName" Type="System.String" Index="0" />
        <Parameter Name="tokenImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="1" />
        <Parameter Name="networkCredential" Type="System.Net.NetworkCredential" Index="2" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="2" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="servicePrincipalName">要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</param>
        <param name="tokenImpersonationLevel">一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端进程执行操作。</param>
        <param name="networkCredential">一个 <see cref="T:System.Net.NetworkCredential" />，它表示 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 的标识。</param>
        <param name="credential">一个 <see cref="T:System.Net.NetworkCredential" />，它表示 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 的标识。</param>
        <summary>通过使用指定的服务主体名称、客户端标识以及有关客户端是否允许 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 安全令牌的接收方模拟客户端的凭据的信息，初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tokenImpersonationLevel" /> 不是 <see langword="Identification" /> 或 <see langword="Impersonation" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="servicePrincipalName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTokenCore">
      <MemberSignature Language="C#" Value="protected override System.IdentityModel.Tokens.SecurityToken GetTokenCore (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken GetTokenCore(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.GetTokenCore(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetTokenCore (timeout As TimeSpan) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ GetTokenCore(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="override this.GetTokenCore : TimeSpan -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="kerberosSecurityTokenProvider.GetTokenCore timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
        <summary>获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌。</summary>
        <returns>表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当客户端发送 SOAP 消息并且需要 <xref:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken%2A> 安全令牌时，<xref:System.ServiceModel.Description.ClientCredentials> 类会调用 <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken> 方法。  
  
 <xref:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken%2A> 方法调用 <xref:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.GetTokenCore%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential NetworkCredential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkCredential NetworkCredential" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.NetworkCredential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NetworkCredential As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkCredential ^ NetworkCredential { System::Net::NetworkCredential ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NetworkCredential : System.Net.NetworkCredential" Usage="System.IdentityModel.Selectors.KerberosSecurityTokenProvider.NetworkCredential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的标识。</summary>
        <value>一个 <see cref="T:System.Net.NetworkCredential" />，它表示 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 的标识。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.NetworkCredential%2A> 属性的值为 `null` 并且 <xref:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.GetTokenCore%2A> 方法被调用时，调用线程的当前上下文 (<xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A>) 将用作客户端标识。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicePrincipalName">
      <MemberSignature Language="C#" Value="public string ServicePrincipalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServicePrincipalName" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.ServicePrincipalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServicePrincipalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServicePrincipalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServicePrincipalName : string" Usage="System.IdentityModel.Selectors.KerberosSecurityTokenProvider.ServicePrincipalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要获取的 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</summary>
        <value>要获取的 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel TokenImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel TokenImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.TokenImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::TokenImpersonationLevel TokenImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenImpersonationLevel : System.Security.Principal.TokenImpersonationLevel" Usage="System.IdentityModel.Selectors.KerberosSecurityTokenProvider.TokenImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。</summary>
        <value>一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.TokenImpersonationLevel%2A> 属性必须为 `Identification` 或 `Impersonation`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
