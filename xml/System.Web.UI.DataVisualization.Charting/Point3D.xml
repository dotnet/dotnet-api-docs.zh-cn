<Type Name="Point3D" FullName="System.Web.UI.DataVisualization.Charting.Point3D">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4559782a166a42e0471bfddc3bebdf98b0b3e186" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86664337" /></Metadata><TypeSignature Language="C#" Value="public class Point3D" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Point3D extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.Point3D" />
  <TypeSignature Language="VB.NET" Value="Public Class Point3D" />
  <TypeSignature Language="C++ CLI" Value="public ref class Point3D" />
  <TypeSignature Language="F#" Value="type Point3D = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示三维 (3D) 数据点的坐标。 用三维图表执行自定义绘图时使用此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataVisualization.Charting.Point3D>类表示三维数据点的坐标。  
  
 自定义三维绘图中使用的任何点（使用 GDI + 完成）必须使用方法从相对 X、Y 和 Z (3D) 坐标转换为相对 X 和 Y (2D) 坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 。 通过调用 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> ，将更改对象的 X 和 Y 值， <xref:System.Web.UI.DataVisualization.Charting.Point3D> 以反映三维空间。 然后，可以将新的 X 和 Y 点用于 GDI + 方法调用-然后，在使用方法将 Z 值更改为绝对像素坐标后，将忽略 Z 值 <xref:System.Web.UI.DataVisualization.Charting.ChartGraphics.GetAbsolutePoint%2A> 。  
  
 请注意，Z 坐标可能小于零 (位于图表区域的上方) 或大于 100 () 。  
  
 若要启用三维图表并使用其样式，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.Area3DStyle%2A> 属性。 <xref:System.Web.UI.DataVisualization.Charting.Point3D>类不用于三维样式。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.DataVisualization.Charting.Point3D" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Point3D ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.Point3D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Point3D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.DataVisualization.Charting.Point3D" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Point3D (float x, float y, float z);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 x, float32 y, float32 z) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.Point3D.#ctor(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Single, y As Single, z As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Point3D(float x, float y, float z);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.DataVisualization.Charting.Point3D : single * single * single -&gt; System.Web.UI.DataVisualization.Charting.Point3D" Usage="new System.Web.UI.DataVisualization.Charting.Point3D (x, y, z)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="z" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">三维点的 X 坐标。</param>
        <param name="y">三维点的 Y 坐标。</param>
        <param name="z">Z 坐标，表示三维点的深度。</param>
        <summary>用指定的 X、Y 和 Z 坐标初始化 <see cref="T:System.Web.UI.DataVisualization.Charting.AnnotationPathPoint" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointF">
      <MemberSignature Language="C#" Value="public System.Drawing.PointF PointF { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.PointF PointF" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.Point3D.PointF" />
      <MemberSignature Language="VB.NET" Value="Public Property PointF As PointF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::PointF PointF { System::Drawing::PointF get(); void set(System::Drawing::PointF value); };" />
      <MemberSignature Language="F#" Value="member this.PointF : System.Drawing.PointF with get, set" Usage="System.Web.UI.DataVisualization.Charting.Point3D.PointF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Drawing.PointF" /> 结构，该结构存储三维点的 X 和 Y 坐标。</summary>
        <value>表示三维点的 X 和 Y 坐标的 <see cref="T:System.Drawing.PointF" /> 结构。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义三维绘图中使用的任何点（使用 GDI + 完成）必须使用方法从 X、Y 和 Z (3D) 坐标转换为 X 和 Y (2D) 坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 。 此方法采用对象的数组 <xref:System.Web.UI.DataVisualization.Charting.Point3D> 作为其唯一的参数。 通过调用 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> ，X 和 Y 属性值将更改，以反映三维空间。  
  
 然后使用方法（如方法）将这些新的 X 和 Y 坐标转换为绝对坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartGraphics.GetAbsolutePoint%2A> 。 转换坐标后， <xref:System.Web.UI.DataVisualization.Charting.Point3D.PointF%2A> 每个 Point3D 对象的属性可用于采用对象作为参数的任何 GDI + 方法 <xref:System.Drawing.PointF> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public float X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 X" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.Point3D.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float X { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.X : single with get, set" Usage="System.Web.UI.DataVisualization.Charting.Point3D.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置三维点的 X 坐标。</summary>
        <value>一个 <see langword="float" />，它表示三维点的 X 坐标。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义三维绘图中使用的任何点（使用 GDI + 完成）必须使用方法从 X、Y 和 Z (3D) 坐标转换为 X 和 Y (2D) 坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 。 此方法采用 Point3D 对象的数组作为其唯一参数。 通过调用 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 方法，X 和 Y 属性值将更改，以反映三维空间。  
  
 然后，使用方法将这些新的 X 和 Y 坐标转换为绝对坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartGraphics.GetAbsolutePoint%2A> 。 然后，它们将用于 GDI + 方法调用。  
  
 可以通过调用方法从轴值获取相对 X 坐标 <xref:System.Web.UI.DataVisualization.Charting.Axis.ValueToPosition%2A> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public float Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.Point3D.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Y { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Y : single with get, set" Usage="System.Web.UI.DataVisualization.Charting.Point3D.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置三维点的 Y 坐标。</summary>
        <value>一个 <see langword="float" /> 值，该值表示三维点的 Y 坐标。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义三维绘图中使用的任何点（使用 GDI + 完成）必须使用方法从 X、Y 和 Z (3D) 坐标转换为 X 和 Y (2D) 坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 。 此方法采用 Point3D 对象的数组作为其唯一参数。 通过调用 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 方法，X 和 Y 属性值将更改，以反映三维空间。  
  
 然后，使用方法将这些新的 X 和 Y 坐标转换为绝对坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartGraphics.GetAbsolutePoint%2A> 。 然后，它们将用于 GDI + 方法调用。  
  
 可以使用方法从轴值获取相对 Y 坐标 <xref:System.Web.UI.DataVisualization.Charting.Axis.ValueToPosition%2A> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Z">
      <MemberSignature Language="C#" Value="public float Z { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Z" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.Point3D.Z" />
      <MemberSignature Language="VB.NET" Value="Public Property Z As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Z { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Z : single with get, set" Usage="System.Web.UI.DataVisualization.Charting.Point3D.Z" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置三维点的 Z 坐标。</summary>
        <value>三维点的 Z 坐标，它以相关图表区域深度的百分比来度量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 Z 属性始终以相关图表区域深度的百分比表示。 对于三维图表，Z 坐标是相对的，其值为0表示图表区的背面墙，值为100表示图表区的前墙。  
  
 **注意** 此 Z 属性可能小于零 (位于图表区域) 或大于 100 (的图表区域) 。  
  
 自定义三维绘图中使用的任何点（使用 GDI + 完成）必须使用方法从 X、Y 和 Z (3D) 坐标转换为 X 和 Y (2D) 坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 。 此方法采用 Point3D 对象的数组作为其唯一参数。 通过调用 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.TransformPoints%2A> 方法，X 和 Y 属性值将更改，以反映三维空间。  
  
 然后，使用方法将这些新的 X 和 Y 坐标转换为绝对坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartGraphics.GetAbsolutePoint%2A> 。 然后，它们将用于 GDI + 方法调用。  
  
 可以使用和方法为序列获取相对 Z 坐标 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.GetSeriesDepth%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartArea.GetSeriesZPosition%2A> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
