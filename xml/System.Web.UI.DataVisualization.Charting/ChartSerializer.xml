<Type Name="ChartSerializer" FullName="System.Web.UI.DataVisualization.Charting.ChartSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5dc6f9864c992b43270b3679a6662105f78e679c" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86665234" /></Metadata><TypeSignature Language="C#" Value="public class ChartSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChartSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.ChartSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class ChartSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChartSerializer" />
  <TypeSignature Language="F#" Value="type ChartSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("Format")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("Format")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>启用 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控件的序列化功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类公开为 <xref:System.Web.UI.DataVisualization.Charting.Chart.Serializer%2A> 根类的属性 <xref:System.Web.UI.DataVisualization.Charting.Chart> 。  
  
 序列化会保存图表的状态，还会提供将序列化数据加载到图表中的选项。 所有图表属性都可以保留，包括图表的数据。 此外，可以重置标记为要进行序列化的所有图表属性。  
  
 当管理用户定义的视图状态时，可以选择使用此类。 其中一种 `Load` 方法可用于加载视图状态，在 `Save` 设置视图状态时，可以使用其中一种方法。  
  
 XML 或二进制格式可用于存储序列化数据。 默认情况下使用 XML，但你可以使用属性来更改格式 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A> 。  
  
 分别使用和方法保存和加载图表 `Save` 属性 `Load` 。 请注意，将只保存具有非默认值的属性。 可以使用文件、流、 <xref:System.IO.TextWriter> 、 <xref:System.IO.TextReader> <xref:System.Xml.XmlWriter> 和对象保存和/或加载数据 <xref:System.Xml.XmlReader> 。 使用从、或类派生的对象保存和/或加载数据时 <xref:System.IO.TextReader> <xref:System.IO.TextWriter> <xref:System.Xml.XmlReader> <xref:System.Xml.XmlWriter> ，数据的格式必须是 XML。  
  
 以下列表描述了三种从基本到高级的技术，用于定义可序列化的数据。 请注意，也可以定义不可序列化的数据。 下一段中描述了此方法。  
  
-   <xref:System.Web.UI.DataVisualization.Charting.Chart>使用 `Save` 和方法序列化 `Load` ，而无需指定任何可序列化的属性。 将序列化所有具有非默认值的图表属性，其中包括图表数据。  
  
-   序列化由属性指定的图表属性 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性将要序列化的图表属性分组为不同的类别，如数据、外观等。 请注意，和对象的名称会 <xref:System.Web.UI.DataVisualization.Charting.ChartArea> <xref:System.Web.UI.DataVisualization.Charting.Series> 自动序列化; 然后，在加载时，序列化的数据将应用于现有的图表区域和序列。  
  
> [!IMPORTANT]
>  此 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 属性由控件在内部实现， <xref:System.Web.UI.DataVisualization.Charting.Chart> 作为 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性  
  
-   由属性指定的图表属性的序列化 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 。 这是一个逗号分隔列表，其中列出了可序列化的所有图表属性。 将此属性设置为显式值后，开发人员负责指定要保存的所有属性。 换句话说，与 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 属性不同，图表区和系列的名称将不会自动保留。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性也可以结合使用。 但是，请确保在 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 设置时与自身连接，否则由属性指定的图表属性将被 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 重写。  
  
 若要禁止对某些属性进行序列化，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性。 如果一个属性设置为可序列化且不可序列化（这在使用通配符时很常见），则 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性优先。 但是，优先顺序还取决于在指定属性时使用了多少个通配符。  
  
 默认情况下，可序列化属性在加载前将重置为其默认值。 此行为可以使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 属性更改。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Reset%2A>方法还可用于将图表属性显式重置为其默认值。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.SerializationContents Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.SerializationContents Content" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content" />
      <MemberSignature Language="VB.NET" Value="Public Property Content As SerializationContents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::SerializationContents Content { System::Web::UI::DataVisualization::Charting::SerializationContents get(); void set(System::Web::UI::DataVisualization::Charting::SerializationContents value); };" />
      <MemberSignature Language="F#" Value="member this.Content : System.Web.UI.DataVisualization.Charting.SerializationContents with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationContents), "Default")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationContents), "Default")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.SerializationContents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要序列化的图表内容的类型。</summary>
        <value>一个 <see cref="T:System.Web.UI.DataVisualization.Charting.SerializationContents" /> 枚举值，该值表示将在加载、保存或重置操作期间执行序列化的图表内容。 默认情况下，将保留所有非默认图表属性，包括数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，当调用任何和方法时，将序列化所有图表属性 `Save` `Load` 。 若要更好地控制序列化的内容，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 属性。 请注意， <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性也可以与属性一起使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 。  
  
 > [!IMPORTANT]
 > <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性确定要序列化的图表特征（如 "外观"）的类型，实际上在内部实现为 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性。 这意味着， <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 如果已连接，则设置属性并设置 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性将导致 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 重写属性值 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 。 有关此过程的示例，请参阅下面的示例代码。  
  
 如果设置 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 属性，则所有 <xref:System.Web.UI.DataVisualization.Charting.ChartArea> 和 <xref:System.Web.UI.DataVisualization.Charting.Series> 对象名称都将自动进行序列化; 这意味着，与图表区和序列有关的序列化数据将在加载时应用于现有对象。  
  
 设置此属性将影响所有加载、保存和重置操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.SerializationFormat Format { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.SerializationFormat Format" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format" />
      <MemberSignature Language="VB.NET" Value="Public Property Format As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::SerializationFormat Format { System::Web::UI::DataVisualization::Charting::SerializationFormat get(); void set(System::Web::UI::DataVisualization::Charting::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.Format : System.Web.UI.DataVisualization.Charting.SerializationFormat with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.Format" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationFormat), "Xml")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationFormat), "Xml")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置序列化图表时所使用的格式。</summary>
        <value>一个 <see cref="T:System.Web.UI.DataVisualization.Charting.SerializationFormat" /> 枚举值，该值表示已序列化的数据的格式。 默认值为 XML。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据可以采用 XML 格式或二进制格式序列化。 二进制格式是紧凑的，使用的存储比 XML 少。 不过，XML 是一个文本格式，它是用户可读的。  
  
 保存或加载序列化数据时，格式必须是 XML。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContentString">
      <MemberSignature Language="C#" Value="protected string GetContentString (System.Web.UI.DataVisualization.Charting.SerializationContents content, bool serializable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetContentString(valuetype System.Web.UI.DataVisualization.Charting.SerializationContents content, bool serializable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.GetContentString(System.Web.UI.DataVisualization.Charting.SerializationContents,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetContentString (content As SerializationContents, serializable As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetContentString(System::Web::UI::DataVisualization::Charting::SerializationContents content, bool serializable);" />
      <MemberSignature Language="F#" Value="member this.GetContentString : System.Web.UI.DataVisualization.Charting.SerializationContents * bool -&gt; string" Usage="chartSerializer.GetContentString (content, serializable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Web.UI.DataVisualization.Charting.SerializationContents" />
        <Parameter Name="serializable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="content">可序列化的内容。</param>
        <param name="serializable">如果要获取可序列化的字符串，则为 <see langword="true" />；如果要获取不可序列化的字符串，则为 <see langword="false" />。</param>
        <summary>返回可序列化或不可序列化的类和/或属性名称，可否序列化取决于具体的标志值。</summary>
        <returns>一个 <see langword="string" /> 值，表示可序列化或不可序列化的类和/或属性名称。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsResetWhenLoading">
      <MemberSignature Language="C#" Value="public bool IsResetWhenLoading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResetWhenLoading" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading" />
      <MemberSignature Language="VB.NET" Value="Public Property IsResetWhenLoading As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsResetWhenLoading { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsResetWhenLoading : bool with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个标志，该标志指示是否将对象属性重置为加载之前的默认值。</summary>
        <value>如果对象属性重置为加载之前的默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemplateMode">
      <MemberSignature Language="C#" Value="public bool IsTemplateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemplateMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTemplateMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemplateMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTemplateMode : bool with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示图表序列化程序是否在模板创建模式下运行的标志。</summary>
        <value>如果图表序列化程序在模板创建模式下运行，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknownAttributeIgnored">
      <MemberSignature Language="C#" Value="public bool IsUnknownAttributeIgnored { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknownAttributeIgnored" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUnknownAttributeIgnored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknownAttributeIgnored { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknownAttributeIgnored : bool with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示是否忽略未知 XML 属性和元素而不引发异常的标志。</summary>
        <value>如果忽略未知 XML 属性和元素而不引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将已序列化的数据加载到 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Load : System.IO.Stream -&gt; unit" Usage="chartSerializer.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">一个从 <see cref="T:System.IO.Stream" /> 类派生的对象，如 <see cref="T:System.IO.MemoryStream" /> 对象。</param>
        <summary>将已序列化的数据从派生自 <see cref="T:System.IO.Stream" /> 类的对象加载到控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可将序列化数据加载到 <xref:System.Web.UI.DataVisualization.Charting.Chart> 控件中。  
  
 当发生加载操作时，默认情况下，可序列化的属性将首先重置为其默认值，然后将其设置为持久值（如果已保存）。 若要更改此行为，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 属性。  
  
 默认情况下，将加载所有序列化的图表属性。 若要加载特定的序列化属性，请 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 在加载数据之前设置或属性。  
  
 请注意，在使用方法保存数据时 `Save` ，只会对具有非默认值的属性进行实际序列化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Load : System.IO.TextReader -&gt; unit" Usage="chartSerializer.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">从抽象的 <see cref="T:System.IO.StringReader" /> 类派生的读取器，如 <see cref="T:System.IO.TextReader" />。</param>
        <summary>将已序列化的数据从派生自 <see cref="T:System.IO.TextReader" /> 类的读取器对象加载到控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可将序列化数据加载到 <xref:System.Web.UI.DataVisualization.Charting.Chart> 控件中。  
  
 当发生加载操作时，默认情况下，可序列化属性首先重置为默认值，然后将其设置为持久值（如果已保存）。 若要更改此行为，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 属性。  
  
 默认情况下，将加载所有序列化的图表属性。 通过设置 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 或 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性，可以加载一组特定属性。  
  
 如果使用此定义，请注意，由属性设置的格式 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A> 必须是 XML。  
  
 如果 <xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A> 控件的属性 <xref:System.Web.UI.DataVisualization.Charting.Chart> 用于保存状态，则此方法可用于将客户端发布的序列化数据加载回 <xref:System.Web.UI.DataVisualization.Charting.Chart> 控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="chartSerializer.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">用于存储序列化数据的文件的相对路径或绝对路径。 如果指定了相对路径，则该路径将是相对于当前目录的路径。</param>
        <summary>将已保存到磁盘的序列化数据加载到 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可将序列化数据加载到 <xref:System.Web.UI.DataVisualization.Charting.Chart> 控件中。  
  
 当发生加载操作时，默认情况下，可序列化的属性将首先重置为其默认值，然后将其设置为持久值（如果已保存）。 若要更改此行为，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 属性。  
  
 默认情况下，将加载所有序列化的图表属性。 若要加载特定的序列化属性，请 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 在加载数据之前设置或属性。  
  
 请注意，在使用方法保存数据时 `Save` ，只会对具有非默认值的属性进行实际序列化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="chartSerializer.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">要从中读取所保留的数据的对象。 该对象派生自 <see cref="T:System.Xml.XmlReader" /> 类，可以是 .NET Framework 对象或用户定义的对象。</param>
        <summary>将已序列化的数据从派生自 <see cref="T:System.Xml.XmlReader" /> 类的对象加载到控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可将序列化数据加载到 <xref:System.Web.UI.DataVisualization.Charting.Chart> 控件中。  
  
 当发生加载操作时，默认情况下，可序列化属性首先重置为默认值，然后将其设置为持久值（如果已保存）。 若要更改此行为，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 属性。  
  
 默认情况下，将加载所有序列化的图表属性。 如果设置 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 或 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性，可以加载一组特定属性。  
  
 使用此定义时，格式必须为 XML;可以通过属性来更改它 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A> 。  
  
 处理 XML 格式文本文件时，为简单起见，请改用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonSerializableContent">
      <MemberSignature Language="C#" Value="public string NonSerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NonSerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property NonSerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NonSerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NonSerializableContent : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置不进行序列化的图表属性。</summary>
        <value>一个用逗号分隔的 <see langword="string" /> 表达式，表示不进行序列化的图表属性。 语法为“Class.Property[,Class.Property]”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下 `Save` ，当调用和方法时，将序列化所有图表属性 `Load` 。 您可以使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性来限制要序列化的图表特征，以及 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 属性。  
  
 此属性确定不会序列化哪些图表特征。 可以在字符串表达式中使用通配符，其方式与 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性相同。 例如，若要从序列化中排除所有图表 `BackColor` 属性，请将此属性设置为 "*"。背景色 "。  
  
 有时，可以将属性设置为序列化和不序列化，这在使用通配符时很常见。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>与表达式相比，表达式的优先级较低 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 。 但请注意，使用通配符的字符串表达式的权重更小。 例如，如果将 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性设置为 "*"。背景色 "，并将 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性设置为 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.BackColor%2A> ，则 `ackColor` <xref:System.Web.UI.DataVisualization.Charting.ChartArea> 将序列化除对象之外的所有 B 属性。  
  
 如果 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 已设置该属性，则优先级取决于表达式中使用的通配符数量 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 。 例如，将属性设置 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 为 <xref:System.Web.UI.DataVisualization.Charting.SerializationContents.Appearance> 将导致 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性包含 "" \* 。Back \* "表达式。 如果该 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性设置为 "" \* 。后退 \* "，所有 `Back*` 图表属性（例如 `BackColor` 、 `BackGradient` 等）仍将进行序列化。 这是因为在 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 与属性进行比较时，属性值具有更高的优先级 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 。  
  
 此属性会影响所有 save、load 和 reset 操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="chartSerializer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置所有标记为要进行序列化的图表属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法将所有图表属性重置为其默认值。  
  
 若要将重置的图表属性限制为默认值，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 、 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性。  
  
 请注意，当 `Load` 使用方法并且 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 属性设置为时，也会自动调用此方法 `true` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>保存具有非默认值的图表属性。 可以对所有图表属性进行序列化，其中包括数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="chartSerializer.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">从 <see cref="T:System.IO.Stream" /> 类派生的用于保存图表属性的对象，如 <see cref="T:System.IO.MemoryStream" />。</param>
        <summary>将具有非默认值的图表数据和属性保存到派生自 <see cref="T:System.IO.Stream" /> 类的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，当调用此方法时，将序列化所有具有非默认值的图表属性，这些属性包含数据点。 若要控制要序列化的图表特征，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 、 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性。  
  
 如果使用此方法将外观属性保存为模板，请确保 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A> <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer> 先将对象的属性设置为， `true` 然后再调用此方法。  
  
 作为模板的图表序列化与非模板序列化的发生方式不同;模板序列化着重于外观属性。  
  
 序列化模板时， <xref:System.Web.UI.DataVisualization.Charting.Chart.LoadTemplate%2A> 可以使用方法加载模板，以提供图表的外观属性。  
  
 模板可用于模拟自定义调色板。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="chartSerializer.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">从 <see cref="T:System.IO.TextWriter" /> 类派生的用于保存图表属性的对象，如 <see cref="T:System.IO.StringWriter" />。</param>
        <summary>将具有非默认值的图表数据和属性保存到派生自 <see cref="T:System.IO.TextWriter" /> 类的给定对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，当调用此方法时，将序列化所有具有非默认值的图表属性，这些属性包含数据点。 若要控制序列化哪些图表特征，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 、 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性。  
  
 使用此定义时，格式必须为 XML;可以通过属性设置格式 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A> 。  
  
 如果 <xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A> 控件的属性 <xref:System.Web.UI.DataVisualization.Charting.Chart> 用于保存状态，则可以使用此方法将序列化的数据保存到派生自的对象 <xref:System.IO.TextWriter> ，然后使用该对象将数据写入到 <xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A> 属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="chartSerializer.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">用于存储序列化数据的文件的相对路径或绝对路径。 请注意，如果指定了相对路径，则该路径将是相对于当前目录的路径。</param>
        <summary>将具有非默认值的图表数据和属性保存到给定文件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，当调用此方法时，将序列化所有具有非默认值的图表属性，这些属性包含数据点。 若要控制要序列化的图表特征 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> ，请使用、 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性。  
  
 默认情况下，数据以 XML 格式保存。 若要以二进制格式保存数据，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A> 属性。  
  
 请注意，必须为存储文件的目录启用写入权限。 默认情况下，这是应用程序的 Bin 文件夹。  
  
 如果使用此方法将外观属性保存为模板，请确保 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A> 先将属性设置为， `true` 然后再调用此方法。  
  
 作为模板的图表序列化与非模板序列化的方式不同，主要是因为模板序列化会集中于外观属性。  
  
 序列化模板时， <xref:System.Web.UI.DataVisualization.Charting.Chart.LoadTemplate%2A> 可以使用方法加载模板，以提供图表的外观属性。  
  
 模板可用于模拟自定义调色板。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="chartSerializer.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">一个从 <see cref="T:System.Xml.XmlWriter" /> 派生的用于保存 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 属性的对象。</param>
        <summary>将具有非默认值的图表数据和属性保存到派生自 <see cref="T:System.Xml.XmlWriter" /> 类的给定对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，当调用此方法时，将序列化所有具有非默认值的图表属性，这些属性包含数据点。 若要控制序列化哪些图表特征，请使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 、 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性。  
  
 使用此定义时，格式必须为 XML;可以用属性更改格式 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A> 。  
  
 处理 XML 格式文本文件时，为简单起见，请改用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializableContent">
      <MemberSignature Language="C#" Value="public string SerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SerializableContent : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可以序列化的图表属性。</summary>
        <value>一个用逗号分隔的 <see langword="string" /> 表达式，表示要序列化的图表属性。 语法为“Class.Property[,Class.Property]”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下 `Save` ，当调用和方法时，将序列化所有图表属性 `Load` 。 您可以使用 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性来限制要序列化的图表特征，以及 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 和 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 属性。  
  
 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性决定将序列化哪些图表特征。 可以在字符串表达式中使用通配符，其方式与 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性相同。 例如，若要序列化所有图表 `BackColor` 属性，请将此属性设置为 "*"。背景色 "。  
  
 如果 <xref:System.Web.UI.DataVisualization.Charting.ChartArea> 指定了和/或 <xref:System.Web.UI.DataVisualization.Charting.Series> 子属性，则 <xref:System.Web.UI.DataVisualization.Charting.ChartArea> 还必须指定所有和对象的名称， <xref:System.Web.UI.DataVisualization.Charting.Series> 以使持久化数据应用于现有 <xref:System.Web.UI.DataVisualization.Charting.ChartArea> 和 <xref:System.Web.UI.DataVisualization.Charting.Series> 对象; 即，必须指定 "Series.Name" 和 "ChartArea.Name" 表达式。 有关此过程的示例，请参阅下面的示例代码。 同样，如果使用多个图表区，则 <xref:System.Web.UI.DataVisualization.Charting.Series.ChartArea%2A> 还必须保存所有绘图的属性 <xref:System.Web.UI.DataVisualization.Charting.Series> 。  
  
 有时，可以将属性设置为序列化和不序列化，这在使用通配符时很常见。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>与表达式相比，表达式的优先级较低 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 。 但请注意，使用通配符的字符串表达式的权重更小。 例如，如果将 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 属性设置为 "*"。背景色 "，并将 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 属性设置为 <xref:System.Web.UI.DataVisualization.Charting.ChartArea.BackColor%2A> ，则 `ackColor` <xref:System.Web.UI.DataVisualization.Charting.ChartArea> 将序列化除对象之外的所有 B 属性。  
  
 如果设置了 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 属性，将在 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 内部设置该属性。 如果 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A> 已设置该属性，但需要序列化另一个属性，请确保 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 在指定该额外属性时连接属性。 有关此过程的示例，请参阅下面的示例代码。  
  
 此属性会影响所有 save、load 和 reset 操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
