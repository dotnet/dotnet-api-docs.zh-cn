<Namespace Name="System.Diagnostics.PerformanceData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5a019ddec2c0a3c01602f5347c525eb833fc61d" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89743579" /></Metadata><Docs>
    <summary><span data-ttu-id="6a651-101">使用此命名空间中的类来提供计数器数据。</span><span class="sxs-lookup"><span data-stu-id="6a651-101">Use the classes in this namespace to provide counter data.</span></span> <span data-ttu-id="6a651-102">计数器用于向用户公开性能指标，如性能监视器。</span><span class="sxs-lookup"><span data-stu-id="6a651-102">The counters are used to expose performance metrics to consumers such as the Performance Monitor.</span></span> <span data-ttu-id="6a651-103">命名空间不包含用于使用计数器数据的类。</span><span class="sxs-lookup"><span data-stu-id="6a651-103">The namespace does not contain classes for consuming the counter data.</span></span> <span data-ttu-id="6a651-104">有关性能计数器体系结构的完整说明，请参阅<see href="/windows/win32/perfctrs/performance-counters-portal">性能计数器</see>。</span><span class="sxs-lookup"><span data-stu-id="6a651-104">For a complete description of the performance counters architecture, see <see href="/windows/win32/perfctrs/performance-counters-portal">Performance Counters</see>.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a651-105">此命名空间中的类支持 Windows Vista 中引入的性能计数器 (版本 2.0) 的新体系结构。</span><span class="sxs-lookup"><span data-stu-id="6a651-105">The classes in this namespace support the new architecture (version 2.0) for performance counters that was introduced in Windows Vista.</span></span> <span data-ttu-id="6a651-106">在新的体系结构中，提供程序不再直接响应使用者请求，而只是维护计数器数据。</span><span class="sxs-lookup"><span data-stu-id="6a651-106">In the new architecture, the provider no longer responds to consumer requests directly, but instead simply maintains the counter data.</span></span> <span data-ttu-id="6a651-107">当提供程序创建计数器集的实例时，系统会将一个线程注入到提供程序的进程中;线程负责处理使用者请求。</span><span class="sxs-lookup"><span data-stu-id="6a651-107">The system injects a thread into the provider's process when the provider creates an instance of the counter set; the thread is responsible for handling consumer requests.</span></span>  
  
 <span data-ttu-id="6a651-108">以下步骤显示编写计数器提供程序的过程。</span><span class="sxs-lookup"><span data-stu-id="6a651-108">The following steps show the process for writing a counters provider.</span></span>  
  
1.  <span data-ttu-id="6a651-109">提供程序提供的计数器是在基于 XML 的清单中定义的。</span><span class="sxs-lookup"><span data-stu-id="6a651-109">The counters that the provider provides is defined in an XML-based manifest.</span></span> <span data-ttu-id="6a651-110">计数器按逻辑分组为计数器集。</span><span class="sxs-lookup"><span data-stu-id="6a651-110">The counters are logically grouped into counter sets.</span></span> <span data-ttu-id="6a651-111">计数器集中的计数器由计数器集内唯一的数字标识符标识。</span><span class="sxs-lookup"><span data-stu-id="6a651-111">The counters within a counter set are identified by a numeric identifier that is unique within the counter set.</span></span> <span data-ttu-id="6a651-112">提供程序可以定义一个或多个计数器集。</span><span class="sxs-lookup"><span data-stu-id="6a651-112">A provider can define one or more counter sets.</span></span> <span data-ttu-id="6a651-113">计数器集由提供程序的唯一 Guid 标识。</span><span class="sxs-lookup"><span data-stu-id="6a651-113">A counter set is identified by a Guid that is unique to a provider.</span></span> <span data-ttu-id="6a651-114">请注意，如果使用这些类来编写提供程序：</span><span class="sxs-lookup"><span data-stu-id="6a651-114">Note that if you use these classes to write your provider:</span></span>  
  
    -   <span data-ttu-id="6a651-115">提供程序元素的回调特性被忽略。</span><span class="sxs-lookup"><span data-stu-id="6a651-115">The callback attribute of the provider element is ignored.</span></span>  
  
    -   <span data-ttu-id="6a651-116">忽略 counterAttribute 元素的 name 属性的引用值。</span><span class="sxs-lookup"><span data-stu-id="6a651-116">The reference value for the name attribute of the counterAttribute element is ignored.</span></span>  
  
     <span data-ttu-id="6a651-117">有关编写清单的详细信息，请参阅 [性能计数器架构](/windows/win32/perfctrs/performance-counters-schema)。</span><span class="sxs-lookup"><span data-stu-id="6a651-117">For details on writing the manifest, see [Performance Counters Schema](/windows/win32/perfctrs/performance-counters-schema).</span></span>  
  
2.  <span data-ttu-id="6a651-118">编写清单后，使用 [CTRPP](/windows/win32/perfctrs/ctrpp) 工具 (CTRPP 提供程序编译清单。) 。</span><span class="sxs-lookup"><span data-stu-id="6a651-118">After writing your manifest, use the [CTRPP](/windows/win32/perfctrs/ctrpp) tool to compile the manifest (ctrpp provider.man).</span></span> <span data-ttu-id="6a651-119">该工具生成四个文件： .h、.c、.rc 和 \* _r .h。</span><span class="sxs-lookup"><span data-stu-id="6a651-119">The tool generates four files: .h, .c, .rc, and \*_r.h.</span></span> <span data-ttu-id="6a651-120">您可以忽略 .h 和 .c 文件。</span><span class="sxs-lookup"><span data-stu-id="6a651-120">You can ignore the .h and .c files.</span></span> <span data-ttu-id="6a651-121">.Rc 文件包含清单中定义的本地化字符串。</span><span class="sxs-lookup"><span data-stu-id="6a651-121">The .rc file contains the localized strings defined in your manifest.</span></span> <span data-ttu-id="6a651-122">使用 .rc 和 \* _r .h 文件创建已编译的资源文件 ( 在项目中包含的) 。</span><span class="sxs-lookup"><span data-stu-id="6a651-122">You use the .rc and \*_r.h files to create the compiled resource file (.res) that you include in your project.</span></span> <span data-ttu-id="6a651-123">以下调用显示了如何编译资源文件：</span><span class="sxs-lookup"><span data-stu-id="6a651-123">The following call shows how to compile the resource file:</span></span>  
  
    ```console  
    rc /r /i "c:\Program Files\Microsoft SDKs\Windows\v6.0\Include" provider.rc  
    ```  
  
     <span data-ttu-id="6a651-124">如果收到引用 sal 的错误，请将 Microsoft Visual Studio 的 sal .h 文件（Visual C 包含目录）复制到为/i 开关指定的目录中。</span><span class="sxs-lookup"><span data-stu-id="6a651-124">If you get an error that references sal.h, copy the sal.h file from your Microsoft Visual Studio, Visual C include directory to the directory you specify for the /i switch.</span></span>  
  
     <span data-ttu-id="6a651-125">将已编译的资源文件的路径添加到项目的应用程序属性页 () 。</span><span class="sxs-lookup"><span data-stu-id="6a651-125">Add a path to the compiled resource file (.res) to your project's Application property page.</span></span>  
  
3.  <span data-ttu-id="6a651-126">编写提供程序。</span><span class="sxs-lookup"><span data-stu-id="6a651-126">Write your provider.</span></span> <span data-ttu-id="6a651-127">以下步骤说明了提供程序所进行的调用：</span><span class="sxs-lookup"><span data-stu-id="6a651-127">The following steps show the calls made by a provider:</span></span>  
  
    1.  <span data-ttu-id="6a651-128">调用 <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> 构造函数以定义计数器集。</span><span class="sxs-lookup"><span data-stu-id="6a651-128">Call the <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> constructor to define the counter set.</span></span> <span data-ttu-id="6a651-129">为清单中定义的每个计数器集调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6a651-129">Call this method for each counter set defined in the manifest.</span></span>  
  
    2.  <span data-ttu-id="6a651-130">对于每个计数器集，请调用方法之一， <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> 将计数器添加到该集。</span><span class="sxs-lookup"><span data-stu-id="6a651-130">For each counter set, call one of the <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> methods to add the counters to the set.</span></span> <span data-ttu-id="6a651-131">为计数器集中定义的每个计数器调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6a651-131">Call this method for each counter defined in the counter set.</span></span>  
  
    3.  <span data-ttu-id="6a651-132">调用 <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> 方法以创建计数器集实例 (实例包含计数器数据) 。</span><span class="sxs-lookup"><span data-stu-id="6a651-132">Call the <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> method to create an instance of the counter set (an instance contains the counter data).</span></span> <span data-ttu-id="6a651-133">对于单实例计数器集，请调用此方法一次。</span><span class="sxs-lookup"><span data-stu-id="6a651-133">For single instance counter sets, call this method one time.</span></span> <span data-ttu-id="6a651-134">对于多个实例计数器集，请为需要为其提供计数器数据的每个实例调用此方法， (为每个实例) 使用唯一的名称。</span><span class="sxs-lookup"><span data-stu-id="6a651-134">For multiple instance counter sets, call this method for each instance for which you need to provide counter data (use a unique name for each instance).</span></span>  
  
    4.  <span data-ttu-id="6a651-135">使用 <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> 属性可以访问和设置计数器的计数器数据。</span><span class="sxs-lookup"><span data-stu-id="6a651-135">Use the <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> property to access and set the counter data for the counter.</span></span>  
  
4.  <span data-ttu-id="6a651-136">完成提供程序后，请使用 [LodCtr](/windows/desktop/perfctrs/adding-counter-names-and-descriptions-to-the-registry#running-the-lodctr-tool) 工具在计算机上注册计数器。</span><span class="sxs-lookup"><span data-stu-id="6a651-136">After you finish your provider, use the [LodCtr](/windows/desktop/perfctrs/adding-counter-names-and-descriptions-to-the-registry#running-the-lodctr-tool) tool to register the counters on the computer.</span></span> <span data-ttu-id="6a651-137">例如，</span><span class="sxs-lookup"><span data-stu-id="6a651-137">For example,</span></span>  
  
    ```console  
    lodctr /m:provider.man  
    ```  
  
     <span data-ttu-id="6a651-138">该示例假设清单和可执行文件位于当前目录中。</span><span class="sxs-lookup"><span data-stu-id="6a651-138">The example assumes the manifest and executable file are in the current directory.</span></span>  
  
 <span data-ttu-id="6a651-139">你可以在运行 Windows Vista 和更高版本操作系统的计算机上使用此命名空间中的类。</span><span class="sxs-lookup"><span data-stu-id="6a651-139">You can use the classes in this namespace on computers that run the Windows Vista and later operating systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a651-140">下面显示了一个简单的清单：</span><span class="sxs-lookup"><span data-stu-id="6a651-140">The following shows a simple manifest:</span></span>  
  
```xml  
<!-- <?xml version="1.0" encoding="UTF-16"?> -->  
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd"   
     xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"   
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
     xmlns:xs="http://www.w3.org/2001/XMLSchema"   
     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace>  
  
    <instrumentation>  
  
        <counters xmlns=http://schemas.microsoft.com/win/2005/12/counters>  
  
            <provider  
              applicationIdentity = "provider1.exe"  
              providerType = "userMode"  
              providerGuid = "{51D1685C-35ED-45be-99FE-17261A4F27F3}">  
  
               <counterSet guid = "{582803C9-AACD-45e5-8C30-571141A22092}"  
                  uri = "Microsoft.Windows.System.PerfCounters.Typing"  
                  name = "$(string.CounterSet1.Name)"   
                  description = "$(string.CounterSet1.Description)"   
                  instances = "single">  
  
                    <counter id = "1"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.TotalWords"  
                      name = "$(string.CS1.Counter1.Name)"  
                      description = "$(string.CS1.Counter1.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "2"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval"  
                      name = "$(string.CS1.Counter2.Name)"  
                      description = "$(string.CS1.Counter2.Description)"  
                      type = "perf_counter_delta"  
                      detailLevel = "standard"/>  
  
                    <counter id = "3"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed"  
                      name = "$(string.CS1.Counter3.Name)"  
                      description = "$(string.CS1.Counter3.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "4"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA"  
                      name = "$(string.CS1.Counter4.Name)"   
                      description = "$(string.CS1.Counter4.Description)"   
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "5"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA"  
                      name = "$(string.CS1.Counter5.Name)"   
                      description = "$(string.CS1.Counter5.Description)"   
                      type = "perf_sample_fraction"  
                      baseID = "6"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "displayAsReal" />  
                      </counterAttributes>  
                    </counter>  
  
                    <counter id = "6"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentBase"  
                      type = "perf_sample_base"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "noDisplay" />  
                      </counterAttributes>  
                    </counter>  
  
                </counterSet>  
            </provider>  
        </counters>  
    </instrumentation>  
  
    <localization>  
        <resources culture="en-US">  
            <stringTable>  
  
                <string id="CounterSet1.Name" value="Typing"/>  
                <string id="CounterSet1.Description" value="Captures simple typing metrics."/>  
                <string id="CS1.Counter1.Name" value="Total Words Typed"/>   
                <string id="CS1.Counter1.Description" value="The total number of words typed."/>  
                <string id="CS1.Counter2.Name" value="Words Typed In Interval"/>   
                <string id="CS1.Counter2.Description" value="The total number of words typed in the interval."/>  
                <string id="CS1.Counter3.Name" value="Letter A Pressed"/>   
                <string id="CS1.Counter3.Description" value="The number of times that the letter A is pressed."/>  
                <string id="CS1.Counter4.Name" value="Words Containing A"/>   
                <string id="CS1.Counter4.Description" value="The number of words that contain the letter A."/>  
                <string id="CS1.Counter5.Name" value="Percent of Words Containing A"/>   
                <string id="CS1.Counter5.Description" value="The percent of words that contain the letter A in the last interval."/>  
  
            </stringTable>  
        </resources>  
    </localization>  
</instrumentationManifest>  
```  
  
 <span data-ttu-id="6a651-141">下面显示了清单的简单提供程序实现：</span><span class="sxs-lookup"><span data-stu-id="6a651-141">The following shows a simple provider implementation for the manifest:</span></span>  
  
```cs  
using System.Diagnostics.PerformanceData;  
  
        private static Guid providerId = new Guid("{51D1685C-35ED-45be-99FE-17261A4F27F3}");  
        private static Guid typingCounterSetId = new Guid("{582803C9-AACD-45e5-8C30-571141A22092}");  
  
        private static CounterSet typingCounterSet;         // Defines the counter set  
        private static CounterSetInstance typingCsInstance; // Instance of the counter set  
  
        private static int numberOfLetterAInWord = 0;  
  
        . . .  
  
            // Create the 'Typing' counter set.  
            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  
  
            // Add the counters to the counter set definition.  
            typingCounterSet.AddCounter(1, CounterType.RawData32, "Total Word Count");  
            typingCounterSet.AddCounter(2, CounterType.Delta32, "Words Typed In Interval");  
            typingCounterSet.AddCounter(3, CounterType.RawData32, "A Key Pressed");  
            typingCounterSet.AddCounter(4, CounterType.RawData32, "Words Containing A");  
            typingCounterSet.AddCounter(5, CounterType.SampleFraction, "Percent of Words Containing A");  
            typingCounterSet.AddCounter(6, CounterType.SampleBase, "Percent Base");  
  
            // Create an instance of the counter set (contains the counter data).  
            typingCsInstance = typingCounterSet.CreateCounterSetInstance("Typing Instance");  
            typingCsInstance.Counters[1].Value = 0;  
            typingCsInstance.Counters[2].Value = 0;  
            typingCsInstance.Counters[3].Value = 0;  
            typingCsInstance.Counters[4].Value = 0;  
            typingCsInstance.Counters[5].Value = 0;  
            typingCsInstance.Counters[6].Value = 0;  
  
        . . .  
  
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  
        {  
            typingCounterSet.Dispose();  
        }  
  
        // Simple effort to capture letter A key press and words typed.  
        private void textInput_KeyDown(object sender, KeyEventArgs e)  
        {  
            Keys keyData = e.KeyData;  
  
            switch (e.KeyData)  
            {  
                case Keys.A :  
                    // In the .NET 3.5 Framework, you had to use the  
                    // Value property to set and increment the counter   
                    // value. Beginning with the .NET 4.0 Framework,   
                    // the Value property is safe to use in a multi-  
                    // threaded application.  
                    typingCsInstance.Counters["A Key Pressed"].Value++;  
                    numberOfLetterAInWord++;  
  
                    break;  
  
                case Keys.Enter:  
                case Keys.Space:  
                case Keys.Tab:  
  
                    if (numberOfLetterAInWord > 0)  
                    {  
                        // Beginning with the .NET 4.0 Framework, you   
                        // can use the Increment method to increment   
                        // the counter value by 1. The Increment method   
                        // is safe to use in a multi-threaded   
                        // application.  
                        typingCsInstance.Counters["Words Containing A"].Increment();  
                        typingCsInstance.Counters["Percent of Words Containing A"].Increment();  
                        numberOfLetterAInWord = 0;  
                    }  
  
                    typingCsInstance.Counters["Percent Base"].Increment();  
                    typingCsInstance.Counters["Total Word Count"].Increment();  
                    typingCsInstance.Counters["Words Typed In Interval"].Increment();  
  
                    break;  
            }  
        }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>