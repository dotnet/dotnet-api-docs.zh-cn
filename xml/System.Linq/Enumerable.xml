<Type Name="Enumerable" FullName="System.Linq.Enumerable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eacab92d2ad84483470ee02d7dcf2b86e9ca59c9" /><Meta Name="ms.sourcegitcommit" Value="94d23637cec48ce6c7934bb04236dfd0a3228db5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2021" /><Meta Name="ms.locfileid" Value="102250959" /></Metadata><TypeSignature Language="C#" Value="public static class Enumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Enumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Enumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module Enumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enumerable abstract sealed" />
  <TypeSignature Language="F#" Value="type Enumerable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Linq" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Linq" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4d525-101">提供一组用于查询实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的对象的 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-102">此类中的方法提供了标准查询运算符的实现，用于查询实现的数据源 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-102">The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="4d525-103">标准查询运算符是遵循 LINQ 模式的常规用途方法，使您能够对任何中的数据进行遍历、筛选和投影操作。基于网络的编程语言。</span><span class="sxs-lookup"><span data-stu-id="4d525-103">The standard query operators are general purpose methods that follow the LINQ pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="4d525-104">此类中的大多数方法都定义为扩展方法 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-104">The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="4d525-105">这意味着，可以像调用实现的任何对象上的实例方法一样调用它们 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-105">This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="4d525-106">在枚举查询对象之前，在返回值序列的查询中使用的方法不会使用目标数据。</span><span class="sxs-lookup"><span data-stu-id="4d525-106">Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</span></span> <span data-ttu-id="4d525-107">这称为 "延迟执行"。</span><span class="sxs-lookup"><span data-stu-id="4d525-107">This is known as deferred execution.</span></span> <span data-ttu-id="4d525-108">在返回单一实例值的查询中使用的方法将立即执行并使用目标数据。</span><span class="sxs-lookup"><span data-stu-id="4d525-108">Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2"><span data-ttu-id="4d525-109">标准查询运算符概述</span><span class="sxs-lookup"><span data-stu-id="4d525-109">Standard Query Operators Overview</span></span></related>
    <related type="Article" href="/dotnet/csharp/programming-guide/classes-and-structs/extension-methods"><span data-ttu-id="4d525-110">扩展方法（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="4d525-110">Extension Methods (C# Programming Guide)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods"><span data-ttu-id="4d525-111">扩展方法 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-111">Extension Methods (Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TSource, TSource&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-112"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-112">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-113">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-113">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="func"><span data-ttu-id="4d525-114">要对每个元素调用的累加器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-114">An accumulator function to be invoked on each element.</span></span></param>
        <summary><span data-ttu-id="4d525-115">对序列应用累加器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-115">Applies an accumulator function over a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-116">累加器的最终值。</span><span class="sxs-lookup"><span data-stu-id="4d525-116">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-117">使用 <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> 方法可以简单地对值序列执行计算。</span><span class="sxs-lookup"><span data-stu-id="4d525-117">The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="4d525-118">此方法的工作方式是 `func` 对中的每个元素调用一次， `source` 但第一个元素除外。</span><span class="sxs-lookup"><span data-stu-id="4d525-118">This method works by calling `func` one time for each element in `source` except the first one.</span></span> <span data-ttu-id="4d525-119">每次 `func` 调用时，都会将 <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> 序列中的元素和聚合值传递 (作为) 的第一个参数 `func` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-119">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="4d525-120">的第一个元素用作 `source` 初始聚合值。</span><span class="sxs-lookup"><span data-stu-id="4d525-120">The first element of `source` is used as the initial aggregate value.</span></span> <span data-ttu-id="4d525-121">`func`替换上一个聚合值的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-121">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="4d525-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> 返回最终结果 `func` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="4d525-123">此方法的重载不适 <xref:System.Linq.Enumerable.Aggregate%2A> 用于所有情况，因为它使用的第一个元素 `source` 作为初始聚合值。</span><span class="sxs-lookup"><span data-stu-id="4d525-123">This overload of the <xref:System.Linq.Enumerable.Aggregate%2A> method isn't suitable for all cases because it uses the first element of `source` as the initial aggregate value.</span></span> <span data-ttu-id="4d525-124">如果返回值仅应包含符合特定条件的元素，则应选择另一个重载 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-124">You should choose another overload if the return value should include only the elements of `source` that meet a certain condition.</span></span> <span data-ttu-id="4d525-125">例如，如果要计算中偶数的总和，此重载并不可靠 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-125">For example, this overload isn't reliable if you want to calculate the sum of the even numbers in `source`.</span></span> <span data-ttu-id="4d525-126">如果第一个元素是奇数而不是偶数，则结果将不正确。</span><span class="sxs-lookup"><span data-stu-id="4d525-126">The result will be incorrect if the first element is odd instead of even.</span></span>  
  
 <span data-ttu-id="4d525-127">为了简化常见聚合运算，标准查询运算符还包括常规用途计数方法、 <xref:System.Linq.Enumerable.Count%2A> 和四个数字聚合方法，即、、 <xref:System.Linq.Enumerable.Min%2A> <xref:System.Linq.Enumerable.Max%2A> <xref:System.Linq.Enumerable.Sum%2A> 和 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-127">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-128">下面的代码示例演示如何通过使用反转字符串中单词的顺序 <xref:System.Linq.Enumerable.Aggregate%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-128">The following code example demonstrates how to reverse the order of words in a string by using <xref:System.Linq.Enumerable.Aggregate%2A>.</span></span>  
  
  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet1":::
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-129"><paramref name="source" /> 或 <paramref name="func" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-129"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-130"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-130"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.Enumerable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-131"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-131">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="4d525-132">累加器值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-132">The type of the accumulator value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-133">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="4d525-134">累加器的初始值。</span><span class="sxs-lookup"><span data-stu-id="4d525-134">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="4d525-135">要对每个元素调用的累加器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-135">An accumulator function to be invoked on each element.</span></span></param>
        <summary><span data-ttu-id="4d525-136">对序列应用累加器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-136">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="4d525-137">将指定的种子值用作累加器初始值。</span><span class="sxs-lookup"><span data-stu-id="4d525-137">The specified seed value is used as the initial accumulator value.</span></span></summary>
        <returns><span data-ttu-id="4d525-138">累加器的最终值。</span><span class="sxs-lookup"><span data-stu-id="4d525-138">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-139">使用 <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> 方法可以简单地对值序列执行计算。</span><span class="sxs-lookup"><span data-stu-id="4d525-139">The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="4d525-140">此方法的工作方式是 `func` 对中的每个元素调用一次 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-140">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="4d525-141">每次 `func` 调用时，都会将 <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> 序列中的元素和聚合值传递 (作为) 的第一个参数 `func` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-141">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="4d525-142">参数的值用作 `seed` 初始聚合值。</span><span class="sxs-lookup"><span data-stu-id="4d525-142">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="4d525-143">`func`替换上一个聚合值的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-143">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="4d525-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> 返回最终结果 `func` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="4d525-145">为了简化常见聚合运算，标准查询运算符还包括常规用途计数方法、 <xref:System.Linq.Enumerable.Count%2A> 和四个数字聚合方法，即、、 <xref:System.Linq.Enumerable.Min%2A> <xref:System.Linq.Enumerable.Max%2A> <xref:System.Linq.Enumerable.Sum%2A> 和 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-145">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-146">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Aggregate%2A> 来应用累加器函数并使用种子值。</span><span class="sxs-lookup"><span data-stu-id="4d525-146">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.</span></span>  
  
  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet2":::
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet2"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-147"><paramref name="source" /> 或 <paramref name="func" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-147"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Aggregate (source, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-148"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-148">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="4d525-149">累加器值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-149">The type of the accumulator value.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-150">结果值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-150">The type of the resulting value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-151">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="4d525-152">累加器的初始值。</span><span class="sxs-lookup"><span data-stu-id="4d525-152">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="4d525-153">要对每个元素调用的累加器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-153">An accumulator function to be invoked on each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-154">将累加器的最终值转换为结果值的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-154">A function to transform the final accumulator value into the result value.</span></span></param>
        <summary><span data-ttu-id="4d525-155">对序列应用累加器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-155">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="4d525-156">将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</span><span class="sxs-lookup"><span data-stu-id="4d525-156">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span></span></summary>
        <returns><span data-ttu-id="4d525-157">已转换的累加器最终值。</span><span class="sxs-lookup"><span data-stu-id="4d525-157">The transformed final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-158">使用 <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> 方法可以简单地对值序列执行计算。</span><span class="sxs-lookup"><span data-stu-id="4d525-158">The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="4d525-159">此方法的工作方式是 `func` 对中的每个元素调用一次 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-159">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="4d525-160">每次 `func` 调用时，都会将 <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> 序列中的元素和聚合值传递 (作为) 的第一个参数 `func` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-160">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="4d525-161">参数的值用作 `seed` 初始聚合值。</span><span class="sxs-lookup"><span data-stu-id="4d525-161">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="4d525-162">`func`替换上一个聚合值的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-162">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="4d525-163">的最终结果 `func` 传递到 `resultSelector` 以获取的最终结果 <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-163">The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span></span>  
  
 <span data-ttu-id="4d525-164">为了简化常见聚合运算，标准查询运算符还包括常规用途计数方法、 <xref:System.Linq.Enumerable.Count%2A> 和四个数字聚合方法，即、、 <xref:System.Linq.Enumerable.Min%2A> <xref:System.Linq.Enumerable.Max%2A> <xref:System.Linq.Enumerable.Sum%2A> 和 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-164">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-165">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Aggregate%2A> 来应用累加器函数和结果选择器。</span><span class="sxs-lookup"><span data-stu-id="4d525-165">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet3":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-166"><paramref name="source" />、<paramref name="func" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-166"><paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-167"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-167">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-168">一个包含要应用谓词的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-168">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-169">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-169">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-170">确定序列中的所有元素是否都满足条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-170">Determines whether all elements of a sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="4d525-171">如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-171"><see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4d525-172">此方法不返回集合的所有元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-172">This method does not return all the elements of a collection.</span></span> <span data-ttu-id="4d525-173">相反，它确定集合的所有元素是否都满足条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-173">Instead, it determines whether all the elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="4d525-174">`source`一旦可以确定结果，就会立即停止的枚举。</span><span class="sxs-lookup"><span data-stu-id="4d525-174">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="4d525-175">在 Visual Basic 查询表达式语法中， `Aggregate Into All()` 子句转换为对的调用 <xref:System.Linq.Enumerable.All%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-175">In Visual Basic query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-176">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.All%2A> 来确定序列中的所有元素是否都满足条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-176">The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition.</span></span> <span data-ttu-id="4d525-177">`allStartWithB`如果所有宠物名称以 "B" 开头或数组为空，则变量为 true `pets` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-177">Variable `allStartWithB` is true if all the pet names start with "B" or if the `pets` array is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]
 [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  
  
 <span data-ttu-id="4d525-178">方法返回的布尔值 <xref:System.Linq.Enumerable.All%2A> 通常用于 `where` `Where` Visual Basic) 中子句 (子句的谓词或对方法的直接调用 <xref:System.Linq.Enumerable.Where%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-178">The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method.</span></span> <span data-ttu-id="4d525-179">下面的示例演示如何使用 `All` 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-179">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]
 [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-180"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-180"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-181">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-181">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-182">确定序列中是否包含元素或存在元素满足指定条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-182">Determines whether any element of a sequence exists or satisfies a condition.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-183"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-183">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-184">要检查是否为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span></span></param>
        <summary><span data-ttu-id="4d525-185">确定序列是否包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-185">Determines whether a sequence contains any elements.</span></span></summary>
        <returns><span data-ttu-id="4d525-186">如果源序列包含任何元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-186"><see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4d525-187">此方法不返回集合中的任何一个元素，</span><span class="sxs-lookup"><span data-stu-id="4d525-187">This method does not return any one element of a collection.</span></span> <span data-ttu-id="4d525-188">相反，它会确定集合是否包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-188">Instead, it determines whether the collection contains any elements.</span></span>  
  
 <span data-ttu-id="4d525-189">`source`一旦可以确定结果，就会立即停止的枚举。</span><span class="sxs-lookup"><span data-stu-id="4d525-189">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="4d525-190">在 Visual Basic 查询表达式语法中， `Aggregate Into Any()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Any%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-190">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-191">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Any%2A> 来确定序列是否包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]
 [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  
  
 <span data-ttu-id="4d525-192">方法返回的布尔值 <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 通常用于 `where` `Where` Visual Basic) 中子句 (子句的谓词或对方法的直接调用 <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-192">The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method.</span></span> <span data-ttu-id="4d525-193">下面的示例演示如何使用 `Any` 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-193">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]
 [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-194"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-194"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-195">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-195">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-196"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-196">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-197">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素将应用谓词。</span><span class="sxs-lookup"><span data-stu-id="4d525-197">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-198">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-198">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-199">确定序列中是否存在任意一个元素满足条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-199">Determines whether any element of a sequence satisfies a condition.</span></span></summary>
        <returns><span data-ttu-id="4d525-200">如果源序列不为空，并且至少有一个元素通过指定谓词中的测试，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-200"><see langword="true" /> if the source sequence is not empty and at least one of its elements passes the test in the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4d525-201">此方法不返回集合中的任何一个元素，</span><span class="sxs-lookup"><span data-stu-id="4d525-201">This method does not return any one element of a collection.</span></span> <span data-ttu-id="4d525-202">而是确定集合中是否存在任何元素满足条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-202">Instead, it determines whether any elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="4d525-203">`source`一旦可以确定结果，就会立即停止的枚举。</span><span class="sxs-lookup"><span data-stu-id="4d525-203">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="4d525-204">在 Visual Basic 查询表达式语法中， `Aggregate Into Any()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Any%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-204">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-205">下面的代码示例演示如何使用<xref:System.Linq.Enumerable.Any%2A>以确定序列中是否有任意一个元素满足条件。 </span><span class="sxs-lookup"><span data-stu-id="4d525-205">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]
 [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-206"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-206"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-207">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-207">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="element" Type="TSource" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-208"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-208">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-209">值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-209">A sequence of values.</span></span></param>
        <param name="element"><span data-ttu-id="4d525-210">要追加到 <paramref name="source" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-210">The value to append to <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="4d525-211">将一个值追加到序列末尾。</span><span class="sxs-lookup"><span data-stu-id="4d525-211">Appends a value to the end of the sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-212">以 <paramref name="element" /> 结尾的新序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-212">A new sequence that ends with <paramref name="element" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4d525-213">此方法不修改集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-213">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="4d525-214">相反，它使用新元素创建集合的副本。</span><span class="sxs-lookup"><span data-stu-id="4d525-214">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="4d525-215">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Append%2A> 将值追加到序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="4d525-215">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Append%2A> to append a value to the end of the sequence.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet201":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet201":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-216"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-216"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ AsEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-217"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-217">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-218">要作为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 键入的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-218">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></param>
        <summary><span data-ttu-id="4d525-219">返回类型化为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的输入。</span><span class="sxs-lookup"><span data-stu-id="4d525-219">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-220">已作为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 键入的输入序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-220">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-221">除了 <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 从实现自身的类型更改的编译时类型外，此方法不会产生任何影响 `source` <xref:System.Collections.Generic.IEnumerable%601> <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-221">The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.</span></span>  
  
 <span data-ttu-id="4d525-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 当序列实现 <xref:System.Collections.Generic.IEnumerable%601> 但还具有一组不同的公共查询方法时，可以使用来在查询实现之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="4d525-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available.</span></span> <span data-ttu-id="4d525-223">例如，给定一个 `Table` 实现 <xref:System.Collections.Generic.IEnumerable%601> 并具有自己的方法（如 `Where` 、和）的泛型类 `Select` `SelectMany` ，调用 `Where` 将调用的公共 `Where` 方法 `Table` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-223">For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`.</span></span> <span data-ttu-id="4d525-224">`Table`表示数据库表的类型可以有一个 `Where` 方法，该方法采用谓词参数作为表达式树，并将树转换为 SQL 以进行远程执行。</span><span class="sxs-lookup"><span data-stu-id="4d525-224">A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</span></span> <span data-ttu-id="4d525-225">如果不需要远程执行（例如因为谓词调用了本地方法），则 <xref:System.Linq.Enumerable.AsEnumerable%2A> 可以使用方法隐藏自定义方法，并改为提供标准查询运算符。</span><span class="sxs-lookup"><span data-stu-id="4d525-225">If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-226">下面的代码示例演示 <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> `Where` 当需要标准查询运算符实现时，如何使用隐藏类型的自定义方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-226">The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]
 [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-227">计算数值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-227">Computes the average of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-228">要计算其平均值的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-228">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-229">计算 <see cref="T:System.Decimal" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-229">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-230">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-230">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-231">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-231">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-232">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> 来计算值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-232">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-233"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-233"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-234"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-234"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-235">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-235">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-236">要计算其平均值的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-236">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-237">计算 <see cref="T:System.Double" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-237">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-238">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-238">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-239">如果元素的总和太大而无法表示为 <xref:System.Double> ，则此方法返回正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="4d525-239">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="4d525-240">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-240">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-241">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-241">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-242"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-242"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-243"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-243"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-244">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-244">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-245">要计算其平均值的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-245">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-246">计算 <see cref="T:System.Int32" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-246">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-247">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-247">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-248">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-248">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-249">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-250"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-250"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-251"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-251"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-252">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-252">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-253">要计算其平均值的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-253">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-254">计算 <see cref="T:System.Int64" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-254">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-255">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-255">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-256">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-256">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-257">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-258"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-258"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-259"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-259"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-260">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-260">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal? Average (this System.Collections.Generic.IEnumerable&lt;decimal?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-261">要计算平均值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-261">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-262">计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-262">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-263">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-263">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-264">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-264">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-265">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-265">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-266"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-266"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-267">序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-267">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-268">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-268">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double? Average (this System.Collections.Generic.IEnumerable&lt;double?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-269">要计算平均值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-269">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-270">计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-270">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-271">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-272">如果元素的总和太大而无法表示为 <xref:System.Double> ，则此方法返回正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="4d525-272">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="4d525-273">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-273">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-274">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-274">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-275"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-275"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-276">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-276">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double? Average (this System.Collections.Generic.IEnumerable&lt;int?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-277">要计算平均值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-277">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-278">计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-278">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-279">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-279">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-280">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-280">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-281">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-282"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-282"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-283">序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-283">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-284">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-284">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double? Average (this System.Collections.Generic.IEnumerable&lt;long?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-285">要计算平均值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-285">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-286">计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-286">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-287">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-287">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-288">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-288">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-289">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-289">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-290"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-290"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-291">序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-291">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-292">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-292">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float? Average (this System.Collections.Generic.IEnumerable&lt;float?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-293">要计算平均值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-293">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-294">计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-294">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-295">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-295">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-296">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-296">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-297">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-297">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-298"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-298"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-299">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-299">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-300">要计算其平均值的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-300">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="4d525-301">计算 <see cref="T:System.Single" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-301">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-302">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-302">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-303">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-303">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-304">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-304">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-305"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-305"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-306"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-306"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-307">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-307">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-308"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-308">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-309">用于计算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-309">A sequence of values that are used to calculate an average.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-310">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-310">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-311">计算 <see cref="T:System.Decimal" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-311">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-312">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-312">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-313">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-313">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-314">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-314">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-315"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-315"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-316"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-316"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-317">序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-317">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-318">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-318">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-319"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-319">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-320">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-320">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-321">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-321">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-322">计算 <see cref="T:System.Double" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-322">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-323">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-323">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-324">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-324">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-325">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-325">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-326"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-326"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-327"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-327"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-328">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-328">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-329"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-329">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-330">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-330">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-331">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-331">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-332">计算 <see cref="T:System.Int32" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-332">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-333">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-333">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-334">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-334">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-335">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-335">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-336"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-336"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-337"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-337"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-338">序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-338">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-339">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-339">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-340">源的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-340">The type of the elements of source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-341">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-341">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-342">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-342">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-343">计算 <see cref="T:System.Int64" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-343">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-344">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-344">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-345">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-345">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-346">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-346">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-347"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-347"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-348"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-348"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-349">序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-349">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-350">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-350">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal? Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-351"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-351">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-352">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-352">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-353">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-353">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-354">计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-354">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-355">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-355">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-356">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-356">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-357">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-357">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-358"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-358"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-359">序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-359">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-360">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-360">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double? Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-361"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-361">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-362">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-362">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-363">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-363">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-364">计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-364">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-365">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-366">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-366">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-367">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-367">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-368"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-368"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-369">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-369">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double? Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-370"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-370">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-371">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-371">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-372">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-372">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-373">计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-373">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-374">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-374">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-375">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-375">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-376">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-377"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-377"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-378">序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-378">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-379">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-379">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double? Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-380"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-380">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-381">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-381">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-382">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-382">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-383">计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-383">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-384">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-384">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-385">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-385">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-386">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-386">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-387">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-387">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float? Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-388"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-388">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-389">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-389">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-390">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-390">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-391">计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-391">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-392">如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-392">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-393">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-393">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-394">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-394">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-395"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-395"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-396">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-396">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-397"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-397">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-398">要计算其平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-398">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-399">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-399">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-400">计算 <see cref="T:System.Single" /> 值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-400">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-401">值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-401">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-402">在 Visual Basic 查询表达式语法中， `Aggregate Into Average()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Average%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-402">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-403">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 计算平均值。</span><span class="sxs-lookup"><span data-stu-id="4d525-403">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-404"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-404"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-405"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-405"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-406">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-406">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Cast(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4d525-407"><paramref name="source" /> 中的元素要强制转换成的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-407">The type to cast the elements of <paramref name="source" /> to.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-408">包含要转换成类型 <paramref name="TResult" /> 的元素的 <see cref="T:System.Collections.IEnumerable" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-408">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <paramref name="TResult" />.</span></span></param>
        <summary><span data-ttu-id="4d525-409">将 <see cref="T:System.Collections.IEnumerable" /> 的元素强制转换为指定的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-409">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span></span></summary>
        <returns><span data-ttu-id="4d525-410">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含已强制转换为指定类型的源序列的每个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-410">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-411">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-411">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-412">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-412">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-413">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-413">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-414"><xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>方法通过提供必要的类型信息，对非泛型集合调用标准查询运算符。</span><span class="sxs-lookup"><span data-stu-id="4d525-414">The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</span></span> <span data-ttu-id="4d525-415">例如，不 <xref:System.Collections.ArrayList> 实现 <xref:System.Collections.Generic.IEnumerable%601> ，但通过 <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> 对 <xref:System.Collections.ArrayList> 对象调用，然后可以使用标准查询运算符来查询序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-415">For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.</span></span>  
  
 <span data-ttu-id="4d525-416">如果元素无法转换为类型，则 `TResult` 此方法将引发 <xref:System.InvalidCastException> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-416">If an element cannot be converted to type `TResult`, this method throws a <xref:System.InvalidCastException>.</span></span>

 <span data-ttu-id="4d525-417">此方法的源序列为 <xref:System.Collections.IEnumerable> ，这意味着元素具有的编译时静态类型 `object` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-417">The source sequence for this method is <xref:System.Collections.IEnumerable>, which means the elements have the compile-time static type of `object`.</span></span> <span data-ttu-id="4d525-418">此方法执行的唯一类型转换是引用转换和取消装箱转换。</span><span class="sxs-lookup"><span data-stu-id="4d525-418">The only type conversions that are performed by this method are reference conversions and unboxing conversions.</span></span> <span data-ttu-id="4d525-419">集合中元素的运行时类型必须与目标类型匹配，或者，对于值类型，元素的运行时类型必须是目标类型的装箱转换的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-419">The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</span></span> <span data-ttu-id="4d525-420">不允许使用其他转换类型，如不同数值类型之间的转换类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-420">Other conversion types, such as those between different numeric types, are not allowed.</span></span> 
 
 <span data-ttu-id="4d525-421">若要仅获取可以转换为类型的元素 `TResult` ，请使用 <xref:System.Linq.Enumerable.OfType%2A> 方法而不是 <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-421">To obtain only those elements that can be converted to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="4d525-422">在查询表达式中，显式类型迭代变量转换为对的调用 <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-422">In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span> <span data-ttu-id="4d525-423">此示例演示显式类型化范围变量的语法。</span><span class="sxs-lookup"><span data-stu-id="4d525-423">This example shows the syntax for an explicitly typed range variable.</span></span>  
  
```csharp  
from int i in objects  
```  
  
```vb  
From i As Integer In objects  
```  

<span data-ttu-id="4d525-424">使用 `select` 查询子句来执行其他转换类型，如隐式数值转换。</span><span class="sxs-lookup"><span data-stu-id="4d525-424">Use the `select` clause of a query to perform other conversion types, like the implicit numeric conversions.</span></span> <span data-ttu-id="4d525-425">下面的示例使用 `Cast` 方法和 `select` 语句将一系列装箱的整数转换为双精度序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-425">The following example uses both the `Cast` method and a `select` statement to convert a sequence of boxed integers to a sequence of doubles.</span></span>

```csharp
IEnumerable sequence = Enumerable.Range(0, 10);
var doubles = from int item in sequence
                select (double)item;
``` 

```vb
Dim sequence As IEnumerable = Enumerable.Range(0, 10)
Dim doubles = From item As Integer In sequence
                Select CType(item, Double)
```

## Examples  
 <span data-ttu-id="4d525-426">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> 在上启用标准查询运算符 <xref:System.Collections.ArrayList> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-426">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet19":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet19":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-427"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-427"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4d525-428">序列中的元素不能强制转换为 <paramref name="TResult" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-428">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/from-clause"><span data-ttu-id="4d525-429">from 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-429">from clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/from-clause"><span data-ttu-id="4d525-430">From 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-430">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Concat (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-431">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-431">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-432">要连接的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-432">The first sequence to concatenate.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-433">要与第一个序列连接的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-433">The sequence to concatenate to the first sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-434">连接两个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-434">Concatenates two sequences.</span></span></summary>
        <returns><span data-ttu-id="4d525-435">一个包含两个输入序列的连接元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-435">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-436">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-436">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-437">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-437">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-438">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-438">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-439"><xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法不同于方法， <xref:System.Linq.Enumerable.Union%2A> 因为该方法 <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> 返回输入序列中的所有原始元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-439">The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences.</span></span> <span data-ttu-id="4d525-440"><xref:System.Linq.Enumerable.Union%2A>方法只返回唯一元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-440">The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-441">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> 来连接两个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-441">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]
 [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  
  
 <span data-ttu-id="4d525-442">连接两个序列的另一种方法是构造一个集合（例如数组），然后应用方法，并向 <xref:System.Linq.Enumerable.SelectMany%2A> 其传递标识选择器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-442">An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function.</span></span> <span data-ttu-id="4d525-443">下面的示例演示了的这种用法 <xref:System.Linq.Enumerable.SelectMany%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-443">The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]
 [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-444"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-444"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-445">确定序列是否包含指定的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-445">Determines whether a sequence contains a specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-446"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-446">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-447">要在其中定位某个值的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-447">A sequence in which to locate a value.</span></span></param>
        <param name="value"><span data-ttu-id="4d525-448">要在序列中定位的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-448">The value to locate in the sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-449">通过使用默认的相等比较器确定序列是否包含指定的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-449">Determines whether a sequence contains a specified element by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-450">如果源序列包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-450"><see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-451">如果实现的类型 `source` <xref:System.Collections.Generic.ICollection%601> ，则 `Contains` 调用该实现中的方法来获取结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-451">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result.</span></span> <span data-ttu-id="4d525-452">否则，此方法将确定是否 `source` 包含指定的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-452">Otherwise, this method determines whether `source` contains the specified element.</span></span>  
  
 <span data-ttu-id="4d525-453">如果找到匹配的元素，则枚举将立即终止。</span><span class="sxs-lookup"><span data-stu-id="4d525-453">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="4d525-454">通过使用默认的相等比较器，将元素与指定的值进行比较 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-454">Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-455">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 来确定数组是否包含特定元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-455">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.</span></span>  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet21":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet21"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-456"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-456"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value, comparer)" />
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-457"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-457">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-458">要在其中定位某个值的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-458">A sequence in which to locate a value.</span></span></param>
        <param name="value"><span data-ttu-id="4d525-459">要在序列中定位的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-459">The value to locate in the sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-460">一个对值进行比较的相等比较器。</span><span class="sxs-lookup"><span data-stu-id="4d525-460">An equality comparer to compare values.</span></span></param>
        <summary><span data-ttu-id="4d525-461">通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 确定序列是否包含指定的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-461">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-462">如果源序列包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-462"><see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-463">如果找到匹配的元素，则枚举将立即终止。</span><span class="sxs-lookup"><span data-stu-id="4d525-463">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="4d525-464">如果 `comparer` 为 `null` ，则使用默认的相等比较器将 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 元素与指定的值进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-464">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-465">下面的示例演示如何实现可在方法中使用的相等比较器 <xref:System.Linq.Enumerable.Contains%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-465">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="4d525-466">实现此比较器后，可以 `Product` 在方法中使用一系列对象 <xref:System.Linq.Enumerable.Contains%2A> ，如下面的示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-466">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]
 [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-467"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-467"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-468">返回序列中的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-468">Returns the number of elements in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; -&gt; int" Usage="System.Linq.Enumerable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-469"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-469">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-470">包含要计数的元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-470">A sequence that contains elements to be counted.</span></span></param>
        <summary><span data-ttu-id="4d525-471">返回序列中的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-471">Returns the number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-472">输入序列中的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-472">The number of elements in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-473">如果实现的类型 `source` <xref:System.Collections.Generic.ICollection%601> ，则使用该实现获取元素的计数。</span><span class="sxs-lookup"><span data-stu-id="4d525-473">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="4d525-474">否则，此方法将确定计数。</span><span class="sxs-lookup"><span data-stu-id="4d525-474">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="4d525-475">如果需要 <xref:System.Linq.Enumerable.LongCount%2A> ，请使用方法，并希望允许结果大于 <xref:System.Int32.MaxValue> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-475">Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="4d525-476">在 Visual Basic 查询表达式语法中， `Aggregate Into Count()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-476">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-477">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 来计算数组中元素的数目。</span><span class="sxs-lookup"><span data-stu-id="4d525-477">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]
 [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-478"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-478"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-479"><paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-479">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-480">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-480">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int" Usage="System.Linq.Enumerable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-481"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-481">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-482">包含要测试和计数的元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-482">A sequence that contains elements to be tested and counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-483">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-483">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-484">返回表示在指定的序列中满足条件的元素数量的数字。</span><span class="sxs-lookup"><span data-stu-id="4d525-484">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="4d525-485">一个数字，表示序列中满足谓词函数条件的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-485">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-486">如果实现的类型 `source` <xref:System.Collections.Generic.ICollection%601> ，则使用该实现获取元素的计数。</span><span class="sxs-lookup"><span data-stu-id="4d525-486">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="4d525-487">否则，此方法将确定计数。</span><span class="sxs-lookup"><span data-stu-id="4d525-487">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="4d525-488">应在 <xref:System.Linq.Enumerable.LongCount%2A> 预期时使用方法，并希望允许结果大于 <xref:System.Int32.MaxValue> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-488">You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="4d525-489">在 Visual Basic 查询表达式语法中， `Aggregate Into Count()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-489">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-490">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 来计算数组中满足条件的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-490">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]
 [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-491"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-491"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-492"><paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-492">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-493">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-493">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-494">返回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的元素；如果序列为空，则返回一个具有默认值的单例类集合。</span><span class="sxs-lookup"><span data-stu-id="4d525-494">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty source" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource?&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-495"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-495">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-496">序列为空时返回默认值的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-496">The sequence to return a default value for if it is empty.</span></span></param>
        <summary><span data-ttu-id="4d525-497">返回指定序列中的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-497">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="4d525-498">如果 <paramref name="source" /> 为空，则为包含 <paramref name="TSource" /> 类型的默认值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象；否则为 <paramref name="source" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-499">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-500">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-501">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-502">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-502">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="4d525-503">此方法可用于在与) 方法结合使用时生成左外部联接 <xref:System.Linq.Enumerable.GroupJoin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-503">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-504">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 来提供默认值，以防源序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-504">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 <span data-ttu-id="4d525-505">此示例使用非空序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-505">This example uses a non-empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]
 [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  
  
 <span data-ttu-id="4d525-506">此示例使用一个空序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-506">This example uses an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]
 [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-507"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-507"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="4d525-508">联接</span><span class="sxs-lookup"><span data-stu-id="4d525-508">Joining</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-509"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-509">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-510">序列为空时返回指定值的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-510">The sequence to return the specified value for if it is empty.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="4d525-511">序列为空时要返回的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-511">The value to return if the sequence is empty.</span></span></param>
        <summary><span data-ttu-id="4d525-512">返回指定序列中的元素；如果序列为空，则返回单一实例集合中的指定值。</span><span class="sxs-lookup"><span data-stu-id="4d525-512">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="4d525-513">如果 <paramref name="source" /> 为空，则为包含 <paramref name="defaultValue" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />；否则为 <paramref name="source" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-513">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-514">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-514">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-515">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-515">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-516">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-516">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-517">此方法可用于在与) 方法结合使用时生成左外部联接 <xref:System.Linq.Enumerable.GroupJoin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-517">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-518">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 方法并指定默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-518">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value.</span></span> <span data-ttu-id="4d525-519">第一个序列不为空，第二个序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-519">The first sequence is not empty and the second sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]
 [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="4d525-520">联接</span><span class="sxs-lookup"><span data-stu-id="4d525-520">Joining</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-521">返回序列中的非重复元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-521">Returns distinct elements from a sequence.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-522">结果序列是无序的。</span><span class="sxs-lookup"><span data-stu-id="4d525-522">The result sequence is unordered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-523"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-523">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-524">要从中移除重复元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-524">The sequence to remove duplicate elements from.</span></span></param>
        <summary><span data-ttu-id="4d525-525">通过使用默认的相等比较器对值进行比较，返回序列中的非重复元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-525">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="4d525-526">一个包含源序列中的非重复元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-526">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-527">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-527">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-528">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-528">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-529">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-529">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-530"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法返回不包含重复值的无序序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-530">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="4d525-531">它使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对值进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-531">It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.</span></span>  
  
 <span data-ttu-id="4d525-532">在 Visual Basic 查询表达式语法中， `Distinct` 子句转换为对的调用 <xref:System.Linq.Enumerable.Distinct%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-532">In Visual Basic query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.</span></span>  
  
 <span data-ttu-id="4d525-533">默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 用于比较实现泛型接口的类型的值 <xref:System.IEquatable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-533">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="4d525-534">若要比较自定义数据类型，需要实现此接口，并 <xref:System.Object.GetHashCode%2A> 为类型提供自己 <xref:System.Object.Equals%2A> 的和方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-534">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="4d525-535">有关使用 <xref:System.Collections.Generic.IEqualityComparer%601> 定义自定义比较器的示例，请参见 <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-535">For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601> to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-536">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 从整数序列返回非重复元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-536">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]
 [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  
  
 <span data-ttu-id="4d525-537">如果要从某种自定义数据类型的对象序列返回 distinct 元素，则必须 <xref:System.IEquatable%601> 在类中实现泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-537">If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class.</span></span> <span data-ttu-id="4d525-538">下面的代码示例演示如何在自定义数据类型中实现此接口，并提供 <xref:System.Object.GetHashCode%2A> 和 <xref:System.Object.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-538">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]
 [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  
  
 <span data-ttu-id="4d525-539">实现此接口后，可以在方法中使用一系列 `Product` 对象 <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> ，如下面的示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-539">After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]
 [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-540"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-540"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/distinct-clause"><span data-ttu-id="4d525-541">Distinct 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-541">Distinct Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct (source, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-542"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-542">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-543">要从中移除重复元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-543">The sequence to remove duplicate elements from.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-544">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-544">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="4d525-545">通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较，返回序列中的非重复元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-545">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="4d525-546">一个包含源序列中的非重复元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-546">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-547">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-547">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-548">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-548">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-549">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-549">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-550"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法返回不包含重复值的无序序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-550">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="4d525-551">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对值进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-551">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-552">下面的示例演示如何实现可在方法中使用的相等比较器 <xref:System.Linq.Enumerable.Distinct%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-552">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="4d525-553">实现此比较器后，可以 `Product` 在方法中使用一系列对象 <xref:System.Linq.Enumerable.Distinct%2A> ，如下面的示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-553">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]
 [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-554"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-554"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-555"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-555">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-556">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-556">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="4d525-557">要检索的从零开始的元素索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-557">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="4d525-558">返回序列中指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-558">Returns the element at a specified index in a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-559">源序列中指定位置处的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-559">The element at the specified position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-560">如果实现的类型 `source` <xref:System.Collections.Generic.IList%601> ，则该实现用于获取指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-560">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="4d525-561">否则，此方法将获取指定的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-561">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="4d525-562">如果超出范围，此方法将引发异常 `index` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-562">This method throws an exception if `index` is out of range.</span></span> <span data-ttu-id="4d525-563">如果指定的索引超出范围，则改为返回默认值，请使用 <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-563">To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-564">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.ElementAt%2A> 返回位于特定位置的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-564">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]
 [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-565"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-565"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4d525-566"><paramref name="index" /> 小于零或大于等于 <paramref name="source" /> 中的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-566"><paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAtOrDefault (source, index)" />
      <MemberSignature Language="C#" Value="public static TSource? ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-567"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-567">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-568">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-568">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="4d525-569">要检索的从零开始的元素索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-569">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="4d525-570">返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-570">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span></span></summary>
        <returns><span data-ttu-id="4d525-571">如果索引超出源序列的边界，则为 <see langword="default" />(<paramref name="TSource" />)；否则为源序列中指定位置处的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-571"><see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-572">如果实现的类型 `source` <xref:System.Collections.Generic.IList%601> ，则该实现用于获取指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-572">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="4d525-573">否则，此方法将获取指定的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-573">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="4d525-574">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-574">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-575">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d525-575">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span></span> <span data-ttu-id="4d525-576">此示例使用超出数组界限的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-576">This example uses an index that is outside the bounds of the array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet29":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet29":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-577"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-577"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4d525-578">分配给返回的泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的类型参数的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-578">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></typeparam>
        <summary><span data-ttu-id="4d525-579">返回具有指定类型参数的空 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-579">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span></span></summary>
        <returns><span data-ttu-id="4d525-580">一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其类型参数为 <paramref name="TResult" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-580">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-581"><xref:System.Linq.Enumerable.Empty%60%601>方法缓存类型为的空序列 `TResult` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-581">The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`.</span></span> <span data-ttu-id="4d525-582">枚举其返回的对象时，它不会生成任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-582">When the object it returns is enumerated, it yields no elements.</span></span>  
  
 <span data-ttu-id="4d525-583">在某些情况下，此方法适用于将空序列传递到采用的用户定义方法 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-583">In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="4d525-584">它还可用于为等方法生成非特定元素 <xref:System.Linq.Enumerable.Union%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-584">It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>.</span></span> <span data-ttu-id="4d525-585">请参阅 "示例" 部分，了解此使用的示例 <xref:System.Linq.Enumerable.Empty%60%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-585">See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-586">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Empty%60%601> 生成一个空的 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-586">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" id="Snippet30":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet30":::
  
 <span data-ttu-id="4d525-587">下面的代码示例演示方法的可能应用 <xref:System.Linq.Enumerable.Empty%60%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-587">The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method.</span></span> <span data-ttu-id="4d525-588"><xref:System.Linq.Enumerable.Aggregate%2A>方法应用于字符串数组的集合。</span><span class="sxs-lookup"><span data-stu-id="4d525-588">The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays.</span></span> <span data-ttu-id="4d525-589"><xref:System.Collections.Generic.IEnumerable%601>仅当该数组包含四个或多个元素时，才会将集合中的每个数组的元素添加到结果中。</span><span class="sxs-lookup"><span data-stu-id="4d525-589">The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements.</span></span> <span data-ttu-id="4d525-590"><xref:System.Linq.Enumerable.Empty%2A> 用于生成种子值， <xref:System.Linq.Enumerable.Aggregate%2A> 因为如果集合中的数组没有四个或更多元素，则只返回空序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-590"><xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet31":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet31":::
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-591">生成两个序列的差集。</span><span class="sxs-lookup"><span data-stu-id="4d525-591">Produces the set difference of two sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4d525-592">这两个集的差集定义为第一个集的成员，但第二个集未出现。</span><span class="sxs-lookup"><span data-stu-id="4d525-592">The set difference of two sets is defined as the members of the first set that don't appear in the second set.</span></span>  
  
<span data-ttu-id="4d525-593">此方法返回中 `first` 不显示的那些元素 `second` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-593">This method returns those elements in `first` that don't appear in `second`.</span></span> <span data-ttu-id="4d525-594">它不会返回中 `second` 不显示的元素 `first` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-594">It doesn't return those elements in `second` that don't appear in `first`.</span></span>
<span data-ttu-id="4d525-595">仅返回唯一元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-595">Only unique elements are returned.</span></span>

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/dotnet/api/system.linq.enumerable.intersect"><span data-ttu-id="4d525-596">可枚举的交集方法</span><span class="sxs-lookup"><span data-stu-id="4d525-596">Enumerable.Intersect Method</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-597">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-597">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-598">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其不在 <paramref name="second" /> 中的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-598">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-599">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中的元素如果同时出现在第一个序列中，则将导致从返回的序列中移除这些元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-599">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-600">通过使用默认的相等比较器对值进行比较，生成两个序列的差集。</span><span class="sxs-lookup"><span data-stu-id="4d525-600">Produces the set difference of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="4d525-601">包含这两个序列的元素的差集的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-601">A sequence that contains the set difference of the elements of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-602">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-602">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-603">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-603">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-604">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-604">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
    
 <span data-ttu-id="4d525-605">默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 用于比较类型的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-605">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="4d525-606">若要比较自定义数据类型，需要重写 <xref:System.Object.Equals%2A> 和 <xref:System.Object.GetHashCode%2A> 方法，还可以选择实现 <xref:System.IEquatable%601> 自定义类型中的泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-606">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="4d525-607">有关更多信息，请参见 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4d525-607">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
## Examples  
 <span data-ttu-id="4d525-608">下面的代码示例演示如何使用 `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` 方法来比较两个数值序列，并返回仅出现在第一个序列中的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-608">The following code example demonstrates how to use the `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method to compare two sequences of numbers and return elements that appear only in the first sequence.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]
 [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  
  
  <span data-ttu-id="4d525-609">如果要比较某种自定义数据类型的对象序列，则必须 <xref:System.IEquatable%601> 在 helper 类中实现泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-609">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="4d525-610">下面的代码示例演示如何在自定义数据类型中实现此接口并重写 <xref:System.Object.GetHashCode%2A> 和 <xref:System.Object.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-610">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  
  
 <span data-ttu-id="4d525-611">实现此接口后，可以 `ProductA` 在方法中使用对象序列 `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-611">After you implement this interface, you can use sequences of `ProductA` objects in the `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]
 [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-612"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-612"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-613">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-613">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-614">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其不在 <paramref name="second" /> 中的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-614">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-615">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中的元素如果同时出现在第一个序列中，则将导致从返回的序列中移除这些元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-615">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-616">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-616">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="4d525-617">通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较，生成两个序列的差集。</span><span class="sxs-lookup"><span data-stu-id="4d525-617">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="4d525-618">包含这两个序列的元素的差集的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-618">A sequence that contains the set difference of the elements of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-619">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对值进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-619">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>
  
## Examples  
 <span data-ttu-id="4d525-620">如果要比较某种自定义数据类型的对象序列，则必须 <xref:System.Collections.Generic.IEqualityComparer%601> 在 helper 类中实现泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-620">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class.</span></span> <span data-ttu-id="4d525-621">下面的代码示例演示如何在自定义数据类型中实现此接口，并提供 <xref:System.Object.GetHashCode%2A> 和 <xref:System.Object.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-621">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span> <span data-ttu-id="4d525-622">下面的示例演示如何实现可在方法中使用的相等比较器 <xref:System.Linq.Enumerable.Except%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-622">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="4d525-623">实现此比较器后，可以 `Product` 在方法中使用对象序列 <xref:System.Linq.Enumerable.Except%2A> ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-623">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]
 [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-624"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-624"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-625">返回序列中的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-625">Returns the first element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-626"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-626">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-627">要返回其第一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-627">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="4d525-628">返回序列中的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-628">Returns the first element of a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-629">返回指定序列中的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-629">The first element in the specified sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-630"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>如果 `source` 不包含任何元素，则该方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-630">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="4d525-631">若要改为在源序列为空时返回默认值，请使用 <xref:System.Linq.Enumerable.FirstOrDefault%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-631">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-632">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 返回数组的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-632">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet35":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet35":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-633"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-633"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-634">源序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-634">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-635"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-635">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-636">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-636">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-637">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-637">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-638">返回序列中满足指定条件的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-638">Returns the first element in a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="4d525-639">序列中通过指定谓词函数中的测试的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-639">The first element in the sequence that passes the test in the specified predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-640"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>如果在中未找到匹配的元素，此方法将引发异常 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-640">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="4d525-641">如果未找到匹配的元素，则改为返回默认值时，请使用 <xref:System.Linq.Enumerable.FirstOrDefault%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-641">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-642">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 返回满足某个条件的数组的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-642">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet36"::: 
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet36":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-643"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-643"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-644">元素均不满足 <paramref name="predicate" /> 中的条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-644">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="4d525-645">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-645">-or-</span></span> 
<span data-ttu-id="4d525-646">源序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-646">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-647">返回序列中的第一个元素；如果未找到该元素，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-647">Returns the first element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault source" />
      <MemberSignature Language="C#" Value="public static TSource? FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-648"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-648">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-649">要返回其第一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-649">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="4d525-650">返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-650">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="4d525-651">如果 <paramref name="source" /> 为空，则为 <see langword="default" />(<paramref name="TSource" />)；否则为 <paramref name="source" /> 中的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-651"><see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-652">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-652">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="4d525-653"><xref:System.Linq.Enumerable.FirstOrDefault%2A>方法不提供指定默认值的方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-653">The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="4d525-654">如果要指定之外的默认值 `default(TSource)` ，请使用 "示例" <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 部分中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-654">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-655">下面的代码示例演示如何 <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 对空数组使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-655">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet37":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet37":::
  
 <span data-ttu-id="4d525-656">有时， `default(TSource)` 如果集合不包含任何元素，则的值将不是要使用的默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-656">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="4d525-657">您可以使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 方法来指定要在集合为空时使用的默认值，而不是检查不需要的默认值的结果，并在必要时对其进行更改。</span><span class="sxs-lookup"><span data-stu-id="4d525-657">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="4d525-658">然后，调用 <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 以获取第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-658">Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="4d525-659">下面的代码示例使用这两种方法来获取默认值1（如果数值月份的集合为空）。</span><span class="sxs-lookup"><span data-stu-id="4d525-659">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="4d525-660">由于整数的默认值为0（与任何月份均不对应），因此必须将默认值指定为1。</span><span class="sxs-lookup"><span data-stu-id="4d525-660">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="4d525-661">查询执行完毕后，将检查第一个结果变量是否存在不需要的默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-661">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="4d525-662">第二个结果变量通过使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 来指定默认值1。</span><span class="sxs-lookup"><span data-stu-id="4d525-662">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet126":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet126"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-663"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-663"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault (source, predicate)" />
      <MemberSignature Language="C#" Value="public static TSource? FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-664"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-664">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-665">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-665">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-666">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-666">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-667">返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-667">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="4d525-668">如果 <paramref name="source" /> 为空或没有元素通过 <paramref name="predicate" /> 指定的测试，则为 <see langword="default" />(<paramref name="TSource" />)，否则为 <paramref name="source" /> 中通过 <paramref name="predicate" /> 指定的测试的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-668"><see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-669">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-669">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-670">下面的代码示例演示如何 <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 通过传入谓词来使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-670">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="4d525-671">在对方法的第二次调用中，数组中没有满足条件的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-671">In the second call to the method, there is no element in the array that satisfies the condition.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet38":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet38":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-672"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-672"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-673">对序列中的元素进行分组。</span><span class="sxs-lookup"><span data-stu-id="4d525-673">Groups the elements of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-674"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-674">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-675"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-675">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-676">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-676">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-677">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-677">A function to extract the key for each element.</span></span></param>
        <summary><span data-ttu-id="4d525-678">根据指定的键选择器函数对序列中的元素进行分组。</span><span class="sxs-lookup"><span data-stu-id="4d525-678">Groups the elements of a sequence according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="4d525-679">C# 中的 <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> 或 Visual Basic 中的 <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c>，其中的每个 <see cref="T:System.Linq.IGrouping`2" /> 对象均包含一个对象序列和键。</span><span class="sxs-lookup"><span data-stu-id="4d525-679">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-680">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-680">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-681">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-681">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-682">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-682">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-683">有关的示例 `GroupBy` ，请参阅以下文章：</span><span class="sxs-lookup"><span data-stu-id="4d525-683">For examples of `GroupBy`, see the following articles:</span></span>
>   
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="4d525-684"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>方法返回对象的集合 <xref:System.Linq.IGrouping%602> ，每个对象对应于遇到的每个非重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-684">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="4d525-685"><xref:System.Linq.IGrouping%602>是一个 <xref:System.Collections.Generic.IEnumerable%601> ，它还具有与其元素关联的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-685">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="4d525-686"><xref:System.Linq.IGrouping%602>根据 `source` 生成每个对象的第一个键的中的元素的顺序，按顺序生成对象 <xref:System.Linq.IGrouping%602> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-686">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="4d525-687">分组中的元素将按它们出现的顺序生成 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-687">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="4d525-688">使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-688">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="4d525-689">在查询表达式语法中， `group by` (Visual c # ) 或 `Group By Into` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-689">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="4d525-690">有关详细信息和用法示例，请参阅 [group 子句](/dotnet/csharp/language-reference/keywords/group-clause) 和 [group by 子句](/dotnet/visual-basic/language-reference/queries/group-by-clause)。</span><span class="sxs-lookup"><span data-stu-id="4d525-690">For more information and usage examples, see [group clause](/dotnet/csharp/language-reference/keywords/group-clause) and [Group By Clause](/dotnet/visual-basic/language-reference/queries/group-by-clause).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-691"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-691"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-692">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-692">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-693">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-693">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-694"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-694">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-695"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-695">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-696">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-696">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-697">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-697">A function to extract the key for each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-698">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-698">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-699">根据指定的键选择器函数对序列中的元素进行分组，并使用指定的比较器对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-699">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-700">C# 中的 <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> 或 Visual Basic 中的 <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c>，其中的每个 <see cref="T:System.Linq.IGrouping`2" /> 对象均包含一个对象集合和键。</span><span class="sxs-lookup"><span data-stu-id="4d525-700">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-701">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-701">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-702">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-702">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-703">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-703">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-704">有关的示例 `GroupBy` ，请参阅以下文章：</span><span class="sxs-lookup"><span data-stu-id="4d525-704">For examples of `GroupBy`, see the following articles:</span></span>
>   
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="4d525-705"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法返回对象的集合 <xref:System.Linq.IGrouping%602> ，每个对象对应于遇到的每个非重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-705">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="4d525-706"><xref:System.Linq.IGrouping%602>是一个 <xref:System.Collections.Generic.IEnumerable%601> ，它还具有与其元素关联的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-706">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="4d525-707"><xref:System.Linq.IGrouping%602>根据 `source` 生成每个对象的第一个键的中的元素的顺序，按顺序生成对象 <xref:System.Linq.IGrouping%602> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-707">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="4d525-708">分组中的元素将按它们出现的顺序生成 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-708">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="4d525-709">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-709">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="4d525-710">如果根据，两个键被视为相等 `comparer` ，则选择第一个键作为该分组的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-710">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="4d525-711">在查询表达式语法中， `group by` (Visual c # ) 或 `Group By Into` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-711">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="4d525-712">有关详细信息和用法示例，请参阅 [group 子句](/dotnet/csharp/language-reference/keywords/group-clause) 和 [group by 子句](/dotnet/visual-basic/language-reference/queries/group-by-clause)。</span><span class="sxs-lookup"><span data-stu-id="4d525-712">For more information and usage examples, see [group clause](/dotnet/csharp/language-reference/keywords/group-clause) and [Group By Clause](/dotnet/visual-basic/language-reference/queries/group-by-clause).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-713"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-713"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-714">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-714">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-715">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-715">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-716"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-716">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-717"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-717">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-718"><see cref="T:System.Linq.IGrouping`2" /> 中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-718">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-719">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-719">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-720">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-720">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-721">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-721">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <summary><span data-ttu-id="4d525-722">根据指定的键选择器函数对序列中的元素进行分组，并且通过使用指定的函数对每个组中的元素进行投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-722">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="4d525-723">C# 中的 <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> 或 Visual Basic 中的 <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c>，其中的每个 <see cref="T:System.Linq.IGrouping`2" /> 对象均包含一个类型为 <paramref name="TElement" /> 的对象集合和键。</span><span class="sxs-lookup"><span data-stu-id="4d525-723">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-724">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-724">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-725">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-725">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-726">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-726">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-727"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>方法返回对象的集合 <xref:System.Linq.IGrouping%602> ，每个对象对应于遇到的每个非重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-727">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="4d525-728"><xref:System.Linq.IGrouping%602>是一个 <xref:System.Collections.Generic.IEnumerable%601> ，它还具有与其元素关联的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-728">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="4d525-729"><xref:System.Linq.IGrouping%602>根据 `source` 生成每个对象的第一个键的中的元素的顺序，按顺序生成对象 <xref:System.Linq.IGrouping%602> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-729">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="4d525-730">分组中的元素将按生成它们的元素出现的顺序生成 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-730">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="4d525-731">使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-731">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-732">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> 对序列中的元素进行分组。</span><span class="sxs-lookup"><span data-stu-id="4d525-732">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]
 [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  
  
 <span data-ttu-id="4d525-733">在查询表达式语法中， `group by` (Visual c # ) 或 `Group By Into` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-733">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="4d525-734">以下示例中的查询表达式转换等效于上面示例中的查询。</span><span class="sxs-lookup"><span data-stu-id="4d525-734">The translation of the query expression in the following example is equivalent to the query in the example above.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]
 [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  
  
> [!NOTE]
>  <span data-ttu-id="4d525-735">在 Visual c # 或 Visual Basic 查询表达式中，元素和键选择表达式在调用方法的参数位置中以相反顺序发生 <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-735">In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-736"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-736"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-737">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-737">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-738">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-738">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-739"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-739">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-740"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-740">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-741"><see cref="T:System.Linq.IGrouping`2" /> 中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-741">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-742">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-742">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-743">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-743">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-744">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-744">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-745">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-745">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-746">根据键选择器函数对序列中的元素进行分组。</span><span class="sxs-lookup"><span data-stu-id="4d525-746">Groups the elements of a sequence according to a key selector function.</span></span> <span data-ttu-id="4d525-747">通过使用比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-747">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="4d525-748">C# 中的 <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> 或 Visual Basic 中的 <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c>，其中的每个 <see cref="T:System.Linq.IGrouping`2" /> 对象均包含一个类型为 <paramref name="TElement" /> 的对象集合和键。</span><span class="sxs-lookup"><span data-stu-id="4d525-748">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-749">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-749">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-750">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-750">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-751">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-751">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-752">有关的示例 `GroupBy` ，请参阅以下文章：</span><span class="sxs-lookup"><span data-stu-id="4d525-752">For examples of `GroupBy`, see the following articles:</span></span>
>   
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="4d525-753"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法返回对象的集合 <xref:System.Linq.IGrouping%602> ，每个对象对应于遇到的每个非重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-753">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="4d525-754"><xref:System.Linq.IGrouping%602>是一个 <xref:System.Collections.Generic.IEnumerable%601> ，它还具有与其元素关联的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-754">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="4d525-755"><xref:System.Linq.IGrouping%602>根据 `source` 生成每个对象的第一个键的中的元素的顺序，按顺序生成对象 <xref:System.Linq.IGrouping%602> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-755">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="4d525-756">分组中的元素将按生成它们的元素出现的顺序生成 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-756">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="4d525-757">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-757">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="4d525-758">如果根据，两个键被视为相等 `comparer` ，则选择第一个键作为该分组的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-758">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="4d525-759">在查询表达式语法中， `group by` (Visual c # ) 或 `Group By Into` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-759">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="4d525-760">有关详细信息和用法示例，请参阅 [group 子句](/dotnet/csharp/language-reference/keywords/group-clause) 和 [group by 子句](/dotnet/visual-basic/language-reference/queries/group-by-clause)。</span><span class="sxs-lookup"><span data-stu-id="4d525-760">For more information and usage examples, see [group clause](/dotnet/csharp/language-reference/keywords/group-clause) and [Group By Clause](/dotnet/visual-basic/language-reference/queries/group-by-clause).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-761"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-761"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-762">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-762">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-763">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-763">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-764"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-764">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-765"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-765">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-766"><paramref name="resultSelector" /> 返回的结果值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-766">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-767">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-767">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-768">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-768">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-769">用于从每个组中创建结果值的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-769">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="4d525-770">根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</span><span class="sxs-lookup"><span data-stu-id="4d525-770">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span></summary>
        <returns><span data-ttu-id="4d525-771">类型为 <paramref name="TResult" /> 的元素的集合，其中的每个元素都表示对一个组及其键的投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-771">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-772">在查询表达式语法中， `group by` (Visual c # ) 或 `Group By Into` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-772">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-773">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> 对序列中的元素进行分组，并投影一系列类型的结果 `TResult` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-773">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]
 [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-774">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-774">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-775">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-775">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-776"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-776">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-777"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-777">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-778"><paramref name="resultSelector" /> 返回的结果值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-778">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-779">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-780">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-780">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-781">用于从每个组中创建结果值的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-781">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-782">用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-782">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span></span></param>
        <summary><span data-ttu-id="4d525-783">根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</span><span class="sxs-lookup"><span data-stu-id="4d525-783">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="4d525-784">通过使用指定的比较器对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-784">The keys are compared by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-785">类型为 <paramref name="TResult" /> 的元素的集合，其中的每个元素都表示对一个组及其键的投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-785">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-786">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-786">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-787">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-787">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-788"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-788">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-789"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-789">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-790">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-790">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-791"><paramref name="resultSelector" /> 返回的结果值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-791">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-792">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-792">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-793">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-793">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-794">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-794">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-795">用于从每个组中创建结果值的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-795">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="4d525-796">根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</span><span class="sxs-lookup"><span data-stu-id="4d525-796">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="4d525-797">通过使用指定的函数对每个组的元素进行投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-797">The elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="4d525-798">类型为 <paramref name="TResult" /> 的元素的集合，其中的每个元素都表示对一个组及其键的投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-798">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-799">在查询表达式语法中， `group by` (Visual c # ) 或 `Group By Into` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-799">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-800">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> 对序列中的投影元素进行分组，然后投影一系列类型的结果 `TResult` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-800">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]
 [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-801">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-801">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-802">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-802">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-803"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-803">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-804"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-804">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-805">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-805">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-806"><paramref name="resultSelector" /> 返回的结果值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-806">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-807">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-807">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-808">用于提取每个元素的键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-808">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-809">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-809">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-810">用于从每个组中创建结果值的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-810">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-811">用于对键进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-811">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span></span></param>
        <summary><span data-ttu-id="4d525-812">根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</span><span class="sxs-lookup"><span data-stu-id="4d525-812">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="4d525-813">通过使用指定的比较器对键值进行比较，并且通过使用指定的函数对每个组的元素进行投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-813">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="4d525-814">类型为 <paramref name="TResult" /> 的元素的集合，其中的每个元素都表示对一个组及其键的投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-814">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/group-clause"><span data-ttu-id="4d525-815">group 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-815">group clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-by-clause"><span data-ttu-id="4d525-816">Group By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-816">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-817">基于键值等同性将两个序列的元素进行关联，并对结果进行分组。</span><span class="sxs-lookup"><span data-stu-id="4d525-817">Correlates the elements of two sequences based on key equality, and groups the results.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="4d525-818">第一个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-818">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="4d525-819">第二个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-819">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-820">键选择器函数返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-820">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-821">结果元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-821">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="4d525-822">要联接的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-822">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="4d525-823">要与第一个序列联接的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-823">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="4d525-824">用于从第一个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-824">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="4d525-825">用于从第二个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-825">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-826">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-826">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-827">基于键值等同性对两个序列的元素进行关联，并对结果进行分组。</span><span class="sxs-lookup"><span data-stu-id="4d525-827">Correlates the elements of two sequences based on equality of keys and groups the results.</span></span> <span data-ttu-id="4d525-828">使用默认的相等比较器对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-828">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="4d525-829">一个包含通过对两个序列执行分组联接获得的类型为 <paramref name="TResult" /> 的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-829">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-830">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-830">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-831">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-831">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-832">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-832">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-833">默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 用于对键进行哈希处理和比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-833">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="4d525-834"><xref:System.Linq.Enumerable.GroupJoin%2A> 生成分层结果，这意味着中的元素 `outer` 与中匹配元素的集合配对 `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-834"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="4d525-835">`GroupJoin` 使您能够基于的每个元素的整个匹配项集生成结果 `outer` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-835">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-836">如果的给定元素在中没有关联元素 `inner` `outer` ，则该元素的匹配序列将为空，但仍会出现在结果中。</span><span class="sxs-lookup"><span data-stu-id="4d525-836">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="4d525-837">`resultSelector`对于每个元素，只调用一次函数，同时为所有元素的 `outer` 集合与 `inner` `outer` 元素匹配。</span><span class="sxs-lookup"><span data-stu-id="4d525-837">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="4d525-838">这不同于 <xref:System.Linq.Enumerable.Join%2A> 方法，在此方法中，将对包含一个元素的对和中的一个元素调用结果选择器函数 `outer` `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-838">This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="4d525-839">`GroupJoin` 保留的元素的顺序， `outer` 并为的每个元素保留中 `outer` 匹配元素的顺序 `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-839">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="4d525-840"><xref:System.Linq.Enumerable.GroupJoin%2A> 在传统关系数据库术语中没有直接等效项。</span><span class="sxs-lookup"><span data-stu-id="4d525-840"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="4d525-841">但是，此方法实现了内部联接和左外部联接的超集。</span><span class="sxs-lookup"><span data-stu-id="4d525-841">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="4d525-842">这两个操作都可以按照分组联接进行编写。</span><span class="sxs-lookup"><span data-stu-id="4d525-842">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="4d525-843">请参阅 [联接操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="4d525-843">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 <span data-ttu-id="4d525-844">在查询表达式语法中， `join … into` (Visual c # ) 或 `Group Join` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.GroupJoin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-844">In query expression syntax, a `join … into` (Visual C#) or `Group Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-845">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> 对两个序列执行分组联接。</span><span class="sxs-lookup"><span data-stu-id="4d525-845">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]
 [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-846"><paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-846"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="4d525-847">联接运算</span><span class="sxs-lookup"><span data-stu-id="4d525-847">Join Operations</span></span></related>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/join-clause"><span data-ttu-id="4d525-848">join 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-848">join clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/group-join-clause"><span data-ttu-id="4d525-849">Group Join 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-849">Group Join Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="4d525-850">第一个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-850">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="4d525-851">第二个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-851">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-852">键选择器函数返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-852">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-853">结果元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-853">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="4d525-854">要联接的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-854">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="4d525-855">要与第一个序列联接的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-855">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="4d525-856">用于从第一个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-856">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="4d525-857">用于从第二个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-857">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-858">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-858">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-859">用于对键进行哈希处理和比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-859">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-860">基于键值等同性对两个序列的元素进行关联，并对结果进行分组。</span><span class="sxs-lookup"><span data-stu-id="4d525-860">Correlates the elements of two sequences based on key equality and groups the results.</span></span> <span data-ttu-id="4d525-861">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-861">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="4d525-862">一个包含通过对两个序列执行分组联接获得的类型为 <paramref name="TResult" /> 的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-862">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-863">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-863">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-864">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-864">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-865">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-865">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-866">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行哈希运算。</span><span class="sxs-lookup"><span data-stu-id="4d525-866">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="4d525-867"><xref:System.Linq.Enumerable.GroupJoin%2A> 生成分层结果，这意味着中的元素 `outer` 与中匹配元素的集合配对 `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-867"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="4d525-868">`GroupJoin` 使您能够基于的每个元素的整个匹配项集生成结果 `outer` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-868">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-869">如果的给定元素在中没有关联元素 `inner` `outer` ，则该元素的匹配序列将为空，但仍会出现在结果中。</span><span class="sxs-lookup"><span data-stu-id="4d525-869">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="4d525-870">`resultSelector`对于每个元素，只调用一次函数，同时为所有元素的 `outer` 集合与 `inner` `outer` 元素匹配。</span><span class="sxs-lookup"><span data-stu-id="4d525-870">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="4d525-871">这不同于方法，在此方法中，将对 <xref:System.Linq.Enumerable.Join%2A> 包含一个元素的对和中的一个元素调用结果选择器函数 `outer` `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-871">This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="4d525-872">`GroupJoin` 保留的元素的顺序， `outer` 并为的每个元素保留中 `outer` 匹配元素的顺序 `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-872">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="4d525-873"><xref:System.Linq.Enumerable.GroupJoin%2A> 在传统关系数据库术语中没有直接等效项。</span><span class="sxs-lookup"><span data-stu-id="4d525-873"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="4d525-874">但是，此方法实现了内部联接和左外部联接的超集。</span><span class="sxs-lookup"><span data-stu-id="4d525-874">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="4d525-875">这两个操作都可以按照分组联接进行编写。</span><span class="sxs-lookup"><span data-stu-id="4d525-875">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="4d525-876">请参阅 [联接操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="4d525-876">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-877"><paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-877"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="4d525-878">执行联接操作</span><span class="sxs-lookup"><span data-stu-id="4d525-878">Performing Join Operations</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-879">生成两个序列的交集。</span><span class="sxs-lookup"><span data-stu-id="4d525-879">Produces the set intersection of two sequences.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/dotnet/api/system.linq.enumerable.except"><span data-ttu-id="4d525-880">可枚举。 Except 方法</span><span class="sxs-lookup"><span data-stu-id="4d525-880">Enumerable.Except Method</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-881">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-881">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-882">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在 <paramref name="second" /> 中的非重复元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-882">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-883">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列，其中的同时出现在第一个序列中的非重复元素将被返回。</span><span class="sxs-lookup"><span data-stu-id="4d525-883">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span></span></param>
        <summary><span data-ttu-id="4d525-884">通过使用默认的相等比较器对值进行比较，生成两个序列的交集。</span><span class="sxs-lookup"><span data-stu-id="4d525-884">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="4d525-885">包含组成两个序列交集的元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-885">A sequence that contains the elements that form the set intersection of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-886">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-886">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-887">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-887">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-888">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-888">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-889">两个集 A 和 B 的交集被定义为包含中的所有元素的集合，这些元素也出现在 B 中，但没有其他元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-889">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="4d525-890">枚举此方法返回的对象时，会 `Intersect` 按它们出现的顺序产生两个序列中的非重复元素 `first` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-890">When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="4d525-891">默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 用于比较类型的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-891">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="4d525-892">若要比较自定义数据类型，需要重写 <xref:System.Object.Equals%2A> 和 <xref:System.Object.GetHashCode%2A> 方法，还可以选择实现 <xref:System.IEquatable%601> 自定义类型中的泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-892">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="4d525-893">有关更多信息，请参见 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4d525-893">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="4d525-894">下面的代码示例演示如何使用 `Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` 来返回出现在两个整数序列中的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-894">The following code example demonstrates how to use `Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to return the elements that appear in each of two sequences of integers.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]
 [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  
  
 <span data-ttu-id="4d525-895">如果要比较某种自定义数据类型的对象序列，则必须 <xref:System.IEquatable%601> 在 helper 类中实现泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-895">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="4d525-896">下面的代码示例演示如何在自定义数据类型中实现此接口并重写 <xref:System.Object.GetHashCode%2A> 和 <xref:System.Object.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-896">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="4d525-897">实现此接口后，可以 `ProductA` 在方法中使用对象序列 `Intersect` ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-897">After you implement this interface, you can use sequences of `ProductA` objects in the `Intersect` method, as shown in the following example:</span></span>
  
[!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-vb[CSLINQEncapsulatedComparer#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#10)]  

[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]
[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-898"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-898"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-899">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-899">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-900">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在 <paramref name="second" /> 中的非重复元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-900">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-901">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列，其中的同时出现在第一个序列中的非重复元素将被返回。</span><span class="sxs-lookup"><span data-stu-id="4d525-901">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-902">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-902">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="4d525-903">通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较，生成两个序列的交集。</span><span class="sxs-lookup"><span data-stu-id="4d525-903">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="4d525-904">包含组成两个序列交集的元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-904">A sequence that contains the elements that form the set intersection of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-905">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-905">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-906">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-906">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-907">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-907">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-908">两个集 A 和 B 的交集被定义为包含中的所有元素的集合，这些元素也出现在 B 中，但没有其他元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-908">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="4d525-909">枚举此方法返回的对象时，会 `Intersect` 按它们出现的顺序产生两个序列中的非重复元素 `first` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-909">When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="4d525-910">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对值进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-910">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
## Examples  
 <span data-ttu-id="4d525-911">下面的示例演示如何实现可在方法中使用的相等比较器 `Intersect` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-911">The following example shows how to implement an equality comparer that can be used in the `Intersect` method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="4d525-912">实现此比较器后，可以 `Product` 在方法中使用对象序列 `Intersect` ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-912">After you implement this comparer, you can use sequences of `Product` objects in the `Intersect` method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]
[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-913"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-913"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-914">基于匹配键对两个序列的元素进行关联。</span><span class="sxs-lookup"><span data-stu-id="4d525-914">Correlates the elements of two sequences based on matching keys.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="4d525-915">第一个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-915">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="4d525-916">第二个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-916">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-917">键选择器函数返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-917">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-918">结果元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-918">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="4d525-919">要联接的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-919">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="4d525-920">要与第一个序列联接的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-920">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="4d525-921">用于从第一个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-921">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="4d525-922">用于从第二个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-922">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-923">用于从两个匹配元素创建结果元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-923">A function to create a result element from two matching elements.</span></span></param>
        <summary><span data-ttu-id="4d525-924">基于匹配键对两个序列的元素进行关联。</span><span class="sxs-lookup"><span data-stu-id="4d525-924">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="4d525-925">使用默认的相等比较器对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-925">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="4d525-926">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含通过对两个序列执行内部联接获得的、类型为 <paramref name="TResult" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-926">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-927">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-927">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-928">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-928">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-929">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-929">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-930">默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 用于对键进行哈希处理和比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-930">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="4d525-931">联接是指基于公共键关联两个信息源的元素的操作。</span><span class="sxs-lookup"><span data-stu-id="4d525-931">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="4d525-932"><xref:System.Linq.Enumerable.Join%2A> 在一个方法调用中将两个信息源和这些信息源与它们相匹配。</span><span class="sxs-lookup"><span data-stu-id="4d525-932"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="4d525-933">这不同于的使用 `SelectMany` ，后者要求多个方法调用来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="4d525-933">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="4d525-934"><xref:System.Linq.Enumerable.Join%2A> 保留的元素 `outer` 和每个元素的顺序，以及的匹配元素的顺序 `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-934"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="4d525-935">在查询表达式语法中， `join` (Visual c # ) 或 `Join` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.Join%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-935">In query expression syntax, a `join` (Visual C#) or `Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.</span></span>  
  
 <span data-ttu-id="4d525-936">在关系数据库术语中，此 <xref:System.Linq.Enumerable.Join%2A> 方法实现内部同等联接。</span><span class="sxs-lookup"><span data-stu-id="4d525-936">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="4d525-937">"内部" 表示结果中只包括具有其他序列中的匹配项的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-937">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="4d525-938">"同等联接" 是一种联接，其中的键进行比较以确定是否相等。</span><span class="sxs-lookup"><span data-stu-id="4d525-938">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="4d525-939">左外部联接操作没有专用的标准查询运算符，但可以通过使用方法来执行 <xref:System.Linq.Enumerable.GroupJoin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-939">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="4d525-940">请参阅 [联接操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="4d525-940">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-941">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> 基于公共键对两个序列执行内部联接。</span><span class="sxs-lookup"><span data-stu-id="4d525-941">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]
 [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-942"><paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-942"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="4d525-943">联接</span><span class="sxs-lookup"><span data-stu-id="4d525-943">Joining</span></span></related>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/join-clause"><span data-ttu-id="4d525-944">join 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-944">join clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/join-clause"><span data-ttu-id="4d525-945">Join 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-945">Join Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="4d525-946">第一个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-946">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="4d525-947">第二个序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-947">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-948">键选择器函数返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-948">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-949">结果元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-949">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="4d525-950">要联接的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-950">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="4d525-951">要与第一个序列联接的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-951">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="4d525-952">用于从第一个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-952">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="4d525-953">用于从第二个序列的每个元素提取联接键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-953">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-954">用于从两个匹配元素创建结果元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-954">A function to create a result element from two matching elements.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-955">用于对键进行哈希处理和比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-955">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-956">基于匹配键对两个序列的元素进行关联。</span><span class="sxs-lookup"><span data-stu-id="4d525-956">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="4d525-957">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-957">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="4d525-958">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含通过对两个序列执行内部联接获得的、类型为 <paramref name="TResult" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-958">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-959">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-959">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-960">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-960">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-961">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-961">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-962">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行哈希运算。</span><span class="sxs-lookup"><span data-stu-id="4d525-962">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="4d525-963">联接是指基于公共键关联两个信息源的元素的操作。</span><span class="sxs-lookup"><span data-stu-id="4d525-963">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="4d525-964"><xref:System.Linq.Enumerable.Join%2A> 在一个方法调用中将两个信息源和这些信息源与它们相匹配。</span><span class="sxs-lookup"><span data-stu-id="4d525-964"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="4d525-965">这不同于的使用 `SelectMany` ，后者要求多个方法调用来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="4d525-965">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="4d525-966"><xref:System.Linq.Enumerable.Join%2A> 保留的元素 `outer` 和每个元素的顺序，以及的匹配元素的顺序 `inner` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-966"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="4d525-967">在关系数据库术语中，此 <xref:System.Linq.Enumerable.Join%2A> 方法实现内部同等联接。</span><span class="sxs-lookup"><span data-stu-id="4d525-967">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="4d525-968">"内部" 表示结果中只包括具有其他序列中的匹配项的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-968">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="4d525-969">"同等联接" 是一种联接，其中的键进行比较以确定是否相等。</span><span class="sxs-lookup"><span data-stu-id="4d525-969">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="4d525-970">左外部联接操作没有专用的标准查询运算符，但可以通过使用方法来执行 <xref:System.Linq.Enumerable.GroupJoin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-970">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="4d525-971">请参阅 [联接操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="4d525-971">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-972"><paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-972"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="4d525-973">联接</span><span class="sxs-lookup"><span data-stu-id="4d525-973">Joining</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-974">返回序列的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-974">Returns the last element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-975"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-975">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-976">要返回其最后一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-976">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="4d525-977">返回序列的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-977">Returns the last element of a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-978">源序列中最后位置处的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-978">The value at the last position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-979"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>如果 `source` 不包含任何元素，则该方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-979">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="4d525-980">若要改为在源序列为空时返回默认值，请使用 <xref:System.Linq.Enumerable.LastOrDefault%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-980">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-981">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 返回数组的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-981">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet43":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet43":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-982"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-982"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-983">源序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-983">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-984"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-984">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-985">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-985">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-986">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-986">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-987">返回序列中满足指定条件的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-987">Returns the last element of a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="4d525-988">序列中通过指定谓词函数中的测试的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-988">The last element in the sequence that passes the test in the specified predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-989"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>如果在中未找到匹配的元素，此方法将引发异常 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-989">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="4d525-990">如果未找到匹配的元素，则改为返回默认值时，请使用 <xref:System.Linq.Enumerable.LastOrDefault%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-990">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-991">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 返回数组中满足条件的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-991">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet44":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet44"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-992"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-992"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-993">元素均不满足 <paramref name="predicate" /> 中的条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-993">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="4d525-994">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-994">-or-</span></span> 
<span data-ttu-id="4d525-995">源序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-995">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-996">返回序列中的最后一个元素；如果未找到该元素，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-996">Returns the last element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault source" />
      <MemberSignature Language="C#" Value="public static TSource? LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-997"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-997">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-998">要返回其最后一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-998">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="4d525-999">返回序列中的最后一个元素；如果序列中不包含任何元素，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-999">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="4d525-1000">如果源序列为空，则为 <see langword="default" />(<paramref name="TSource" />)；否则为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1000"><see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1001">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1001">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="4d525-1002"><xref:System.Linq.Enumerable.LastOrDefault%2A>方法不提供指定默认值的方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-1002">The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="4d525-1003">如果要指定之外的默认值 `default(TSource)` ，请使用 "示例" <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 部分中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-1003">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1004">下面的代码示例演示如何 <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 对空数组使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1004">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet45":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet45":::
 
 <span data-ttu-id="4d525-1005">有时， `default(TSource)` 如果集合不包含任何元素，则的值将不是要使用的默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1005">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="4d525-1006">您可以使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 方法来指定要在集合为空时使用的默认值，而不是检查不需要的默认值的结果，并在必要时对其进行更改。</span><span class="sxs-lookup"><span data-stu-id="4d525-1006">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="4d525-1007">然后，调用 <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 以获取最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1007">Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="4d525-1008">下面的代码示例使用这两种方法来获取默认值1（如果该月中的数字天数集合为空）。</span><span class="sxs-lookup"><span data-stu-id="4d525-1008">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="4d525-1009">由于整数的默认值为0（不对应于月中的任何一天），因此必须将默认值指定为1。</span><span class="sxs-lookup"><span data-stu-id="4d525-1009">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="4d525-1010">查询执行完毕后，将检查第一个结果变量是否存在不需要的默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1010">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="4d525-1011">第二个结果变量通过使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 来指定默认值1。</span><span class="sxs-lookup"><span data-stu-id="4d525-1011">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet127":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet127":::
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1012"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1012"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault (source, predicate)" />
      <MemberSignature Language="C#" Value="public static TSource? LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1013"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1013">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1014">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1014">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-1015">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1015">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-1016">返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1016">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="4d525-1017">如果序列为空或没有元素通过谓词函数中的测试，则为 <see langword="default" />(<paramref name="TSource" />)；否则，为通过谓词函数中的测试的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1017"><see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1018">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1018">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1019">下面的代码示例演示如何 <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 通过传入谓词来使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1019">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="4d525-1020">在第二次调用方法时，序列中没有满足条件的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1020">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet46":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet46":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1021"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1021"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1022">返回表示序列中的元素数量的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1022">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1023"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1023">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1024">包含要进行计数的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1024">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span></span></param>
        <summary><span data-ttu-id="4d525-1025">返回表示序列中元素总数的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1025">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1026">源序列中的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-1026">The number of elements in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1027">如果希望结果大于，请使用此方法而不是 <xref:System.Linq.Enumerable.Count%2A> <xref:System.Int32.MaxValue> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1027">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="4d525-1028">在 Visual Basic 查询表达式语法中， `Aggregate Into LongCount()` 子句转换为对的调用 <xref:System.Linq.Enumerable.LongCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1028">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1029">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 来计算数组中元素的数目。</span><span class="sxs-lookup"><span data-stu-id="4d525-1029">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet47":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet47":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1030"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1030"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1031">元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1031">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1032">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1032">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1033"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1033">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1034">包含要进行计数的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1034">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-1035">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1035">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-1036">返回表示序列中满足条件的元素的数量的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1036">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="4d525-1037">一个数字，表示序列中满足谓词函数条件的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-1037">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1038">如果希望结果大于，请使用此方法而不是 <xref:System.Linq.Enumerable.Count%2A> <xref:System.Int32.MaxValue> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1038">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="4d525-1039">在 Visual Basic 查询表达式语法中， `Aggregate Into LongCount()` 子句转换为对的调用 <xref:System.Linq.Enumerable.LongCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1039">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1040">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 来计算数组中满足条件的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1040">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" id="Snippet48":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet48":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1041"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1041"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1042">匹配元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1042">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1043">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1043">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1044">返回值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1044">Returns the maximum value in a sequence of values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1045">要确定其最大值的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1045">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1046">返回 <see cref="T:System.Decimal" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1046">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1047">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1047">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1048"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1048">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1049">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1049">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1050">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1050">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1051"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1051"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1052"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1052"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1053">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1053">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1054">要确定其最大值的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1054">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1055">返回 <see cref="T:System.Double" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1055">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1056">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1056">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1057"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1057">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1058">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1058">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1059">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1059">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1060"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1060"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1061"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1061"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1062">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1062">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1063">要确定其最大值的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1063">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1064">返回 <see cref="T:System.Int32" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1064">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1065">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1065">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1066"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1066">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1067">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1067">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1068">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1068">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1069"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1069"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1070"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1070"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1071">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1071">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1072">要确定其最大值的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1072">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1073">返回 <see cref="T:System.Int64" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1073">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1074">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1074">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1075"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1075">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1076">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1076">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1077">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1077">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1078"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1078"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1079"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1079"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1080">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1080">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal? Max (this System.Collections.Generic.IEnumerable&lt;decimal?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1081">要确定其最大值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1081">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1082">返回可以为 null 的 <see cref="T:System.Decimal" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1082">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1083">一个与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Decimal&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Decimal)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1083">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1084"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1084">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1085">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1085">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1086">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1086">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1087">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1087">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1088"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1088"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1089">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1089">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double? Max (this System.Collections.Generic.IEnumerable&lt;double?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1090">要确定其最大值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1090">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1091">返回可以为 null 的 <see cref="T:System.Double" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1091">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1092">一个与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Double&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Double)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1092">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1093"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1093">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1094">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1094">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1095">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1095">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1096">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1096">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1097"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1097"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1098">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1098">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int? Max (this System.Collections.Generic.IEnumerable&lt;int?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1099">要确定其最大值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1099">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1100">返回可以为 null 的 <see cref="T:System.Int32" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1100">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1101">一个与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int32&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int32)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1101">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1102"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1102">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1103">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1103">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1104">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1104">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1105">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1105">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1106"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1106"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1107">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1107">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long? Max (this System.Collections.Generic.IEnumerable&lt;long?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1108">要确定其最大值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1108">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1109">返回可以为 null 的 <see cref="T:System.Int64" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1109">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1110">一个与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int64&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int64)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1110">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1111"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1111">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1112">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1112">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1113">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1113">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1114">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1114">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1115"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1115"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1116">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1116">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float? Max (this System.Collections.Generic.IEnumerable&lt;float?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1117">要确定其最大值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1117">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1118">返回可以为 null 的 <see cref="T:System.Single" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1118">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1119">一个与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Single&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Single)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1119">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1120"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1120">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1121">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1121">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1122">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1122">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1123">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1123">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1124"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1124"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1125">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1125">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1126">要确定其最大值的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1126">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1127">返回 <see cref="T:System.Single" /> 值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1127">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1128">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1128">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1129"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1129">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1130">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1130">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1131">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> 来确定序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1131">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1132"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1132"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1133"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1133"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1134">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1134">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Max source" />
      <MemberSignature Language="C#" Value="public static TSource? Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1135"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1135">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1136">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1136">A sequence of values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1137">返回泛型序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1137">Returns the maximum value in a generic sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1138">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1138">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1139">如果类型 `TSource` 实现 <xref:System.IComparable%601> ，则 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 方法使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1139">If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values.</span></span> <span data-ttu-id="4d525-1140">否则，如果类型 `TSource` 实现 <xref:System.IComparable> ，则使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1140">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1141">如果 `TSource` 是引用类型，并且源序列为空或仅包含为的值 `null` ，则此方法返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1141">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1142">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1142">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1143">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 确定对象序列中的最大值 <xref:System.IComparable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1143">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]
 [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1144"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1144"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4d525-1145"><paramref name="source" /> 中没有对象实现 <see cref="T:System.IComparable" /> 或 <see cref="T:System.IComparable`1" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-1145">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1146">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1146">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1147"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1147">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1148">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1148">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1149">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1149">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1150">对序列中的每个元素调用转换函数，并返回最大的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1150">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1151">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1151">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1152"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1152">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1153">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Decimal> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1153">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="4d525-1154">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1154">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1155">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1155">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1156"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1156"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1157"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1157"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1158">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1158">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1159"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1159">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1160">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1160">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1161">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1161">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1162">对序列中的每个元素调用转换函数，并返回最大的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1162">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1163">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1163">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1164"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1164">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1165">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1165">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="4d525-1166">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1166">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1167">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1167">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1168"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1168"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1169"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1169"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1170">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1170">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1171"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1171">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1172">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1172">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1173">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1173">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1174">对序列中的每个元素调用转换函数，并返回最大的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1174">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1175">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1175">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1176"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1176">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1177">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Int32> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1177">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="4d525-1178">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1178">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1179">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1179">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1180"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1180"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1181"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1181"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1182">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1182">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1183"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1183">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1184">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1184">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1185">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1185">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1186">对序列中的每个元素调用转换函数，并返回最大的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1186">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1187">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1187">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1188"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1188">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1189">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Int64> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1189">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="4d525-1190">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1190">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1191">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1192"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1192"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1193"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1193"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1194">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1194">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal? Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1195"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1195">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1196">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1196">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1197">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1197">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1198">对序列中的每个元素调用转换函数，并返回可以为 null 的最大的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1198">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1199">与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Decimal&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Decimal)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1199">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1200"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1200">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1201">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Decimal>` c # 或 `Nullable(Of Decimal)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1201">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1202">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1202">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1203">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1203">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1204"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1204"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1205">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1205">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double? Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1206"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1206">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1207">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1207">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1208">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1208">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1209">对序列中的每个元素调用转换函数，并返回可以为 null 的最大的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1209">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1210">与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Double&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Double)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1210">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1211"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1211">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1212">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Double>` c # 或 `Nullable(Of Double)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1212">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1213">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1213">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1214">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1214">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1215"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1215"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1216">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1216">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int? Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1217"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1217">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1218">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1218">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1219">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1219">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1220">对序列中的每个元素调用转换函数，并返回可以为 null 的最大的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1220">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1221">与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int32&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int32)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1221">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1222"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1222">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1223">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Int32>` c # 或 `Nullable(Of Int32)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1223">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1224">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1224">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1225">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1225">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1226"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1226"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1227">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1227">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long? Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1228"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1228">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1229">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1229">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1230">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1230">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1231">对序列中的每个元素调用转换函数，并返回可以为 null 的最大的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1231">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1232">与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int64&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int64)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1232">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1233"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1233">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1234">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Int64>` c # 或 `Nullable(Of Int64)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1234">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1235">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1235">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1236">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1236">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1237"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1237"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1238">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1238">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float? Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1239"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1239">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1240">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1240">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1241">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1241">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1242">对序列中的每个元素调用转换函数，并返回可以为 null 的最大的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1242">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1243">与序列中的最大值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Single&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Single)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1243">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1244"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1244">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1245">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Single>` c # 或 `Nullable(Of Single)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1245">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1246">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1246">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1247">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1247">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1248"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1248"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1249">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1249">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1250"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1250">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1251">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1251">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1252">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1252">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1253">对序列中的每个元素调用转换函数，并返回最大的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1253">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1254">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1254">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1255"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1255">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1256">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Single> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1256">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="4d525-1257">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1257">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1258">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1258">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1259"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1259"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1260"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1260"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1261">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1261">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberSignature Language="C#" Value="public static TResult? Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1262"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1262">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1263"><paramref name="selector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1263">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1264">要确定其最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1264">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1265">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1265">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1266">对序列中的每个元素调用转换函数，并返回最大结果值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1266">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1267">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1267">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1268">如果类型 `TResult` 实现 <xref:System.IComparable%601> ，则此方法将使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1268">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="4d525-1269">否则，如果类型 `TResult` 实现 <xref:System.IComparable> ，则使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1269">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1270">在 Visual Basic 查询表达式语法中， `Aggregate Into Max()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Max%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1270">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1271">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 确定投影值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1271">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1272"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1272"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1273">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1273">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1274">返回值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1274">Returns the minimum value in a sequence of values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1275">要确定其最小值的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1275">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1276">返回 <see cref="T:System.Decimal" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1276">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1277">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1277">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1278"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1278">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1279">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1279">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1280"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1280"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1281"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1281"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1282">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1282">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1283">要确定其最小值的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1283">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1284">返回 <see cref="T:System.Double" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1284">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1285">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1285">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1286"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1286">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1287">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1287">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1288">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> 来确定序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1288">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet60":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet60":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1289"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1289"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1290"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1290"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1291">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1291">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1292">要确定其最小值的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1292">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1293">返回 <see cref="T:System.Int32" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1293">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1294">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1294">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1295"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1295">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1296">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1296">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1297"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1297"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1298"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1298"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1299">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1299">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1300">要确定其最小值的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1300">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1301">返回 <see cref="T:System.Int64" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1301">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1302">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1302">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1303"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1303">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1304">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1304">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1305"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1305"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1306"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1306"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1307">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1307">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal? Min (this System.Collections.Generic.IEnumerable&lt;decimal?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1308">要确定其最小值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1308">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1309">返回可以为 null 的 <see cref="T:System.Decimal" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1309">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1310">一个与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Decimal&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Decimal)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1310">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1311"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1311">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1312">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1312">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1313">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1313">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1314"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1314"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1315">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1315">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double? Min (this System.Collections.Generic.IEnumerable&lt;double?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1316">要确定其最小值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1316">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1317">返回可以为 null 的 <see cref="T:System.Double" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1317">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1318">一个与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Double&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Double)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1318">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1319"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1319">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1320">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1320">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1321">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1321">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1322"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1322"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1323">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1323">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int? Min (this System.Collections.Generic.IEnumerable&lt;int?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1324">要确定其最小值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1324">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1325">返回可以为 null 的 <see cref="T:System.Int32" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1325">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1326">一个与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int32&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int32)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1326">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1327"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1327">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1328">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1328">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1329">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1329">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1330">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> 来确定序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1330">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet63":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet63":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1331"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1331"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1332">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1332">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long? Min (this System.Collections.Generic.IEnumerable&lt;long?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1333">要确定其最小值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1333">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1334">返回可以为 null 的 <see cref="T:System.Int64" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1334">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1335">一个与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int64&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int64)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1335">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1336"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1336">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1337">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1337">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1338">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1338">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1339"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1339"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1340">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1340">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float? Min (this System.Collections.Generic.IEnumerable&lt;float?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1341">要确定其最小值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1341">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1342">返回可以为 null 的 <see cref="T:System.Single" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1342">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1343">一个与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Single&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Single)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1343">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1344"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1344">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1345">如果源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1345">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1346">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1346">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1347"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1347"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1348">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1348">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1349">要确定其最小值的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1349">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1350">返回 <see cref="T:System.Single" /> 值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1350">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1351">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1351">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1352"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1352">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1353">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1353">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
   
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1354"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1354"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1355"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1355"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1356">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1356">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Min source" />
      <MemberSignature Language="C#" Value="public static TSource? Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1357"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1357">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1358">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1358">A sequence of values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="4d525-1359">返回泛型序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1359">Returns the minimum value in a generic sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1360">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1360">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1361">如果类型 `TSource` 实现 <xref:System.IComparable%601> ，则此方法将使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1361">If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="4d525-1362">否则，如果类型 `TSource` 实现 <xref:System.IComparable> ，则使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1362">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1363">如果 `TSource` 是引用类型，并且源序列为空或仅包含为的值 `null` ，则此函数返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1363">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="4d525-1364">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1364">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1365">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 确定对象序列中的最小值 <xref:System.IComparable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1365">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]
 [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1366"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1366"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4d525-1367"><paramref name="source" /> 中没有对象实现 <see cref="T:System.IComparable" /> 或 <see cref="T:System.IComparable`1" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-1367">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1368">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1368">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1369"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1369">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1370">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1370">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1371">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1371">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1372">对序列中的每个元素调用转换函数，并返回最小的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1372">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1373">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1373">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1374"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1374">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1375">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Decimal> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1375">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="4d525-1376">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1376">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1377">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1377">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1378"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1378"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1379"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1379"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1380">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1380">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1381"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1381">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1382">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1382">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1383">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1383">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1384">对序列中的每个元素调用转换函数，并返回最小的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1384">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1385">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1385">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1386"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1386">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1387">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1387">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="4d525-1388">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1388">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1389">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1389">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1390"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1390"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1391"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1391"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1392">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1392">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1393"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1393">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1394">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1394">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1395">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1395">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1396">对序列中的每个元素调用转换函数，并返回最小的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1396">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1397">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1397">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1398"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1398">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1399">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Int32> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1399">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="4d525-1400">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1400">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1401">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1401">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1402"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1402"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1403"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1403"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1404">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1404">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1405"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1405">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1406">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1406">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1407">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1407">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1408">对序列中的每个元素调用转换函数，并返回最小的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1408">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1409">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1409">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1410"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1410">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1411">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Int64> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1411">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="4d525-1412">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1412">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1413">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1413">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1414"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1414"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1415"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1415"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1416">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1416">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal? Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1417"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1417">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1418">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1418">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1419">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1419">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1420">对序列中的每个元素调用转换函数，并返回可以为 null 的最小的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1420">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1421">与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Decimal&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Decimal)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1421">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1422"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法使用 <xref:System.Decimal> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1422">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1423">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Decimal>` c # 或 `Nullable(Of Decimal)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1423">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1424">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1424">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1425">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1425">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1426"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1426"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1427">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1427">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double? Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1428"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1428">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1429">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1429">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1430">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1430">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1431">对序列中的每个元素调用转换函数，并返回可以为 null 的最小的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1431">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1432">与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Double&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Double)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1432">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1433"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29>方法使用 <xref:System.Double> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1433">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1434">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Double>` c # 或 `Nullable(Of Double)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1434">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1435">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1435">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1436">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1436">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1437"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1437"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1438">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1438">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int? Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1439"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1439">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1440">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1440">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1441">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1441">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1442">对序列中的每个元素调用转换函数，并返回可以为 null 的最小的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1442">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1443">与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int32&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int32)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1443">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1444"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29>方法使用 <xref:System.Int32> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1444">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1445">如果提供了一个函数，则可以将此方法应用于任意值序列， `selector` 该函数将源的成员投影为数值类型，具体情况下为 `Nullable<Int32>` c # 或 `Nullable(Of Int32)` Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="4d525-1445">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1446">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1446">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1447">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1447">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1448"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1448"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1449">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1449">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long? Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1450"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1450">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1451">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1451">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1452">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1452">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1453">对序列中的每个元素调用转换函数，并返回可以为 null 的最小的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1453">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1454">与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Int64&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Int64)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1454">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1455"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29>方法使用 <xref:System.Int64> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1455">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1456">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Int64>` c # 或 `Nullable(Of Int64)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1456">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1457">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1457">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1458">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1458">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1459"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1459"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1460">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1460">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float? Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1461"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1461">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1462">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1462">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1463">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1463">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1464">对序列中的每个元素调用转换函数，并返回可以为 null 的最小的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1464">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1465">与序列中的最小值相对应的值，该值的类型在 C# 中为 <c>Nullable&lt;Single&gt;</c>，在 Visual Basic 中为 <c>Nullable(Of Single)</c>。</span><span class="sxs-lookup"><span data-stu-id="4d525-1465">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1466"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1466">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1467">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Single>` c # 或 `Nullable(Of Single)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1467">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1468">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1468">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1469">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1469">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1470"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1470"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1471">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1471">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1472"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1472">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1473">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1473">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1474">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1474">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1475">对序列中的每个元素调用转换函数，并返回最小的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1475">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1476">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1476">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1477"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>方法使用 <xref:System.Single> 的实现 <xref:System.IComparable%601> 来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1477">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1478">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Single> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1478">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="4d525-1479">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1479">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1480">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1480">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1481"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1481"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1482"><paramref name="source" /> 中不包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1482"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1483">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1483">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberSignature Language="C#" Value="public static TResult? Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1484"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1484">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1485"><paramref name="selector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1485">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1486">要确定其最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1486">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1487">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1487">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1488">对序列中的每个元素调用转换函数，并返回最小结果值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1488">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1489">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1489">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1490">如果类型 `TResult` 实现 <xref:System.IComparable%601> ，则此方法将使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1490">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="4d525-1491">否则，如果类型 `TResult` 实现 <xref:System.IComparable> ，则使用该实现来比较值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1491">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="4d525-1492">在 Visual Basic 查询表达式语法中， `Aggregate Into Min()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Min%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1492">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1493">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> 来确定投影值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1493">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1494"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1494"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1495">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1495">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4d525-1496">筛选序列元素所根据的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1496">The type to filter the elements of the sequence on.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1497">要对其元素进行筛选的 <see cref="T:System.Collections.IEnumerable" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1497">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span></span></param>
        <summary><span data-ttu-id="4d525-1498">根据指定类型筛选 <see cref="T:System.Collections.IEnumerable" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1498">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span></span></summary>
        <returns><span data-ttu-id="4d525-1499">一个 包含类型为 <paramref name="TResult" /> 的输入序列中的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1499">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1500">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1500">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1501">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1501">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1502">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1502">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1503"><xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29>方法只返回中 `source` 可强制转换为类型的元素 `TResult` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1503">The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`.</span></span> <span data-ttu-id="4d525-1504">若要改为在元素无法强制转换为类型时接收异常 `TResult` ，请使用 <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1504">To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="4d525-1505">此方法是一些标准查询运算符方法，可应用于具有非参数化类型的集合，例如 <xref:System.Collections.ArrayList> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1505">This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>.</span></span> <span data-ttu-id="4d525-1506">这是因为 <xref:System.Linq.Enumerable.OfType%2A> 扩展了类型 <xref:System.Collections.IEnumerable> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1506">This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>.</span></span> <span data-ttu-id="4d525-1507"><xref:System.Linq.Enumerable.OfType%2A> 只能应用于基于参数化类型的集合，而不能应用于 <xref:System.Collections.Generic.IEnumerable%601> 基于非参数化类型的集合 <xref:System.Collections.IEnumerable> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1507"><xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.</span></span>  
  
 <span data-ttu-id="4d525-1508">通过 <xref:System.Linq.Enumerable.OfType%2A> 将应用到实现的集合 <xref:System.Collections.IEnumerable> ，可以通过使用标准查询运算符来查询集合。</span><span class="sxs-lookup"><span data-stu-id="4d525-1508">By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators.</span></span> <span data-ttu-id="4d525-1509">例如，指定的类型参数 <xref:System.Object> <xref:System.Linq.Enumerable.OfType%2A> 将返回 `IEnumerable<Object>` c # 或 Visual Basic 中类型的对象 `IEnumerable(Of Object)` ，标准查询运算符可以应用于该对象。</span><span class="sxs-lookup"><span data-stu-id="4d525-1509">For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in Visual Basic, to which the standard query operators can be applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1510">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.OfType%2A> 筛选的元素 <xref:System.Collections.IEnumerable> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1510">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet69":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet69":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1511"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1511"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1512">按升序对序列的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1512">Sorts the elements of a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1513"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1513">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-1514"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1514">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1515">一个要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1515">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-1516">用于从元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1516">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="4d525-1517">根据键按升序对序列的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1517">Sorts the elements of a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="4d525-1518">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键对其元素排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1518">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1519">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1519">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1520">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1520">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1521">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1521">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1522">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1522">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-1523">定义了两个方法来扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，该类型是此方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1523">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="4d525-1524">使用这两种方法（即 `ThenBy` 和 `ThenByDescending` ），您可以指定其他排序条件以对序列进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1524">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="4d525-1525">`ThenBy` 和 `ThenByDescending` 还返回 <xref:System.Linq.IOrderedEnumerable%601> ，这意味着对或的任意连续调用 `ThenBy` `ThenByDescending` 都可以进行。</span><span class="sxs-lookup"><span data-stu-id="4d525-1525">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-1526">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1526">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-1527">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1527">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-1528">此方法使用默认比较器对键进行比较 <xref:System.Collections.Generic.Comparer%601.Default%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1528">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="4d525-1529">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1529">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-1530">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1530">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="4d525-1531">在查询表达式语法中， `orderby` (Visual c # ) 或 `Order By` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.OrderBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1531">In query expression syntax, an `orderby` (Visual C#) or `Order By` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1532">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 对序列中的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1532">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]
 [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1533"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1533"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/orderby-clause"><span data-ttu-id="4d525-1534">orderby 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-1534">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/order-by-clause"><span data-ttu-id="4d525-1535">Order By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1535">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1536"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1536">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-1537"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1537">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1538">一个要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1538">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-1539">用于从元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1539">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-1540">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1540">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-1541">使用指定的比较器按升序对序列的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1541">Sorts the elements of a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-1542">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键对其元素排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1542">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1543">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1543">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1544">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1544">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1545">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1545">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1546">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1546">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-1547">定义了两个方法来扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，该类型是此方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1547">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="4d525-1548">使用这两种方法（即 `ThenBy` 和 `ThenByDescending` ），您可以指定其他排序条件以对序列进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1548">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="4d525-1549">`ThenBy` 和 `ThenByDescending` 还返回 <xref:System.Linq.IOrderedEnumerable%601> ，这意味着对或的任意连续调用 `ThenBy` `ThenByDescending` 都可以进行。</span><span class="sxs-lookup"><span data-stu-id="4d525-1549">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-1550">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1550">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-1551">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1551">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-1552">如果 `comparer` 为 `null` ，则使用默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-1552">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="4d525-1553">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1553">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-1554">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1554">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1555"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1555"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1556">按降序对序列的元素排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1556">Sorts the elements of a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1557"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1557">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-1558"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1558">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1559">一个要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1559">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-1560">用于从元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1560">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="4d525-1561">根据键按降序对序列的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1561">Sorts the elements of a sequence in descending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="4d525-1562">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1562">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1563">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1563">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1564">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1564">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1565">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1565">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1566">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1566">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-1567">有关此方法的示例，请参见 <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1567">For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span></span>  
  
 <span data-ttu-id="4d525-1568">定义了两个方法来扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，该类型是此方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1568">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="4d525-1569">使用这两种方法（即 `ThenBy` 和 `ThenByDescending` ），您可以指定其他排序条件以对序列进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1569">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="4d525-1570">`ThenBy` 和 `ThenByDescending` 还返回 <xref:System.Linq.IOrderedEnumerable%601> ，这意味着对或的任意连续调用 `ThenBy` `ThenByDescending` 都可以进行。</span><span class="sxs-lookup"><span data-stu-id="4d525-1570">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-1571">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1571">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-1572">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1572">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-1573">此方法使用默认比较器对键进行比较 <xref:System.Collections.Generic.Comparer%601.Default%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1573">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="4d525-1574">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1574">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-1575">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1575">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="4d525-1576">在查询表达式语法中， `orderby descending` (Visual c # ) 或 `Order By Descending` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.OrderByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1576">In query expression syntax, an `orderby descending` (Visual C#) or `Order By Descending` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1577"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1577"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/orderby-clause"><span data-ttu-id="4d525-1578">orderby 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-1578">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/order-by-clause"><span data-ttu-id="4d525-1579">Order By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1579">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1580"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1580">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-1581"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1581">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1582">一个要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1582">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-1583">用于从元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1583">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-1584">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1584">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-1585">使用指定的比较器按降序对序列的元素排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1585">Sorts the elements of a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-1586">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1586">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1587">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1587">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1588">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1588">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1589">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1589">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1590">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1590">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-1591">定义了两个方法来扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，该类型是此方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1591">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="4d525-1592">使用这两种方法（即 `ThenBy` 和 `ThenByDescending` ），您可以指定其他排序条件以对序列进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1592">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="4d525-1593">`ThenBy` 和 `ThenByDescending` 还返回 <xref:System.Linq.IOrderedEnumerable%601> ，这意味着对或的任意连续调用 `ThenBy` `ThenByDescending` 都可以进行。</span><span class="sxs-lookup"><span data-stu-id="4d525-1593">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-1594">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1594">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-1595">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1595">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-1596">如果 `comparer` 为 `null` ，则使用默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-1596">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="4d525-1597">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1597">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-1598">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1598">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1599">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> 转换函数和自定义比较器按降序对序列的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1599">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]
 [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1600"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1600"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="element" Type="TSource" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1601"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1601">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1602">值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1602">A sequence of values.</span></span></param>
        <param name="element"><span data-ttu-id="4d525-1603">要放置在 <paramref name="source" /> 前面的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1603">The value to prepend to <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="4d525-1604">向序列的开头添加值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1604">Adds a value to the beginning of the sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1605">以 <paramref name="element" /> 开头的新序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1605">A new sequence that begins with <paramref name="element" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[    
          
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4d525-1606">此方法不修改集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1606">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="4d525-1607">相反，它使用新元素创建集合的副本。</span><span class="sxs-lookup"><span data-stu-id="4d525-1607">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="4d525-1608">下面的代码示例演示如何使用在 <xref:System.Linq.Enumerable.Prepend%2A> 序列的开头前面添加一个值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1608">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Prepend%2A> to prepend a value to the beginning of the sequence.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet202":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet202":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1609"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1609"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; seq&lt;int&gt;" Usage="System.Linq.Enumerable.Range (start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="4d525-1610">序列中第一个整数的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1610">The value of the first integer in the sequence.</span></span></param>
        <param name="count"><span data-ttu-id="4d525-1611">要生成的顺序整数的数目。</span><span class="sxs-lookup"><span data-stu-id="4d525-1611">The number of sequential integers to generate.</span></span></param>
        <summary><span data-ttu-id="4d525-1612">生成指定范围内的整数的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1612">Generates a sequence of integral numbers within a specified range.</span></span></summary>
        <returns><span data-ttu-id="4d525-1613">C# 中的 <c>IEnumerable&lt;Int32&gt;</c> 或 Visual Basic 中的 <c>IEnumerable(Of Int32)</c>，其中包含某个范围的顺序整数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1613">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1614">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1614">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1615">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1615">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1616">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1616">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1617">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Range%2A> 生成一个值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1617">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet72":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet72"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4d525-1618"><paramref name="count" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="4d525-1618"><paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="4d525-1619">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-1619">-or-</span></span> 
 <span data-ttu-id="4d525-1620"><paramref name="start" /> + <paramref name="count" /> -1 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1620"><paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Repeat (element, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4d525-1621">要在结果序列中重复的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1621">The type of the value to be repeated in the result sequence.</span></span></typeparam>
        <param name="element"><span data-ttu-id="4d525-1622">要重复的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1622">The value to be repeated.</span></span></param>
        <param name="count"><span data-ttu-id="4d525-1623">在生成序列中重复该值的次数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1623">The number of times to repeat the value in the generated sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-1624">生成包含一个重复值的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1624">Generates a sequence that contains one repeated value.</span></span></summary>
        <returns><span data-ttu-id="4d525-1625">一个包含重复值的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1625">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1626">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1626">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1627">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1627">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1628">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1628">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1629">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Repeat%2A> 生成一个重复值的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1629">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet73":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet73":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4d525-1630"><paramref name="count" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="4d525-1630"><paramref name="count" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1631"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1631">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1632">要反转的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1632">A sequence of values to reverse.</span></span></param>
        <summary><span data-ttu-id="4d525-1633">反转序列中元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1633">Inverts the order of the elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1634">一个序列，其元素以相反顺序对应于输入序列的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1634">A sequence whose elements correspond to those of the input sequence in reverse order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1635">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1635">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1636">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1636">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1637">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1637">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1638">与不同 <xref:System.Linq.Enumerable.OrderBy%2A> 的是，此排序方法不会将实际值视为决定顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1638">Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order.</span></span> <span data-ttu-id="4d525-1639">相反，它只会按基础源生成元素的相反顺序返回它们。</span><span class="sxs-lookup"><span data-stu-id="4d525-1639">Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1640">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Reverse%2A> 反转数组中元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-1640">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet74":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet74":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1641"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1641"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1642">将序列中的每个元素投影到新表单。</span><span class="sxs-lookup"><span data-stu-id="4d525-1642">Projects each element of a sequence into a new form.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1643"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1643">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1644"><paramref name="selector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1644">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1645">一个值序列，要对该序列调用转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1645">A sequence of values to invoke a transform function on.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1646">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1646">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="4d525-1647">通过合并元素的索引，将序列的每个元素投影到新窗体中。</span><span class="sxs-lookup"><span data-stu-id="4d525-1647">Projects each element of a sequence into a new form by incorporating the element's index.</span></span></summary>
        <returns><span data-ttu-id="4d525-1648">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用转换函数得到的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-1648">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1649">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1649">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1650">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1650">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1651">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1651">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1652">`selector`表示要处理的元素的第一个参数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1652">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="4d525-1653">第二个参数，用于 `selector` 表示源序列中该元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1653">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="4d525-1654">例如，如果元素处于已知顺序，并且你想要对特定索引处的元素执行某些操作，则这会很有用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1654">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="4d525-1655">如果要检索一个或多个元素的索引，此方法也会很有用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1655">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
 <span data-ttu-id="4d525-1656">此投影方法要求转换函数 `selector` 为源序列中的每个值生成一个值 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1656">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="4d525-1657">如果 `selector` 返回本身为集合的值，则由使用者手动遍历个子序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1657">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="4d525-1658">在这种情况下，你的查询将返回值的单个合并序列可能更好。</span><span class="sxs-lookup"><span data-stu-id="4d525-1658">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="4d525-1659">若要实现此目的，请使用 <xref:System.Linq.Enumerable.SelectMany%2A> 方法而不是 <xref:System.Linq.Enumerable.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1659">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="4d525-1660">尽管 `SelectMany` 的工作方式类似于，但它的不同之处在于， `Select` 转换函数返回一个集合，然后在 `SelectMany` 返回之前扩展。</span><span class="sxs-lookup"><span data-stu-id="4d525-1660">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1661">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> 来投影值序列并使用每个元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1661">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]
 [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1662"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1662"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1663"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1663">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1664"><paramref name="selector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1664">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1665">一个值序列，要对该序列调用转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1665">A sequence of values to invoke a transform function on.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1666">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1666">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1667">将序列中的每个元素投影到新表单。</span><span class="sxs-lookup"><span data-stu-id="4d525-1667">Projects each element of a sequence into a new form.</span></span></summary>
        <returns><span data-ttu-id="4d525-1668">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用转换函数得到的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-1668">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1669">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1669">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1670">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1670">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1671">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1671">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1672">此投影方法要求转换函数 `selector` 为源序列中的每个值生成一个值 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1672">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="4d525-1673">如果 `selector` 返回本身为集合的值，则由使用者手动遍历个子序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1673">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="4d525-1674">在这种情况下，你的查询将返回值的单个合并序列可能更好。</span><span class="sxs-lookup"><span data-stu-id="4d525-1674">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="4d525-1675">若要实现此目的，请使用 <xref:System.Linq.Enumerable.SelectMany%2A> 方法而不是 <xref:System.Linq.Enumerable.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1675">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="4d525-1676">尽管 `SelectMany` 的工作方式类似于，但它的不同之处在于， `Select` 转换函数返回一个集合，然后在 `SelectMany` 返回之前扩展。</span><span class="sxs-lookup"><span data-stu-id="4d525-1676">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
 <span data-ttu-id="4d525-1677">在查询表达式语法中， `select` (Visual c # ) 或 `Select` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1677">In query expression syntax, a `select` (Visual C#) or `Select` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1678">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 来投影值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1678">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]
 [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1679"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1679"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/select-clause"><span data-ttu-id="4d525-1680">select 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-1680">select clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/select-clause"><span data-ttu-id="4d525-1681">Select 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1681">Select Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1682">将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1682">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1683"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1683">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1684"><paramref name="selector" /> 返回的序列元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1684">The type of the elements of the sequence returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1685">一个要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1685">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1686">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1686">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-1687">将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1687">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1688">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对输入序列的每个元素调用一对多转换函数得到的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-1688">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1689">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1689">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1690">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1690">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1691">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1691">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1692"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>方法枚举输入序列，使用转换函数将每个元素映射到 <xref:System.Collections.Generic.IEnumerable%601> ，然后枚举并生成每个此类对象的元素 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1692">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="4d525-1693">也就是说，将调用的每个元素， `source` `selector` 并返回一个值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1693">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="4d525-1694"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 然后，将这一二维集合合并为一维 <xref:System.Collections.Generic.IEnumerable%601> 并返回它。</span><span class="sxs-lookup"><span data-stu-id="4d525-1694"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="4d525-1695">例如，如果查询使用 <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 来获取 `Order` 数据库中每个客户的类型)  (，则结果为 `IEnumerable<Order>` c # 中的类型或 `IEnumerable(Of Order)` 在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="4d525-1695">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="4d525-1696">如果查询使用 <xref:System.Linq.Enumerable.Select%2A> 来获取订单，则不会合并订单集合的集合，结果类型为 `IEnumerable<List<Order>>` c # 或 `IEnumerable(Of List(Of Order))` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1696">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1697">在查询表达式语法中，每个 `from` 子句都 (Visual c # ) 或 `From` 子句 (在第一条子句转换为对的调用后) Visual Basic <xref:System.Linq.Enumerable.SelectMany%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1697">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1698">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 对数组执行一对多投影。</span><span class="sxs-lookup"><span data-stu-id="4d525-1698">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]
 [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1699"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1699"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/from-clause"><span data-ttu-id="4d525-1700">from 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-1700">from clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/from-clause"><span data-ttu-id="4d525-1701">From 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1701">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1702"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1702">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1703"><paramref name="selector" /> 返回的序列元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1703">The type of the elements of the sequence returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1704">一个要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1704">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-1705">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1705">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="4d525-1706">将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1706">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span></span> <span data-ttu-id="4d525-1707">每个源元素的索引用于该元素的投影表。</span><span class="sxs-lookup"><span data-stu-id="4d525-1707">The index of each source element is used in the projected form of that element.</span></span></summary>
        <returns><span data-ttu-id="4d525-1708">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对输入序列的每个元素调用一对多转换函数得到的结果。</span><span class="sxs-lookup"><span data-stu-id="4d525-1708">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1709">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1709">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1710">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1710">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1711">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1711">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1712"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>方法枚举输入序列，使用转换函数将每个元素映射到 <xref:System.Collections.Generic.IEnumerable%601> ，然后枚举并生成每个此类对象的元素 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1712">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="4d525-1713">也就是说，将调用的每个元素， `source` `selector` 并返回一个值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1713">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="4d525-1714"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 然后，将这一二维集合合并为一维 <xref:System.Collections.Generic.IEnumerable%601> 并返回它。</span><span class="sxs-lookup"><span data-stu-id="4d525-1714"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="4d525-1715">例如，如果查询使用 <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 来获取 `Order` 数据库中每个客户的类型)  (，则结果为 `IEnumerable<Order>` c # 中的类型或 `IEnumerable(Of Order)` 在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="4d525-1715">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="4d525-1716">如果查询使用 <xref:System.Linq.Enumerable.Select%2A> 来获取订单，则不会合并订单集合的集合，结果类型为 `IEnumerable<List<Order>>` c # 或 `IEnumerable(Of List(Of Order))` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-1716">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1717">`selector`表示要处理的元素的第一个参数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1717">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="4d525-1718">第二个参数，用于 `selector` 表示源序列中该元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1718">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="4d525-1719">例如，如果元素处于已知顺序，并且你想要对特定索引处的元素执行某些操作，则这会很有用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1719">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="4d525-1720">如果要检索一个或多个元素的索引，此方法也会很有用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1720">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1721">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 对数组执行一对多投影，并使用每个外部元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1721">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]
 [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1722"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1722"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1723"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1723">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="4d525-1724"><paramref name="collectionSelector" /> 收集的中间元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1724">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1725">结果序列的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1725">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1726">一个要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1726">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="4d525-1727">应用于输入序列的每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1727">A transform function to apply to each element of the input sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-1728">应用于中间序列的每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1728">A transform function to apply to each element of the intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-1729">将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1729">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span></span></summary>
        <returns><span data-ttu-id="4d525-1730">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是通过以下方法得到的：对 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将这些序列元素中的每一个元素及其相应的源元素映射到一个结果元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1730">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1731">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1731">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1732">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1732">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1733">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1733">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1734"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>当必须将中的元素保留 `source` 在调用后发生的查询逻辑范围中时，方法非常有用 <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1734">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="4d525-1735">有关代码示例，请参见“示例”部分。</span><span class="sxs-lookup"><span data-stu-id="4d525-1735">See the Example section for a code example.</span></span> <span data-ttu-id="4d525-1736">如果类型的对象与类型的对象之间存在双向关系 `TSource` `TCollection` ，即，如果类型的对象 `TCollection` 提供了属性来检索 `TSource` 生成它的对象，则不需要的此重载 <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1736">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="4d525-1737">相反，你可以 <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 通过对象使用并向后导航到 `TSource` 对象 `TCollection` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1737">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 <span data-ttu-id="4d525-1738">在查询表达式语法中，每个 `from` 子句都 (Visual c # ) 或 `From` 子句 (在第一条子句转换为对的调用后) Visual Basic <xref:System.Linq.Enumerable.SelectMany%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1738">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1739">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> 对数组执行一对多投影，并使用结果选择器函数将源序列中的每个对应元素保留在对的最终调用范围内 `Select` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1739">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]
 [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1740"><paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1740"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/from-clause"><span data-ttu-id="4d525-1741">from 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-1741">from clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/from-clause"><span data-ttu-id="4d525-1742">From 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1742">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1743"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1743">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="4d525-1744"><paramref name="collectionSelector" /> 收集的中间元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1744">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-1745">结果序列的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1745">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1746">一个要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1746">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="4d525-1747">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1747">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-1748">应用于中间序列的每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1748">A transform function to apply to each element of the intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-1749">将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1749">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span></span> <span data-ttu-id="4d525-1750">每个源元素的索引用于该元素的中间投影表。</span><span class="sxs-lookup"><span data-stu-id="4d525-1750">The index of each source element is used in the intermediate projected form of that element.</span></span></summary>
        <returns><span data-ttu-id="4d525-1751">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是通过以下方法得到的：对 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将这些序列元素中的每一个元素及其相应的源元素映射到一个结果元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1751">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1752">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1752">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1753">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1753">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1754">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1754">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1755"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>当必须将中的元素保留 `source` 在调用后发生的查询逻辑范围中时，方法非常有用 <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1755">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="4d525-1756">有关代码示例，请参见“示例”部分。</span><span class="sxs-lookup"><span data-stu-id="4d525-1756">See the Example section for a code example.</span></span> <span data-ttu-id="4d525-1757">如果类型的对象与类型的对象之间存在双向关系 `TSource` `TCollection` ，即，如果类型的对象 `TCollection` 提供了属性来检索 `TSource` 生成它的对象，则不需要的此重载 <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1757">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="4d525-1758">相反，你可以 <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 通过对象使用并向后导航到 `TSource` 对象 `TCollection` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1758">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1759"><paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1759"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1760">根据相等比较器确定两个序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="4d525-1760">Determines whether two sequences are equal according to an equality comparer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1761">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1761">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-1762">一个用于比较 <paramref name="second" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1762">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-1763">要与第一个序列进行比较的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1763">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span></span></param>
        <summary><span data-ttu-id="4d525-1764">通过使用相应类型的默认相等比较器对序列的元素进行比较，以确定两个序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="4d525-1764">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span></span></summary>
        <returns><span data-ttu-id="4d525-1765">如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1765"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1766">`SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`方法并行枚举两个源序列，并通过使用的默认相等比较器比较对应的元素 `TSource` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1766">The `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span> 

 <span data-ttu-id="4d525-1767">默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 用于比较类型的值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1767">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="4d525-1768">若要比较自定义数据类型，需要重写 <xref:System.Object.Equals%2A> 和 <xref:System.Object.GetHashCode%2A> 方法，还可以选择实现 <xref:System.IEquatable%601> 自定义类型中的泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-1768">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="4d525-1769">有关更多信息，请参见 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4d525-1769">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
## Examples  
 <span data-ttu-id="4d525-1770">下面的代码示例演示如何使用 `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` 确定两个序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="4d525-1770">The following code examples demonstrate how to use `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to determine whether two sequences are equal.</span></span> <span data-ttu-id="4d525-1771">在前两个示例中，方法确定比较序列是否包含对同一对象的引用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1771">In the first two examples, the method determines whether the compared sequences contain references to the same objects.</span></span> <span data-ttu-id="4d525-1772">在第三个和第四个示例中，方法比较序列内对象的实际数据。</span><span class="sxs-lookup"><span data-stu-id="4d525-1772">In the third and fourth examples, the method compares the actual data of the objects within the sequences.</span></span>  
  
 <span data-ttu-id="4d525-1773">在此示例中，序列是相等的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1773">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]
 [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  
  
 <span data-ttu-id="4d525-1774">下面的代码示例比较两个不相等的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1774">The following code example compares two sequences that are not equal.</span></span> <span data-ttu-id="4d525-1775">请注意，序列包含相同的数据，但由于它们包含的对象具有不同的引用，因此序列不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="4d525-1775">Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]
 [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  
  
 <span data-ttu-id="4d525-1776">如果要比较序列中对象的实际数据，而不只是比较它们的引用，则必须 <xref:System.Collections.Generic.IEqualityComparer%601> 在类中实现泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-1776">If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class.</span></span> <span data-ttu-id="4d525-1777">下面的代码示例演示如何在帮助器类中实现此接口并提供 <xref:System.Object.GetHashCode%2A> 和 <xref:System.Object.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-1777">The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="4d525-1778">实现此接口后，可以 `ProductA` 在方法中使用对象序列 `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-1778">After you implement this interface, you can use sequences of `ProductA` objects in the `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]
 [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1779"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1779"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second, comparer)" />
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1780">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1780">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-1781">一个用于比较 <paramref name="second" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1781">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-1782">要与第一个序列进行比较的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1782">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-1783">用于比较元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1783">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span></span></param>
        <summary><span data-ttu-id="4d525-1784">通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 来比较两个序列的元素，以确定这两个序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="4d525-1784">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-1785">如果根据 <paramref name="comparer" />，两个源序列的长度相等，且其相应元素相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1785"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1786"><xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法并行枚举两个源序列，并使用指定的比较相应的元素 <xref:System.Collections.Generic.IEqualityComparer%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1786">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>.</span></span> <span data-ttu-id="4d525-1787">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 来比较元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1787">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1788">下面的示例演示如何实现可在方法中使用的相等比较器 <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1788">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="4d525-1789">实现此比较器后，可以 `Product` 在方法中使用对象序列 <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-1789">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]
 [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1790"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1790"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1791">返回序列中的单个特定元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1791">Returns a single, specific element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1792"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1792">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1793">要返回其单个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1793">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="4d525-1794">返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1794">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1795">输入序列的单个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1795">The single element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1796"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>如果输入序列为空，则该方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1796">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty.</span></span> <span data-ttu-id="4d525-1797">若要改为 `null` 在输入序列为空时返回，请使用 <xref:System.Linq.Enumerable.SingleOrDefault%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1797">To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1798">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 选择数组的唯一元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1798">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet79":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet79"::: 
  
 <span data-ttu-id="4d525-1799">下面的代码示例演示了 <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 在序列不只包含一个元素时引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1799">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet80":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet80"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1800"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1800"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1801">输入序列包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1801">The input sequence contains more than one element.</span></span>  
  
 <span data-ttu-id="4d525-1802">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-1802">-or-</span></span>  
  
 <span data-ttu-id="4d525-1803">输入序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-1803">The input sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1804"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1804">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1805">要从中返回单个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1805">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-1806">用于测试元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1806">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-1807">返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1807">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span></span></summary>
        <returns><span data-ttu-id="4d525-1808">输入序列中满足条件的单个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1808">The single element of the input sequence that satisfies a condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1809"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>如果输入序列不包含任何匹配元素，则该方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1809">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element.</span></span> <span data-ttu-id="4d525-1810">`null`如果未找到匹配的元素，则改为返回，请使用 <xref:System.Linq.Enumerable.SingleOrDefault%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1810">To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1811">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 来选择满足某个条件的数组的唯一元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1811">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet81":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet81":::

 <span data-ttu-id="4d525-1812">下面的代码示例演示 <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 当序列不只包含一个满足条件的元素时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1812">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
 
 [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]
 [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]
 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1813"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1813"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1814">元素均不满足 <paramref name="predicate" /> 中的条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-1814">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="4d525-1815">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-1815">-or-</span></span> 
<span data-ttu-id="4d525-1816">多个元素满足 <paramref name="predicate" /> 中的条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-1816">More than one element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="4d525-1817">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-1817">-or-</span></span> 
<span data-ttu-id="4d525-1818">源序列为空。</span><span class="sxs-lookup"><span data-stu-id="4d525-1818">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1819">返回序列中的单个特定元素；如果未找到该元素，则返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1819">Returns a single, specific element of a sequence, or a default value if that element is not found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault source" />
      <MemberSignature Language="C#" Value="public static TSource? SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1820"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1820">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1821">要返回其单个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1821">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="4d525-1822">返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1822">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-1823">输入序列中的单个元素；如果序列不包含任何元素，则为 <see langword="default" />(<paramref name="TSource" />)。</span><span class="sxs-lookup"><span data-stu-id="4d525-1823">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1824">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1824">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="4d525-1825"><xref:System.Linq.Enumerable.SingleOrDefault%2A>方法不提供指定默认值的方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-1825">The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="4d525-1826">如果要指定之外的默认值 `default(TSource)` ，请使用 "示例" <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 部分中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-1826">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1827">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 选择数组的唯一元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1827">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet83":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet83":::
  
 <span data-ttu-id="4d525-1828">下面的代码示例演示 <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 在序列为空时返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1828">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet84":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet84"::: 
  
 <span data-ttu-id="4d525-1829">有时， `default(TSource)` 如果集合不包含任何元素，则的值将不是要使用的默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1829">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="4d525-1830">您可以使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 方法来指定要在集合为空时使用的默认值，而不是检查不需要的默认值的结果，并在必要时对其进行更改。</span><span class="sxs-lookup"><span data-stu-id="4d525-1830">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="4d525-1831">然后，调用 <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 以获取元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1831">Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="4d525-1832">下面的代码示例使用这两种方法来获取默认值1（如果页码的集合为空）。</span><span class="sxs-lookup"><span data-stu-id="4d525-1832">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="4d525-1833">由于整数的默认值为0（这通常不是有效的页码），因此必须将默认值指定为1。</span><span class="sxs-lookup"><span data-stu-id="4d525-1833">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="4d525-1834">查询执行完毕后，将检查第一个结果变量是否存在不需要的默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1834">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="4d525-1835">第二个结果变量通过使用 <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> 来指定默认值1。</span><span class="sxs-lookup"><span data-stu-id="4d525-1835">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet128":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet128":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1836"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1836"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1837">输入序列包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1837">The input sequence contains more than one element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault (source, predicate)" />
      <MemberSignature Language="C#" Value="public static TSource? SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1838"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1838">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1839">要从中返回单个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1839">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-1840">用于测试元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1840">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-1841">返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d525-1841">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span></span></summary>
        <returns><span data-ttu-id="4d525-1842">输入序列中满足条件的单个元素；如果未找到这类元素，则为 <see langword="default" /> (<paramref name="TSource" />)。</span><span class="sxs-lookup"><span data-stu-id="4d525-1842">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1843">引用类型和可以为 null 的类型的默认值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1843">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1844">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 来选择满足某个条件的数组的唯一元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1844">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet85":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet85":::
  
 <span data-ttu-id="4d525-1845">下面的代码示例演示 <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 当序列不包含满足条件的元素时，返回默认值。</span><span class="sxs-lookup"><span data-stu-id="4d525-1845">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence contains no elements that satisfy the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]
 [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1846"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1846"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d525-1847">多个元素满足 <paramref name="predicate" /> 中的条件。</span><span class="sxs-lookup"><span data-stu-id="4d525-1847">More than one element satisfies the condition in <paramref name="predicate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1848"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1848">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1849">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1849">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="4d525-1850">返回剩余元素前要跳过的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-1850">The number of elements to skip before returning the remaining elements.</span></span></param>
        <summary><span data-ttu-id="4d525-1851">跳过序列中指定数量的元素，然后返回剩余的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1851">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="4d525-1852">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中指定索引后出现的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1852">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1853">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1853">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1854">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1854">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1855">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1855">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1856">如果 `source` 包含 `count` 的元素少于个， <xref:System.Collections.Generic.IEnumerable%601> 则返回空。</span><span class="sxs-lookup"><span data-stu-id="4d525-1856">If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span> <span data-ttu-id="4d525-1857">如果 `count` 小于或等于零，则会生成的所有元素 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1857">If `count` is less than or equal to zero, all elements of `source` are yielded.</span></span>  
  
 <span data-ttu-id="4d525-1858"><xref:System.Linq.Enumerable.Take%2A>和 <xref:System.Linq.Enumerable.Skip%2A> 方法是函数补充。</span><span class="sxs-lookup"><span data-stu-id="4d525-1858">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="4d525-1859">给定一个序列 `coll` 和一个整数 `n` ，串联的结果， `coll.Take(n)` 并 `coll.Skip(n)` 生成与相同的序列 `coll` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1859">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="4d525-1860">在 Visual Basic 查询表达式语法中， `Skip` 子句转换为对的调用 <xref:System.Linq.Enumerable.Skip%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1860">In Visual Basic query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1861">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Skip%2A> 跳过已排序数组中指定数目的元素，并返回剩余的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1861">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet87":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet87":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1862"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1862"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/skip-clause"><span data-ttu-id="4d525-1863">Skip 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1863">Skip Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1864">可枚举集合中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1864">The type of the elements in the enumerable collection.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1865">可枚举的集合实例。</span><span class="sxs-lookup"><span data-stu-id="4d525-1865">An enumerable collection instance.</span></span></param>
        <param name="count"><span data-ttu-id="4d525-1866">从集合末尾起省略的元素数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1866">The number of elements to omit from the end of the collection.</span></span></param>
        <summary><span data-ttu-id="4d525-1867">返回一个新的可枚举集合，它包含 <paramref name="source" /> 中的元素，但省略了源集合中的 <paramref name="count" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1867">Returns a new enumerable collection that contains the elements from <paramref name="source" /> with the last <paramref name="count" /> elements of the source collection omitted.</span></span></summary>
        <returns><span data-ttu-id="4d525-1868">一个新的可枚举集合，它包含 <paramref name="source" /> 中的元素，但要减去从集合末尾算起的 <paramref name="count" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1868">A new enumerable collection that contains the elements from <paramref name="source" /> minus <paramref name="count" /> elements from the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="4d525-1869">如果不是 `count` 正数，则此方法返回可枚举集合的相同副本 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1869">If `count` is not a positive number, this method returns an identical copy of the `source` enumerable collection.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1870"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1870"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1871">如果指定的条件为 true，则跳过序列中的元素，然后返回剩余的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1871">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1872"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1872">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1873">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1873">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-1874">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-1874">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-1875">如果指定的条件为 true，则跳过序列中的元素，然后返回剩余的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1875">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="4d525-1876">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中的元素，该输入序列从线性系列中没有通过 <paramref name="predicate" /> 指定测试的第一个元素开始。</span><span class="sxs-lookup"><span data-stu-id="4d525-1876">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1877"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1877">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1878">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1878">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1879">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1879">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1880">此方法使用测试的每个元素 `source` `predicate` ，并在结果为时跳过元素 `true` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1880">This method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="4d525-1881">谓词函数 `false` 为元素返回后，将生成该元素和中的其余元素， `source` 并且不会再对调用 `predicate` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1881">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="4d525-1882">如果 `predicate` `true` 为序列中的所有元素返回，则 <xref:System.Collections.Generic.IEnumerable%601> 返回空。</span><span class="sxs-lookup"><span data-stu-id="4d525-1882">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="4d525-1883"><xref:System.Linq.Enumerable.TakeWhile%2A>和 <xref:System.Linq.Enumerable.SkipWhile%2A> 方法是函数补充。</span><span class="sxs-lookup"><span data-stu-id="4d525-1883">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="4d525-1884">给定一个序列 `coll` 和一个纯函数 `p` ，串联的结果， `coll.TakeWhile(p)` 并 `coll.SkipWhile(p)` 生成与相同的序列 `coll` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1884">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="4d525-1885">在 Visual Basic 查询表达式语法中， `Skip While` 子句转换为对的调用 <xref:System.Linq.Enumerable.SkipWhile%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1885">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1886">下面的代码示例演示了在 <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 条件为 true 的情况下，如何使用跳过数组的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1886">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet88":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet88":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1887"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1887"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/skip-while-clause"><span data-ttu-id="4d525-1888">Skip While 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1888">Skip While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-1889"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-1889">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-1890">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1890">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-1891">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1891">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="4d525-1892">如果指定的条件为 true，则跳过序列中的元素，然后返回剩余的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1892">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span> <span data-ttu-id="4d525-1893">将在谓词函数的逻辑中使用元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-1893">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="4d525-1894">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中的元素，该输入序列从线性系列中没有通过 <paramref name="predicate" /> 指定测试的第一个元素开始。</span><span class="sxs-lookup"><span data-stu-id="4d525-1894">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1895">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-1895">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-1896">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-1896">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-1897">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-1897">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-1898"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>方法使用测试的每个元素 `source` `predicate` ，并在结果为时跳过元素 `true` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1898">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="4d525-1899">谓词函数 `false` 为元素返回后，将生成该元素和中的其余元素， `source` 并且不会再对调用 `predicate` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1899">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="4d525-1900">如果 `predicate` `true` 为序列中的所有元素返回，则 <xref:System.Collections.Generic.IEnumerable%601> 返回空。</span><span class="sxs-lookup"><span data-stu-id="4d525-1900">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="4d525-1901">的第一个参数 `predicate` 表示要测试的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-1901">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="4d525-1902">第二个参数表示中元素的从零开始的索引 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1902">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="4d525-1903"><xref:System.Linq.Enumerable.TakeWhile%2A>和 <xref:System.Linq.Enumerable.SkipWhile%2A> 方法是函数补充。</span><span class="sxs-lookup"><span data-stu-id="4d525-1903">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="4d525-1904">给定一个序列 `coll` 和一个纯函数 `p` ，串联的结果， `coll.TakeWhile(p)` 并 `coll.SkipWhile(p)` 生成与相同的序列 `coll` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1904">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="4d525-1905">在 Visual Basic 查询表达式语法中， `Skip While` 子句转换为对的调用 <xref:System.Linq.Enumerable.SkipWhile%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1905">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1906">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> 来跳过数组中的元素，前提是该元素的索引为 true。</span><span class="sxs-lookup"><span data-stu-id="4d525-1906">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet89":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet89":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1907"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1907"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/skip-while-clause"><span data-ttu-id="4d525-1908">Skip While 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1908">Skip While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-1909">计算数值序列的和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1909">Computes the sum of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1910">要计算其总和的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1910">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1911">计算 <see cref="T:System.Decimal" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1911">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1912">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1912">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1913"><xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>如果 `source` 不包含任何元素，则该方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1913">The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1914">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1914">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1915">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1915">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1916"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1916"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1917">和大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1917">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1918">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1918">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1919">要计算其总和的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1919">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1920">计算 <see cref="T:System.Double" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1920">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1921">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1921">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1922">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1922">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1923">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1923">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1924">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1924">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1925"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1925"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1926">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1926">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1927">要计算其总和的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1927">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1928">计算 <see cref="T:System.Int32" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1928">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1929">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1929">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1930">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1930">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1931">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1931">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1932">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1932">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1933"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1933"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1934">和大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1934">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1935">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1935">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1936">要计算其总和的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1936">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1937">计算 <see cref="T:System.Int64" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1937">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1938">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1938">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1939">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1939">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1940">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1940">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1941">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1941">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1942"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1942"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1943">和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1943">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1944">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1944">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal? Sum (this System.Collections.Generic.IEnumerable&lt;decimal?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1945">要计算其总和的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1945">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1946">计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1946">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1947">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1947">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1948">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1948">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1949">结果不包含的值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1949">The result doesnot include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-1950">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1950">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1951">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1951">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1952"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1952"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1953">和大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1953">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1954">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1954">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double? Sum (this System.Collections.Generic.IEnumerable&lt;double?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1955">要计算其总和的可以为 null 的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1955">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1956">计算可以为 null 的 <see cref="T:System.Double" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1956">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1957">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1957">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1958">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1958">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1959">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1959">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-1960">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1960">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1961">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1961">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1962"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1962"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1963">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1963">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int? Sum (this System.Collections.Generic.IEnumerable&lt;int?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1964">要计算其总和的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1964">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1965">计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1965">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1966">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1966">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1967">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1967">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1968">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1968">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-1969">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1969">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1970">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1970">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1971"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1971"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1972">和大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1972">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1973">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1973">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long? Sum (this System.Collections.Generic.IEnumerable&lt;long?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1974">要计算其总和的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1974">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1975">计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1975">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1976">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1976">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1977">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1977">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1978">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1978">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-1979">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1979">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1980">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1980">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1981"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1981"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-1982">和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1982">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1983">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1983">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float? Sum (this System.Collections.Generic.IEnumerable&lt;float?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1984">要计算其总和的可以为 null 的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1984">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1985">计算可以为 null 的 <see cref="T:System.Single" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1985">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1986">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1986">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1987">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1987">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1988">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1988">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-1989">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1989">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1990">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1990">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1991"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1991"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-1992">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-1992">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d525-1993">要计算其总和的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-1993">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="4d525-1994">计算 <see cref="T:System.Single" /> 值序列的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1994">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="4d525-1995">序列中的值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1995">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-1996">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-1996">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-1997">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-1997">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-1998">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> 对序列的值求和。</span><span class="sxs-lookup"><span data-stu-id="4d525-1998">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-1999"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-1999"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2000">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2000">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2001"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2001">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2002">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2002">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2003">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2003">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2004">计算 <see cref="T:System.Decimal" /> 值序列的总和，这些值可通过对输入序列中的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2004">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2005">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2005">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2006">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2006">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2007">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Decimal> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2007">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="4d525-2008">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2008">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2009">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2009">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2010"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2010"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-2011">和大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2011">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2012">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2012">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2013"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2013">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2014">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2014">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2015">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2015">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2016">计算 <see cref="T:System.Double" /> 值序列的总和，这些值可通过对输入序列中的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2016">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2017">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2017">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2018">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2018">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2019">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2019">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="4d525-2020">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2020">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2021">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2021">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2022"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2022"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2023">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2023">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2024"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2024">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2025">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2025">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2026">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2026">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2027">计算 <see cref="T:System.Int32" /> 值序列的总和，这些值可通过对输入序列中的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2027">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2028">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2028">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2029">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2029">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2030">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Int32> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2030">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="4d525-2031">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2031">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2032">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2032">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2033"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2033"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-2034">和大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2034">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2035">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2035">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2036"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2036">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2037">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2037">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2038">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2038">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2039">计算 <see cref="T:System.Int64" /> 值序列的总和，这些值可通过对输入序列中的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2039">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2040">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2040">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2041">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2041">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2042">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Int64> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2042">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="4d525-2043">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2043">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2044">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2044">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2045"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2045"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-2046">和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2046">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2047">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2047">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal? Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2048"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2048">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2049">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2049">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2050">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2050">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2051">计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的总和，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2051">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2052">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2052">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2053">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2053">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2054">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2054">The result does not included values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-2055">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Decimal>` c # 或 `Nullable(Of Decimal)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-2055">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2056">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2056">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2057">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2057">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2058"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2058"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-2059">和大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2059">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2060">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2060">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double? Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2061"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2061">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2062">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2062">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2063">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2063">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2064">计算可以为 null 的 <see cref="T:System.Double" /> 值序列的总和，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2064">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2065">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2065">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2066">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2066">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2067">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2067">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-2068">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Double>` c # 或 `Nullable(Of Double)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-2068">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2069">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2069">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2070">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2070">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2071"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2071"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2072">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2072">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int? Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2073"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2073">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2074">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2074">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2075">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2075">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2076">计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的总和，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2076">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2077">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2077">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2078">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2078">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2079">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2079">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-2080">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Int32>` c # 或 `Nullable(Of Int32)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-2080">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2081">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2081">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2082">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2082">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2083"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2083"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-2084">和大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2084">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2085">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2085">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long? Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2086"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2086">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2087">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2087">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2088">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2088">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2089">计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的总和，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2089">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2090">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2090">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2091">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2091">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2092">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2092">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-2093">如果提供了一个函数，则可以将此方法应用于任意值序列，以将的 `selector` 成员投影 `source` 到一个数值类型中，具体来说，可以是 `Nullable<Int64>` c # 或 `Nullable(Of Int64)` Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4d525-2093">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic</span></span>  
  
 <span data-ttu-id="4d525-2094">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2094">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2095">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2095">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2096"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2096"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4d525-2097">和大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2097">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2098">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2098">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float? Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float?&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2099"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2099">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2100">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2100">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2101">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2101">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2102">计算可以为 null 的 <see cref="T:System.Single" /> 值序列的总和，这些值可通过对输入序列的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2102">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2103">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2103">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2104">如果 `source` 不包含任何元素，则此方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2104">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2105">结果不包含的值 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2105">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="4d525-2106">如果提供了一个函数，则可以将此方法应用于任意值序列，该函数将的 `selector` 成员投影 `source` 到一个数值类型中，具体而言，具体为 `Nullable<Single>` c # 或 `Nullable(Of Single)` Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="4d525-2106">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2107">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2107">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2108">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2108">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2109"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2109"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2110">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2110">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2111"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2111">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2112">用于计算总和的值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2112">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="4d525-2113">应用于每个元素的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2113">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2114">计算 <see cref="T:System.Single" /> 值序列的总和，这些值可通过对输入序列中的每个元素调用转换函数获得。</span><span class="sxs-lookup"><span data-stu-id="4d525-2114">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2115">投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2115">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2116"><xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>如果 `source` 不包含任何元素，则该方法返回零。</span><span class="sxs-lookup"><span data-stu-id="4d525-2116">The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="4d525-2117">如果您提供了一个函数，则可以将此方法应用于任意值序列，这一序列将 `selector` 成员投影 `source` 为数值类型 <xref:System.Single> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2117">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="4d525-2118">在 Visual Basic 查询表达式语法中， `Aggregate Into Sum()` 子句转换为对的调用 <xref:System.Linq.Enumerable.Sum%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2118">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2119">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> 来计算序列的投影值的总和。</span><span class="sxs-lookup"><span data-stu-id="4d525-2119">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2120"><paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2120"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/aggregate-clause"><span data-ttu-id="4d525-2121">Aggregate 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2121">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2122"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2122">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2123">要从其返回元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2123">The sequence to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="4d525-2124">要返回的元素数量。</span><span class="sxs-lookup"><span data-stu-id="4d525-2124">The number of elements to return.</span></span></param>
        <summary><span data-ttu-id="4d525-2125">从序列的开头返回指定数量的相邻元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2125">Returns a specified number of contiguous elements from the start of a sequence.</span></span></summary>
        <returns><span data-ttu-id="4d525-2126">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列开头的指定数量的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2126">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2127">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2127">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2128">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2128">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2129">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2129">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2130"><xref:System.Linq.Enumerable.Take%2A> 枚举 `source` 并生成元素，直到 `count` 元素已生成或 `source` 不包含其他元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2130"><xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements.</span></span> <span data-ttu-id="4d525-2131">如果 `count` 超过中的元素数 `source` ，则返回的所有元素 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2131">If `count` exceeds the number of elements in `source`, all elements of `source` are returned.</span></span>  
  
 <span data-ttu-id="4d525-2132">如果 `count` 小于或等于零， `source` 则不会枚举，并 <xref:System.Collections.Generic.IEnumerable%601> 返回空。</span><span class="sxs-lookup"><span data-stu-id="4d525-2132">If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="4d525-2133"><xref:System.Linq.Enumerable.Take%2A>和 <xref:System.Linq.Enumerable.Skip%2A> 方法是函数补充。</span><span class="sxs-lookup"><span data-stu-id="4d525-2133">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="4d525-2134">给定一个序列 `coll` 和一个整数 `n` ，串联的结果， `coll.Take(n)` 并 `coll.Skip(n)` 生成与相同的序列 `coll` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2134">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="4d525-2135">在 Visual Basic 查询表达式语法中， `Take` 子句转换为对的调用 <xref:System.Linq.Enumerable.Take%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2135">In Visual Basic query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2136">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Take%2A> 从序列的开头返回元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2136">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet99":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet99":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2137"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2137"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/take-clause"><span data-ttu-id="4d525-2138">Take 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2138">Take Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2139">可枚举集合中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2139">The type of the elements in the enumerable collection.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2140">可枚举的集合实例。</span><span class="sxs-lookup"><span data-stu-id="4d525-2140">An enumerable collection instance.</span></span></param>
        <param name="count"><span data-ttu-id="4d525-2141">从集合末尾算起获取的元素数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2141">The number of elements to take from the end of the collection.</span></span></param>
        <summary><span data-ttu-id="4d525-2142">返回一个新的可枚举集合，它包含 <paramref name="count" /> 中的最后 <paramref name="source" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2142">Returns a new enumerable collection that contains the last <paramref name="count" /> elements from <paramref name="source" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-2143">一个新的可枚举集合，它包含 <paramref name="count" /> 中的最后 <paramref name="source" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2143">A new enumerable collection that contains the last <paramref name="count" /> elements from <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="4d525-2144">如果不是 `count` 正数，则此方法返回一个空的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="4d525-2144">If `count` is not a positive number, this method returns an empty enumerable collection.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2145"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2145"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-2146">如果指定的条件为 true，则返回序列中的元素，然后跳过剩余的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2146">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2147"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2147">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2148">要从其返回元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2148">A sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-2149">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2149">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-2150">只要指定的条件为 true，就会返回序列的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2150">Returns elements from a sequence as long as a specified condition is true.</span></span></summary>
        <returns><span data-ttu-id="4d525-2151">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中出现在测试不再能够通过的元素之前的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2152">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2152">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2153">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2153">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2154">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2154">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2155"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法使用测试的每个元素 `source` `predicate` ，并在结果为时生成元素 `true` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2155">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="4d525-2156">当谓词函数 `false` 为元素返回或 `source` 不包含其他元素时，枚举停止。</span><span class="sxs-lookup"><span data-stu-id="4d525-2156">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="4d525-2157"><xref:System.Linq.Enumerable.TakeWhile%2A>和 <xref:System.Linq.Enumerable.SkipWhile%2A> 方法是函数补充。</span><span class="sxs-lookup"><span data-stu-id="4d525-2157">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="4d525-2158">给定一个序列 `coll` 和一个纯函数 `p` ，串联的结果， `coll.TakeWhile(p)` 并 `coll.SkipWhile(p)` 生成与相同的序列 `coll` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2158">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="4d525-2159">在 Visual Basic 查询表达式语法中， `Take While` 子句转换为对的调用 <xref:System.Linq.Enumerable.TakeWhile%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2159">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2160">下面的代码示例演示 <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 当条件为 true 时，如何使用从序列的开头返回元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2160">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet100":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet100":::
     
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2161"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2161"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/take-while-clause"><span data-ttu-id="4d525-2162">Take While 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2162">Take While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2163"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2163">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2164">要从其返回元素的序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2164">The sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-2165">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-2165">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="4d525-2166">只要指定的条件为 true，就会返回序列的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2166">Returns elements from a sequence as long as a specified condition is true.</span></span> <span data-ttu-id="4d525-2167">将在谓词函数的逻辑中使用元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-2167">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="4d525-2168">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中出现在测试不再能够通过的元素之前的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2168">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2169">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2169">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2170">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2170">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2171">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2171">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2172"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>方法使用测试的每个元素 `source` `predicate` ，并在结果为时生成元素 `true` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2172">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="4d525-2173">当谓词函数 `false` 为元素返回或 `source` 不包含其他元素时，枚举停止。</span><span class="sxs-lookup"><span data-stu-id="4d525-2173">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="4d525-2174">的第一个参数 `predicate` 表示要测试的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2174">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="4d525-2175">第二个参数表示中元素的从零开始的索引 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2175">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="4d525-2176"><xref:System.Linq.Enumerable.TakeWhile%2A>和 <xref:System.Linq.Enumerable.SkipWhile%2A> 方法是函数补充。</span><span class="sxs-lookup"><span data-stu-id="4d525-2176">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="4d525-2177">给定一个序列 `coll` 和一个纯函数 `p` ，串联的结果， `coll.TakeWhile(p)` 并 `coll.SkipWhile(p)` 生成与相同的序列 `coll` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2177">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="4d525-2178">在 Visual Basic 查询表达式语法中， `Take While` 子句转换为对的调用 <xref:System.Linq.Enumerable.TakeWhile%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2178">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2179">下面的代码示例演示了在 <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> 使用元素的索引为 true 的情况下，如何使用从序列的开头返回元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2179">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</span></span>  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet101":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet101":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2180"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2180"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/take-while-clause"><span data-ttu-id="4d525-2181">Take While 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2181">Take While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-2182">按升序对序列中的元素执行后续排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2182">Performs a subsequent ordering of the elements in a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2183"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2183">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2184"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2184">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2185">一个包含要排序的元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2185">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2186">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2186">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2187">根据某个键按升序对序列中的元素执行后续排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2187">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="4d525-2188">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键对其元素排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2188">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2189">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2189">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2190">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2190">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2191">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2191">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2192">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2192">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-2193"><xref:System.Linq.Enumerable.ThenBy%2A> 和 <xref:System.Linq.Enumerable.ThenByDescending%2A> 被定义为扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，这也是这些方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2193"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="4d525-2194">此设计使你可以通过应用任意数量或方法来指定多个排序条件 <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2194">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-2195">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2195">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-2196">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2196">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-2197">此方法使用默认比较器对键进行比较 <xref:System.Collections.Generic.Comparer%601.Default%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2197">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="4d525-2198">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2198">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-2199">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2199">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="4d525-2200">在查询表达式语法中， `orderby [first criterion], [second criterion]` (Visual c # ) 或 `Order By [first criterion], [second criterion]` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.ThenBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2200">In query expression syntax, an `orderby [first criterion], [second criterion]` (Visual C#) or `Order By [first criterion], [second criterion]` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2201">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 对序列中的元素执行次要排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2201">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet102":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet102":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2202"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2202"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/orderby-clause"><span data-ttu-id="4d525-2203">orderby 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-2203">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/order-by-clause"><span data-ttu-id="4d525-2204">Order By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2204">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2205"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2205">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2206"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2206">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2207">一个包含要排序的元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2207">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2208">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2208">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2209">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2209">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-2210">使用指定的比较器按升序对序列中的元素执行后续排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2210">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-2211">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键对其元素排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2211">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2212">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2212">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2213">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2213">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2214">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2214">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2215">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2215">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-2216"><xref:System.Linq.Enumerable.ThenBy%2A> 和 <xref:System.Linq.Enumerable.ThenByDescending%2A> 被定义为扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，这也是这些方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2216"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="4d525-2217">此设计使你可以通过应用任意数量或方法来指定多个排序条件 <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2217">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-2218">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2218">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-2219">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2219">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-2220">如果 `comparer` 为 `null` ，则使用默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2220">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="4d525-2221">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2221">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-2222">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2222">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2223"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2223"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-2224">按降序对序列中的元素执行后续排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2224">Performs a subsequent ordering of the elements in a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2225"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2225">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2226"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2226">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2227">一个包含要排序的元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2227">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2228">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2228">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2229">根据某个键按降序对序列中的元素执行后续排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2229">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span></span></summary>
        <returns><span data-ttu-id="4d525-2230">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2230">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2231">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2231">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2232">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2232">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2233">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2233">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2234">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2234">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-2235"><xref:System.Linq.Enumerable.ThenBy%2A> 和 <xref:System.Linq.Enumerable.ThenByDescending%2A> 被定义为扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，这也是这些方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2235"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="4d525-2236">此设计使你可以通过应用任意数量或方法来指定多个排序条件 <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2236">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-2237">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2237">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-2238">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2238">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-2239">此排序方法使用默认比较器对键进行比较 <xref:System.Collections.Generic.Comparer%601.Default%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2239">This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="4d525-2240">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2240">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-2241">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2241">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="4d525-2242">在 Visual c # 查询表达式语法中， `orderby [first criterion], [second criterion] descending` 子句转换为对的调用 <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2242">In Visual C# query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 <span data-ttu-id="4d525-2243">在 Visual Basic 查询表达式语法中， `Order By [first criterion], [second criterion] Descending` 子句转换为对的调用 <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2243">In Visual Basic query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2244"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2244"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/orderby-clause"><span data-ttu-id="4d525-2245">orderby 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-2245">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/order-by-clause"><span data-ttu-id="4d525-2246">Order By 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2246">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2247"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2247">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2248"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2248">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2249">一个包含要排序的元素的 <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2249">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2250">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2250">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2251">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2251">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-2252">使用指定的比较器按降序对序列中的元素执行后续排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2252">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-2253">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2253">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2254">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2254">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2255">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2255">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2256">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2256">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2257">若要按元素本身的值对序列进行排序，请 `x => x` 在 Visual c # 中指定标识函数 (或 `Function(x) x` 在 Visual Basic) 中指定 `keySelector` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2257">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="4d525-2258"><xref:System.Linq.Enumerable.ThenBy%2A> 和 <xref:System.Linq.Enumerable.ThenByDescending%2A> 被定义为扩展类型 <xref:System.Linq.IOrderedEnumerable%601> ，这也是这些方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2258"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="4d525-2259">此设计使你可以通过应用任意数量或方法来指定多个排序条件 <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2259">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d525-2260">由于 <xref:System.Linq.IOrderedEnumerable%601> 继承自 <xref:System.Collections.Generic.IEnumerable%601> ，因此可以对 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> 、或调用的结果调用或 <xref:System.Linq.Enumerable.OrderBy%2A> <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2260">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="4d525-2261">这样做会引入一个新的主要顺序，该顺序将忽略以前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2261">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="4d525-2262">如果 `comparer` 为 `null` ，则使用默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2262">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="4d525-2263">此方法执行稳定排序;也就是说，如果两个元素的键相等，则会保留元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2263">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="4d525-2264">与此相反，不稳定排序不会保留具有相同键的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2264">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2265">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> 自定义比较器按降序对序列中的元素执行次要排序。</span><span class="sxs-lookup"><span data-stu-id="4d525-2265">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]
 [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2266"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2266"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of TSource) (source As IEnumerable(Of TSource)) As TSource()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;TSource&gt; ^ ToArray(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToArray : seq&lt;'Source&gt; -&gt; 'Source[]" Usage="System.Linq.Enumerable.ToArray source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2267"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2267">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2268">要从其创建数组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2268">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span></span></param>
        <summary><span data-ttu-id="4d525-2269">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中创建数组。</span><span class="sxs-lookup"><span data-stu-id="4d525-2269">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-2270">一个包含输入序列中的元素的数组。</span><span class="sxs-lookup"><span data-stu-id="4d525-2270">An array that contains the elements from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2271"><xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法强制立即执行查询计算，并返回包含查询结果的数组。</span><span class="sxs-lookup"><span data-stu-id="4d525-2271">The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results.</span></span> <span data-ttu-id="4d525-2272">可以将此方法追加到查询，以获取查询结果的缓存副本。</span><span class="sxs-lookup"><span data-stu-id="4d525-2272">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="4d525-2273"><xref:System.Linq.Enumerable.ToList%2A> 具有类似的行为，但返回的 <xref:System.Collections.Generic.List%601> 是而不是数组。</span><span class="sxs-lookup"><span data-stu-id="4d525-2273"><xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2274">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.ToArray%2A> 强制立即执行查询计算并返回结果数组。</span><span class="sxs-lookup"><span data-stu-id="4d525-2274">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]
 [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2275"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2275"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-2276">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2276">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2277"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2277">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2278"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2278">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2279">要从其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2279">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2280">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2280">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2281">根据指定的键选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2281">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="4d525-2282">一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2282">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span></span> <span data-ttu-id="4d525-2283">每个组中的值顺序与 <paramref name="source" /> 中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="4d525-2283">The values within each group are in the same order as in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2284"><xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>方法使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2284">The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2285">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> <xref:System.Collections.Generic.Dictionary%602> 通过键选择器创建。</span><span class="sxs-lookup"><span data-stu-id="4d525-2285">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]
 [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2286"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2286"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4d525-2287">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-2287">-or-</span></span> 
 <span data-ttu-id="4d525-2288"><paramref name="keySelector" /> 生成一个 <see langword="null" /> 的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2288"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4d525-2289"><paramref name="keySelector" /> 为两个元素生成重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2289"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2290"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2290">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2291"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2291">The type of the keys returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2292">要从其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2292">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2293">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2293">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2294">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2294">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-2295">根据指定的键选择器函数和键比较器，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2295">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-2296">一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2296">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span></span> <span data-ttu-id="4d525-2297">每个组中的值顺序与 <paramref name="source" /> 中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="4d525-2297">The values within each group are in the same order as in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2298">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2298">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2299"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2299"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4d525-2300">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-2300">-or-</span></span> 
 <span data-ttu-id="4d525-2301"><paramref name="keySelector" /> 生成一个 <see langword="null" /> 的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2301"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4d525-2302"><paramref name="keySelector" /> 为两个元素生成重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2302"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2303"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2303">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2304"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2304">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-2305"><paramref name="elementSelector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2305">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2306">要从其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2306">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2307">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2307">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-2308">用于从每个元素产生结果元素值的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2308">A transform function to produce a result element value from each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2309">根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2309">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span></span></summary>
        <returns><span data-ttu-id="4d525-2310">一个包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2310">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2311"><xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>方法使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2311">The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2312"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2312"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4d525-2313">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-2313">-or-</span></span> 
 <span data-ttu-id="4d525-2314"><paramref name="keySelector" /> 生成一个 <see langword="null" /> 的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2314"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4d525-2315"><paramref name="keySelector" /> 为两个元素生成重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2315"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2316"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2316">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2317"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2317">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-2318"><paramref name="elementSelector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2318">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2319">要从其创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2319">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2320">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2320">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-2321">用于从每个元素产生结果元素值的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2321">A transform function to produce a result element value from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2322">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2322">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-2323">根据指定的键选择器函数、比较器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2323">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span></span></summary>
        <returns><span data-ttu-id="4d525-2324">一个包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2324">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2325">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2325">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2326"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2326"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4d525-2327">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4d525-2327">-or-</span></span> 
 <span data-ttu-id="4d525-2328"><paramref name="keySelector" /> 生成一个 <see langword="null" /> 的键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2328"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4d525-2329"><paramref name="keySelector" /> 为两个元素生成重复键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2329"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2330"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2330">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2331">要从其创建 <see cref="T:System.Collections.Generic.HashSet`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2331">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span></span></param>
        <summary><span data-ttu-id="4d525-2332">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.HashSet`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2332">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-2333">一个包含从输入序列中选择的类型为 <paramref name="TSource" /> 的值的 <see cref="T:System.Collections.Generic.HashSet`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2333">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet (source, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2334"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2334">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2335">要从其创建 <see cref="T:System.Collections.Generic.HashSet`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2335">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2336">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2336">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-2337">使用 <paramref name="comparer" /> 通过 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.HashSet`1" />，以用于比较键。</span><span class="sxs-lookup"><span data-stu-id="4d525-2337">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys.</span></span></summary>
        <returns><span data-ttu-id="4d525-2338">一个包含从输入序列中选择的类型为 <paramref name="TSource" /> 的值的 <see cref="T:System.Collections.Generic.HashSet`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2338">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of TSource) (source As IEnumerable(Of TSource)) As List(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::List&lt;TSource&gt; ^ ToList(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToList : seq&lt;'Source&gt; -&gt; System.Collections.Generic.List&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToList source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2339"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2339">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2340">要从其创建 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2340">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span></span></param>
        <summary><span data-ttu-id="4d525-2341">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2341">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-2342">一个包含输入序列中的元素的 <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2342">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2343"><xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法强制立即执行查询计算，并返回一个 <xref:System.Collections.Generic.List%601> 包含查询结果的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2343">The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span> <span data-ttu-id="4d525-2344">可以将此方法追加到查询，以获取查询结果的缓存副本。</span><span class="sxs-lookup"><span data-stu-id="4d525-2344">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="4d525-2345"><xref:System.Linq.Enumerable.ToArray%2A> 具有类似的行为，但返回数组而不是 <xref:System.Collections.Generic.List%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2345"><xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2346">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.ToList%2A> 强制立即执行查询计算，并返回 <xref:System.Collections.Generic.List%601> 包含查询结果的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2346">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet106":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet106"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2347"><paramref name="source" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2347"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLookup&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-2348">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 生成一个泛型 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2348">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2349"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2349">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2350"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2350">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2351">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2351">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2352">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2352">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2353">根据指定的键选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2353">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="4d525-2354">一个包含键和值的 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2354">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span></span> <span data-ttu-id="4d525-2355">每个组中的值顺序与 <paramref name="source" /> 中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="4d525-2355">The values within each group are in the same order as in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2356"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>方法返回一个 <xref:System.Linq.Lookup%602> ，它是一个将键映射到值集合的一对多字典。</span><span class="sxs-lookup"><span data-stu-id="4d525-2356">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="4d525-2357">与 <xref:System.Linq.Lookup%602> 不同 <xref:System.Collections.Generic.Dictionary%602> ，后者执行从键到单个值的一对一映射。</span><span class="sxs-lookup"><span data-stu-id="4d525-2357">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="4d525-2358">使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2358">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2359"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2359"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2360"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2360">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2361"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2361">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2362">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2362">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2363">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2363">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2364">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2364">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-2365">根据指定的键选择器函数和键比较器，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2365">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-2366">一个包含键和值的 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2366">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span></span> <span data-ttu-id="4d525-2367">每个组中的值顺序与 <paramref name="source" /> 中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="4d525-2367">The values within each group are in the same order as in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2368"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法返回一个 <xref:System.Linq.Lookup%602> ，它是一个将键映射到值集合的一对多字典。</span><span class="sxs-lookup"><span data-stu-id="4d525-2368">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="4d525-2369">与 <xref:System.Linq.Lookup%602> 不同 <xref:System.Collections.Generic.Dictionary%602> ，后者执行从键到单个值的一对一映射。</span><span class="sxs-lookup"><span data-stu-id="4d525-2369">A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="4d525-2370">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2370">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2371"><paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2371"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2372"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2372">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2373"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2373">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-2374"><paramref name="elementSelector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2374">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2375">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2375">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2376">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2376">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-2377">用于从每个元素产生结果元素值的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2377">A transform function to produce a result element value from each element.</span></span></param>
        <summary><span data-ttu-id="4d525-2378">根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2378">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span></span></summary>
        <returns><span data-ttu-id="4d525-2379">一个包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值的 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2379">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2380"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>方法返回一个 <xref:System.Linq.Lookup%602> ，它是一个将键映射到值集合的一对多字典。</span><span class="sxs-lookup"><span data-stu-id="4d525-2380">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="4d525-2381">与 <xref:System.Linq.Lookup%602> 不同 <xref:System.Collections.Generic.Dictionary%602> ，后者执行从键到单个值的一对一映射。</span><span class="sxs-lookup"><span data-stu-id="4d525-2381">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="4d525-2382">使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2382">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2383">下面的代码示例演示如何 <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> <xref:System.Linq.Lookup%602> 通过使用键选择器函数和元素选择器函数来使用来创建。</span><span class="sxs-lookup"><span data-stu-id="4d525-2383">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]
 [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2384"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2384"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2385"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2385">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="4d525-2386"><paramref name="keySelector" /> 返回的键的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2386">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="4d525-2387"><paramref name="elementSelector" /> 返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2387">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2388">要从其创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2388">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="4d525-2389">用于从每个元素中提取键的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2389">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="4d525-2390">用于从每个元素产生结果元素值的转换函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2390">A transform function to produce a result element value from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2391">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2391">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="4d525-2392">根据指定的键选择器函数、比较器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2392">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span></span></summary>
        <returns><span data-ttu-id="4d525-2393">一个包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值的 <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2393">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2394"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法返回一个 <xref:System.Linq.Lookup%602> ，它是一个将键映射到值集合的一对多字典。</span><span class="sxs-lookup"><span data-stu-id="4d525-2394">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="4d525-2395">与 <xref:System.Linq.Lookup%602> 不同 <xref:System.Collections.Generic.Dictionary%602> ，后者执行从键到单个值的一对一映射。</span><span class="sxs-lookup"><span data-stu-id="4d525-2395">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="4d525-2396">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对键进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2396">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2397"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2397"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-2398">生成两个序列的并集。</span><span class="sxs-lookup"><span data-stu-id="4d525-2398">Produces the set union of two sequences.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2399">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2399">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-2400">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中的非重复元素构成并集的第一个部分。</span><span class="sxs-lookup"><span data-stu-id="4d525-2400">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-2401">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中的非重复元素构成并集的第二个部分。</span><span class="sxs-lookup"><span data-stu-id="4d525-2401">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span></span></param>
        <summary><span data-ttu-id="4d525-2402">通过使用默认的相等比较器，生成两个序列的并集。</span><span class="sxs-lookup"><span data-stu-id="4d525-2402">Produces the set union of two sequences by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="4d525-2403">一个 包含两个输入序列中的非重复元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2403">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2404">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2404">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2405">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2405">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2406">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2406">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2407">此方法排除返回集中的重复项。</span><span class="sxs-lookup"><span data-stu-id="4d525-2407">This method excludes duplicates from the return set.</span></span> <span data-ttu-id="4d525-2408">这与 <xref:System.Linq.Enumerable.Concat%2A> 方法不同，后者返回输入序列中的所有元素，包括重复项。</span><span class="sxs-lookup"><span data-stu-id="4d525-2408">This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.</span></span>  
  
 <span data-ttu-id="4d525-2409">默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 用于比较实现泛型接口的类型的值 <xref:System.Collections.Generic.IEqualityComparer%601> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2409">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="4d525-2410">若要比较自定义数据类型，需要实现此接口，并 <xref:System.Object.GetHashCode%2A> 为类型提供自己 <xref:System.Object.Equals%2A> 的和方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-2410">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="4d525-2411">枚举此方法返回的对象时，按 `Union` `first` `second` 该顺序枚举并生成每个尚未生成的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2411">When the object returned by this method is enumerated, `Union` enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2412">下面的代码示例演示如何使用 `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` 来获取两个整数序列的并集。</span><span class="sxs-lookup"><span data-stu-id="4d525-2412">The following code example demonstrates how to use `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to obtain the union of two sequences of integers.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]
 [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  
  
 <span data-ttu-id="4d525-2413">如果要比较某种自定义数据类型的对象序列，则必须 <xref:System.IEquatable%601> 在 helper 类中实现泛型接口。</span><span class="sxs-lookup"><span data-stu-id="4d525-2413">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="4d525-2414">下面的代码示例演示如何在自定义数据类型中实现此接口并重写 <xref:System.Object.GetHashCode%2A> 和 <xref:System.Object.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d525-2414">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="4d525-2415">实现此接口后，可以 `ProductA` 在方法中使用对象序列 `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-2415">After you implement this interface, you can use sequences of `ProductA` objects in the `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]
 [!code-vb[CSLINQEncapsulatedComparer#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#10)]

[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]
[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2416"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2416"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second, comparer)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2417">输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2417">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-2418">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中的非重复元素构成并集的第一个部分。</span><span class="sxs-lookup"><span data-stu-id="4d525-2418">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-2419">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中的非重复元素构成并集的第二个部分。</span><span class="sxs-lookup"><span data-stu-id="4d525-2419">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span></span></param>
        <param name="comparer"><span data-ttu-id="4d525-2420">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2420">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="4d525-2421">通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 生成两个序列的并集。</span><span class="sxs-lookup"><span data-stu-id="4d525-2421">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="4d525-2422">一个 包含两个输入序列中的非重复元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2422">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2423">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2423">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2424">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2424">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2425">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2425">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2426">如果 `comparer` 为 `null` ，则使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 对值进行比较。</span><span class="sxs-lookup"><span data-stu-id="4d525-2426">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
 <span data-ttu-id="4d525-2427">枚举此方法返回的对象时，按 <xref:System.Linq.Enumerable.Union%2A> `first` `second` 该顺序枚举并生成每个尚未生成的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2427">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
 <span data-ttu-id="4d525-2428"><xref:System.Linq.Enumerable.Concat%2A>方法不同于 <xref:System.Linq.Enumerable.Union%2A> 方法 <xref:System.Linq.Enumerable.Concat%2A> ，因为方法返回输入序列中的所有元素（包括重复项），而 <xref:System.Linq.Enumerable.Union%2A> 只返回唯一值。</span><span class="sxs-lookup"><span data-stu-id="4d525-2428">The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2429">下面的示例演示如何实现可在方法中使用的相等比较器 <xref:System.Linq.Enumerable.Union%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2429">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="4d525-2430">实现此比较器后，可以 `Product` 在方法中使用对象序列 <xref:System.Linq.Enumerable.Union%2A> ，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="4d525-2430">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]
[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2431"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2431"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d525-2432">基于谓词筛选值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2432">Filters a sequence of values based on a predicate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2433"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2433">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2434">要筛选的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2434">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-2435">用于测试每个元素是否满足条件的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2435">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="4d525-2436">基于谓词筛选值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2436">Filters a sequence of values based on a predicate.</span></span></summary>
        <returns><span data-ttu-id="4d525-2437">一个包含输入序列中满足条件的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2437">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2438">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2438">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2439">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2439">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2440">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2440">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2441">在查询表达式语法中， `where` (Visual c # ) 或 `Where` (Visual Basic) 子句转换为对的调用 <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2441">In query expression syntax, a `where` (Visual C#) or `Where` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2442">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> 筛选序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2442">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet110":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet110"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2443"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2443"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/csharp/language-reference/keywords/where-clause"><span data-ttu-id="4d525-2444">where 子句（C# 参考）</span><span class="sxs-lookup"><span data-stu-id="4d525-2444">where clause (C# Reference)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/queries/where-clause"><span data-ttu-id="4d525-2445">Where 子句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4d525-2445">Where Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="4d525-2446"><paramref name="source" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2446">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="4d525-2447">要筛选的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2447">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="4d525-2448">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-2448">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="4d525-2449">基于谓词筛选值序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2449">Filters a sequence of values based on a predicate.</span></span> <span data-ttu-id="4d525-2450">将在谓词函数的逻辑中使用每个元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4d525-2450">Each element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="4d525-2451">一个包含输入序列中满足条件的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2451">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2452">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2452">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2453">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2453">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2454">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2454">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2455">的第一个参数 `predicate` 表示要测试的元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2455">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="4d525-2456">第二个参数表示中元素的从零开始的索引 `source` 。</span><span class="sxs-lookup"><span data-stu-id="4d525-2456">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2457">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> 根据涉及每个元素的索引的谓词来筛选序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2457">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet111":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet111":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2458"><paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2458"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;(TFirst,TSecond)&gt; Zip&lt;TFirst,TSecond&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;!!TFirst, !!TSecond&gt;&gt; Zip&lt;TFirst, TSecond&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond)) As IEnumerable(Of ValueTuple(Of TFirst, TSecond))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;ValueTuple&lt;TFirst, TSecond&gt;&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; -&gt; seq&lt;ValueTuple&lt;'First, 'Second&gt;&gt;" Usage="System.Linq.Enumerable.Zip (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;TFirst,TSecond&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-5.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "First", "Second" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "First", "Second" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst"><span data-ttu-id="4d525-2459">第一个输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2459">The type of the elements of the first input sequence.</span></span></typeparam>
        <typeparam name="TSecond"><span data-ttu-id="4d525-2460">第二个输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2460">The type of the elements of the second input sequence.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-2461">要合并的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2461">The first sequence to merge.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-2462">要合并的第二个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2462">The second sequence to merge.</span></span></param>
        <summary><span data-ttu-id="4d525-2463">使用两个指定序列中的元素生成元组序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2463">Produces a sequence of tuples with elements from the two specified sequences.</span></span></summary>
        <returns><span data-ttu-id="4d525-2464">一组元组序列，其中的元素按该顺序取自第一个和第二个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2464">A sequence of tuples with elements taken from the first and second sequences, in that order.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Zip (first, second, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst"><span data-ttu-id="4d525-2465">第一个输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2465">The type of the elements of the first input sequence.</span></span></typeparam>
        <typeparam name="TSecond"><span data-ttu-id="4d525-2466">第二个输入序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2466">The type of the elements of the second input sequence.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="4d525-2467">结果序列的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="4d525-2467">The type of the elements of the result sequence.</span></span></typeparam>
        <param name="first"><span data-ttu-id="4d525-2468">要合并的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2468">The first sequence to merge.</span></span></param>
        <param name="second"><span data-ttu-id="4d525-2469">要合并的第二个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2469">The second sequence to merge.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="4d525-2470">用于指定如何合并这两个序列中的元素的函数。</span><span class="sxs-lookup"><span data-stu-id="4d525-2470">A function that specifies how to merge the elements from the two sequences.</span></span></param>
        <summary><span data-ttu-id="4d525-2471">将指定函数应用于两个序列的对应元素，以生成结果序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2471">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span></span></summary>
        <returns><span data-ttu-id="4d525-2472">一个包含两个输入序列中的合并元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2472">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d525-2473">此方法是使用延迟执行实现的。</span><span class="sxs-lookup"><span data-stu-id="4d525-2473">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="4d525-2474">即时返回值是一个对象，该对象存储执行操作所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="4d525-2474">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="4d525-2475">此方法表示的查询在枚举对象之前不会执行，方法是直接调用其 `GetEnumerator` 方法，或者通过 `foreach` 在 Visual c # 中使用或 `For Each` 在 Visual Basic 中使用。</span><span class="sxs-lookup"><span data-stu-id="4d525-2475">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="4d525-2476">方法将第一个序列的每个元素与第二个序列中具有相同索引的元素合并在一起。</span><span class="sxs-lookup"><span data-stu-id="4d525-2476">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="4d525-2477">如果序列不具有相同数量的元素，则方法将合并序列，直到它到达其中一个的结尾。</span><span class="sxs-lookup"><span data-stu-id="4d525-2477">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="4d525-2478">例如，如果一个序列包含三个元素，另一个序列具有四个元素，则结果序列将只有三个元素。</span><span class="sxs-lookup"><span data-stu-id="4d525-2478">For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d525-2479">下面的代码示例演示如何使用 <xref:System.Linq.Enumerable.Zip%2A> 方法来合并两个序列。</span><span class="sxs-lookup"><span data-stu-id="4d525-2479">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs" interactive="try-dotnet-method" id="Snippet200":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb" id="Snippet200":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d525-2480"><paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d525-2480"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
