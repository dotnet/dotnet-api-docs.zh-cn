<Type Name="TrackingProfile" FullName="System.Workflow.Runtime.Tracking.TrackingProfile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73e1ead0cb466caeed46783c9eeb654e941db70d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86693184" /></Metadata><TypeSignature Language="C#" Value="public class TrackingProfile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TrackingProfile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Tracking.TrackingProfile" />
  <TypeSignature Language="VB.NET" Value="Public Class TrackingProfile" />
  <TypeSignature Language="C++ CLI" Value="public ref class TrackingProfile" />
  <TypeSignature Language="F#" Value="type TrackingProfile = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义根工作流实例的可能执行路径中的关注点，应将有关该关注点的信息通知跟踪服务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 工作流实例在运行时期间会将跟踪事件发出到运行时跟踪基础结构。 运行时跟踪基础结构使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> 筛选这些跟踪事件，并基于此筛选将跟踪记录返回到跟踪服务。 有三种可以筛选的跟踪事件：活动状态事件、工作流状态事件以及用户事件。 您可以将 <xref:System.Workflow.Runtime.Tracking.ActivityTrackPoint> 对象添加到 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A> 属性以匹配特定的活动状态事件；将 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackPoint> 对象添加到 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性以匹配特定的工作流状态事件；并将 <xref:System.Workflow.Runtime.Tracking.UserTrackPoint> 对象添加到 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints%2A> 属性以匹配特定的用户事件。 匹配了跟踪点后，运行时跟踪基础结构将通过与跟踪服务关联的 <xref:System.Workflow.Runtime.Tracking.TrackingChannel> 将与跟踪事件关联的数据返回到该跟踪服务。 数据将在 <xref:System.Workflow.Runtime.Tracking.ActivityTrackingRecord>、<xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord> 或 <xref:System.Workflow.Runtime.Tracking.UserTrackingRecord> 中返回，具体情况取决于匹配的跟踪点的类型。  
  
 跟踪服务在抽象 <xref:System.Workflow.Runtime.Tracking.TrackingService> 类中实现方法以提供功能，供运行时跟踪基础结构请求与服务关联的 <xref:System.Workflow.Runtime.Tracking.TrackingChannel>，以及与特定工作流实例或特定工作流类型关联的 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>。 跟踪服务还必须实现抽象 <xref:System.Workflow.Runtime.Tracking.TrackingChannel> 类以提供通道，运行时跟踪基础结构可以通过该通道发送跟踪记录。  
  
 当跟踪服务将跟踪配置文件对象返回到运行库时，工作流将开始执行，并对跟踪配置文件进行序列化。 如果跟踪配置文件的序列化失败，则会将一个异常引发到工作流实例。 如果异常未得到处理，工作流实例将终止。 在将跟踪配置文件传递到运行库之前，可以使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Schema%2A> 属性对其进行验证。  
  
 可以使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>（它将依据 <xref:System.Workflow.Runtime.Tracking.TrackingProfileSerializer> 设置 XML 格式）将 <xref:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Schema%2A> 序列化为 XML。 这样就为配置文件存储和以非编程方式编写配置文件提供了一种方便的格式。 例如，SQL 跟踪服务存储其跟踪配置文件的序列化版本，您基于 <xref:System.Workflow.Runtime.Tracking.SqlTrackingService> 类创建的任何跟踪服务也同样如此。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> 构造函数创建 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.%23ctor%2A>，以及如何使用对象的属性来帮助跟踪工作流的执行。 该示例代码使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A>、<xref:System.Workflow.Runtime.Tracking.TrackingProfile.Version%2A> 和 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性。  
  
 此代码示例摘自 Program.cs 文件中的“使用 SQLTrackingService 查询”SDK 示例。 有关详细信息，请参阅[使用 SQLTrackingService 查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90))。  
  
 [!code-csharp[WF_Samples#291](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#291)]
 [!code-vb[WF_Samples#291](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#291)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90)">使用 SQLTrackingService 进行查询</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TrackingProfile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Tracking.TrackingProfile.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TrackingProfile();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> 的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数会初始化一个空的 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>。 您可以将跟踪点添加到 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints%2A>、<xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A> 和 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 以配置 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> 构造函数创建 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.%23ctor%2A>，以及如何使用对象的属性来帮助跟踪工作流的执行。 该示例代码使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A>、<xref:System.Workflow.Runtime.Tracking.TrackingProfile.Version%2A> 和 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性。  
  
 此代码示例摘自 Program.cs 文件中的“使用 SQLTrackingService 查询”SDK 示例。 有关详细信息，请参阅[使用 SQLTrackingService 查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90))。  
  
 [!code-csharp[WF_Samples#291](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#291)]
 [!code-vb[WF_Samples#291](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#291)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90)">使用 SQLTrackingService 进行查询</related>
      </Docs>
    </Member>
    <Member MemberName="ActivityTrackPoints">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.Tracking.ActivityTrackPointCollection ActivityTrackPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.Tracking.ActivityTrackPointCollection ActivityTrackPoints" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActivityTrackPoints As ActivityTrackPointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::Tracking::ActivityTrackPointCollection ^ ActivityTrackPoints { System::Workflow::Runtime::Tracking::ActivityTrackPointCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActivityTrackPoints : System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" Usage="System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Tracking.ActivityTrackPointCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取运行时跟踪基础结构用于筛选活动状态事件的活动跟踪点的集合。</summary>
        <value>一个指定工作流实例中各个点的 <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" />，运行时跟踪基础结构应为该工作流实例将 <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> 发送到跟踪服务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当活动实例的 <xref:System.Workflow.ComponentModel.ActivityExecutionStatus> 发生更改时，工作流实例会将活动状态事件发出到运行时跟踪基础结构。 运行时跟踪基础结构使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A> 属性筛选这些活动状态事件，以确定何时将 <xref:System.Workflow.Runtime.Tracking.ActivityTrackingRecord> 发送到跟踪服务。 您可以将 <xref:System.Workflow.Runtime.Tracking.ActivityTrackPoint> 添加到 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A> 属性，以指定工作流实例的可能执行路径中的关注点，您想要运行时基础结构为该工作流实例发送一个 <xref:System.Workflow.Runtime.Tracking.ActivityTrackingRecord>。  
  
 <xref:System.Workflow.Runtime.Tracking.ActivityTrackPoint> 不会实际在工作流实例中定义一个物理点，而是会定义一组匹配参数，运行时跟踪基础结构可以使用这些参数来匹配应为其发送 <xref:System.Workflow.Runtime.Tracking.ActivityTrackingRecord> 的活动状态事件。 因此，在工作流实例的生存期内，可以匹配同一个 <xref:System.Workflow.Runtime.Tracking.ActivityTrackPoint> 多次。 <xref:System.Workflow.Runtime.Tracking.ActivityTrackPoint> 还可以指定要从工作流实例中提取并在 <xref:System.Workflow.Runtime.Tracking.ActivityTrackingRecord> 中返回的数据。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> 构造函数创建 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.%23ctor%2A>，以及如何使用对象的属性来帮助跟踪工作流的执行。 该示例代码使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A>、<xref:System.Workflow.Runtime.Tracking.TrackingProfile.Version%2A> 和 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性。  
  
 此代码示例摘自 Program.cs 文件中的“使用 SQLTrackingService 查询”SDK 示例。 有关详细信息，请参阅[使用 SQLTrackingService 查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90))。  
  
 [!code-csharp[WF_Samples#291](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#291)]
 [!code-vb[WF_Samples#291](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#291)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90)">使用 SQLTrackingService 进行查询</related>
      </Docs>
    </Member>
    <Member MemberName="UserTrackPoints">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.Tracking.UserTrackPointCollection UserTrackPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.Tracking.UserTrackPointCollection UserTrackPoints" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserTrackPoints As UserTrackPointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::Tracking::UserTrackPointCollection ^ UserTrackPoints { System::Workflow::Runtime::Tracking::UserTrackPointCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserTrackPoints : System.Workflow.Runtime.Tracking.UserTrackPointCollection" Usage="System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Tracking.UserTrackPointCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取运行时跟踪基础结构用于筛选用户事件的用户跟踪点的集合。</summary>
        <value>一个指定工作流实例中各个点的 <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection" />，运行时跟踪基础结构应为该工作流实例将 <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> 发送到跟踪服务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流设计器或活动设计器可以使用 <xref:System.Workflow.ComponentModel.Activity.TrackData%2A?displayProperty=nameWithType>、<xref:System.Workflow.ComponentModel.Activity.TrackData%2A?displayProperty=nameWithType>、<xref:System.Workflow.ComponentModel.ActivityExecutionContext.TrackData%2A?displayProperty=nameWithType> 或 <xref:System.Workflow.ComponentModel.Activity.TrackData%2A?displayProperty=nameWithType> 来检测工作流或活动，以便在工作流执行期间将数据发出到运行时跟踪基础结构的特定点。 这种事件称为用户事件，而发出的数据称为用户数据。 运行时跟踪基础结构使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints%2A> 属性筛选用户事件，以确定何时将 <xref:System.Workflow.Runtime.Tracking.UserTrackingRecord> 发送到跟踪服务。 您可以将 <xref:System.Workflow.Runtime.Tracking.UserTrackPoint> 添加到 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints%2A> 属性，以指定想要为其发送 <xref:System.Workflow.Runtime.Tracking.UserTrackingRecord> 的工作流实例的可能执行路径中的关注点。  
  
 <xref:System.Workflow.Runtime.Tracking.UserTrackPoint> 不会实际在工作流实例中定义一个物理点，而是会定义一组匹配参数，运行时跟踪基础结构可以使用这些参数来匹配用户事件。 因此，在工作流实例的生存期内，可以匹配同一个 <xref:System.Workflow.Runtime.Tracking.UserTrackPoint> 多次。 运行时跟踪基础结构将始终在 <xref:System.Workflow.Runtime.Tracking.UserTrackPoint> 中返回与匹配 <xref:System.Workflow.Runtime.Tracking.UserTrackingRecord> 关联的用户数据，但 <xref:System.Workflow.Runtime.Tracking.UserTrackPoint> 也可以指定要从工作流实例中提取并在跟踪记录中返回的数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public Version Version { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version Version" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingProfile.Version" />
      <MemberSignature Language="VB.NET" Value="Public Property Version As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ Version { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Version : Version with get, set" Usage="System.Workflow.Runtime.Tracking.TrackingProfile.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置跟踪配置文件的版本。</summary>
        <value><see cref="T:System.Version" /> 的 <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于工作流运行时引擎中配置文件缓存的语义的原因，如果更改 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> 的内容，您必须更新 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.Version%2A>。 如果不更新，则工作流运行时引擎可能不会加载更新的 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>，即使它是通过调用 <xref:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile%2A?displayProperty=nameWithType> 返回的，或者在与 <xref:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs> 事件关联的 <xref:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileUpdated> 中发送的。 因此，为了确保工作流运行时引擎加载更新的 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>，您应为 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.Version%2A> 更改 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>。 您可以在任何适当的工作流实例上显式调用 <xref:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles%2A?displayProperty=nameWithType>，或者，视实现而定，您可以依赖于跟踪服务将更改通知工作流运行时引擎。 有关详细信息，请参阅 <xref:System.Workflow.Runtime.Tracking.TrackingService>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> 构造函数创建 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.%23ctor%2A>，以及如何使用对象的属性来帮助跟踪工作流的执行。 该示例代码使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A>、<xref:System.Workflow.Runtime.Tracking.TrackingProfile.Version%2A> 和 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性。  
  
 此代码示例摘自 Program.cs 文件中的“使用 SQLTrackingService 查询”SDK 示例。 有关详细信息，请参阅[使用 SQLTrackingService 查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90))。  
  
 [!code-csharp[WF_Samples#291](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#291)]
 [!code-vb[WF_Samples#291](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#291)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90)">使用 SQLTrackingService 进行查询</related>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTrackPoints">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection WorkflowTrackPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection WorkflowTrackPoints" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowTrackPoints As WorkflowTrackPointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::Tracking::WorkflowTrackPointCollection ^ WorkflowTrackPoints { System::Workflow::Runtime::Tracking::WorkflowTrackPointCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkflowTrackPoints : System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" Usage="System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取运行时跟踪基础结构用于筛选工作流状态事件的工作流跟踪点的集合。</summary>
        <value>一个指定工作流实例中各个点的 <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" />，运行时跟踪基础结构应为该工作流实例将 <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> 发送到跟踪服务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当发生指示工作流实例状态已更改的 <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent> 时，工作流实例会将工作流状态事件发出到运行时跟踪基础结构。 运行时跟踪基础结构使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性筛选这些工作流状态事件，以确定何时将 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord> 发送到跟踪服务。 您可以将 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackPoint> 添加到 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性，以指定想要为其发送 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord> 的工作流实例的可能执行路径中的关注点。  
  
 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackPoint> 不会实际在工作流实例中定义一个物理点，而是会定义一个或多个 <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent> 值，运行时跟踪基础结构可以使用这些值来匹配工作流状态事件。 因此，在工作流实例的生存期内，可以匹配同一个 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackPoint> 多次。 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackPoint> 也可以指定要在 <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord> 中返回的任何批注。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> 构造函数创建 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.%23ctor%2A>，以及如何使用对象的属性来帮助跟踪工作流的执行。 该示例代码使用 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints%2A>、<xref:System.Workflow.Runtime.Tracking.TrackingProfile.Version%2A> 和 <xref:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints%2A> 属性。  
  
 此代码示例摘自 Program.cs 文件中的“使用 SQLTrackingService 查询”SDK 示例。 有关详细信息，请参阅[使用 SQLTrackingService 查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90))。  
  
 [!code-csharp[WF_Samples#291](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#291)]
 [!code-vb[WF_Samples#291](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#291)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742042(v=vs.90)">使用 SQLTrackingService 进行查询</related>
      </Docs>
    </Member>
  </Members>
</Type>
