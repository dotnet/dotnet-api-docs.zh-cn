<Type Name="PluralizationService" FullName="System.Data.Entity.Design.PluralizationServices.PluralizationService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3dade41f141d8884ecdca3610f42d68ddd8a1fe5" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86730676" /></Metadata><TypeSignature Language="C#" Value="public abstract class PluralizationService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PluralizationService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PluralizationService" />
  <TypeSignature Language="C++ CLI" Value="public ref class PluralizationService abstract" />
  <TypeSignature Language="F#" Value="type PluralizationService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于构造单词的单复数形式的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类应用英语规则来构造单词的复数形式。 若要将服务扩展到其他语言，请使用 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService> 类上的 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator> 。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PluralizationService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PluralizationService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateService">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Design.PluralizationServices.PluralizationService CreateService (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Design.PluralizationServices.PluralizationService CreateService(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateService (culture As CultureInfo) As PluralizationService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::Entity::Design::PluralizationServices::PluralizationService ^ CreateService(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member CreateService : System.Globalization.CultureInfo -&gt; System.Data.Entity.Design.PluralizationServices.PluralizationService" Usage="System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Design.PluralizationServices.PluralizationService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">与单词的单复数形式所应用的语言规则相对应的 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>创建一个 <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" />，它应用与指定的 <see cref="T:System.Globalization.CultureInfo" /> 相对应的语言规则。</summary>
        <returns>新创建的 <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类应用英语规则来构造单词的复数形式。 若要将服务扩展到其他语言，请使用 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService> 类上的 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:  property System::Globalization::CultureInfo ^ Culture {  public:&#xA;System::Globalization::CultureInfo ^ get(); protected:&#xA; void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" /> 区域性。</summary>
        <value>一个指定单复数形式要应用的语言规则的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类应用英语规则来构造单词的复数形式。 若要将服务扩展到其他语言，请使用 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService> 类上的 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPlural">
      <MemberSignature Language="C#" Value="public abstract bool IsPlural (string word);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPlural(string word) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsPlural (word As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsPlural(System::String ^ word);" />
      <MemberSignature Language="F#" Value="abstract member IsPlural : string -&gt; bool" Usage="pluralizationService.IsPlural word" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="word" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="word">要分析的值。</param>
        <summary>确定指定的单词是否为复数形式。</summary>
        <returns>如果单词为复数形式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类应用英语规则来构造单词的复数形式。 若要将服务扩展到其他语言，请使用 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService> 类上的 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator> 。  
  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural%2A>和 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular%2A> 方法 `true` 对于同一个单词可以返回。 例如，这两种方法都将 `true` 为单词 "鱼" 返回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingular">
      <MemberSignature Language="C#" Value="public abstract bool IsSingular (string word);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSingular(string word) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSingular (word As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSingular(System::String ^ word);" />
      <MemberSignature Language="F#" Value="abstract member IsSingular : string -&gt; bool" Usage="pluralizationService.IsSingular word" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="word" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="word">要分析的值。</param>
        <summary>确定指定的单词是否为单数形式。</summary>
        <returns>如果单词为单数形式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类应用英语规则来构造单词的复数形式。 若要将服务扩展到其他语言，请使用 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService> 类上的 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator> 。  
  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular%2A>和 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural%2A> 方法 `true` 对于同一个单词可以返回。 例如，这两种方法都将 `true` 为单词 "鱼" 返回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pluralize">
      <MemberSignature Language="C#" Value="public abstract string Pluralize (string word);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Pluralize(string word) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Pluralize (word As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ Pluralize(System::String ^ word);" />
      <MemberSignature Language="F#" Value="abstract member Pluralize : string -&gt; string" Usage="pluralizationService.Pluralize word" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="word" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="word">要改为复数形式的单词。</param>
        <summary>返回指定单词的复数形式。</summary>
        <returns>输入参数的复数形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类应用英语规则来构造单词的复数形式。 若要将服务扩展到其他语言，请使用 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService> 类上的 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Singularize">
      <MemberSignature Language="C#" Value="public abstract string Singularize (string word);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Singularize(string word) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Singularize (word As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ Singularize(System::String ^ word);" />
      <MemberSignature Language="F#" Value="abstract member Singularize : string -&gt; string" Usage="pluralizationService.Singularize word" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="word" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="word">要改为单数形式的单词。</param>
        <summary>返回指定单词的单数形式。</summary>
        <returns>输入参数的单数形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类应用英语规则来构造单词的复数形式。 若要将服务扩展到其他语言，请使用 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService> 类上的 <xref:System.Data.Entity.Design.EntityModelSchemaGenerator> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
