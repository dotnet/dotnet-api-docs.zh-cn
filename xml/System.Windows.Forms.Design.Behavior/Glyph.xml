<Type Name="Glyph" FullName="System.Windows.Forms.Design.Behavior.Glyph">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a12aef63b55e578b1aa073d0fae7149757664cf2" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86785216" /></Metadata><TypeSignature Language="C#" Value="public abstract class Glyph" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Glyph extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.Behavior.Glyph" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Glyph" />
  <TypeSignature Language="C++ CLI" Value="public ref class Glyph abstract" />
  <TypeSignature Language="F#" Value="type Glyph = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Design" FromVersion="5.0.0.0" To="System.Windows.Forms.Design" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Design" FromVersion="4.0.0.0" To="System.Windows.Forms.Design" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示一个由 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> 管理的用户界面 (UI) 实体。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 的唯一用途 <xref:System.Windows.Forms.Design.Behavior.Glyph> 是绘制和命中测试。 不 <xref:System.Windows.Forms.Design.Behavior.Glyph> 具有窗口句柄 (HWND) ，因为它是在的装饰器窗口控件上呈现的 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。 每个都 <xref:System.Windows.Forms.Design.Behavior.Glyph> 可以有 <xref:System.Windows.Forms.Design.Behavior.Behavior> 与之关联的。 成功的命中测试 <xref:System.Windows.Forms.Design.Behavior.Glyph> 可将新的或不同的推送到的 <xref:System.Windows.Forms.Design.Behavior.Behavior> 行为堆栈中 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。  
  
 有关详细信息，请参阅 [行为服务概述](https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f)。  
  
   
  
## Examples  
 下面的示例演示如何创建自己 <xref:System.Windows.Forms.Design.Behavior.Glyph> 的与关联的类 <xref:System.Windows.Forms.Design.Behavior.Behavior> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
    <related type="Article" href="https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f">行为服务概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Glyph (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.#ctor(System.Windows.Forms.Design.Behavior.Behavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (behavior As Behavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Glyph(System::Windows::Forms::Design::Behavior::Behavior ^ behavior);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Design.Behavior.Glyph : System.Windows.Forms.Design.Behavior.Behavior -&gt; System.Windows.Forms.Design.Behavior.Glyph" Usage="new System.Windows.Forms.Design.Behavior.Glyph behavior" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。 可以为 <see langword="null" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何初始化类的新实例 <xref:System.Windows.Forms.Design.Behavior.Glyph> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="Behavior">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Design.Behavior.Behavior Behavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Design.Behavior.Behavior Behavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Glyph.Behavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Behavior As Behavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Design::Behavior::Behavior ^ Behavior { System::Windows::Forms::Design::Behavior::Behavior ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Behavior : System.Windows.Forms.Design.Behavior.Behavior" Usage="System.Windows.Forms.Design.Behavior.Glyph.Behavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.Behavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</summary>
        <value>与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />，或者，如果不存在任何行为，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Glyph.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.Design.Behavior.Glyph.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 的边界。</summary>
        <value>一个 <see cref="T:System.Drawing.Rectangle" />，表示 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 的边界。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何重写 <xref:System.Windows.Forms.Design.Behavior.Glyph.Bounds%2A> 以创建具有特定尺寸和位置的字形。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="GetHitTest">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Forms.Cursor GetHitTest (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.Cursor GetHitTest(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHitTest (p As Point) As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Forms::Cursor ^ GetHitTest(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="abstract member GetHitTest : System.Drawing.Point -&gt; System.Windows.Forms.Cursor" Usage="glyph.GetHitTest p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">要进行命中测试的点。</param>
        <summary>提供命中测试逻辑。</summary>
        <returns>如果 <see cref="T:System.Windows.Forms.Cursor" /> 与 <paramref name="p" /> 关联，则为 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest%2A>方法是 `abstract` 强制 <xref:System.Windows.Forms.Design.Behavior.Glyph> 实现提供命中测试逻辑的方法。 给定任意点时，如果 <xref:System.Windows.Forms.Design.Behavior.Glyph> 已决定将此位置涉及到该位置，则需要返回有效的 <xref:System.Windows.Forms.Cursor> 。 否则，返回 `null` 将导致 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 忽略位置。  
  
   
  
## Examples  
 下面的示例演示如何重写， <xref:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest%2A> 以查看该点是否在此标志符号内。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#9)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public abstract void Paint (System.Windows.Forms.PaintEventArgs pe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Paint(class System.Windows.Forms.PaintEventArgs pe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.Paint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Paint (pe As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Paint(System::Windows::Forms::PaintEventArgs ^ pe);" />
      <MemberSignature Language="F#" Value="abstract member Paint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="glyph.Paint pe" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pe" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pe">包含事件数据的 <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>提供绘制逻辑。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Glyph.Paint%2A>方法是 `abstract` 强制 <xref:System.Windows.Forms.Design.Behavior.Glyph> 实现提供绘制逻辑的方法。 `pe`参数包含与 <xref:System.Drawing.Graphics> 的装饰器窗口相关的 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。  
  
   
  
## Examples  
 下面的示例演示如何重写 <xref:System.Windows.Forms.Design.Behavior.Glyph.Paint%2A> 以绘制标志符号。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.Design.Behavior.BehaviorService> 。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#10)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="SetBehavior">
      <MemberSignature Language="C#" Value="protected void SetBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetBehavior (behavior As Behavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetBehavior(System::Windows::Forms::Design::Behavior::Behavior ^ behavior);" />
      <MemberSignature Language="F#" Value="member this.SetBehavior : System.Windows.Forms.Design.Behavior.Behavior -&gt; unit" Usage="glyph.SetBehavior behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">要与该 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <summary>更改与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)" />通过继承类来调用方法，以更改 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 与关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
  </Members>
</Type>
