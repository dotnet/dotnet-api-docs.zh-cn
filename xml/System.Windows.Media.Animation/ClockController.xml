<Type Name="ClockController" FullName="System.Windows.Media.Animation.ClockController">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b49cef34c84151a1ea6a9abf7968a87de857843" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89934605" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClockController : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClockController extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ClockController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClockController&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClockController sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type ClockController = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>以交互方式控制 <see cref="T:System.Windows.Media.Animation.Clock" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Media.Animation.ClockController> 以交互方式开始、暂停、恢复、查找、跳过、停止和删除 <xref:System.Windows.Media.Animation.Clock> 。 只能以交互方式控制根级时钟。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.Clock" />
    <altmember cref="P:System.Windows.Media.Animation.Clock.Controller" />
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="clockController.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>设置目标 <see cref="P:System.Windows.Media.Animation.ClockController.Clock" />，以在下一时钟周期开始。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法导致目标的 <xref:System.Windows.Media.Animation.Clock> 行为如同其 <xref:System.Windows.Media.Animation.Timeline> 对象的 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 设置为下一个计时周期的时间。 将忽略时间线的实际 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 设置 (但不) 更改。  
  
 此方法将目标时钟更改 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 为 <xref:System.Windows.Media.Animation.ClockState.Active> 。 <xref:System.Windows.Media.Animation.ClockController.Begin%2A>方法不恢复暂停的时钟。  
  
 直到下一次处理计时周期时，此方法才会对计时树产生任何影响。 副作用是，在此之前，也不会引发相应的事件。 调用此方法将触发 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 和 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Clock">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Clock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Clock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.Clock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clock As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Clock { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Clock : System.Windows.Media.Animation.Clock" Usage="System.Windows.Media.Animation.ClockController.Clock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由此 <see cref="T:System.Windows.Media.Animation.Clock" /> 控制的 <see cref="T:System.Windows.Media.Animation.ClockController" />。</summary>
        <value>由此 <see cref="T:System.Windows.Media.Animation.Clock" /> 控制的 <see cref="T:System.Windows.Media.Animation.ClockController" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="clockController.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止处理目标 <see cref="T:System.Windows.Media.Animation.Clock" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Clock>无论当前状态如何，都可以暂停，并且暂停时钟不会更改其当前状态。 可在、或时暂停 <xref:System.Windows.Media.Animation.ClockState.Active> 时钟 <xref:System.Windows.Media.Animation.ClockState.Stopped> <xref:System.Windows.Media.Animation.ClockState.Filling> 。 取消暂停时钟的唯一方法是使用 <xref:System.Windows.Media.Animation.ClockController.Resume%2A> 方法。 暂停时钟会隐式暂停其子级。  
  
 如果目标时钟已暂停，则调用此方法不起作用。  
  
 暂停时钟会触发 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="clockController.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从进行动画处理的属性中移除与此 <see cref="T:System.Windows.Media.Animation.Clock" /> 关联的 <see cref="T:System.Windows.Media.Animation.ClockController" />。 该时钟及其子时钟将不再影响这些属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将触发 <xref:System.Windows.Media.Animation.Clock.RemoveRequested> 事件。  
  
   
  
## Examples  
 下面的示例演示如何删除时钟并以交互方式控制时钟。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="clockController.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启用之前已暂停的 <see cref="T:System.Windows.Media.Animation.Clock" />，以便继续处理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 无论当前状态如何，都可以暂停或恢复 <xref:System.Windows.Media.Animation.Clock> ，而暂停或继续时钟不会更改其当前状态。 可在、或时暂停 <xref:System.Windows.Media.Animation.ClockState.Active> 时钟 <xref:System.Windows.Media.Animation.ClockState.Stopped> <xref:System.Windows.Media.Animation.ClockState.Filling> 。 恢复暂停时钟的唯一方法是使用 <xref:System.Windows.Media.Animation.ClockController.Resume%2A> 方法。 恢复时钟将隐式恢复其子级。 在未暂停的时钟上调用此方法不起作用。  
  
 恢复暂停的时钟将触发 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">查找偏移量，以目标时钟的时间为单位。 此偏移量相对于时钟的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />，具体取决于 <paramref name="origin" /> 的值。</param>
        <param name="origin">一个值，指示指定的偏移量是否相对于目标时钟的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />。</param>
        <summary>在下一个计时周期开始时，根据指定的量查找目标 <see cref="P:System.Windows.Media.Animation.ClockController.Clock" />。 如果目标时钟已停止，则查找会使它再次处于活动状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seek 操作不会将 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> 此时钟时间线的或设置视为帐户：该时钟的时间线的时间为 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1，而不是 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> 。  
  
 此方法会将时钟更改 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 为 <xref:System.Windows.Media.Animation.ClockState.Active> 。 直到下一次处理计时周期时，此方法才会对计时树产生任何影响。 副作用是，在此之前，也不会引发相应的事件。  
  
 查找情节提要会触发 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> 和 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 事件。  
  
 如果目标时钟有子级，则其当前时间将相应更新。  
  
   
  
## Examples  
 下面的示例演示如何使用进行查找 <xref:System.Windows.Media.Animation.ClockController> 。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Animation.TimeSeekOrigin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">查找偏移量，以目标时钟的时间为单位。 此偏移量相对于时钟的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />，具体取决于 <paramref name="origin" /> 的值。</param>
        <param name="origin">一个值，指示指定的偏移量是否相对于目标时钟的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />。</param>
        <summary>立即根据指定的量查找目标 <see cref="T:System.Windows.Media.Animation.Clock" />。 如果目标时钟已停止，则查找会使它再次处于活动状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seek 操作不会将 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> 此时钟时间线的或设置视为帐户：该时钟的时间线的时间为 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1，而不是 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> 。  
  
 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 将时钟的 seeked 时间与上一个时钟周期对齐。 值会立即更新以反映所做的更改 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> ，即使在屏幕更新之前屏幕将不会反映这些更改。  
  
 如果目标时钟有子级，则其当前时间将相应更新。  
  
 此方法会将时钟更改 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 为 <xref:System.Windows.Media.Animation.ClockState.Active> 。  
  
 查找情节提要会触发 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> 和 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 事件。  
  
   
  
## Examples  
 下面的示例演示了的 <xref:System.Windows.Media.Animation.ClockController.Seek%2A> 和 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 方法 <xref:System.Windows.Media.Animation.ClockController> 。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="clockController.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将目标 <see cref="T:System.Windows.Media.Animation.Clock" /> 的当前时间向前调至其活动周期的结束时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将目标时钟的当前时间提升到其活动周期的结束时间;此时时钟的行为由 <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> 其的设置指定 <xref:System.Windows.Media.Animation.Timeline> 。 如果时间线的 <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> 属性设置为 <xref:System.Windows.Media.Animation.FillBehavior.HoldEnd> ，则时钟将填充; 如果属性设置为 <xref:System.Windows.Media.Animation.FillBehavior.Stop> ，则时钟将停止。  
  
 仅当目标时钟的为时，此方法才 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 有效 <xref:System.Windows.Media.Animation.ClockState.Active> 。  
  
 直到下一次处理计时周期时，此方法才会对计时树产生任何影响。 副作用是，在此之前，也不会引发相应的事件。  
  
 将情节提要前进到其填充期会触发 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 和 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedRatio">
      <MemberSignature Language="C#" Value="public double SpeedRatio { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SpeedRatio" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeedRatio As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SpeedRatio { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SpeedRatio : double with get, set" Usage="System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置目标 <see cref="T:System.Windows.Media.Animation.Clock" /> 的交互速度。</summary>
        <value>一个大于零的有限值，描述目标时钟的交互速度。 此值是时钟的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值的几倍。 例如，如果时间线的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 为 0.5 且 <see cref="T:System.Windows.Media.Animation.ClockController" /> 对象的 <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> 为 3.0，则时间线以正常速度 (0.5 * 3.0) 的 1.5 倍移动。 默认值为 1.0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置此属性在下一次计时周期之前不起作用。 如果设置此属性，然后在下一次计时周期之前获取其值，则将获取旧值。 此属性将在下一次计时周期后返回新值。  
  
 设置此属性不会更改基础时间线的值 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 。  
  
 设置此属性将触发目标时钟的 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> 事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="clockController.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止目标 <see cref="T:System.Windows.Media.Animation.Clock" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将目标时钟更改 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 为 <xref:System.Windows.Media.Animation.Clock.Stopped%2A> 。  
  
 <xref:System.Windows.Media.Animation.Clock.Stopped%2A>使用 <xref:System.Windows.Media.Animation.ClockController.Begin%2A> 、 <xref:System.Windows.Media.Animation.ClockController.Seek%2A> 或方法可以重新启动时钟 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 。  
  
 直到下一次处理计时周期时，此方法才会对计时树产生任何影响。 副作用是，在此之前，也不会引发相应的事件。  
  
 停止时钟 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 会触发和 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 事件，但不会触发 <xref:System.Windows.Media.Animation.Clock.Completed> 事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
