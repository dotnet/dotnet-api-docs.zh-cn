<Type Name="AssemblyDependencyResolver" FullName="System.Runtime.Loader.AssemblyDependencyResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="833f192116571031b47f768350c9e78a4da76189" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89783445" /></Metadata><TypeSignature Language="C#" Value="public sealed class AssemblyDependencyResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AssemblyDependencyResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Loader.AssemblyDependencyResolver" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AssemblyDependencyResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyDependencyResolver sealed" />
  <TypeSignature Language="F#" Value="type AssemblyDependencyResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Loader</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>允许程序根据给定程序集的依赖关系将程序集和本机库解析为路径。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 `AssemblyDependencyResolver`通过类，应用程序开发人员可以更轻松地与自定义实例一起开发插件体系结构， <xref:System.Runtime.Loader.AssemblyLoadContext?displayProperty=nameWithType> 以便隔离插件，还可以启用插件来加载依赖项。

 [有关使用插件创建 .Net Core 应用程序的教程](https://docs.microsoft.com/dotnet/core/tutorials/creating-app-with-plugin-support)介绍了如何创建一个自定义 <xref:System.Runtime.Loader.AssemblyLoadContext> ，该自定义使用 `AssemblyDependencyResolver` 来解析插件的依赖项，并正确地将插件的依赖项与宿主应用程序隔离开来。
 
    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssemblyDependencyResolver (string componentAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string componentAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentAssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AssemblyDependencyResolver(System::String ^ componentAssemblyPath);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Loader.AssemblyDependencyResolver : string -&gt; System.Runtime.Loader.AssemblyDependencyResolver" Usage="new System.Runtime.Loader.AssemblyDependencyResolver componentAssemblyPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="componentAssemblyPath">组件或插件的托管入口点的路径。</param>
        <summary>使用组件的程序集的路径初始化 <see cref="T:System.Runtime.Loader.AssemblyDependencyResolver" /> 类的新实例。</summary>
        <remarks>`componentAssemblyPath` 可以是相对路径或绝对路径。 程序集必须在描述程序集依赖项的同一目录中的文件上具有随附的 deps.js。 此文件是在生成过程中输出的。</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveAssemblyToPath">
      <MemberSignature Language="C#" Value="public string? ResolveAssemblyToPath (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ResolveAssemblyToPath(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveAssemblyToPath(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveAssemblyToPath (assemblyName As AssemblyName) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ResolveAssemblyToPath(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.ResolveAssemblyToPath : System.Reflection.AssemblyName -&gt; string" Usage="assemblyDependencyResolver.ResolveAssemblyToPath assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName">要解析的程序集名称。</param>
        <summary>基于组件的依赖关系解析具有给定程序集名称的程序集的路径。</summary>
        <returns>具有组件的 deps.json 文件中的给定名称的程序集路径，或者如果程序集不在 deps.json 文件中或不在 deps.json 文件指定位置的磁盘上，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUnmanagedDllToPath">
      <MemberSignature Language="C#" Value="public string? ResolveUnmanagedDllToPath (string unmanagedDllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ResolveUnmanagedDllToPath(string unmanagedDllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveUnmanagedDllToPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveUnmanagedDllToPath (unmanagedDllName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ResolveUnmanagedDllToPath(System::String ^ unmanagedDllName);" />
      <MemberSignature Language="F#" Value="member this.ResolveUnmanagedDllToPath : string -&gt; string" Usage="assemblyDependencyResolver.ResolveUnmanagedDllToPath unmanagedDllName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedDllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unmanagedDllName">要解析的本机库的名称。</param>
        <summary>基于组件的依赖关系解析具有给定名称的本机库的路径。</summary>
        <returns>具有组件的 deps.json 文件中的给定名称和当前运行时标识符的本机库路径，或者如果程序集不在 deps.json 文件中或不在 deps.json 文件指定位置的磁盘上，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
