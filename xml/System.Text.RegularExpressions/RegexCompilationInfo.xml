<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d91ae96695b7a27b5cc340ee2e7fa0e5f7370cf" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89931249" /></Metadata><TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RegexCompilationInfo extends System.Object" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供有关使用正则表达式将正则表达式编译为独立程序集的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对象的数组 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 传递给 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 方法，以提供有关要包含在程序集中的每个正则表达式的信息。 程序集中包含的每个已编译的正则表达式均表示为从派生的类 <xref:System.Text.RegularExpressions.Regex> 。 类型的属性 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 定义正则表达式的类名称、其完全限定名称 (即，其命名空间及其类型名称) 、其正则表达式模式、任何附加选项 (如正则表达式是否不区分大小写) ）和超时间隔（指定正则表达式引擎应搜索匹配的时间长度）。  
  
 可以 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 通过调用其重载类构造函数来实例化对象。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="/dotnet/standard/base-types/compilation-and-reuse-in-regular-expressions">编译和重复使用</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例。</summary>
        <related type="Article" href="/dotnet/standard/base-types/regular-expression-language-quick-reference">正则表达式语言元素</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">要编译的正则表达式。</param>
        <param name="options">编译正则表达式时使用的正则表达式选项。</param>
        <param name="name">表示已编译的正则表达式的类型名称。</param>
        <param name="fullnamespace">新类型所属的命名空间。</param>
        <param name="ispublic">若要使所编译的正则表达式对公共可见，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例，该类包含有关要在程序集内包括的正则表达式的信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数的每个参数都 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> 直接对应于类的属性 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 。 由于所有属性都是可读/写的，因此也可以直接分配其值。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法将生成一个包含已编译的正则表达式的程序集。 因此，不应将指定 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 为的值之一 `options` 。  
  
 如果 `ispublic` 为 `true` ，则为已编译的正则表达式类提供公共可访问性。 也就是说，可以通过在任何程序集中执行的代码对其进行实例化。 如果 `ispublic` 为 `false` ，则已编译的正则表达式类 `internal` (c # 中提供 ) 或 `Friend` (Visual Basic) 可访问性。 也就是说，它只能从与正则表达式类相同的程序集中执行的代码实例化。  
  
   
  
## Examples  
 下面的示例在两个步骤中创建并使用已编译的正则表达式。  
  
 在第一步中，编译并执行下面的代码示例。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A>代码示例中的构造函数定义已编译的正则表达式。 执行代码的结果是名为 FishRegex.dll 的程序集，其中包含名为的已编译正则表达式类型 `FishRegex` 。  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 在第二步中，使用对 FishRegex.dll 的引用编译下面的代码示例，然后运行生成的可执行文件。 可执行文件通过使用类型来匹配目标字符串 `FishRegex` ，并在目标字符串中显示匹配项、组、捕获组和匹配项的索引位置。  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="name" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="fullnamespace" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="usage"><para>此构造函数创建已编译的正则表达式，该表达式使用在其中创建它的应用程序域的默认超时值。 如果为应用程序域定义了超时值，则已编译的正则表达式将使用值 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> ，这会阻止模式匹配操作超时。用于创建已编译的正则表达式的推荐构造函数是 <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" /> ，可用于设置超时间隔。</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fullnamespace" Type="System.String" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ispublic" Type="System.Boolean" Index="4" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="5" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pattern">要编译的正则表达式。</param>
        <param name="options">编译正则表达式时使用的正则表达式选项。</param>
        <param name="name">表示已编译的正则表达式的类型名称。</param>
        <param name="fullnamespace">新类型所属的命名空间。</param>
        <param name="ispublic">若要使所编译的正则表达式对公共可见，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
        <param name="matchTimeout">正则表达式的默认超时间隔。</param>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例，该类包含有关要在程序集内包括的指定的超时值的信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数的每个参数都 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> 直接对应于类的属性 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 。 由于所有属性都是可读/写的，因此也可以直接分配其值。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法将生成一个包含已编译的正则表达式的程序集。 因此，不应将指定 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 为的值之一 `options` 。  
  
 如果 `ispublic` 为 `true` ，则为已编译的正则表达式类提供公共可访问性。 也就是说，可以通过在任何程序集中执行的代码对其进行实例化。 如果 `ispublic` 为 `false` ，则已编译的正则表达式类 `internal` (c # 中提供 ) 或 `Friend` (Visual Basic) 可访问性。 也就是说，它只能从与正则表达式类相同的程序集中执行的代码实例化。  
  
 `matchTimeout`参数定义已编译的正则表达式的默认超时间隔。 此值表示已编译的正则表达式对象在操作超时之前将执行单个匹配操作的大约时间量，并且正则表达式引擎 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 在其下一次计时检查期间引发异常。 有关超时值的其他信息，请参见 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> 属性。  
  
> [!IMPORTANT]
>  建议你始终为已编译的正则表达式设置默认超时值。 正则表达式库的使用者可以通过 <xref:System.TimeSpan> 将表示新的超时间隔的值传递到此构造函数重载，来覆盖该超时值。  
  
   
  
## Examples  
 下面的示例定义了一个名为 `DuplicateChars` 的、用于标识输入字符串中相同字符的两个或更多匹配项的已编译的正则表达式。 已编译的正则表达式的默认超时值为2秒。 当您执行该示例时，它将创建一个名为 RegexLib.dll 的类库，其中包含已编译的正则表达式。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正则表达式模式 `(\w)\1+` 的定义如下表所示。  
  
|模式|说明|  
|-------------|-----------------|  
|`(\w)`|匹配任意单词字符，并将其分配给第一个捕获组。|  
|`\1+`|匹配第一个捕获组的值的一个或多个匹配项。|  
  
 下面的示例使用 `DuplicatedChars` 正则表达式来标识字符串数组中的重复字符。 当它调用 `DuplicatedChars` 构造函数时，它会将超时间隔更改为5秒。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="name" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="fullnamespace" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示已编译的正则表达式是否具有公共可见性。</summary>
        <value>如果正则表达式具有公共可见性，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> 属性为 `false` ，则由当前实例定义的正则表达式类只能由在包含类的程序集中执行的代码实例化。 但是，因为 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> 方法会生成一个程序集，该程序集只包含已编译的正则表达式，不允许添加其他代码，所以通常没有理由为此属性分配值 `false` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置正则表达式的默认超时间隔。</summary>
        <value>在样式对的操作可经过的默认最长时间间隔时间，在 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 引发之前或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> ，如果挂起被禁用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>属性定义已编译的正则表达式的默认超时间隔。 此值表示已编译的正则表达式在操作超时之前将执行单个匹配操作的大约时间量，并且正则表达式引擎将 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 在其下一次计时检查期间引发异常。  
  
> [!IMPORTANT]
>  建议你始终为已编译的正则表达式设置默认超时值。 正则表达式库的使用者可以通过 <xref:System.TimeSpan> 向已编译的正则表达式的类构造函数传递表示新的超时间隔的值来覆盖该超时值。  
  
 可以通过以下任一方式向对象分配默认超时值 <xref:System.Text.RegularExpressions.RegexCompilationInfo> ：  
  
-   通过调用 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> 方法并提供 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT" 属性的值的字符串表示形式。  
  
-   通过调用 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> 构造函数并为参数提供值 `matchTimeout` 。  
  
-   通过设置此属性的值。  
  
 若要设置合理的超时间隔，请考虑以下因素：  
  
-   正则表达式模式的长度和复杂性。 较长和更复杂的正则表达式所需的时间比较短且更简单。  
  
-   预期的计算机负载。 在 CPU 和内存利用率较高的系统上，处理时间会更长。  
  
   
  
## Examples  
 下面的示例定义了一个名为 `DuplicateChars` 的、用于标识输入字符串中相同字符的两个或更多匹配项的已编译的正则表达式。 已编译的正则表达式的默认超时值为2秒。 当您执行该示例时，它将创建一个名为 RegexLib.dll 的类库，其中包含已编译的正则表达式。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正则表达式模式 `(\w)\1+` 的定义如下表所示。  
  
|模式|说明|  
|-------------|-----------------|  
|`(\w)`|匹配任意单词字符，并将其分配给第一个捕获组。|  
|`\1+`|匹配第一个捕获组的值的一个或多个匹配项。|  
  
 下面的示例使用 `DuplicatedChars` 正则表达式来标识字符串数组中的重复字符。 当它调用 `DuplicatedChars` 构造函数时，它会将超时间隔更改为5秒。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示已编译的正则表达式的类型名称。</summary>
        <value>新类型的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>类用于定义已编译的正则表达式，该表达式表示为从派生的类 <xref:System.Text.RegularExpressions.Regex> 。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>属性定义正则表达式类型的类名， <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> 并且和 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> 属性共同定义其完全限定名称。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">此属性的值为空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置新类型所属的命名空间。</summary>
        <value>新类型的命名空间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>类用于定义已编译的正则表达式，该表达式表示为从派生的类 <xref:System.Text.RegularExpressions.Regex> 。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>属性定义包含已编译的正则表达式类型的命名空间， <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> 并且和 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> 属性共同定义其完全限定名称。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编译正则表达式时使用的选项。</summary>
        <value>枚举值的按位组合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法将生成一个包含已编译的正则表达式的程序集。 因此，无需指定 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 为此属性的值之一。 如果它存在，则 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 忽略该选项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要编译的正则表达式。</summary>
        <value>要编译的正则表达式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>属性可以包含任何有效的正则表达式。 如果属性的值 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> 不是语法正确的正则表达式模式，则对方法的调用将 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 引发 <xref:System.ArgumentException> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/standard/base-types/regular-expressions">.NET Framework 正则表达式</related>
        <related type="Article" href="/dotnet/standard/base-types/regular-expression-language-quick-reference">正则表达式语言元素</related>
      </Docs>
    </Member>
  </Members>
</Type>
