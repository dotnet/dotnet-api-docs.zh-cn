<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d56df6db8f0d9edc3104d418909233a1f1156f6" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89971528" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Match extends System.Text.RegularExpressions.Group" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Text.RegularExpressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.RegularExpressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示单个正则表达式匹配的结果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match>对象是不可变的，并且没有公共构造函数。 类的实例 <xref:System.Text.RegularExpressions.Match> 由 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 方法返回，表示字符串中的第一个模式匹配项。 后续匹配由 <xref:System.Text.RegularExpressions.Match> 方法返回的对象表示 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 。 此外，方法将 <xref:System.Text.RegularExpressions.MatchCollection> 返回一个由零个、一个或多个对象组成的对象 <xref:System.Text.RegularExpressions.Match> <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 。  
  
 如果该 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 方法无法与输入字符串中的正则表达式模式匹配，则将返回一个空 <xref:System.Text.RegularExpressions.MatchCollection> 对象。 然后，可以使用 `foreach` c # 中的构造或 `For Each` Visual Basic 中的构造来循环访问集合。  
  
 如果该 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 方法无法与正则表达式模式匹配，则将返回 <xref:System.Text.RegularExpressions.Match> 等于的对象 <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType> 。 您可以使用 <xref:System.Text.RegularExpressions.Group.Success%2A> 属性来确定匹配是否成功。 下面的示例进行了这方面的演示。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 如果模式匹配成功，则 <xref:System.Text.RegularExpressions.Capture.Value%2A> 属性包含匹配的子字符串， <xref:System.Text.RegularExpressions.Capture.Index%2A> 属性指示输入字符串中匹配的子字符串的从零开始的起始位置，而 <xref:System.Text.RegularExpressions.Capture.Length%2A> 属性指示输入字符串中匹配的子字符串的长度。  
  
 由于单个匹配可以涉及多个捕获组，因此 <xref:System.Text.RegularExpressions.Match> 具有一个 <xref:System.Text.RegularExpressions.Match.Groups%2A> 返回的属性 <xref:System.Text.RegularExpressions.GroupCollection> 。 <xref:System.Text.RegularExpressions.Match>实例本身等效于集合中的第一个对象， `Match.Groups[0]` (`Match.Groups(0)` Visual Basic) 中，该对象表示整个匹配项。 可以通过以下方式访问匹配中捕获的组：  
  
-   可以 <xref:System.Text.RegularExpressions.GroupCollection> 通过使用 `foreach` (c # ) 或 `For Each` (Visual Basic) 构造来循环访问对象的成员。  
  
-   你可以使用 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> 属性按捕获组的数量检索组。 请注意，可以通过调用实例方法来确定正则表达式中存在哪些编号组 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 。  
  
-   你可以使用 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> 属性按捕获组的名称检索组。 请注意，可以通过调用实例方法来确定正则表达式中存在哪些命名组 <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例使用正则表达式 `Console\.Write(Line)?` 。 正则表达式按如下方式解释：  
  
|||  
|-|-|  
|控制台 \\ 。写入|匹配字符串“Console.Write”。 请注意，"." 字符经过转义，以便将其解释为文本句点，而不是与任何字符匹配的通配符。|  
| (行) ？|匹配字符串“Line”的零个或一个匹配项。|  
  
 **示例 1**  
  
 下面的示例调用 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> 方法以检索输入字符串中的所有模式匹配项。 然后，它将循环访问 <xref:System.Text.RegularExpressions.Match> 返回的对象中的对象 <xref:System.Text.RegularExpressions.MatchCollection> 以显示有关每个匹配项的信息。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **示例 2**  
  
 下面的示例调用 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 和 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 方法以一次检索一个匹配项。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取空组。 所有失败的匹配都返回此空匹配。</summary>
        <value>空匹配。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不应使用此属性来确定匹配是否成功。 请改用 `Match.Success` 从) 继承的属性 (<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由正则表达式匹配的组的集合。</summary>
        <value>由模式匹配的字符组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正则表达式模式可以包含子表达式，子表达式是通过将正则表达式模式的一部分括在括号中来定义的。 每个此类子表达式构成一个组。 <xref:System.Text.RegularExpressions.Match.Groups%2A>属性提供对这些子表达式匹配项的信息的访问。 例如，匹配北美电话号码的正则表达式模式 `(\d{3})-(\d{3}-\d{4})` 具有两个子表达式。 第一个包含区号，其中包含电话号码的前三位数字。 此组由正则表达式的第一部分捕获 `(\d{3})` 。 第二个包含单个电话号码，其中包含电话号码的最后7位数字。 此组由正则表达式的第二部分捕获 `(\d{3}-\d{4})` 。 然后，可以从属性返回的对象中检索这两个组 <xref:System.Text.RegularExpressions.GroupCollection> <xref:System.Text.RegularExpressions.Match.Groups%2A> ，如下例所示。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb" id="Snippet1"::: 
  
 <xref:System.Text.RegularExpressions.GroupCollection>属性返回的对象 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 是一个始终具有至少一个成员的从零开始的集合对象。 如果正则表达式引擎在特定输入字符串中找不到任何匹配项，则 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> <xref:System.Text.RegularExpressions.Group> 集合中单个对象的属性 (索引 0) 处的对象，并将 `false` 该 <xref:System.Text.RegularExpressions.Group> 对象的 <xref:System.Text.RegularExpressions.Capture.Value%2A> 属性设置为 <xref:System.String.Empty?displayProperty=nameWithType> 。 如果正则表达式引擎可以找到匹配项，则该对象的第一个元素 <xref:System.Text.RegularExpressions.GroupCollection> (属性返回的索引 0) 的元素 <xref:System.Text.RegularExpressions.Match.Groups%2A> 包含与整个正则表达式模式匹配的字符串。 如果正则表达式包含捕获组，则每个后续元素（从向上索引一个）表示捕获的组。 有关详细信息，请参阅 [分组构造](/dotnet/standard/base-types/grouping-constructs-in-regular-expressions) 一文中的 "分组构造和正则表达式对象" 一节。  
  
   
  
## Examples  
 下面的示例尝试将正则表达式模式与示例字符串进行匹配。 该示例使用 <xref:System.Text.RegularExpressions.Match.Groups%2A> 属性存储要显示到控制台的匹配项所检索的信息。  
 
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。</summary>
        <returns>下一个正则表达式匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法类似于再次调用 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 并将 (`Index+Length`) 作为新的起始位置传入。  
  
> [!NOTE]
>  此方法不会修改当前实例。 相反，它会返回一个新 <xref:System.Text.RegularExpressions.Match> 的对象，其中包含有关下一个匹配项的信息。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>如果匹配操作的超时值有效，但尝试查找下一个匹配项时，尝试检索下一个匹配项可能会引发。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 方法在第一个匹配项之外捕获正则表达式匹配项。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
        <block subset="none" type="usage"><para>当通过调用方法重复匹配尝试时 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> ，正则表达式引擎将提供空匹配特殊处理。 通常， <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 开始搜索下一个匹配项的精确位置。 但是，在空匹配项后，该方法将在 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 尝试下一个匹配项前向前移动一个字符。 此行为可确保正则表达式引擎将通过字符串进行。 否则，由于空匹配不会导致任何向前移动，因此下一个匹配项将与上一个匹配项完全相同的位置开始，并且它将重复匹配相同的空字符串。  
  
下面的示例进行了这方面的演示。 正则表达式模式 <c>a *</c> 在字符串 "abaabb" 中搜索字母 "a" 的零个或多个匹配项。 如示例中的输出所示，搜索会找到六个匹配项。 第一个匹配尝试查找第一个 "a"。 第二个匹配从第一个匹配结束的位置开始，在第一个 b 之前开始;它查找 "a" 的零次，并返回一个空字符串。 第三个匹配项并不完全从第二个匹配项结束的位置开始，因为第二个匹配项返回空字符串。 相反，它会在后面的第一个 "b" 后开始一个字符。 第三个匹配项查找 "a" 的两个匹配项，并返回 "aa"。 第四个匹配尝试从第三个匹配项的第二个匹配项的第二个 "b" 之前开始，并返回一个空字符串。 第五次匹配尝试再次推进一个字符，以使其在第三个 "b" 之前开始，并返回一个空字符串。 第六个匹配项的开头为 "b"，并再次返回空字符串。  
 
：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs" interactive = "dotnet" id = "Snippet1"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb" id = "Snippet1"：：：</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">要使用的替换模式。</param>
        <summary>返回对指定替换模式的扩展。</summary>
        <returns><paramref name="replacement" /> 参数的扩展版本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> 方法将输入字符串中的所有匹配项替换为指定的替换模式，而方法会将 <xref:System.Text.RegularExpressions.Match.Result%2A> 单个匹配项替换为指定的替换模式。 因为它对单个匹配项进行操作，所以在调用方法之前，还可以对匹配的字符串执行处理 <xref:System.Text.RegularExpressions.Match.Result%2A> 。  
  
 `replacement`参数是标准正则表达式替换模式。 它可以包含文本字符和正则表达式替换。 有关更多信息，请参见 [替代](/dotnet/standard/base-types/substitutions-in-regular-expressions)。  
  
   
  
## Examples  
 下面的示例使用括号替换开头和结尾带括号的连字符。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb" id="Snippet1":::
  
 正则表达式模式 `--(.+?)--` 的含义如下表所示。  
  
|模式|说明|  
|-------------|-----------------|  
|`--`|匹配两个连字符。|  
|`(.+?)`|匹配任一字符一次或多次，但次数尽可能少。 这是第一个捕获组。|  
|`--`|匹配两个连字符。|  
  
 请注意，正则表达式模式 `--(.+?)--` 使用惰性限定符 `+?` 。 如果改为使用贪婪限定符 `+` ，则正则表达式引擎在输入字符串中仅查找单个匹配项。  
  
 替换字符串 `($1)` 用括在括号中的第一个捕获组替换匹配项。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="replacement" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">不允许对此模式进行扩展。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="/dotnet/standard/base-types/substitutions-in-regular-expressions">正则表达式中的替代</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="inner">与预期匹配等效的正则表达式匹配。</param>
        <summary>返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" /> 实例，该实例适合在多个线程间共享。</summary>
        <returns>适合在多个线程间共享的正则表达式匹配。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inner" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
