<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0fbafb7eceb18abad75583849c42b6c18c60f22d" /><Meta Name="ms.sourcegitcommit" Value="1fa2c0427e25fa9a43f9ddb13597e15452878d33" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/13/2021" /><Meta Name="ms.locfileid" Value="103421409" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Match extends System.Text.RegularExpressions.Group" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Text.RegularExpressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.RegularExpressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8762c-101">表示单个正则表达式匹配的结果。</span><span class="sxs-lookup"><span data-stu-id="8762c-101">Represents the results from a single regular expression match.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8762c-102"><xref:System.Text.RegularExpressions.Match>对象是不可变的，并且没有公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="8762c-102">The <xref:System.Text.RegularExpressions.Match> object is immutable and has no public constructor.</span></span> <span data-ttu-id="8762c-103">类的实例 <xref:System.Text.RegularExpressions.Match> 由 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 方法返回，表示字符串中的第一个模式匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-103">An instance of the <xref:System.Text.RegularExpressions.Match> class is returned by the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method and represents the first pattern match in a string.</span></span> <span data-ttu-id="8762c-104">后续匹配由 <xref:System.Text.RegularExpressions.Match> 方法返回的对象表示 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-104">Subsequent matches are represented by <xref:System.Text.RegularExpressions.Match> objects returned by the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8762c-105">此外，方法将 <xref:System.Text.RegularExpressions.MatchCollection> 返回一个由零个、一个或多个对象组成的对象 <xref:System.Text.RegularExpressions.Match> <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-105">In addition, a <xref:System.Text.RegularExpressions.MatchCollection> object that consists of zero, one, or more <xref:System.Text.RegularExpressions.Match> objects is returned by the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8762c-106">如果该 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 方法无法与输入字符串中的正则表达式模式匹配，则将返回一个空 <xref:System.Text.RegularExpressions.MatchCollection> 对象。</span><span class="sxs-lookup"><span data-stu-id="8762c-106">If the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method fails to match a regular expression pattern in an input string, it returns an empty <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="8762c-107">然后，可以使用 `foreach` c # 中的构造或 `For Each` Visual Basic 中的构造来循环访问集合。</span><span class="sxs-lookup"><span data-stu-id="8762c-107">You can then use a `foreach` construct in C# or a `For Each` construct in Visual Basic to iterate the collection.</span></span>  
  
 <span data-ttu-id="8762c-108">如果该 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 方法无法与正则表达式模式匹配，则将返回 <xref:System.Text.RegularExpressions.Match> 等于的对象 <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-108">If the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method fails to match the regular expression pattern, it returns a <xref:System.Text.RegularExpressions.Match> object that is equal to <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8762c-109">您可以使用 <xref:System.Text.RegularExpressions.Group.Success%2A> 属性来确定匹配是否成功。</span><span class="sxs-lookup"><span data-stu-id="8762c-109">You can use the <xref:System.Text.RegularExpressions.Group.Success%2A> property to determine whether the match was successful.</span></span> <span data-ttu-id="8762c-110">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="8762c-110">The following example provides an illustration.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb" id="Snippet1":::
  
 <span data-ttu-id="8762c-111">如果模式匹配成功，则 <xref:System.Text.RegularExpressions.Capture.Value%2A> 属性包含匹配的子字符串， <xref:System.Text.RegularExpressions.Capture.Index%2A> 属性指示输入字符串中匹配的子字符串的从零开始的起始位置，而 <xref:System.Text.RegularExpressions.Capture.Length%2A> 属性指示输入字符串中匹配的子字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="8762c-111">If a pattern match is successful, the <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the matched substring, the <xref:System.Text.RegularExpressions.Capture.Index%2A> property indicates the zero-based starting position of the matched substring in the input string, and the <xref:System.Text.RegularExpressions.Capture.Length%2A> property indicates the length of matched substring in the input string.</span></span>  
  
 <span data-ttu-id="8762c-112">由于单个匹配可以涉及多个捕获组，因此 <xref:System.Text.RegularExpressions.Match> 具有一个 <xref:System.Text.RegularExpressions.Match.Groups%2A> 返回的属性 <xref:System.Text.RegularExpressions.GroupCollection> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-112">Because a single match can involve multiple capturing groups, <xref:System.Text.RegularExpressions.Match> has a <xref:System.Text.RegularExpressions.Match.Groups%2A> property that returns the <xref:System.Text.RegularExpressions.GroupCollection>.</span></span> <span data-ttu-id="8762c-113"><xref:System.Text.RegularExpressions.Match>实例本身等效于集合中的第一个对象， `Match.Groups[0]` (`Match.Groups(0)` Visual Basic) 中，该对象表示整个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-113">The <xref:System.Text.RegularExpressions.Match> instance itself is equivalent to the first object in the collection, at `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), which represents the entire match.</span></span> <span data-ttu-id="8762c-114">可以通过以下方式访问匹配中捕获的组：</span><span class="sxs-lookup"><span data-stu-id="8762c-114">You can access the captured groups in a match in the following ways:</span></span>  
  
-   <span data-ttu-id="8762c-115">可以 <xref:System.Text.RegularExpressions.GroupCollection> 通过使用 `foreach` (c # ) 或 `For Each` (Visual Basic) 构造来循环访问对象的成员。</span><span class="sxs-lookup"><span data-stu-id="8762c-115">You can iterate the members of the <xref:System.Text.RegularExpressions.GroupCollection> object  by using a `foreach` (C#) or `For Each` (Visual Basic) construct.</span></span>  
  
-   <span data-ttu-id="8762c-116">你可以使用 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> 属性按捕获组的数量检索组。</span><span class="sxs-lookup"><span data-stu-id="8762c-116">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> property to retrieve groups by the number of the capturing group.</span></span> <span data-ttu-id="8762c-117">请注意，可以通过调用实例方法来确定正则表达式中存在哪些编号组 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-117">Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="8762c-118">你可以使用 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> 属性按捕获组的名称检索组。</span><span class="sxs-lookup"><span data-stu-id="8762c-118">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> property to retrieve groups by the name of the capturing group.</span></span> <span data-ttu-id="8762c-119">请注意，可以通过调用实例方法来确定正则表达式中存在哪些命名组 <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-119">Note that you can determine which named groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8762c-120">下面的示例使用正则表达式 `Console\.Write(Line)?` 。</span><span class="sxs-lookup"><span data-stu-id="8762c-120">The following examples use the regular expression `Console\.Write(Line)?`.</span></span> <span data-ttu-id="8762c-121">正则表达式按如下方式解释：</span><span class="sxs-lookup"><span data-stu-id="8762c-121">The regular expression is interpreted as follows:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8762c-122">控制台 \\ 。写入</span><span class="sxs-lookup"><span data-stu-id="8762c-122">Console\\.Write</span></span>|<span data-ttu-id="8762c-123">匹配字符串“Console.Write”。</span><span class="sxs-lookup"><span data-stu-id="8762c-123">Match the string "Console.Write".</span></span> <span data-ttu-id="8762c-124">请注意，"." 字符经过转义，以便将其解释为文本句点，而不是与任何字符匹配的通配符。</span><span class="sxs-lookup"><span data-stu-id="8762c-124">Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</span></span>|  
|<span data-ttu-id="8762c-125"> (行) ？</span><span class="sxs-lookup"><span data-stu-id="8762c-125">(Line)?</span></span>|<span data-ttu-id="8762c-126">匹配字符串“Line”的零个或一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-126">Match zero or one occurrence of the string "Line".</span></span>|  
  
 <span data-ttu-id="8762c-127">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="8762c-127">**Example 1**</span></span>  
  
 <span data-ttu-id="8762c-128">下面的示例调用 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> 方法以检索输入字符串中的所有模式匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-128">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method to retrieve all pattern matches in an input string.</span></span> <span data-ttu-id="8762c-129">然后，它将循环访问 <xref:System.Text.RegularExpressions.Match> 返回的对象中的对象 <xref:System.Text.RegularExpressions.MatchCollection> 以显示有关每个匹配项的信息。</span><span class="sxs-lookup"><span data-stu-id="8762c-129">It then iterates the <xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> object to display information about each match.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb" id="Snippet2":::

 <span data-ttu-id="8762c-130">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="8762c-130">**Example 2**</span></span>  
  
 <span data-ttu-id="8762c-131">下面的示例调用 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 和 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 方法以一次检索一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-131">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> and <xref:System.Text.RegularExpressions.Match.NextMatch%2A> methods to retrieve one match at a time.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb" id="Snippet3":::

 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8762c-132">获取空组。</span><span class="sxs-lookup"><span data-stu-id="8762c-132">Gets the empty group.</span></span> <span data-ttu-id="8762c-133">所有失败的匹配都返回此空匹配。</span><span class="sxs-lookup"><span data-stu-id="8762c-133">All failed matches return this empty match.</span></span></summary>
        <value><span data-ttu-id="8762c-134">空匹配。</span><span class="sxs-lookup"><span data-stu-id="8762c-134">An empty match.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8762c-135">不应使用此属性来确定匹配是否成功。</span><span class="sxs-lookup"><span data-stu-id="8762c-135">This property should not be used to determine if a match is successful.</span></span> <span data-ttu-id="8762c-136">请改用 `Match.Success` 从) 继承的属性 (<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-136">Instead, use the `Match.Success` property (which is inherited from <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8762c-137">获取由正则表达式匹配的组的集合。</span><span class="sxs-lookup"><span data-stu-id="8762c-137">Gets a collection of groups matched by the regular expression.</span></span></summary>
        <value><span data-ttu-id="8762c-138">由模式匹配的字符组。</span><span class="sxs-lookup"><span data-stu-id="8762c-138">The character groups matched by the pattern.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8762c-139">正则表达式模式可以包含子表达式，子表达式是通过将正则表达式模式的一部分括在括号中来定义的。</span><span class="sxs-lookup"><span data-stu-id="8762c-139">A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</span></span> <span data-ttu-id="8762c-140">每个此类子表达式构成一个组。</span><span class="sxs-lookup"><span data-stu-id="8762c-140">Every such subexpression forms a group.</span></span> <span data-ttu-id="8762c-141"><xref:System.Text.RegularExpressions.Match.Groups%2A>属性提供对这些子表达式匹配项的信息的访问。</span><span class="sxs-lookup"><span data-stu-id="8762c-141">The <xref:System.Text.RegularExpressions.Match.Groups%2A> property provides access to information about those subexpression matches.</span></span> <span data-ttu-id="8762c-142">例如，匹配北美电话号码的正则表达式模式 `(\d{3})-(\d{3}-\d{4})` 具有两个子表达式。</span><span class="sxs-lookup"><span data-stu-id="8762c-142">For example, the regular expression pattern `(\d{3})-(\d{3}-\d{4})`, which matches North American telephone numbers, has two subexpressions.</span></span> <span data-ttu-id="8762c-143">第一个包含区号，其中包含电话号码的前三位数字。</span><span class="sxs-lookup"><span data-stu-id="8762c-143">The first consists of the area code, which composes the first three digits of the telephone number.</span></span> <span data-ttu-id="8762c-144">此组由正则表达式的第一部分捕获 `(\d{3})` 。</span><span class="sxs-lookup"><span data-stu-id="8762c-144">This group is captured by the first portion of the regular expression, `(\d{3})`.</span></span> <span data-ttu-id="8762c-145">第二个包含单个电话号码，其中包含电话号码的最后7位数字。</span><span class="sxs-lookup"><span data-stu-id="8762c-145">The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</span></span> <span data-ttu-id="8762c-146">此组由正则表达式的第二部分捕获 `(\d{3}-\d{4})` 。</span><span class="sxs-lookup"><span data-stu-id="8762c-146">This group is captured by the second portion of the regular expression, `(\d{3}-\d{4})`.</span></span> <span data-ttu-id="8762c-147">然后，可以从属性返回的对象中检索这两个组 <xref:System.Text.RegularExpressions.GroupCollection> <xref:System.Text.RegularExpressions.Match.Groups%2A> ，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="8762c-147">These two groups can then be retrieved from the <xref:System.Text.RegularExpressions.GroupCollection> object that is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property, as the following example shows.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb" id="Snippet1"::: 
  
 <span data-ttu-id="8762c-148"><xref:System.Text.RegularExpressions.GroupCollection>属性返回的对象 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 是一个始终具有至少一个成员的从零开始的集合对象。</span><span class="sxs-lookup"><span data-stu-id="8762c-148">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property is a zero-based collection object that always has at least one member.</span></span> <span data-ttu-id="8762c-149">如果正则表达式引擎在特定输入字符串中找不到任何匹配项，则 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> <xref:System.Text.RegularExpressions.Group> 集合中单个对象的属性 (索引 0) 处的对象，并将 `false` 该 <xref:System.Text.RegularExpressions.Group> 对象的 <xref:System.Text.RegularExpressions.Capture.Value%2A> 属性设置为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-149">If the regular expression engine cannot find any matches in a particular input string, the <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property of the single <xref:System.Text.RegularExpressions.Group> object in the collection (the object at index 0) is set to `false` and the <xref:System.Text.RegularExpressions.Group> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property is set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8762c-150">如果正则表达式引擎可以找到匹配项，则该对象的第一个元素 <xref:System.Text.RegularExpressions.GroupCollection> (属性返回的索引 0) 的元素 <xref:System.Text.RegularExpressions.Match.Groups%2A> 包含与整个正则表达式模式匹配的字符串。</span><span class="sxs-lookup"><span data-stu-id="8762c-150">If the regular expression engine can find a match, the first element of the <xref:System.Text.RegularExpressions.GroupCollection> object (the element at index 0) returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property contains a string that matches the entire regular expression pattern.</span></span> <span data-ttu-id="8762c-151">如果正则表达式包含捕获组，则每个后续元素（从向上索引一个）表示捕获的组。</span><span class="sxs-lookup"><span data-stu-id="8762c-151">Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="8762c-152">有关详细信息，请参阅 [分组构造](/dotnet/standard/base-types/grouping-constructs-in-regular-expressions) 一文中的 "分组构造和正则表达式对象" 一节。</span><span class="sxs-lookup"><span data-stu-id="8762c-152">For more information, see the "Grouping Constructs and Regular Expression Objects" section of the [Grouping Constructs](/dotnet/standard/base-types/grouping-constructs-in-regular-expressions) article.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8762c-153">下面的示例尝试将正则表达式模式与示例字符串进行匹配。</span><span class="sxs-lookup"><span data-stu-id="8762c-153">The following example attempts to match a regular expression pattern against a sample string.</span></span> <span data-ttu-id="8762c-154">该示例使用 <xref:System.Text.RegularExpressions.Match.Groups%2A> 属性存储要显示到控制台的匹配项所检索的信息。</span><span class="sxs-lookup"><span data-stu-id="8762c-154">The example uses the <xref:System.Text.RegularExpressions.Match.Groups%2A> property to store information that is retrieved by the match for display to the console.</span></span>  
 
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8762c-155">从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="8762c-155">Returns a new <see cref="T:System.Text.RegularExpressions.Match" /> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</span></span></summary>
        <returns><span data-ttu-id="8762c-156">下一个正则表达式匹配。</span><span class="sxs-lookup"><span data-stu-id="8762c-156">The next regular expression match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8762c-157">此方法类似于再次调用 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 并将 (`Index+Length`) 作为新的起始位置传入。</span><span class="sxs-lookup"><span data-stu-id="8762c-157">This method is similar to calling <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> again and passing (`Index+Length`) as the new starting position.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8762c-158">此方法不会修改当前实例。</span><span class="sxs-lookup"><span data-stu-id="8762c-158">This method does not modify the current instance.</span></span> <span data-ttu-id="8762c-159">相反，它会返回一个新 <xref:System.Text.RegularExpressions.Match> 的对象，其中包含有关下一个匹配项的信息。</span><span class="sxs-lookup"><span data-stu-id="8762c-159">Instead, it returns a new <xref:System.Text.RegularExpressions.Match> object that contains information about the next match.</span></span>  
  
 <span data-ttu-id="8762c-160"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>如果匹配操作的超时值有效，但尝试查找下一个匹配项时，尝试检索下一个匹配项可能会引发。</span><span class="sxs-lookup"><span data-stu-id="8762c-160">Attempting to retrieve the next match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8762c-161">下面的示例使用 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 方法在第一个匹配项之外捕获正则表达式匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-161">The following example uses the <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method to capture regular expression matches beyond the first match.</span></span>  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="8762c-162">发生超时。</span><span class="sxs-lookup"><span data-stu-id="8762c-162">A time-out occurred.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="8762c-163">当通过调用方法重复匹配尝试时 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> ，正则表达式引擎将提供空匹配特殊处理。</span><span class="sxs-lookup"><span data-stu-id="8762c-163">When a match attempt is repeated by calling the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method, the regular expression engine gives empty matches special treatment.</span></span> <span data-ttu-id="8762c-164">通常， <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 开始搜索下一个匹配项的精确位置。</span><span class="sxs-lookup"><span data-stu-id="8762c-164">Usually, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> begins the search for the next match exactly where the previous match left off.</span></span> <span data-ttu-id="8762c-165">但是，在空匹配项后，该方法将在 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 尝试下一个匹配项前向前移动一个字符。</span><span class="sxs-lookup"><span data-stu-id="8762c-165">However, after an empty match, the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method advances by one character before trying the next match.</span></span> <span data-ttu-id="8762c-166">此行为可确保正则表达式引擎将通过字符串进行。</span><span class="sxs-lookup"><span data-stu-id="8762c-166">This behavior guarantees that the regular expression engine will progress through the string.</span></span> <span data-ttu-id="8762c-167">否则，由于空匹配不会导致任何向前移动，因此下一个匹配项将与上一个匹配项完全相同的位置开始，并且它将重复匹配相同的空字符串。</span><span class="sxs-lookup"><span data-stu-id="8762c-167">Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.</span></span>  
  
<span data-ttu-id="8762c-168">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="8762c-168">The following example provides an illustration.</span></span> <span data-ttu-id="8762c-169">正则表达式模式 <c>a \*</c> 在字符串 "abaabb" 中搜索字母 "a" 的零个或多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-169">The regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb".</span></span> <span data-ttu-id="8762c-170">如示例中的输出所示，搜索会找到六个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-170">As the output from the example shows, the search finds six matches.</span></span> <span data-ttu-id="8762c-171">第一个匹配尝试查找第一个 "a"。</span><span class="sxs-lookup"><span data-stu-id="8762c-171">The first match attempt finds the first "a".</span></span> <span data-ttu-id="8762c-172">第二个匹配从第一个匹配结束的位置开始，在第一个 b 之前开始;它查找 "a" 的零次，并返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="8762c-172">The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string.</span></span> <span data-ttu-id="8762c-173">第三个匹配项并不完全从第二个匹配项结束的位置开始，因为第二个匹配项返回空字符串。</span><span class="sxs-lookup"><span data-stu-id="8762c-173">The third match does not begin exactly where the second match ended, because the second match returned an empty string.</span></span> <span data-ttu-id="8762c-174">相反，它会在后面的第一个 "b" 后开始一个字符。</span><span class="sxs-lookup"><span data-stu-id="8762c-174">Instead, it begins one character later, after the first "b".</span></span> <span data-ttu-id="8762c-175">第三个匹配项查找 "a" 的两个匹配项，并返回 "aa"。</span><span class="sxs-lookup"><span data-stu-id="8762c-175">The third match finds two occurrences of "a" and returns "aa".</span></span> <span data-ttu-id="8762c-176">第四个匹配尝试从第三个匹配项的第二个匹配项的第二个 "b" 之前开始，并返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="8762c-176">The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string.</span></span> <span data-ttu-id="8762c-177">第五次匹配尝试再次推进一个字符，以使其在第三个 "b" 之前开始，并返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="8762c-177">The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string.</span></span> <span data-ttu-id="8762c-178">第六个匹配项的开头为 "b"，并再次返回空字符串。</span><span class="sxs-lookup"><span data-stu-id="8762c-178">The sixth match begins after the last "b" and returns an empty string again.</span></span>  
 
<span data-ttu-id="8762c-179">：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs" interactive = "dotnet" id = "Snippet1"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb" id = "Snippet1"：：：</span><span class="sxs-lookup"><span data-stu-id="8762c-179">:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs" interactive="try-dotnet" id="Snippet1"::: :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb" id="Snippet1":::</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement"><span data-ttu-id="8762c-180">要使用的替换模式。</span><span class="sxs-lookup"><span data-stu-id="8762c-180">The replacement pattern to use.</span></span></param>
        <summary><span data-ttu-id="8762c-181">返回对指定替换模式的扩展。</span><span class="sxs-lookup"><span data-stu-id="8762c-181">Returns the expansion of the specified replacement pattern.</span></span></summary>
        <returns><span data-ttu-id="8762c-182"><paramref name="replacement" /> 参数的扩展版本。</span><span class="sxs-lookup"><span data-stu-id="8762c-182">The expanded version of the <paramref name="replacement" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8762c-183">此 <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> 方法将输入字符串中的所有匹配项替换为指定的替换模式，而方法会将 <xref:System.Text.RegularExpressions.Match.Result%2A> 单个匹配项替换为指定的替换模式。</span><span class="sxs-lookup"><span data-stu-id="8762c-183">Whereas the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> method replaces all matches in an input string with a specified replacement pattern, the <xref:System.Text.RegularExpressions.Match.Result%2A> method replaces a single match with a specified replacement pattern.</span></span> <span data-ttu-id="8762c-184">因为它对单个匹配项进行操作，所以在调用方法之前，还可以对匹配的字符串执行处理 <xref:System.Text.RegularExpressions.Match.Result%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8762c-184">Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <xref:System.Text.RegularExpressions.Match.Result%2A> method.</span></span>  
  
 <span data-ttu-id="8762c-185">`replacement`参数是标准正则表达式替换模式。</span><span class="sxs-lookup"><span data-stu-id="8762c-185">The `replacement` parameter is a standard regular expression replacement pattern.</span></span> <span data-ttu-id="8762c-186">它可以包含文本字符和正则表达式替换。</span><span class="sxs-lookup"><span data-stu-id="8762c-186">It can consist of literal characters and regular expression substitutions.</span></span> <span data-ttu-id="8762c-187">有关更多信息，请参见 [替代](/dotnet/standard/base-types/substitutions-in-regular-expressions)。</span><span class="sxs-lookup"><span data-stu-id="8762c-187">For more information, see [Substitutions](/dotnet/standard/base-types/substitutions-in-regular-expressions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8762c-188">下面的示例使用括号替换开头和结尾带括号的连字符。</span><span class="sxs-lookup"><span data-stu-id="8762c-188">The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.</span></span>  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb" id="Snippet1":::
  
 <span data-ttu-id="8762c-189">正则表达式模式 `--(.+?)--` 的含义如下表所示。</span><span class="sxs-lookup"><span data-stu-id="8762c-189">The regular expression pattern `--(.+?)--` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="8762c-190">模式</span><span class="sxs-lookup"><span data-stu-id="8762c-190">Pattern</span></span>|<span data-ttu-id="8762c-191">说明</span><span class="sxs-lookup"><span data-stu-id="8762c-191">Description</span></span>|  
|-------------|-----------------|  
|`--`|<span data-ttu-id="8762c-192">匹配两个连字符。</span><span class="sxs-lookup"><span data-stu-id="8762c-192">Match two hyphens.</span></span>|  
|`(.+?)`|<span data-ttu-id="8762c-193">匹配任一字符一次或多次，但次数尽可能少。</span><span class="sxs-lookup"><span data-stu-id="8762c-193">Match any character one or more times, but as few times as possible.</span></span> <span data-ttu-id="8762c-194">这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="8762c-194">This is the first capturing group.</span></span>|  
|`--`|<span data-ttu-id="8762c-195">匹配两个连字符。</span><span class="sxs-lookup"><span data-stu-id="8762c-195">Match two hyphens.</span></span>|  
  
 <span data-ttu-id="8762c-196">请注意，正则表达式模式 `--(.+?)--` 使用惰性限定符 `+?` 。</span><span class="sxs-lookup"><span data-stu-id="8762c-196">Note that the regular expression pattern `--(.+?)--` uses the lazy quantifier `+?`.</span></span> <span data-ttu-id="8762c-197">如果改为使用贪婪限定符 `+` ，则正则表达式引擎在输入字符串中仅查找单个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-197">If the greedy quantifier `+` were used instead, the regular expression engine would find only a single match in the input string.</span></span>  
  
 <span data-ttu-id="8762c-198">替换字符串 `($1)` 用括在括号中的第一个捕获组替换匹配项。</span><span class="sxs-lookup"><span data-stu-id="8762c-198">The replacement string `($1)` replaces the match with the first captured group, which is enclosed in parentheses.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8762c-199"><paramref name="replacement" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8762c-199"><paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8762c-200">不允许对此模式进行扩展。</span><span class="sxs-lookup"><span data-stu-id="8762c-200">Expansion is not allowed for this pattern.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="/dotnet/standard/base-types/substitutions-in-regular-expressions"><span data-ttu-id="8762c-201">正则表达式中的替代</span><span class="sxs-lookup"><span data-stu-id="8762c-201">Substitutions in Regular Expressions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="inner"><span data-ttu-id="8762c-202">与预期匹配等效的正则表达式匹配。</span><span class="sxs-lookup"><span data-stu-id="8762c-202">A regular expression match equivalent to the one expected.</span></span></param>
        <summary><span data-ttu-id="8762c-203">返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" /> 实例，该实例适合在多个线程间共享。</span><span class="sxs-lookup"><span data-stu-id="8762c-203">Returns a <see cref="T:System.Text.RegularExpressions.Match" /> instance equivalent to the one supplied that is suitable to share between multiple threads.</span></span></summary>
        <returns><span data-ttu-id="8762c-204">适合在多个线程间共享的正则表达式匹配。</span><span class="sxs-lookup"><span data-stu-id="8762c-204">A regular expression match that is suitable to share between multiple threads.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8762c-205"><paramref name="inner" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8762c-205"><paramref name="inner" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
