<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63ff3269b227586e250aec846808fe66405a9b62" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86825802" /></Metadata><TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Capture extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Text.RegularExpressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.RegularExpressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示来自单个成功子表达式捕获的结果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Capture>对象是不可变的，并且没有公共构造函数。 实例通过 <xref:System.Text.RegularExpressions.CaptureCollection> 对象返回，该对象由 `Match.Captures` 和属性返回 <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> 。 但是， `Match.Captures` 属性提供有关与对象相同的匹配项的信息 <xref:System.Text.RegularExpressions.Match> 。  
  
 如果未将限定符应用于捕获组，则 <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> 属性将返回一个 <xref:System.Text.RegularExpressions.CaptureCollection> <xref:System.Text.RegularExpressions.Capture> 对象，该对象提供与对象相同的捕获的相关信息 <xref:System.Text.RegularExpressions.Group> 。 如果将限定符应用于捕获组，则 `Group.Index` 、 `Group.Length` 和 `Group.Value` 属性仅提供有关最后捕获的组的信息，而中的对象提供 <xref:System.Text.RegularExpressions.Capture> <xref:System.Text.RegularExpressions.CaptureCollection> 有关所有子表达式捕获的信息。 说明如示例所示。  
  
   
  
## Examples  
 下面的示例定义一个正则表达式，该正则表达式匹配不包含标点的句子，但句点 ( "。) 。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb" id="Snippet1"::: 
  
 正则表达式模式 `((\w+)[\s.])+` 的定义如下表所示。 请注意，在此正则表达式中，限定符 (+) 应用于整个正则表达式。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w+)`|匹配一个或多个单词字符。 这是第二个捕获组。|  
|`[\s.])`|匹配空白字符或句点 ( "。") 。|  
|`((\w+)[\s.])`|匹配一个或多个单词字符，后跟一个空白字符或句点 ( "。) 。 这是第一个捕获组。|  
|`((\w+)[\s.])+`|匹配一个或多个单词字符的一个或多个匹配项，后跟一个空白字符或句点 ( "。) 。|  
  
 在此示例中，输入字符串包含两个句子。 如输出所示，第一句只包含一个单词，因此该 <xref:System.Text.RegularExpressions.CaptureCollection> 对象有一个 <xref:System.Text.RegularExpressions.Capture> 对象，该对象表示与对象相同的捕获 <xref:System.Text.RegularExpressions.Group> 。 第二个句子包含多个单词，因此 <xref:System.Text.RegularExpressions.Group> 对象只包含与最后一个匹配的子表达式有关的信息。 组1，表示第一个捕获，包含具有结束时间的句子中的最后一个单词。 组2表示第二个捕获，其中包含句子中的最后一个单词。 但 <xref:System.Text.RegularExpressions.Capture> 组的对象中的对象将 <xref:System.Text.RegularExpressions.CaptureCollection> 捕获每个子表达式匹配项。 <xref:System.Text.RegularExpressions.Capture>第一个捕获组的捕获集合中的对象包含有关每个捕获的单词和空白字符或句点的信息。 <xref:System.Text.RegularExpressions.Capture>第二个捕获组的捕获集合中的对象包含有关每个捕获的字词的信息。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>原始字符串中发现捕获的子字符串的第一个字符的位置。</summary>
        <value>原始字符串中发现捕获的子字符串的从零开始的起始位置。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取捕获的子字符串的长度。</summary>
        <value>捕获的子字符串的长度。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过调用 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 属性，从输入的字符串中检索捕获的子字符串。</summary>
        <returns>通过匹配捕获的子字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString`实际上是对属性的内部调用 <xref:System.Text.RegularExpressions.Capture.Value%2A> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取输入的字符串中的捕获的子字符串。</summary>
        <value>通过匹配捕获的子字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调用 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 或 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 方法未能找到匹配项，则返回的属性的值 `Match.Value` 为 <xref:System.String.Empty?displayProperty=nameWithType> 。 如果正则表达式引擎不能与捕获组匹配，则为。 返回的属性的值 `Group.Value` 为 <xref:System.String.Empty?displayProperty=nameWithType> 。 有关说明，请参阅第二个示例。  
  
   
  
## Examples  
 下面的示例定义一个正则表达式，该正则表达式匹配不包含标点的句子，但句点 ( "。) 。 `Match.Value`属性显示每个匹配项的结果字符串，其中包含匹配的句子。 `Group.Value`属性显示每个捕获组的结果字符串; 它包含由该捕获组捕获的最后一个字符串。 <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType>属性显示每个捕获的结果字符串。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb" id="Snippet1":::  
  
 正则表达式模式 `((\w+)[\s.])+` 的定义如下表所示。 请注意，在此正则表达式中，限定符 (+) 应用于整个正则表达式。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w+)`|匹配一个或多个单词字符。 这是第二个捕获组。|  
|`[\s.])`|匹配空白字符或句点 ( "。") 。|  
|`((\w+)[\s.])`|匹配一个或多个单词字符，后跟一个空白字符或句点 ( "。) 。 这是第一个捕获组。|  
|`((\w+)[\s.])+`|匹配一个或多个单词字符的一个或多个匹配项，后跟一个空白字符或句点 ( "。) 。|  
  
 在此示例中，输入字符串包含两个句子。 如输出所示，第一句只包含一个单词，因此该 <xref:System.Text.RegularExpressions.CaptureCollection> 对象有一个 <xref:System.Text.RegularExpressions.Capture> 对象，该对象表示与对象相同的捕获 <xref:System.Text.RegularExpressions.Group> 。 第二个句子包含多个单词，因此 <xref:System.Text.RegularExpressions.Group> 对象只包含与最后一个匹配的子表达式有关的信息。 组1，表示第一个捕获，包含具有结束时间的句子中的最后一个单词。 组2表示第二个捕获，其中包含句子中的最后一个单词。 但 <xref:System.Text.RegularExpressions.Capture> 组的对象中的对象将 <xref:System.Text.RegularExpressions.CaptureCollection> 捕获每个子表达式匹配项。 <xref:System.Text.RegularExpressions.Capture>第一个捕获组的捕获集合中的对象包含有关每个捕获的单词和空白字符或句点的信息。 <xref:System.Text.RegularExpressions.Capture>第二个捕获组的捕获集合中的对象包含有关每个捕获的字词的信息。  
  
 下面的示例使用正则表达式模式 `^([a-z]+)(\d+)*\.([a-z]+(\d)*)$` 来匹配由以句点分隔的两部分组成的产品编号。 这两个部分由字母字符后跟可选数字组成。 由于第一个输入字符串与模式不匹配，因此返回对象的属性的值 <xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> `Value` 为 <xref:System.String.Empty?displayProperty=nameWithType> 。 同样，如果正则表达式模式与捕获组不匹配，则相应对象的属性的值 <xref:System.Text.RegularExpressions.Group> `Value` 为 <xref:System.String.Empty?displayProperty=nameWithType> 。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb" id="Snippet1":::  
  
 正则表达式模式的定义如下表所示：  
  
|模式|描述|  
|-------------|-----------------|  
|`^`|从字符串开头开始匹配。|  
|`([a-z]+)`|匹配从 a 到 z 的任意字符的一个或多个匹配项。 因为正则表达式引擎是通过选项传递的 <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> ，所以此比较不区分大小写。 这是第一个捕获组。|  
|`(\d+)?`|匹配一个或多个十进制数字的零个或一个匹配项。 这是第二个捕获组。|  
|`\.`|匹配文本句点字符。|  
|`([a-z]+`|匹配从 a 到 z 的任意字符的一个或多个匹配项。 比较不区分大小写。|  
|`(\d)*`|匹配零个或多个十进制数字。 单个匹配的数字是第四个捕获组。|  
|`([a-z]+(\d)*)`|匹配从 a 到 z 的一个或多个字母字符，后跟零个、一个或多个十进制数字。 这是第四个捕获组。|  
|`$`|在字符串末尾结束匹配。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
