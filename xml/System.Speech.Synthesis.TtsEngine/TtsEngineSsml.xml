<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0ef7d4af79c39eac6ad9c3e26b1a7666a25b44dd" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89891187" /></Metadata><TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3ce45-101">所有的语音合成引擎文字可实现的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="3ce45-101">Abstract base class to be implemented by all text to speech synthesis engines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ce45-102">若要将自定义文本构造到语音引擎，应用程序必须始终实现从抽象基类派生的类 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-102">To construct a custom text to speech engine, an application must always implement a class derived from the abstract base class <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.</span></span>  
  
 <span data-ttu-id="3ce45-103"><xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>然后，可以通过 <xref:System.Speech.Synthesis> 基于命名空间的应用程序将的正确注册的实现用作合成器声音。</span><span class="sxs-lookup"><span data-stu-id="3ce45-103">A properly registered implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> can then be used as a synthesizer voice by <xref:System.Speech.Synthesis> name space based applications.</span></span>  
  
 <span data-ttu-id="3ce45-104">从继承的对象 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> 必须重写以下成员： <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A> 、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> 、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> 和 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-104">Objects inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must override the following members: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.</span></span>  
  
 <span data-ttu-id="3ce45-105">要实现的类中最重要的成员 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> 是 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="3ce45-105">The most important member of the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> class to be implemented is the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="3ce45-106"><xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>方法由基础结构文本分析器接收：</span><span class="sxs-lookup"><span data-stu-id="3ce45-106">The <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method is called by the infrastructures text parser receiving:</span></span>  
  
1.  <span data-ttu-id="3ce45-107">对接口的引用 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> ，该接口提供对诸如甚至排队和写入音频输出等系统服务的访问。</span><span class="sxs-lookup"><span data-stu-id="3ce45-107">A reference to the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface, which provides access to system services such as even queuing and writing audio output.</span></span>  
  
2.  <span data-ttu-id="3ce45-108"><xref:System.Speech.Synthesis.TtsEngine.TextFragment> (SSML) 输入从语音合成标记语言生成的实例的数组。</span><span class="sxs-lookup"><span data-stu-id="3ce45-108">An array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance produced from Speech Synthesis Markup Language (SSML) input.</span></span> <span data-ttu-id="3ce45-109">除了呈现为语音的文本外，SSML 分析还会在 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 与每个传入对象关联的实例中存储有关语音请求的属性的信息 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-109">In addition to text to be rendered as speech, the parsing of the SSML stores information about the requested attributes of the speech in a <xref:System.Speech.Synthesis.TtsEngine.FragmentState> instance associated with each incoming <xref:System.Speech.Synthesis.TtsEngine.TextFragment> object.</span></span>  
  
 <span data-ttu-id="3ce45-110">当某个语音合成器应用程序 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> 尝试提供正确的音频输出时，它可以选择通过实现来调用指定的输出格式。</span><span class="sxs-lookup"><span data-stu-id="3ce45-110">A speech synthesizer application can optionally make requests for a specified output format by implementing <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> to be called by the platform when it tries to provide the correct audio output.</span></span>  
  
 <span data-ttu-id="3ce45-111">实施者还可以通过实现和的实现来支持管理发音或词典的外部定义 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-111">An implementer can also provide support for managing external definitions of pronunciations, or lexicons, by their implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey"><span data-ttu-id="3ce45-112">与 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实现相关的语音标记的注册表项的全名。</span><span class="sxs-lookup"><span data-stu-id="3ce45-112">Full name of the registry key for the Voice Token associated with the <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> implementation.</span></span> <span data-ttu-id="3ce45-113">引擎。</span><span class="sxs-lookup"><span data-stu-id="3ce45-113">engine.</span></span></param>
        <summary><span data-ttu-id="3ce45-114">基于相应的语音标记注册表项构建新的 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="3ce45-114">Constructs a new instance of <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> based on an appropriate Voice Token registry key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ce45-115">对此构造函数的调用通常由 <xref:System.Speech.Synthesis> 基于的应用程序生成，这些应用程序选择要由实例使用的合成器声音 <xref:System.Speech.Synthesis.SpeechSynthesizer> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-115">Calls to this constructor are typically generated by <xref:System.Speech.Synthesis> based applications selecting a synthesizer voice to be used by an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>.</span></span>  
  
 <span data-ttu-id="3ce45-116"><xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>必须在 HKEY_LOCAL_MACHINE \software\microsoft\speech\voices\tokens. 下进行注册。</span><span class="sxs-lookup"><span data-stu-id="3ce45-116">A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must be register under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddLexicon (uri As Uri, mediaType As String, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="3ce45-117">指示词典信息位置的 <see langword="System.Uri" /> 的有效实例。</span><span class="sxs-lookup"><span data-stu-id="3ce45-117">A valid instance of <see langword="System.Uri" /> indicating the location of the lexicon information.</span></span></param>
        <param name="mediaType"><span data-ttu-id="3ce45-118">一个包含该词典的媒体类型的字符串。</span><span class="sxs-lookup"><span data-stu-id="3ce45-118">A string containing the media type of the lexicon.</span></span> <span data-ttu-id="3ce45-119">媒体类型要区分大小写。</span><span class="sxs-lookup"><span data-stu-id="3ce45-119">Media types are case insensitive.</span></span></param>
        <param name="site"><span data-ttu-id="3ce45-120">对用于与平台基础结构进行交互的 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 接口的引。</span><span class="sxs-lookup"><span data-stu-id="3ce45-120">A reference to an <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interface used to interact with the platform infrastructure.</span></span></param>
        <summary><span data-ttu-id="3ce45-121">添加词典到当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实例实现的 <see langword="Synthesizer" /><see langword="Voice" />。</span><span class="sxs-lookup"><span data-stu-id="3ce45-121">Adds a lexicon to the <see langword="Synthesizer" /><see langword="Voice" /> implemented by the current <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ce45-122">发音词典是单词或短语的集合，以及使用适当发音字母表指定的发音。</span><span class="sxs-lookup"><span data-stu-id="3ce45-122">A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.</span></span>  
  
 <span data-ttu-id="3ce45-123">此方法通常由平台基础结构调用，以响应 <xref:System.Speech.Synthesis> 调用 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> 并使用由当前实例实现的合成器声音的基于的应用程序 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-123">This method is typically called by the platform infrastructure in response to a <xref:System.Speech.Synthesis> based applications calling <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> and using the synthesizer voice implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.</span></span>  
  
 <span data-ttu-id="3ce45-124">的值 `mediaType` 通常是 MIME 规范，因为 SSML 规范使用 mime 进行媒体规范。</span><span class="sxs-lookup"><span data-stu-id="3ce45-124">The value of `mediaType` is typically a MIME specification, as the SSML specification uses MIME for media specifications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3ce45-125">的实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> 使用传入的 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 接口从资源加载词典。</span><span class="sxs-lookup"><span data-stu-id="3ce45-125">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> uses the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface passed in to load a lexicon from a resource.</span></span> <span data-ttu-id="3ce45-126">然后，它将存储 `System.IO.Stream` 到实例中的 `System.Collections.Generic.Dictionary` 字典，并按词典 URI 进行索引。</span><span class="sxs-lookup"><span data-stu-id="3ce45-126">It then stores a `System.IO.Stream` to the lexicon in a `System.Collections.Generic.Dictionary` instance, indexed by the lexicon URI.</span></span>  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3ce45-127">完全熟悉实现的责任，并且能够处理存储在中的字典 <paramref name="uri" /> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-127">It is the responsibility of the implementation to be fully familiar with and be able to process the lexicon stored at <paramref name="uri" />.</span></span> <span data-ttu-id="3ce45-128">实现还必须跟踪和管理它所添加的所有字典的生存期。</span><span class="sxs-lookup"><span data-stu-id="3ce45-128">The implementation must also keep track and manage the lifetimes of all lexicons it adds.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOutputFormat (speakOutputFormat As SpeakOutputFormat, targetWaveFormat As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat"><span data-ttu-id="3ce45-129">指示请求的音频输出格式的类型 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> 枚举的有效成员。</span><span class="sxs-lookup"><span data-stu-id="3ce45-129">Valid member of the <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> enumeration indicating the type of requested audio output format.</span></span></param>
        <param name="targetWaveFormat"><span data-ttu-id="3ce45-130">指向音频格式类型中包含由 <paramref name="speakOutputFormat" /> 参数请求的详细信息设置的 <see langword="struct" /> 的指针。</span><span class="sxs-lookup"><span data-stu-id="3ce45-130">A pointer to a <see langword="struct" /> containing detail setting for the audio format type requested by the <paramref name="speakOutputFormat" /> argument.</span></span></param>
        <summary><span data-ttu-id="3ce45-131">返回对向合成器引擎请求支持特定输出格式的给定合成引擎响应支持的最佳匹配音频输出。</span><span class="sxs-lookup"><span data-stu-id="3ce45-131">Returns the best matching audio output supported by a given synthesize engine response to a request to the synthesizer engine for the support of a particular output format.</span></span></summary>
        <returns><span data-ttu-id="3ce45-132">返回引用包含有关输出格式的详细信息 <see cref="T:System.IntPtr" /> 的有效 <see langword="struct" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="3ce45-132">Returns a valid <see cref="T:System.IntPtr" /> instance referring to a <see langword="struct" /> containing detailed information about the output format.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ce45-133">用于 `targetWaveFormat` 方法的和返回的结构应与 `WAVEFORMATEX` 在 SAPI 下可用的结构兼容，并应使用分配返回值 `CoTaskMemAlloc` 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-133">The structure used as `targetWaveFormat` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI, and the returned value should be allocated using `CoTaskMemAlloc`.</span></span>  
  
 <span data-ttu-id="3ce45-134">`struct`必须提供与相同的功能：</span><span class="sxs-lookup"><span data-stu-id="3ce45-134">The `struct` must provide functionality equivalent to:</span></span>  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="3ce45-135">下面的示例实现验证所选的输入，如果它们在公差内，则使用这些输入，否则使用默认值。</span><span class="sxs-lookup"><span data-stu-id="3ce45-135">The sample implementation below validates selected inputs, using them if they are within tolerances, otherwise using default values.</span></span>  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3ce45-136">从继承的对象 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 应检查由指定的请求的输出格式 <paramref name="targetWaveFormat" /> ，并返回它支持的最近似格式。</span><span class="sxs-lookup"><span data-stu-id="3ce45-136">Object inheriting from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> should examine the requested output format as specified by <paramref name="targetWaveFormat" /> and return the closest format that it supports.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveLexicon (uri As Uri, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="3ce45-137">指示词典信息位置的 <see langword="System.Uri" /> 的有效实例。</span><span class="sxs-lookup"><span data-stu-id="3ce45-137">A valid instance of <see langword="System.Uri" /> indicating the location of the lexicon information.</span></span></param>
        <param name="site"><span data-ttu-id="3ce45-138">对由平台基础结构传入以允许访问基础结构资源的 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 接口的引用。</span><span class="sxs-lookup"><span data-stu-id="3ce45-138">A reference to an <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interface passed in by the platform infrastructure to allow access to the infrastructure resources.</span></span></param>
        <summary><span data-ttu-id="3ce45-139">移除由当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实例实现的 <see langword="Synthesizer" /><see langword="Voice" /> 当前加载的字典。</span><span class="sxs-lookup"><span data-stu-id="3ce45-139">Removes a lexicon currently loaded by the <see langword="Synthesizer" /><see langword="Voice" /> implemented by the current <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ce45-140">发音词典是单词或短语的集合，以及使用适当发音字母表指定的发音。</span><span class="sxs-lookup"><span data-stu-id="3ce45-140">A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.</span></span>  
  
 <span data-ttu-id="3ce45-141">通常会调用此方法，以响应 <xref:System.Speech.Synthesis> 调用 <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> 并使用由当前实例实现的合成器声音的基于的应用程序 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-141">This method is typically called in response to a <xref:System.Speech.Synthesis> based applications calling <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> and using the synthesizer voice implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3ce45-142">的实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> 使用词典 URI 来查询实例 `System.Collections.Generic.Dictionary` `System.IO.Stream` ，关闭流并删除引用词典的 URI。</span><span class="sxs-lookup"><span data-stu-id="3ce45-142">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> uses the lexicon URI to query an instance `System.Collections.Generic.Dictionary` for the `System.IO.Stream`, closes the stream and removes the uri referring to the lexicon.</span></span>  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3ce45-143">完全熟悉实现的责任，并且能够处理存储在中的字典 <paramref name="uri" /> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-143">It is the responsibility of the implementation to be fully familiar with and be able to process the lexicon stored at <paramref name="uri" />.</span></span> <span data-ttu-id="3ce45-144">实现还必须跟踪并管理它删除的所有字典的生存期。</span><span class="sxs-lookup"><span data-stu-id="3ce45-144">The implementation must also keep track and manage the lifetimes of all lexicons it removes.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment"><span data-ttu-id="3ce45-145">包含呈现在语音中的文本的 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 实例数组。</span><span class="sxs-lookup"><span data-stu-id="3ce45-145">An array of <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> instances containing the text to be rendered into speech.</span></span></param>
        <param name="waveHeader"><span data-ttu-id="3ce45-146">指向包含音频输出格式结构的 <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="3ce45-146">An <see cref="T:System.IntPtr" /> pointing to a structure containing audio output format.</span></span></param>
        <param name="site"><span data-ttu-id="3ce45-147">对由平台基础结构传入以允许访问基础结构资源的 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 接口的引用。</span><span class="sxs-lookup"><span data-stu-id="3ce45-147">A reference to an <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interface passed in by the platform infrastructure to allow access to the infrastructure resources.</span></span></param>
        <summary><span data-ttu-id="3ce45-148">在指定的输出格式呈现指定的 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="3ce45-148">Renders specified <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> array in the specified output format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ce45-149">作为方法使用的 `waveHeader` 和返回的结构应与 `WAVEFORMATEX` 在 SAPI 下可用的结构兼容。</span><span class="sxs-lookup"><span data-stu-id="3ce45-149">The structure used as `waveHeader` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI.</span></span>  
  
 <span data-ttu-id="3ce45-150">`struct`必须提供与相同的功能：</span><span class="sxs-lookup"><span data-stu-id="3ce45-150">The `struct` must provide functionality equivalent to:</span></span>  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="3ce45-151">下面的示例是继承自的自定义语音合成实现的一部分 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> ，并使用 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> 、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 和 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="3ce45-151">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="3ce45-152">的实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="3ce45-152">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="3ce45-153">接收实例的数组 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> ，并创建 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 要 `Speak` 在基础合成引擎上传递给方法的新的实例数组。</span><span class="sxs-lookup"><span data-stu-id="3ce45-153">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="3ce45-154">如果在 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 每个实例的属性返回的的属性中找到枚举值 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> ，则 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> 实现</span><span class="sxs-lookup"><span data-stu-id="3ce45-154">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="3ce45-155">将 Americanism 转换为要口述的文本中的 Britishisms。</span><span class="sxs-lookup"><span data-stu-id="3ce45-155">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="3ce45-156">如果 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 提供给实现的接口上的属性支持 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> 事件类型，则 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> 使用实例创建事件来驱动合成器进度计量。</span><span class="sxs-lookup"><span data-stu-id="3ce45-156">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
3.  <span data-ttu-id="3ce45-157">然后，将使用修改后的数组调用语音呈现引擎 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-157">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3ce45-158">自定义语音合成器使用来实现 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> ，并在 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> 通过 <see cref="N:System.Speech.Synthesis" /> 命名空间和基础系统语音合成引擎的成员使用平台基础结构构造的合成器应用程序之间起到筛选器或中介的作用。</span><span class="sxs-lookup"><span data-stu-id="3ce45-158">Custom speech synthesizer implements using <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> and <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> work as filters or intermediaries between synthesizer applications constructed using the platform infrastructure through the members of the <see cref="N:System.Speech.Synthesis" /> namespace and underlying system speech synthesis engines.</span></span>  
  
<span data-ttu-id="3ce45-159"><see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />实现：</span><span class="sxs-lookup"><span data-stu-id="3ce45-159">A <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> implementation:</span></span> 
<span data-ttu-id="3ce45-160">1.</span><span class="sxs-lookup"><span data-stu-id="3ce45-160">1.</span></span>  <span data-ttu-id="3ce45-161">捕获或修改传入对象的各个方面 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /></span><span class="sxs-lookup"><span data-stu-id="3ce45-161">Traps or modify aspects of the incoming <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> objects</span></span> 
<span data-ttu-id="3ce45-162">2.</span><span class="sxs-lookup"><span data-stu-id="3ce45-162">2.</span></span>  <span data-ttu-id="3ce45-163">使用对实例的站点引用生成任何必需事件 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /></span><span class="sxs-lookup"><span data-stu-id="3ce45-163">Generates any necessary events using the site reference to a <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> instance</span></span> 
<span data-ttu-id="3ce45-164">3.</span><span class="sxs-lookup"><span data-stu-id="3ce45-164">3.</span></span>  <span data-ttu-id="3ce45-165">生成实际合成语音。</span><span class="sxs-lookup"><span data-stu-id="3ce45-165">Generates the actual synthesized speech.</span></span>  
  
<span data-ttu-id="3ce45-166">通常，生成语音是通过在操作系统提供的一种语音呈现引擎上调用 <c>讲话</c> 来完成的。</span><span class="sxs-lookup"><span data-stu-id="3ce45-166">Generation of speech is most typically done by calling <c>Speak</c> on one of the speech rendering engines provided by the operating system.</span></span>  
  
<span data-ttu-id="3ce45-167">如果未使用某个可用的语音呈现引擎，则从继承的对象 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 必须创建其自己的语音呈现引擎。</span><span class="sxs-lookup"><span data-stu-id="3ce45-167">If one of the available speech rendering engines is not used, a object inheriting from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> must create its own speech rendering engine.</span></span>  
  
<span data-ttu-id="3ce45-168">使用注册表和反射获得的对 <c>讲话</c> 方法的访问。</span><span class="sxs-lookup"><span data-stu-id="3ce45-168">Access to the <c>Speak</c> method on obtained using the registry and reflection.</span></span> <span data-ttu-id="3ce45-169">.</span><span class="sxs-lookup"><span data-stu-id="3ce45-169">.</span></span>  
  
<span data-ttu-id="3ce45-170">当从继承时 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> ，必须重写以下成员： <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" /> 、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> 、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> 、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" /> 和 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> 。</span><span class="sxs-lookup"><span data-stu-id="3ce45-170">When you inherit from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, you must override the following members: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, and <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
