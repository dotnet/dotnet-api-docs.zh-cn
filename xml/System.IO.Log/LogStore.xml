<Type Name="LogStore" FullName="System.IO.Log.LogStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6738e76ff796796ee4d843a1a06b0995334ebd2c" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="78824517" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogStore : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogStore extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogStore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogStore&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogStore sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type LogStore = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="98240-101">表示日志结构化的存储区。</span><span class="sxs-lookup"><span data-stu-id="98240-101">Represents a log-structured storage.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-102"><xref:System.IO.Log.LogRecordSequence> 类提供记录序列接口在公用日志文件系统 (CLFS) 日志之上的实现。</span><span class="sxs-lookup"><span data-stu-id="98240-102">The <xref:System.IO.Log.LogRecordSequence> class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log.</span></span> <span data-ttu-id="98240-103">它与 <xref:System.IO.Log.LogStore> 类一起使用，该类提供了直接操作和管理 CLFS 日志文件的接口。</span><span class="sxs-lookup"><span data-stu-id="98240-103">It works with the <xref:System.IO.Log.LogStore> class, which provides an interface for directly manipulating and managing a CLFS log file.</span></span> <span data-ttu-id="98240-104">日志存储区提供跨一组磁盘范围的仅追加存储区。</span><span class="sxs-lookup"><span data-stu-id="98240-104">A log store provides append-only storage across a set of disk extents.</span></span> <span data-ttu-id="98240-105"><xref:System.IO.Log.LogStore> 类表示此存储区，并提供了添加和移除容器、设置策略以及创建存档的方法。</span><span class="sxs-lookup"><span data-stu-id="98240-105">The <xref:System.IO.Log.LogStore> class represents this storage, and provides methods for adding and removing containers, setting policy, and creating archives.</span></span> <span data-ttu-id="98240-106">它不提供从存储区中读取和写入存储区的方法；这些方法是由 <xref:System.IO.Log.LogRecordSequence> 类提供的。</span><span class="sxs-lookup"><span data-stu-id="98240-106">It does not provide methods for reading from and writing to the storage; these methods are provided by the <xref:System.IO.Log.LogRecordSequence> class.</span></span>  
  
 <span data-ttu-id="98240-107"><xref:System.IO.Log.LogStore> 类和 <xref:System.IO.Log.LogRecordSequence> 类之间的关系类似于磁盘文件和 <xref:System.IO.FileStream> 对象之间的关系。</span><span class="sxs-lookup"><span data-stu-id="98240-107">The relationship between the <xref:System.IO.Log.LogStore> class and the <xref:System.IO.Log.LogRecordSequence> class is similar to the relationship between a disk file and a <xref:System.IO.FileStream> object.</span></span> <span data-ttu-id="98240-108">磁盘文件提供实际存储区，并具有诸如长度和上次访问时间这样的属性，而 <xref:System.IO.FileStream> 对象提供文件的视图，利用该视图可以从实际存储区中读取以及向其中写入数据。</span><span class="sxs-lookup"><span data-stu-id="98240-108">The disk file provides the actual storage and has attributes such as length and last access time, while the <xref:System.IO.FileStream> object provides a view on the file that can be used to read from it and write to it.</span></span> <span data-ttu-id="98240-109">与之类似，<xref:System.IO.Log.LogStore> 类具有诸如策略和磁盘范围集合这样的属性，<xref:System.IO.Log.LogRecordSequence> 类提供面向记录的机制，用于读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="98240-109">Similarly, the <xref:System.IO.Log.LogStore> class has attributes like a policy and a collection of disk extents, and the <xref:System.IO.Log.LogRecordSequence> class provides a record-oriented mechanism for reading and writing data.</span></span>  
  
 <span data-ttu-id="98240-110">与 <xref:System.IO.Log.FileRecordSequence> 类表示的文件记录序列不同，<xref:System.IO.Log.LogStore> 实例将其数据存储在 <xref:System.IO.Log.LogExtent> 实例表示的磁盘范围的集合中。</span><span class="sxs-lookup"><span data-stu-id="98240-110">Unlike the file record sequence represented by the <xref:System.IO.Log.FileRecordSequence> class, a <xref:System.IO.Log.LogStore> instance stores its data in a collection of disk extents, represented by <xref:System.IO.Log.LogExtent> instances.</span></span> <span data-ttu-id="98240-111">给定 <xref:System.IO.Log.LogStore> 实例中的所有范围都具有统一的大小，空间以范围增量的形式添加到 <xref:System.IO.Log.LogStore> 实例中及从其中移除。</span><span class="sxs-lookup"><span data-stu-id="98240-111">The extents in a given <xref:System.IO.Log.LogStore> instance are all of uniform size, and space is added to and removed from a <xref:System.IO.Log.LogStore> instance in extent increments.</span></span> <span data-ttu-id="98240-112">若要添加和移除日志范围，请使用可由 <xref:System.IO.Log.LogExtentCollection.Add%2A> 属性返回的 <xref:System.IO.Log.LogExtentCollection.Remove%2A> 对象的 <xref:System.IO.Log.LogExtentCollection> 和 <xref:System.IO.Log.LogStore.Extents%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="98240-112">To add and remove log extents, use the <xref:System.IO.Log.LogExtentCollection.Add%2A> and <xref:System.IO.Log.LogExtentCollection.Remove%2A> methods of the <xref:System.IO.Log.LogExtentCollection> object, which can be returned by the <xref:System.IO.Log.LogStore.Extents%2A> property.</span></span>  
  
 <span data-ttu-id="98240-113"><xref:System.IO.Log.LogStore> 实例可以具有与自己关联的策略。</span><span class="sxs-lookup"><span data-stu-id="98240-113">A <xref:System.IO.Log.LogStore> instance can have policies associated with it.</span></span> <span data-ttu-id="98240-114">这些策略由 <xref:System.IO.Log.LogPolicy> 实例表示，这些实例可由 <xref:System.IO.Log.LogStore.Policy%2A> 属性返回。</span><span class="sxs-lookup"><span data-stu-id="98240-114">These are represented by <xref:System.IO.Log.LogPolicy> instances that can be returned by the <xref:System.IO.Log.LogStore.Policy%2A> property.</span></span> <span data-ttu-id="98240-115">策略定义日志应遵循的规则（例如最大范围数和最小大小），以及对在特定条件下扩大或缩小 <xref:System.IO.Log.LogStore> 的指令。</span><span class="sxs-lookup"><span data-stu-id="98240-115">A policy dictates rules that the log will attempt to follow, such as maximum number of extents and minimum size, and instructions on growing or shrinking the <xref:System.IO.Log.LogStore> under certain conditions.</span></span> <span data-ttu-id="98240-116">此外，还可以指定是否能够存档 <xref:System.IO.Log.LogStore> 实例。</span><span class="sxs-lookup"><span data-stu-id="98240-116">In addition, you can specify whether a <xref:System.IO.Log.LogStore> instance can be archived.</span></span> <span data-ttu-id="98240-117">策略针对每个日志设置，而且是可变的。这表示，一旦日志的每个句柄都关闭了，策略也就不再存在了。</span><span class="sxs-lookup"><span data-stu-id="98240-117">Policies are set per log and are volatile, which means that once every handle to the log is closed, the policy no longer exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98240-118">下面的示例演示如何将 <xref:System.IO.Log.LogStore> 存档到 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="98240-118">The following example shows how to archive a <xref:System.IO.Log.LogStore> to an XML document.</span></span>  
  
 [!code-csharp[logarchievesnapshot#0](~/samples/snippets/csharp/VS_Snippets_CFX/logarchievesnapshot/cs/logarchievesnapshot.cs#0)]
 [!code-vb[logarchievesnapshot#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/logarchievesnapshot/vb/logarchievesnapshot.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98240-119">初始化 <see cref="T:System.IO.Log.LogStore" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="98240-119">Initializes a new instance of the <see cref="T:System.IO.Log.LogStore" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (Microsoft.Win32.SafeHandles.SafeFileHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : Microsoft.Win32.SafeHandles.SafeFileHandle -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="98240-120">当前 <see cref="T:System.IO.Log.LogStore" /> 对象包装的日志文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="98240-120">A file handle for the log file that the current <see cref="T:System.IO.Log.LogStore" /> object encapsulates.</span></span></param>
        <summary><span data-ttu-id="98240-121">为指定的句柄初始化 <see cref="T:System.IO.Log.LogStore" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="98240-121">Initializes a new instance of the <see cref="T:System.IO.Log.LogStore" /> class for the specified handle.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98240-122"><paramref name="handle" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98240-122"><paramref name="handle" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-123">日志句柄无法绑定到线程池。</span><span class="sxs-lookup"><span data-stu-id="98240-123">The log handle could not be bound to the thread pool.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-124">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-124">Access for the specified log store is denied by the operating system.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-125">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="98240-125">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-126">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-126">There is not enough memory to continue the execution of a program.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="98240-127">要打开的日志存储区的基文件的相对或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="98240-127">A relative or absolute path for the base file of the log store to open.</span></span></param>
        <param name="mode"><span data-ttu-id="98240-128">用于确定如何打开或创建存储区的 <see cref="T:System.IO.FileMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-128">One of the <see cref="T:System.IO.FileMode" /> values that determines how to open or create the store.</span></span></param>
        <summary><span data-ttu-id="98240-129">使用指定的路径和模式初始化 <see cref="T:System.IO.Log.LogStore" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="98240-129">Initializes a new instance of the <see cref="T:System.IO.Log.LogStore" /> class with the specified path and mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-130">使用此构造函数打开具有指定路径和模式的日志存储区。</span><span class="sxs-lookup"><span data-stu-id="98240-130">Use this constructor to open a log store with the specified path and mode.</span></span> <span data-ttu-id="98240-131">存储区以读/写访问权限打开，并共享读访问权限。</span><span class="sxs-lookup"><span data-stu-id="98240-131">The store is opened with read/write access, and shares read access.</span></span>  
  
 <span data-ttu-id="98240-132">`path` 参数应使用以下语法：</span><span class="sxs-lookup"><span data-stu-id="98240-132">The `path` parameter should use the following syntax:</span></span>  
  
 `log:<physical log name>[::<log client name>]`  
  
 <span data-ttu-id="98240-133">其中 `<physical log name>` 是日志文件的有效路径，`<log client name>` 是唯一客户端标识符。</span><span class="sxs-lookup"><span data-stu-id="98240-133">where `<physical log name>` is a valid path to a log file, and `<log client name>` is a unique client identifier.</span></span> <span data-ttu-id="98240-134">日志存储区应是物理日志存储区或虚拟日志存储区，但不能同时为两者。</span><span class="sxs-lookup"><span data-stu-id="98240-134">A log store should be either a physical log store or a virtual log store, but not both.</span></span> <span data-ttu-id="98240-135">以物理或虚拟方式创建日志存储区后，它在整个生命周期中都将保持该形态。</span><span class="sxs-lookup"><span data-stu-id="98240-135">Once a log store has been created physically or virtually, it remains so for its lifetime.</span></span> <span data-ttu-id="98240-136">物理日志存储区是通过仅指定物理日志名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-136">A physical log store is created by specifying only the physical log name.</span></span> <span data-ttu-id="98240-137">虚拟日志存储区是通过指定物理日志名称和日志客户端名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-137">A virtual log store is created by specifying both the physical log name and the log client name.</span></span>  
  
 <span data-ttu-id="98240-138">共享同一个物理日志名称的客户端将共享相同的范围集合与策略。</span><span class="sxs-lookup"><span data-stu-id="98240-138">Clients that share the same physical log name share the same extents collection and policy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98240-139"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98240-139"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-140"><paramref name="path" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="98240-140"><paramref name="path" /> is an empty string ("").</span></span>  
  
<span data-ttu-id="98240-141">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-141">-or-</span></span> 
 <span data-ttu-id="98240-142"><paramref name="path" /> 仅包含空白。</span><span class="sxs-lookup"><span data-stu-id="98240-142"><paramref name="path" /> contains only white space.</span></span>  
  
<span data-ttu-id="98240-143">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-143">-or-</span></span> 
 <span data-ttu-id="98240-144"><paramref name="path" /> 包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="98240-144"><paramref name="path" /> contains one or more invalid characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98240-145"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-145"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98240-146">无法找到该文件。</span><span class="sxs-lookup"><span data-stu-id="98240-146">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-147">打开日志存储区时发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-147">An I/O error occurs when opening the log store.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-148">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-148">Access for the specified log store is denied by the operating system.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="98240-149">无法使用 <see cref="T:System.IO.Log.LogStore" />，因为没有安装所需的公用日志文件系统 (CLFS) 组件。</span><span class="sxs-lookup"><span data-stu-id="98240-149"><see cref="T:System.IO.Log.LogStore" /> cannot be used because the required Common Log File System (CLFS) component is not installed.</span></span> <span data-ttu-id="98240-150">如果可行，请为您的平台安装 CLFS 组件，或者改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 类。</span><span class="sxs-lookup"><span data-stu-id="98240-150">Install the CLFS component if it is available for your platform or use the <see cref="T:System.IO.Log.FileRecordSequence" /> class instead.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-151">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-151">There is not enough memory to continue the execution of a program.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="98240-152">要打开的日志存储区的基文件的相对或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="98240-152">A relative or absolute path for the base file of the log store to open.</span></span></param>
        <param name="mode"><span data-ttu-id="98240-153">用于确定如何打开或创建存储区的 <see cref="T:System.IO.FileMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-153">One of the <see cref="T:System.IO.FileMode" /> values that determines how to open or create the store.</span></span></param>
        <param name="access"><span data-ttu-id="98240-154">用于确定 <see cref="T:System.IO.FileAccess" /> 可以如何访问文件的 <see cref="T:System.IO.Log.LogStore" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-154">One of the <see cref="T:System.IO.FileAccess" /> values that determines how the file can be accessed by the <see cref="T:System.IO.Log.LogStore" />.</span></span></param>
        <summary><span data-ttu-id="98240-155">使用指定的路径、模式和访问权限初始化 <see cref="T:System.IO.Log.LogStore" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="98240-155">Initializes a new instance of the <see cref="T:System.IO.Log.LogStore" /> class with the specified path, mode, and access.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-156">使用此构造函数打开具有指定的路径、模式和访问权限的新日志存储区。</span><span class="sxs-lookup"><span data-stu-id="98240-156">Use this constructor to open a new log store with the specified path, mode, and access.</span></span> <span data-ttu-id="98240-157">并打开了存储区以共享读访问权限。</span><span class="sxs-lookup"><span data-stu-id="98240-157">The store is opened sharing read access.</span></span>  
  
 <span data-ttu-id="98240-158">`path` 参数应使用以下语法：</span><span class="sxs-lookup"><span data-stu-id="98240-158">The `path` parameter should use the following syntax:</span></span>  
  
 `log:<physical log name>[::<log client name>]`  
  
 <span data-ttu-id="98240-159">其中 `<physical log name>` 是日志文件的有效路径，`<log client name>` 是唯一客户端标识符。</span><span class="sxs-lookup"><span data-stu-id="98240-159">where `<physical log name>` is a valid path to a log file, and `<log client name>` is a unique client identifier.</span></span> <span data-ttu-id="98240-160">日志存储区应是物理日志存储区或虚拟日志存储区，但不能同时为两者。</span><span class="sxs-lookup"><span data-stu-id="98240-160">A log store should be either a physical log store or a virtual log store, but not both.</span></span> <span data-ttu-id="98240-161">以物理或虚拟方式创建日志存储区后，它在整个生命周期中都将保持该形态。</span><span class="sxs-lookup"><span data-stu-id="98240-161">Once a log store has been created physically or virtually, it remains so for its lifetime.</span></span> <span data-ttu-id="98240-162">物理日志存储区是通过仅指定物理日志名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-162">A physical log store is created by specifying only the physical log name.</span></span> <span data-ttu-id="98240-163">虚拟日志存储区是通过指定物理日志名称和日志客户端名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-163">A virtual log store is created by specifying both the physical log name and the log client name.</span></span>  
  
 <span data-ttu-id="98240-164">共享同一个物理日志名称的客户端将共享相同的范围集合与策略。</span><span class="sxs-lookup"><span data-stu-id="98240-164">Clients that share the same physical log name share the same extents collection and policy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98240-165"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98240-165"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-166"><paramref name="path" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="98240-166"><paramref name="path" /> is an empty string ("").</span></span>  
  
<span data-ttu-id="98240-167">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-167">-or-</span></span> 
 <span data-ttu-id="98240-168"><paramref name="path" /> 仅包含空白。</span><span class="sxs-lookup"><span data-stu-id="98240-168"><paramref name="path" /> contains only white space.</span></span>  
  
<span data-ttu-id="98240-169">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-169">-or-</span></span> 
 <span data-ttu-id="98240-170"><paramref name="path" /> 包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="98240-170"><paramref name="path" /> contains one or more invalid characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98240-171"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-171"><paramref name="mode" /> contains an invalid value.</span></span>  
  
<span data-ttu-id="98240-172">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-172">-or</span></span> 
 <span data-ttu-id="98240-173"><paramref name="access" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-173"><paramref name="access" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98240-174">无法找到该文件。</span><span class="sxs-lookup"><span data-stu-id="98240-174">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-175">打开日志存储区时发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-175">An I/O error occurs when opening the log store.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-176">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-176">Access for the specified log store is denied by the operating system.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="98240-177">无法使用 <see cref="T:System.IO.Log.LogStore" />，因为没有安装所需的公用日志文件系统 (CLFS) 组件。</span><span class="sxs-lookup"><span data-stu-id="98240-177"><see cref="T:System.IO.Log.LogStore" /> cannot be used because the required Common Log File System (CLFS) component is not installed.</span></span> <span data-ttu-id="98240-178">如果可行，请为您的平台安装 CLFS 组件，或者改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 类。</span><span class="sxs-lookup"><span data-stu-id="98240-178">Install the CLFS component if it is available for your platform or use the <see cref="T:System.IO.Log.FileRecordSequence" /> class instead.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-179">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-179">There is not enough memory to continue the execution of a program.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode, access, share)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="98240-180">要打开的日志存储区的基文件的相对或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="98240-180">A relative or absolute path for the base file of the log store to open.</span></span></param>
        <param name="mode"><span data-ttu-id="98240-181">用于确定如何打开或创建存储区的 <see cref="T:System.IO.FileMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-181">One of the <see cref="T:System.IO.FileMode" /> values that determines how to open or create the store.</span></span></param>
        <param name="access"><span data-ttu-id="98240-182">用于确定 <see cref="T:System.IO.FileAccess" /> 可以如何访问文件的 <see cref="T:System.IO.Log.LogStore" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-182">One of the <see cref="T:System.IO.FileAccess" /> values that determines how the file can be accessed by the <see cref="T:System.IO.Log.LogStore" />.</span></span></param>
        <param name="share"><span data-ttu-id="98240-183">用于确定日志存储区将如何在进程之间共享的 <see cref="T:System.IO.FileShare" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-183">One of the <see cref="T:System.IO.FileShare" /> values that determines how the log store will be shared among processes.</span></span></param>
        <summary><span data-ttu-id="98240-184">初始化 <see cref="T:System.IO.Log.LogStore" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="98240-184">Initializes a new instance of the <see cref="T:System.IO.Log.LogStore" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-185">此构造函数初始化它以指定的路径、模式和访问权限打开的新 <xref:System.IO.Log.LogStore> 对象。</span><span class="sxs-lookup"><span data-stu-id="98240-185">This constructor initializes a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access.</span></span> <span data-ttu-id="98240-186">并打开了存储区以共享指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="98240-186">The store is opened sharing the specified access.</span></span>  
  
 <span data-ttu-id="98240-187">`path` 参数应使用以下语法：</span><span class="sxs-lookup"><span data-stu-id="98240-187">The `path` parameter should use the following syntax:</span></span>  
  
 `log:<physical log name>[::<log client name>]`  
  
 <span data-ttu-id="98240-188">其中 `<physical log name>` 是日志文件的有效路径，`<log client name>` 是唯一客户端标识符。</span><span class="sxs-lookup"><span data-stu-id="98240-188">where `<physical log name>` is a valid path to a log file, and `<log client name>` is a unique client identifier.</span></span> <span data-ttu-id="98240-189">日志存储区应是物理日志存储区或虚拟日志存储区，但不能同时为两者。</span><span class="sxs-lookup"><span data-stu-id="98240-189">A log store should be either a physical log store or a virtual log store, but not both.</span></span> <span data-ttu-id="98240-190">以物理或虚拟方式创建日志存储区后，它在整个生命周期中都将保持该形态。</span><span class="sxs-lookup"><span data-stu-id="98240-190">Once a log store has been created physically or virtually, it remains so for its lifetime.</span></span> <span data-ttu-id="98240-191">物理日志存储区是通过仅指定物理日志名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-191">A physical log store is created by specifying only the physical log name.</span></span> <span data-ttu-id="98240-192">虚拟日志存储区是通过指定物理日志名称和日志客户端名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-192">A virtual log store is created by specifying both the physical log name and the log client name.</span></span>  
  
 <span data-ttu-id="98240-193">共享同一个物理日志名称的客户端将共享相同的范围集合与策略。</span><span class="sxs-lookup"><span data-stu-id="98240-193">Clients that share the same physical log name share the same extents collection and policy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98240-194"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98240-194"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-195"><paramref name="path" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="98240-195"><paramref name="path" /> is an empty string ("").</span></span>  
  
<span data-ttu-id="98240-196">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-196">-or-</span></span> 
 <span data-ttu-id="98240-197"><paramref name="path" /> 仅包含空白。</span><span class="sxs-lookup"><span data-stu-id="98240-197"><paramref name="path" /> contains only white space.</span></span>  
  
<span data-ttu-id="98240-198">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-198">-or-</span></span> 
 <span data-ttu-id="98240-199"><paramref name="path" /> 包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="98240-199"><paramref name="path" /> contains one or more invalid characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98240-200"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-200"><paramref name="mode" /> contains an invalid value.</span></span>  
  
<span data-ttu-id="98240-201">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-201">-or</span></span> 
 <span data-ttu-id="98240-202"><paramref name="access" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-202"><paramref name="access" /> contains an invalid value.</span></span>  
  
<span data-ttu-id="98240-203">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-203">-or-</span></span> 
 <span data-ttu-id="98240-204"><paramref name="share" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-204"><paramref name="share" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98240-205">无法找到该文件。</span><span class="sxs-lookup"><span data-stu-id="98240-205">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-206">打开日志存储区时发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-206">An I/O error occurs when opening the log store.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-207">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-207">Access for the specified log store is denied by the operating system.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="98240-208">无法使用 <see cref="T:System.IO.Log.LogStore" />，因为没有安装所需的公用日志文件系统 (CLFS) 组件。</span><span class="sxs-lookup"><span data-stu-id="98240-208"><see cref="T:System.IO.Log.LogStore" /> cannot be used because the required Common Log File System (CLFS) component is not installed.</span></span> <span data-ttu-id="98240-209">如果可行，请为您的平台安装 CLFS 组件，或者改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 类。</span><span class="sxs-lookup"><span data-stu-id="98240-209">Install the CLFS component if it is available for your platform or use the <see cref="T:System.IO.Log.FileRecordSequence" /> class instead.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-210">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-210">There is not enough memory to continue the execution of a program.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, fileSecurity As FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogStore(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.LogStore : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * System.Security.AccessControl.FileSecurity -&gt; System.IO.Log.LogStore" Usage="new System.IO.Log.LogStore (path, mode, access, share, fileSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="98240-211">要打开的日志存储区的基文件的相对或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="98240-211">A relative or absolute path for the base file of the log store to open.</span></span></param>
        <param name="mode"><span data-ttu-id="98240-212">用于确定如何打开或创建存储区的 <see cref="T:System.IO.FileMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-212">One of the <see cref="T:System.IO.FileMode" /> values that determines how to open or create the store.</span></span></param>
        <param name="access"><span data-ttu-id="98240-213">用于确定 <see cref="T:System.IO.FileAccess" /> 可以如何访问文件的 <see cref="T:System.IO.Log.LogStore" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-213">One of the <see cref="T:System.IO.FileAccess" /> values that determines how the file can be accessed by the <see cref="T:System.IO.Log.LogStore" />.</span></span></param>
        <param name="share"><span data-ttu-id="98240-214">用于确定日志存储区将如何在进程之间共享的 <see cref="T:System.IO.FileShare" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="98240-214">One of the <see cref="T:System.IO.FileShare" /> values that determines how the log store will be shared among processes.</span></span></param>
        <param name="fileSecurity"><span data-ttu-id="98240-215"><see cref="T:System.Security.AccessControl.FileSecurity" /> 值之一，指定在必须创建存储区的情况下，要为新创建的存储区设置的安全性。</span><span class="sxs-lookup"><span data-stu-id="98240-215">One of the <see cref="T:System.Security.AccessControl.FileSecurity" /> value that specifies the security to set on the newly created store if the store must be created.</span></span></param>
        <summary><span data-ttu-id="98240-216">初始化 <see cref="T:System.IO.Log.LogStore" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="98240-216">Initializes a new instance of the <see cref="T:System.IO.Log.LogStore" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-217">此构造函数初始化它以指定的路径、模式和访问权限打开的新 <xref:System.IO.Log.LogStore> 对象。</span><span class="sxs-lookup"><span data-stu-id="98240-217">This constructor initializes a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access.</span></span> <span data-ttu-id="98240-218">并打开了存储区以共享指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="98240-218">The store is opened sharing the specified access.</span></span> <span data-ttu-id="98240-219">`path` 参数应遵循以下语法：</span><span class="sxs-lookup"><span data-stu-id="98240-219">The `path` parameter should follow the following syntax:</span></span>  
  
 `log:<physical log name>[::<log client name>]`  
  
 <span data-ttu-id="98240-220">其中 `<physical log name>` 是日志文件的有效路径，`<log client name>` 是唯一客户端标识符。</span><span class="sxs-lookup"><span data-stu-id="98240-220">where `<physical log name>` is a valid path to a log file, and `<log client name>` is a unique client identifier.</span></span> <span data-ttu-id="98240-221">日志存储区应是物理日志存储区或虚拟日志存储区，但不能同时为两者。</span><span class="sxs-lookup"><span data-stu-id="98240-221">A log store should be either a physical log store or a virtual log store, but not both.</span></span> <span data-ttu-id="98240-222">以物理或虚拟方式创建日志存储区后，它在整个生命周期中都将保持该形态。</span><span class="sxs-lookup"><span data-stu-id="98240-222">Once a log store has been created physically or virtually, it remains so for its lifetime.</span></span> <span data-ttu-id="98240-223">物理日志存储区是通过仅指定物理日志名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-223">A physical log store is created by specifying only the physical log name.</span></span> <span data-ttu-id="98240-224">虚拟日志存储区是通过指定物理日志名称和日志客户端名称来创建的。</span><span class="sxs-lookup"><span data-stu-id="98240-224">A virtual log store is created by specifying both the physical log name and the log client name.</span></span>  
  
 <span data-ttu-id="98240-225">共享同一个物理日志名称的客户端将共享相同的范围集合与策略。</span><span class="sxs-lookup"><span data-stu-id="98240-225">Clients that share the same physical log name share the same extents collection and policy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98240-226"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98240-226"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-227"><paramref name="path" /> 指定的日志存储区文件名无效。</span><span class="sxs-lookup"><span data-stu-id="98240-227">The log store file name specified by <paramref name="path" /> is not valid.</span></span>  
  
<span data-ttu-id="98240-228">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-228">-or-</span></span> 
 <span data-ttu-id="98240-229"><paramref name="Mode" /> 为 <see langword="CreateNew" />，在没有写访问权限的情况下无法使用它。</span><span class="sxs-lookup"><span data-stu-id="98240-229"><paramref name="Mode" /> is <see langword="CreateNew" />, which cannot be used without write access.</span></span>  
  
<span data-ttu-id="98240-230">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-230">-or-</span></span> 
 <span data-ttu-id="98240-231"><paramref name="Mode" /> 为 <see langword="OpenOrCreate" />，在没有写访问权限的情况下无法使用它。</span><span class="sxs-lookup"><span data-stu-id="98240-231"><paramref name="Mode" /> is <see langword="OpenOrCreate" />, which cannot be used without write access.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98240-232"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-232"><paramref name="mode" /> contains an invalid value.</span></span>  
  
<span data-ttu-id="98240-233">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-233">-or</span></span> 
 <span data-ttu-id="98240-234"><paramref name="access" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-234"><paramref name="access" /> contains an invalid value.</span></span>  
  
<span data-ttu-id="98240-235">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-235">-or-</span></span> 
 <span data-ttu-id="98240-236"><paramref name="share" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="98240-236"><paramref name="share" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98240-237">无法找到该文件。</span><span class="sxs-lookup"><span data-stu-id="98240-237">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-238">打开日志存储区时发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-238">An I/O error occurs when opening the log store.</span></span>  
  
<span data-ttu-id="98240-239">无法访问 <paramref name="path" /> 指定的文件，因为另一个进程正在使用该文件。</span><span class="sxs-lookup"><span data-stu-id="98240-239">The file specified by <paramref name="path" /> cannot be accessed because it is in use by another process.</span></span>  
  
<span data-ttu-id="98240-240">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-240">-or-</span></span> 
<span data-ttu-id="98240-241">无法创建 <paramref name="path" /> 指定的文件，因为该文件或目录已存在。</span><span class="sxs-lookup"><span data-stu-id="98240-241">The file specified by <paramref name="path" /> cannot be created because the file or directory already exists.</span></span>  
  
<span data-ttu-id="98240-242">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-242">-or-</span></span> 
<span data-ttu-id="98240-243">日志句柄无法绑定到线程池。</span><span class="sxs-lookup"><span data-stu-id="98240-243">The log handle could not be bound to the thread pool.</span></span>  
  
<span data-ttu-id="98240-244">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-244">-or-</span></span> 
<span data-ttu-id="98240-245">指定的日志文件格式或版本无效。</span><span class="sxs-lookup"><span data-stu-id="98240-245">The specified log file format or version is invalid.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="98240-246">无法使用 <see cref="T:System.IO.Log.LogStore" />，因为没有安装所需的公用日志文件系统 (CLFS) 组件。</span><span class="sxs-lookup"><span data-stu-id="98240-246"><see cref="T:System.IO.Log.LogStore" /> cannot be used because the required Common Log File System (CLFS) component is not installed.</span></span> <span data-ttu-id="98240-247">如果可行，请为您的平台安装 CLFS 组件，或者改用 <see cref="T:System.IO.Log.FileRecordSequence" /> 类。</span><span class="sxs-lookup"><span data-stu-id="98240-247">Install the CLFS component if it is available for your platform or use the <see cref="T:System.IO.Log.FileRecordSequence" /> class instead.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-248">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="98240-248">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-249">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-249">There is not enough memory to continue the execution of a program.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="98240-250">记录序列已满。</span><span class="sxs-lookup"><span data-stu-id="98240-250">The record sequence is full.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-251">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-251">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Archivable">
      <MemberSignature Language="C#" Value="public bool Archivable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Archivable" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Archivable" />
      <MemberSignature Language="VB.NET" Value="Public Property Archivable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Archivable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Archivable : bool with get, set" Usage="System.IO.Log.LogStore.Archivable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-252">获取指示是否可对 <see cref="T:System.IO.Log.LogStore" /> 实例进行存档的值。</span><span class="sxs-lookup"><span data-stu-id="98240-252">Gets a value indicating whether this <see cref="T:System.IO.Log.LogStore" /> instance can be archived.</span></span></summary>
        <value><span data-ttu-id="98240-253">如果此 <see langword="true" /> 实例可以存档，则为 <see cref="T:System.IO.Log.LogStore" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="98240-253"><see langword="true" /> if this <see cref="T:System.IO.Log.LogStore" /> instance can be archived; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-254">如果 <xref:System.IO.Log.LogStore> 是不可存档的，则对 <xref:System.IO.Log.LogStore.CreateLogArchiveSnapshot%2A> 和 <xref:System.IO.Log.LogStore.SetArchiveTail%2A> 方法的调用会导致引发 <xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="98240-254">If a <xref:System.IO.Log.LogStore> is not archivable, calls to the <xref:System.IO.Log.LogStore.CreateLogArchiveSnapshot%2A> and <xref:System.IO.Log.LogStore.SetArchiveTail%2A> methods result in a <xref:System.NotSupportedException> being thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-255">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="98240-255">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.LogStore.BaseSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-256">获取与此 <see cref="T:System.IO.Log.LogStore" /> 实例中有效记录对应的最低序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-256">Gets the lowest sequence number that corresponds to a valid record in this <see cref="T:System.IO.Log.LogStore" /> instance.</span></span></summary>
        <value><span data-ttu-id="98240-257">与此 <see cref="T:System.IO.Log.LogStore" /> 实例中有效记录对应的最低序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-257">The lowest sequence number that corresponds to a valid record in this <see cref="T:System.IO.Log.LogStore" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-258">有效序列号大于或等于 <xref:System.IO.Log.LogStore.BaseSequenceNumber%2A> 且小于 <xref:System.IO.Log.LogStore.LastSequenceNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="98240-258">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogStore.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogStore.LastSequenceNumber%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-259">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="98240-259">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateLogArchiveSnapshot">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98240-260">拍摄制作备份所需的日志存储区状态的快照。</span><span class="sxs-lookup"><span data-stu-id="98240-260">Takes a snapshot of the log store state necessary to make a backup.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateLogArchiveSnapshot">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.CreateLogArchiveSnapshot" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLogArchiveSnapshot () As LogArchiveSnapshot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::LogArchiveSnapshot ^ CreateLogArchiveSnapshot();" />
      <MemberSignature Language="F#" Value="member this.CreateLogArchiveSnapshot : unit -&gt; System.IO.Log.LogArchiveSnapshot" Usage="logStore.CreateLogArchiveSnapshot " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogArchiveSnapshot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98240-261">拍摄日志存储区状态的快照，以制作备份。</span><span class="sxs-lookup"><span data-stu-id="98240-261">Takes a snapshot of the log store state for making a backup.</span></span></summary>
        <returns><span data-ttu-id="98240-262">一个包含制作存档所需状态的 <see cref="T:System.IO.Log.LogArchiveSnapshot" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="98240-262">A <see cref="T:System.IO.Log.LogArchiveSnapshot" /> object that contains the state necessary to make an archive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="98240-263">下面的示例演示如何将 <xref:System.IO.Log.LogStore> 存档到 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="98240-263">The following example shows how to archive a <xref:System.IO.Log.LogStore> to an XML document.</span></span>  
  
 [!code-csharp[logarchievesnapshot#0](~/samples/snippets/csharp/VS_Snippets_CFX/logarchievesnapshot/cs/logarchievesnapshot.cs#0)]
 [!code-vb[logarchievesnapshot#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/logarchievesnapshot/vb/logarchievesnapshot.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98240-264">日志存储区不可存档。</span><span class="sxs-lookup"><span data-stu-id="98240-264">The log store is not archivable.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-265">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="98240-265">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-266">创建存档快照时发生 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-266">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-267">自变量无效。</span><span class="sxs-lookup"><span data-stu-id="98240-267">An argument is not valid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98240-268">执行了无效的操作。</span><span class="sxs-lookup"><span data-stu-id="98240-268">An invalid operation has been executed.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-269">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-269">There is not enough memory to continue the execution of a program.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="98240-270">记录序列已满。</span><span class="sxs-lookup"><span data-stu-id="98240-270">The record sequence is full.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-271">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-271">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateLogArchiveSnapshot">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot (System.IO.Log.SequenceNumber first, System.IO.Log.SequenceNumber last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot(valuetype System.IO.Log.SequenceNumber first, valuetype System.IO.Log.SequenceNumber last) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.CreateLogArchiveSnapshot(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLogArchiveSnapshot (first As SequenceNumber, last As SequenceNumber) As LogArchiveSnapshot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::LogArchiveSnapshot ^ CreateLogArchiveSnapshot(System::IO::Log::SequenceNumber first, System::IO::Log::SequenceNumber last);" />
      <MemberSignature Language="F#" Value="member this.CreateLogArchiveSnapshot : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; System.IO.Log.LogArchiveSnapshot" Usage="logStore.CreateLogArchiveSnapshot (first, last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogArchiveSnapshot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="last" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="first"><span data-ttu-id="98240-272">要存档的范围中的起始序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-272">The starting sequence number in the range to archive.</span></span></param>
        <param name="last"><span data-ttu-id="98240-273">要存档的范围中的结束序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-273">The ending sequence number in the range to archive.</span></span></param>
        <summary><span data-ttu-id="98240-274">拍摄指定序列号之间的日志存储区状态的快照，以制作备份。</span><span class="sxs-lookup"><span data-stu-id="98240-274">Takes a snapshot of the log store state between the specified sequence numbers for making a backup.</span></span></summary>
        <returns><span data-ttu-id="98240-275">一个包含制作存档所需状态的 <see cref="T:System.IO.Log.LogArchiveSnapshot" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="98240-275">A <see cref="T:System.IO.Log.LogArchiveSnapshot" /> object that contains the state necessary to make an archive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-276">此方法返回的存档快照包含从基序列号或存档序列号（两者的较低者）到最新序列号之间的信息。</span><span class="sxs-lookup"><span data-stu-id="98240-276">The archive snapshot returned from this method encompasses information from either the base sequence number or the archive sequence number, whichever is lower, to the last sequence number.</span></span> <span data-ttu-id="98240-277">其中不包含最新序列号，这表示，存档仅包含截至但不包括最后一条的记录。</span><span class="sxs-lookup"><span data-stu-id="98240-277">It is not inclusive for the last sequence number, which means that the archive only includes records up to but not including last.</span></span> <span data-ttu-id="98240-278">此外，使用此方法时，起始 SequenceNumber 必须等于 BaseSequenceNumber，以保证存档的一致性。</span><span class="sxs-lookup"><span data-stu-id="98240-278">In addition, when using this method, the start SequenceNumber must be equal to the BaseSequenceNumber in order for the archive to be consistent.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98240-279"><paramref name="first" /> 或 <paramref name="last" /> 不在此序列的基序列号和最新序列号之间。</span><span class="sxs-lookup"><span data-stu-id="98240-279"><paramref name="first" /> or <paramref name="last" /> is not between the base and last sequence numbers of this sequence.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-280"><paramref name="first" /> 大于 <paramref name="last" />。</span><span class="sxs-lookup"><span data-stu-id="98240-280"><paramref name="first" /> is larger than <paramref name="last" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98240-281">执行了无效的操作。</span><span class="sxs-lookup"><span data-stu-id="98240-281">An invalid operation has been executed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-282">创建存档快照时发生 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-282">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98240-283">日志存储区不可存档。</span><span class="sxs-lookup"><span data-stu-id="98240-283">The log store is not archivable.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-284">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="98240-284">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-285">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-285">There is not enough memory to continue the execution of a program.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="98240-286">记录序列已满。</span><span class="sxs-lookup"><span data-stu-id="98240-286">The record sequence is full.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-287">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-287">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.IO.Log.LogStore.Delete path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="98240-288">要移除的日志存储区的基文件的相对或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="98240-288">A relative or absolute path for the base file of the log store to remove.</span></span></param>
        <summary><span data-ttu-id="98240-289">移除日志存储区。</span><span class="sxs-lookup"><span data-stu-id="98240-289">Removes the log store.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98240-290"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="98240-290"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-291"><paramref name="path" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="98240-291"><paramref name="path" /> is an empty string ("").</span></span>  
  
<span data-ttu-id="98240-292">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-292">-or-</span></span> 
 <span data-ttu-id="98240-293"><paramref name="path" /> 仅包含空白。</span><span class="sxs-lookup"><span data-stu-id="98240-293"><paramref name="path" /> contains only white space.</span></span>  
  
<span data-ttu-id="98240-294">- 或 -</span><span class="sxs-lookup"><span data-stu-id="98240-294">-or-</span></span> 
 <span data-ttu-id="98240-295"><paramref name="path" /> 包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="98240-295"><paramref name="path" /> contains one or more invalid characters.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="98240-296">无法找到该文件。</span><span class="sxs-lookup"><span data-stu-id="98240-296">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-297">打开日志存储区时发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-297">An I/O error occurs when opening the log store.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-298">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-298">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="logStore.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98240-299">释放由 <see cref="T:System.IO.Log.LogStore" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="98240-299">Releases all resources used by the <see cref="T:System.IO.Log.LogStore" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-300">使用完 <xref:System.IO.Log.LogStore.Dispose%2A> 之后，调用 <xref:System.IO.Log.LogStore>。</span><span class="sxs-lookup"><span data-stu-id="98240-300">Call <xref:System.IO.Log.LogStore.Dispose%2A> when you have finished using the <xref:System.IO.Log.LogStore>.</span></span> <span data-ttu-id="98240-301"><xref:System.IO.Log.LogStore.Dispose%2A> 方法使 <xref:System.IO.Log.LogStore> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="98240-301">The <xref:System.IO.Log.LogStore.Dispose%2A> method leaves the <xref:System.IO.Log.LogStore> in an unusable state.</span></span> <span data-ttu-id="98240-302">调用 <xref:System.IO.Log.LogStore.Dispose%2A> 之后，必须释放对 <xref:System.IO.Log.LogStore> 的所有引用，以便垃圾回收器能够回收 <xref:System.IO.Log.LogStore> 占用的内存。</span><span class="sxs-lookup"><span data-stu-id="98240-302">After calling <xref:System.IO.Log.LogStore.Dispose%2A> , you must release all references to the <xref:System.IO.Log.LogStore> so the garbage collector can reclaim the memory that the <xref:System.IO.Log.LogStore> was occupying.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98240-303">每次释放对 <xref:System.IO.Log.LogStore.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.IO.Log.LogStore>。</span><span class="sxs-lookup"><span data-stu-id="98240-303">Always call <xref:System.IO.Log.LogStore.Dispose%2A> before you release your last reference to the <xref:System.IO.Log.LogStore>.</span></span> <span data-ttu-id="98240-304">否则，在垃圾回收器调用 <xref:System.IO.Log.LogStore> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="98240-304">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.Log.LogStore> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-305">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="98240-305">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Extents">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogExtentCollection Extents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Log.LogExtentCollection Extents" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Extents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extents As LogExtentCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::LogExtentCollection ^ Extents { System::IO::Log::LogExtentCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extents : System.IO.Log.LogExtentCollection" Usage="System.IO.Log.LogStore.Extents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogExtentCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-306">获取一个日志范围集合，这些日志范围包含此日志存储区的数据。</span><span class="sxs-lookup"><span data-stu-id="98240-306">Gets the collection of log extents that contain the data for this log store.</span></span></summary>
        <value><span data-ttu-id="98240-307">一个包含日志范围集合的 <see cref="T:System.IO.Log.LogExtentCollection" /> 实例，该集合中封装了此日志存储区的数据。</span><span class="sxs-lookup"><span data-stu-id="98240-307">A <see cref="T:System.IO.Log.LogExtentCollection" /> instance containing the collection of log extents that encapsulates data for this log store.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-308"><xref:System.IO.Log.LogStore> 实例将其数据存储在磁盘范围的集合中，这些范围由 <xref:System.IO.Log.LogExtent> 实例表示。</span><span class="sxs-lookup"><span data-stu-id="98240-308">A <xref:System.IO.Log.LogStore> instance stores its data in a collection of disk extents, represented by <xref:System.IO.Log.LogExtent> instances.</span></span> <span data-ttu-id="98240-309">给定 <xref:System.IO.Log.LogStore> 实例中的所有范围都具有统一的大小，空间以范围增量的形式添加到 <xref:System.IO.Log.LogStore> 实例中及从其中移除。</span><span class="sxs-lookup"><span data-stu-id="98240-309">The extents in a given <xref:System.IO.Log.LogStore> instance are all of uniform size, and space is added to and removed from a <xref:System.IO.Log.LogStore> instance in extent increments.</span></span> <span data-ttu-id="98240-310">若要添加和移除日志范围，请使用由此属性返回的 <xref:System.IO.Log.LogExtentCollection.Add%2A> 对象的 <xref:System.IO.Log.LogExtentCollection.Remove%2A> 和 <xref:System.IO.Log.LogExtentCollection> 方法。</span><span class="sxs-lookup"><span data-stu-id="98240-310">To add and remove log extents, use the <xref:System.IO.Log.LogExtentCollection.Add%2A> and <xref:System.IO.Log.LogExtentCollection.Remove%2A> methods of the <xref:System.IO.Log.LogExtentCollection> object, which is returned by this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeBytes">
      <MemberSignature Language="C#" Value="public long FreeBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 FreeBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.FreeBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long FreeBytes { long get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeBytes : int64" Usage="System.IO.Log.LogStore.FreeBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-311">获取日志存储区中的可用字节数。</span><span class="sxs-lookup"><span data-stu-id="98240-311">Gets the number of bytes available in the log store.</span></span></summary>
        <value><span data-ttu-id="98240-312">日志存储区中的可用字节数。</span><span class="sxs-lookup"><span data-stu-id="98240-312">The number of bytes available in the log store.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-313">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="98240-313">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeFileHandle Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeFileHandle Handle" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As SafeFileHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeFileHandle ^ Handle { Microsoft::Win32::SafeHandles::SafeFileHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : Microsoft.Win32.SafeHandles.SafeFileHandle" Usage="System.IO.Log.LogStore.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-314">获取当前 <see cref="T:System.IO.Log.LogStore" /> 实例封装的日志文件的操作系统文件句柄。</span><span class="sxs-lookup"><span data-stu-id="98240-314">Gets the operating system file handle for the log file that the current <see cref="T:System.IO.Log.LogStore" /> instance encapsulates.</span></span></summary>
        <value><span data-ttu-id="98240-315">当前 <see cref="T:System.IO.Log.LogStore" /> 实例封装的日志文件的操作系统文件句柄。</span><span class="sxs-lookup"><span data-stu-id="98240-315">The operating system file handle for the log file that the current <see cref="T:System.IO.Log.LogStore" /> instance encapsulates.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.LastSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.LogStore.LastSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-316">在派生类中被重写时，获取要追加到日志存储区中的下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-316">When overridden in a derived class, gets the sequence number of the next record to be appended to the log store.</span></span></summary>
        <value><span data-ttu-id="98240-317">要追加到日志存储区中的下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-317">The sequence number of the next record to be appended to the log store.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-318">有效序列号大于或等于 <xref:System.IO.Log.LogStore.BaseSequenceNumber%2A> 且小于 <xref:System.IO.Log.LogStore.LastSequenceNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="98240-318">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogStore.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogStore.LastSequenceNumber%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-319">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="98240-319">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.IO.Log.LogStore.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-320">获取日志存储区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="98240-320">Gets the size of the log store, in bytes.</span></span></summary>
        <value><span data-ttu-id="98240-321">日志存储区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="98240-321">The size of the log store, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-322">日志存储区的大小是日志范围的大小之和。</span><span class="sxs-lookup"><span data-stu-id="98240-322">The size of the log store is the sum of the sizes of the log extents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-323">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="98240-323">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Policy">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogPolicy Policy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Log.LogPolicy Policy" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.Policy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Policy As LogPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::LogPolicy ^ Policy { System::IO::Log::LogPolicy ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Policy : System.IO.Log.LogPolicy" Usage="System.IO.Log.LogStore.Policy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-324">获取与此日志存储区关联的策略。</span><span class="sxs-lookup"><span data-stu-id="98240-324">Gets the policy associated with this log store.</span></span></summary>
        <value><span data-ttu-id="98240-325">一个 <see cref="T:System.IO.Log.LogPolicy" /> 实例，表示与此日志存储区关联的策略。</span><span class="sxs-lookup"><span data-stu-id="98240-325">A <see cref="T:System.IO.Log.LogPolicy" /> instance representing the policy associated with this log store.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-326">使用此属性返回的 <xref:System.IO.Log.LogPolicy> 实例可以检验和操作与此 <xref:System.IO.Log.LogStore> 关联的日志策略。</span><span class="sxs-lookup"><span data-stu-id="98240-326">You can use the <xref:System.IO.Log.LogPolicy> instance returned by this property to examine and manipulate the log policy associated with this <xref:System.IO.Log.LogStore>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArchiveTail">
      <MemberSignature Language="C#" Value="public void SetArchiveTail (System.IO.Log.SequenceNumber archiveTail);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetArchiveTail(valuetype System.IO.Log.SequenceNumber archiveTail) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogStore.SetArchiveTail(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetArchiveTail (archiveTail As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetArchiveTail(System::IO::Log::SequenceNumber archiveTail);" />
      <MemberSignature Language="F#" Value="member this.SetArchiveTail : System.IO.Log.SequenceNumber -&gt; unit" Usage="logStore.SetArchiveTail archiveTail" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveTail" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="archiveTail"><span data-ttu-id="98240-327">存档尾数据的序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-327">The sequence number of the archive tail.</span></span></param>
        <summary><span data-ttu-id="98240-328">设置存档尾数据的序列号。</span><span class="sxs-lookup"><span data-stu-id="98240-328">Sets the sequence number of the archive tail.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98240-329">基序列号和存档尾数据中的较小者决定日志的尾数据。</span><span class="sxs-lookup"><span data-stu-id="98240-329">The smaller of the base sequence number and the archive tail determines the tail of the log.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98240-330">下面的示例演示如何将 <xref:System.IO.Log.LogStore> 存档到 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="98240-330">The following example shows how to archive a <xref:System.IO.Log.LogStore> to an XML document.</span></span>  
  
 [!code-csharp[logarchievesnapshot#0](~/samples/snippets/csharp/VS_Snippets_CFX/logarchievesnapshot/cs/logarchievesnapshot.cs#0)]
 [!code-vb[logarchievesnapshot#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/logarchievesnapshot/vb/logarchievesnapshot.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98240-331"><paramref name="archiveTail" /> 不在此序列的基序列号和最后一个序列号之间。</span><span class="sxs-lookup"><span data-stu-id="98240-331"><paramref name="archiveTail" /> is not between the base and last sequence numbers of this sequence.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98240-332"><paramref name="archiveTail" /> 对此序列无效。</span><span class="sxs-lookup"><span data-stu-id="98240-332"><paramref name="archiveTail" /> is not valid for this sequence.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98240-333">执行了无效的操作。</span><span class="sxs-lookup"><span data-stu-id="98240-333">An invalid operation has been executed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="98240-334">创建存档快照时发生 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="98240-334">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="98240-335">日志存储区不可存档。</span><span class="sxs-lookup"><span data-stu-id="98240-335">The log store is not archivable.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="98240-336">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="98240-336">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="98240-337">没有足够的内存来继续执行程序。</span><span class="sxs-lookup"><span data-stu-id="98240-337">There is not enough memory to continue the execution of a program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="98240-338">操作系统拒绝了对指定的日志存储区的访问。</span><span class="sxs-lookup"><span data-stu-id="98240-338">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StreamCount">
      <MemberSignature Language="C#" Value="public int StreamCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StreamCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogStore.StreamCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StreamCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int StreamCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.StreamCount : int" Usage="System.IO.Log.LogStore.StreamCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98240-339">获取此日志存储区中日志流的数量。</span><span class="sxs-lookup"><span data-stu-id="98240-339">Gets the number of log streams in this log store.</span></span></summary>
        <value><span data-ttu-id="98240-340">此日志存储区中日志流的数量。</span><span class="sxs-lookup"><span data-stu-id="98240-340">The number of log streams in this log store.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
