<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d50c386617c90b4251645561fbc9b05e8a10a4e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89943835" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示与 <see cref="T:System.IO.Log.LogExtent" /> 关联的 <see cref="T:System.IO.Log.LogStore" /> 对象的集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类包含与 <xref:System.IO.Log.LogExtent> 关联的 <xref:System.IO.Log.LogStore> 对象的集合。 <xref:System.IO.Log.LogStore> 实例将其数据存储在磁盘范围的集合中，这些范围由 <xref:System.IO.Log.LogExtent> 实例表示。 特定的 <xref:System.IO.Log.LogExtent> 与一个 <xref:System.IO.Log.LogStore> 相关联，同一 <xref:System.IO.Log.LogExtent> 中的 <xref:System.IO.Log.LogStore> 对象具有相同的大小。 将以范围增量的形式在 <xref:System.IO.Log.LogStore> 实例中添加和移除空间。  
  
 虽然 <xref:System.IO.Log.LogExtent> 对象在磁盘上以文件的形式表示，但不应像普通文件那样移动或删除它们。 相反，应使用此类提供的方法直接添加和删除 <xref:System.IO.Log.LogExtent> 实例。 当范围不再包含任何活动数据时，通常会将其移除。 但是，如果 `force` 方法中的 <xref:System.IO.Log.LogExtentCollection.Remove%2A> 参数为 `true`，并且无法立即移除范围，则会引发异常。  
  
 无法移除 <xref:System.IO.Log.LogExtentCollection> 中的最后一个范围，这意味着在添加范围后 <xref:System.IO.Log.LogExtentCollection.Count%2A> 属性不能为零。  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 类来添加和模拟日志序列中的范围。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建一个新的 <see cref="T:System.IO.Log.LogExtent" />，并将其添加到集合中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要添加的日志范围的路径。</param>
        <summary>将一个 <see cref="T:System.IO.Log.LogExtent" /> 实例添加到集合中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新添加的 <xref:System.IO.Log.LogExtent> 实例的大小与集合中的现有 <xref:System.IO.Log.LogExtent> 实例的大小相同。  
  
> [!NOTE]
>  不要使用此方法将第一个 <xref:System.IO.Log.LogExtent> 添加到集合中。  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 类来添加和模拟日志序列中的范围。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 指定的日志存储区文件名无效。</exception>
        <exception cref="T:System.InvalidOperationException">必须为第一个范围指定大小。</exception>
        <exception cref="T:System.IO.IOException">由于出现意外的 I/O 异常，因此无法执行该请求。  
  
- 或 - 
无法创建 <paramref name="path" /> 指定的文件，因为该文件或目录已存在。</exception>
        <exception cref="T:System.ObjectDisposedException">该方法是在序列已释放之后调用的。</exception>
        <exception cref="T:System.OutOfMemoryException">没有足够的内存来继续执行该程序。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">记录序列已满。  
  
 - 或 -  
  
 存储磁盘或介质已满。</exception>
        <exception cref="T:System.UnauthorizedAccessException">操作系统拒绝了对指定的日志存储区的访问。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">日志范围的路径。</param>
        <param name="size">日志范围的大小。</param>
        <summary>使用指定大小创建新的 <see cref="T:System.IO.Log.LogExtent" />，并将其添加到集合中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果集合不为空，指定的大小必须至少与集合中其他范围的大小一样大。 在这种情况下，将忽略 `size` 参数，并使用与集合中的其他范围相同的大小创建范围。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="size" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="archiveTail" /> 不在有效范围内。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 指定的日志存储区文件名无效。  
  
 <paramref name="size" /> 小于存储区中其他范围的大小。</exception>
        <exception cref="T:System.InvalidOperationException">必须为第一个范围指定大小。  
  
 - 或 -  
  
 不能使用重复的范围名称。</exception>
        <exception cref="T:System.IO.IOException">由于出现意外的 I/O 异常，因此无法执行该请求。  
  
- 或 - 
无法创建 <paramref name="path" /> 指定的文件，因为该文件或目录已存在。</exception>
        <exception cref="T:System.ObjectDisposedException">该方法是在序列已释放之后调用的。</exception>
        <exception cref="T:System.OutOfMemoryException">没有足够的内存来继续执行该程序。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">记录序列已满。  
  
 - 或 -  
  
 存储磁盘或介质已满。</exception>
        <exception cref="T:System.UnauthorizedAccessException">操作系统拒绝了对指定的日志存储区的访问。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取集合中的日志范围数。</summary>
        <value>集合中的日志范围数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 类来添加和模拟日志序列中的范围。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">日志存储区已释放。</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取集合中的可用 <see cref="T:System.IO.Log.LogExtent" /> 实例数，即，不包含任何数据的 <see cref="T:System.IO.Log.LogExtent" /> 实例数。</summary>
        <value>集合中的可用 <see cref="T:System.IO.Log.LogExtent" /> 实例数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Log.LogExtent> 和 <xref:System.IO.Log.LogExtentCollection> 类来添加和模拟日志序列中的范围。  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">日志存储区已释放。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取此集合中 <see cref="T:System.IO.Log.LogExtent" /> 实例的枚举数。 无法继承此方法。</summary>
        <returns>此集合中 <see cref="T:System.IO.Log.LogExtent" /> 实例的枚举数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">由于出现意外的 I/O 异常，因此无法执行该请求。</exception>
        <exception cref="T:System.InvalidOperationException">操作由于以下原因之一而无效： 
-   枚举已经终止。  
  
-   集合已修改。  
  
-   枚举尚未开始。 必须调用 <see cref="M:System.Collections.IEnumerator.MoveNext" />。</exception>
        <exception cref="T:System.ObjectDisposedException">该方法是在序列已释放之后调用的。</exception>
        <exception cref="T:System.OutOfMemoryException">没有足够的内存来继续执行该程序。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">记录序列已满。</exception>
        <exception cref="T:System.UnauthorizedAccessException">操作系统拒绝了对指定的日志存储区的访问。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从集合中移除 <see cref="T:System.IO.Log.LogExtent" /> 实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">要移除的 <see cref="T:System.IO.Log.LogExtent" /> 实例。</param>
        <param name="force">如果应立即移除范围，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>从集合中移除指定的 <see cref="T:System.IO.Log.LogExtent" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有在 <xref:System.IO.Log.LogExtent> 实例不是 <xref:System.IO.Log.LogStore> 活动区域的一部分时，才能将该实例从集合中移除。 如果 `force` 参数为 `true`，并且无法立即移除范围，则会引发异常。 如果 `force` 参数为 `false`，并且无法立即移除范围，则会延迟移除操作，直到其不再是活动区域的一部分。  
  
 无法移除 <xref:System.IO.Log.LogExtentCollection> 中的最后一个范围，这意味着在添加范围后 <xref:System.IO.Log.LogExtentCollection.Count%2A> 属性不能为零。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extent" /> 或 <paramref name="force" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在集合中找不到 <paramref name="extent" />。</exception>
        <exception cref="T:System.InvalidOperationException">无法移除 <paramref name="extent" />。 它仍然是活动区域的一部分，或者拒绝访问。</exception>
        <exception cref="T:System.IO.IOException">由于出现意外的 I/O 异常，因此无法执行该请求。  
  
- 或 - 
 无法删除 <paramref name="extent" />。</exception>
        <exception cref="T:System.ObjectDisposedException">该方法是在序列已释放之后调用的。</exception>
        <exception cref="T:System.OutOfMemoryException">没有足够的内存来继续执行该程序。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">记录序列已满。</exception>
        <exception cref="T:System.UnauthorizedAccessException">操作系统拒绝了对指定的日志存储区的访问。</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">要移除的 <see cref="T:System.IO.Log.LogExtent" /> 实例的路径。</param>
        <param name="force">如果应立即移除范围，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>从集合中移除具有指定路径的 <see cref="T:System.IO.Log.LogExtent" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有在 <xref:System.IO.Log.LogExtent> 实例不是 <xref:System.IO.Log.LogStore> 活动区域的一部分时，才能将该实例从集合中移除。 如果 `force` 参数为 `true`，并且无法立即移除范围，则会引发异常。 如果 `force` 参数为 `false`，并且无法立即移除范围，则会延迟移除操作，直到其不再是活动区域的一部分。  
  
 无法移除 <xref:System.IO.Log.LogExtentCollection> 中的最后一个范围，这意味着在添加范围后 <xref:System.IO.Log.LogExtentCollection.Count%2A> 属性不能为零。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="force" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在集合中找不到 <paramref name="path" /> 指定的范围。</exception>
        <exception cref="T:System.InvalidOperationException">无法移除 <paramref name="path" /> 指定的范围。 它仍然是活动区域的一部分，或者拒绝访问。</exception>
        <exception cref="T:System.IO.IOException">由于出现意外的 I/O 异常，因此无法执行该请求。  
  
- 或 - 
无法删除 <paramref name="path" /> 指定的范围。</exception>
        <exception cref="T:System.ObjectDisposedException">该方法是在序列已释放之后调用的。</exception>
        <exception cref="T:System.OutOfMemoryException">没有足够的内存来继续执行该程序。</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">记录序列已满。</exception>
        <exception cref="T:System.UnauthorizedAccessException">操作系统拒绝了对指定的日志存储区的访问。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="logExtentCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取此集合中 <see cref="T:System.IO.Log.LogExtent" /> 实例的枚举数。 无法继承此方法。</summary>
        <returns>此集合中 <see cref="T:System.IO.Log.LogExtent" /> 实例的枚举数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此成员是显式接口成员的实现。 它只能在 <xref:System.IO.Log.LogExtentCollection> 实例被强制转换为 <xref:System.Collections.IEnumerable> 接口时使用。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
