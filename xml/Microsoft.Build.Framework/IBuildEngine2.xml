<Type Name="IBuildEngine2" FullName="Microsoft.Build.Framework.IBuildEngine2">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e869e5cd9ef68469aa3a34aafa3cf44e76bfe609" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89808240" /></Metadata><TypeSignature Language="C#" Value="public interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBuildEngine2 implements class Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBuildEngine2&#xA;Implements IBuildEngine" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBuildEngine2 : Microsoft::Build::Framework::IBuildEngine" />
  <TypeSignature Language="F#" Value="type IBuildEngine2 = interface&#xA;    interface IBuildEngine" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.IBuildEngine</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>此接口将扩展 IBuildEngine，提供一个允许并行生成项目文件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Build.Framework.IBuildEngine2> 扩展 <xref:Microsoft.Build.Framework.IBuildEngine> ，使你能够在包含多个处理器的系统上并行生成多个项目文件，或在具有多个内核的处理器上并行生成多个  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildProjectFile">
      <MemberSignature Language="C#" Value="public bool BuildProjectFile (string projectFileName, string[] targetNames, System.Collections.IDictionary globalProperties, System.Collections.IDictionary targetOutputs, string toolsVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFile(string projectFileName, string[] targetNames, class System.Collections.IDictionary globalProperties, class System.Collections.IDictionary targetOutputs, string toolsVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFile (projectFileName As String, targetNames As String(), globalProperties As IDictionary, targetOutputs As IDictionary, toolsVersion As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFile(System::String ^ projectFileName, cli::array &lt;System::String ^&gt; ^ targetNames, System::Collections::IDictionary ^ globalProperties, System::Collections::IDictionary ^ targetOutputs, System::String ^ toolsVersion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFile : string * string[] * System.Collections.IDictionary * System.Collections.IDictionary * string -&gt; bool" Usage="iBuildEngine2.BuildProjectFile (projectFileName, targetNames, globalProperties, targetOutputs, toolsVersion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileName" Type="System.String" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary" />
        <Parameter Name="targetOutputs" Type="System.Collections.IDictionary" />
        <Parameter Name="toolsVersion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="projectFileName">要生成的项目。</param>
        <param name="targetNames">要生成的项目中的目标（可以为 null）。</param>
        <param name="globalProperties">要应用于子项目的其他全局属性的哈希表 (可以为 null) 。  键和值都应为字符串。</param>
        <param name="targetOutputs">每个指定目标 (的输出可以为 null) 。</param>
        <param name="toolsVersion">引擎所识别的工具版本，将在此生成期间使用（可以为 null）。</param>
        <summary>此方法允许任务启动对特定项目文件的生成。 如果生成成功，则在返回指定目标的任何)  (输出。</summary>
        <returns>如果生成成功，则为 true</returns>
        <remarks>1) 可接受同时为 <c>targetNames</c> 和 <c>targetOutputs</c> 2 传递 null) 如果未指定任何目标，则会将默认目标作为三个) 目标输出返回为按目标名称编制索引的 <c>ITaskItem</c> 数组</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildProjectFilesInParallel">
      <MemberSignature Language="C#" Value="public bool BuildProjectFilesInParallel (string[] projectFileNames, string[] targetNames, System.Collections.IDictionary[] globalProperties, System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, class System.Collections.IDictionary[] globalProperties, class System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],System.String[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFilesInParallel (projectFileNames As String(), targetNames As String(), globalProperties As IDictionary(), targetOutputsPerProject As IDictionary(), toolsVersion As String(), useResultsCache As Boolean, unloadProjectsOnCompletion As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFilesInParallel(cli::array &lt;System::String ^&gt; ^ projectFileNames, cli::array &lt;System::String ^&gt; ^ targetNames, cli::array &lt;System::Collections::IDictionary ^&gt; ^ globalProperties, cli::array &lt;System::Collections::IDictionary ^&gt; ^ targetOutputsPerProject, cli::array &lt;System::String ^&gt; ^ toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFilesInParallel : string[] * string[] * System.Collections.IDictionary[] * System.Collections.IDictionary[] * string[] * bool * bool -&gt; bool" Usage="iBuildEngine2.BuildProjectFilesInParallel (projectFileNames, targetNames, globalProperties, targetOutputsPerProject, toolsVersion, useResultsCache, unloadProjectsOnCompletion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileNames" Type="System.String[]" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary[]" />
        <Parameter Name="targetOutputsPerProject" Type="System.Collections.IDictionary[]" />
        <Parameter Name="toolsVersion" Type="System.String[]" />
        <Parameter Name="useResultsCache" Type="System.Boolean" />
        <Parameter Name="unloadProjectsOnCompletion" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="projectFileNames">要生成的项目。</param>
        <param name="targetNames">要生成的项目中的目标（可以为 null）。</param>
        <param name="globalProperties">要应用于子项目的其他全局属性的哈希表数组， (数组项可以为 null) 。 哈希表中的键和值都应为字符串。</param>
        <param name="targetOutputsPerProject">每个指定目标 (的输出可以为 null) 。</param>
        <param name="toolsVersion">引擎所识别的工具版本，将在此生成期间使用（可以为 null）。</param>
        <param name="useResultsCache">如果为 true，则仅当缓存尚未包含结果时才会运行操作。 完成操作后，结果将存储在缓存中</param>
        <param name="unloadProjectsOnCompletion">如果为 true，则在操作完成后，将立即卸载项目</param>
        <summary>此方法允许任务启动对特定项目文件的生成。 如果生成成功，则在返回指定目标的任何)  (输出。</summary>
        <returns>如果生成成功，则为 true</returns>
        <remarks>1) 可接受同时为 <c>targetNames</c> 和 <c>targetOutputs</c> 2 传递 null) 如果未指定任何目标，则会将默认目标作为三个) 目标输出返回为按目标名称编制索引的 <c>ITaskItem</c> 数组</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunningMultipleNodes">
      <MemberSignature Language="C#" Value="public bool IsRunningMultipleNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunningMultipleNodes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunningMultipleNodes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunningMultipleNodes { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunningMultipleNodes : bool" Usage="Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性允许任务查询系统是在单进程模式下运行还是在多进程模式下运行。
单进程模式 (IsRunningMultipleNodes = false) 是指用 cpu 数 = 1 初始化引擎，而引擎不是子引擎的位置。
当使用多个 cpu 1 初始化引擎 &gt; 或引擎为子引擎时，该引擎处于多进程模式 (IsRunningMultipleNodes = true) 。</summary>
        <value>如果系统在多处理器模式下运行，则返回 <see langword="true" />，否则返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成引擎处于单处理器模式下 (在 `IsRunningMultipleNodes`  =  `false` 使用等于1的 cpu 数进行初始化并且生成引擎不是子引擎时) 。 生成引擎处于多处理器模式下 (在 `IsRunningMultipleNodes`  =  `true` 使用大于1的 cpu 数进行初始化时，或者在生成引擎为子引擎时) 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
