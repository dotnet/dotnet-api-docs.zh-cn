<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="10d22418bd7c23452ecd04cc65ff68d1ccaa081e" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90793009" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f6a82-101">提供将对象或值类型序列化为 JSON 以及将 JSON 反序列化为对象或值类型的功能。</span><span class="sxs-lookup"><span data-stu-id="f6a82-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-102">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-102">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt;? utf8Json, Type? returnType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = Nothing) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f6a82-103">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="f6a82-103">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="f6a82-104">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-104">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-105">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-105">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f6a82-106">将表示单个 JSON 值的 UTF-8 编码文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="f6a82-106">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="f6a82-107">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-107">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-108">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-108">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-109"><paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-109"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-110">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-110">The JSON is invalid.</span></span>

<span data-ttu-id="f6a82-111">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-111">-or-</span></span>

<span data-ttu-id="f6a82-112"><typeparamref name="returnType" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-112"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-113">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-113">-or-</span></span>

<span data-ttu-id="f6a82-114">单个 JSON 值以外的跨度中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-114">There is remaining data in the span beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-115"><paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-115">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object? Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = Nothing) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="f6a82-116">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="f6a82-116">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="f6a82-117">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-117">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-118">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-118">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f6a82-119">将表示单个 JSON 值的文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="f6a82-119">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="f6a82-120">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-120">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-121">使用的不如 <xref:System.String> 使用 utf-8 方法，因为实现本身使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="f6a82-121">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="f6a82-122">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-122">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-123"><paramref name="json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-123"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-124">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-124">The JSON is invalid.</span></span>
          
<span data-ttu-id="f6a82-125">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-125">-or-</span></span>

<span data-ttu-id="f6a82-126"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-126"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-127">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-127">-or-</span></span>

<span data-ttu-id="f6a82-128">单个 JSON 值以外的字符串中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-128">There is remaining data in the string beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-129"><paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-129">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type? returnType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = Nothing) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="f6a82-130">要从中读取 JSON 的读取器。</span><span class="sxs-lookup"><span data-stu-id="f6a82-130">The reader to read the JSON from.</span></span></param>
        <param name="returnType"><span data-ttu-id="f6a82-131">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-131">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-132">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-132">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="f6a82-133">从提供的读取器读取一个 JSON 值（包括对象或数组）并将它转换为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="f6a82-133">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="f6a82-134">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-134">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-135">如果的 <xref:System.Text.Json.Utf8JsonReader.TokenType> 属性 `reader` 为 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或，则通过调用来使 <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType> 读取器前进， <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> 以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="f6a82-135">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="f6a82-136">此方法完成后， `reader` 将位于 JSON 值中的最终标记处。</span><span class="sxs-lookup"><span data-stu-id="f6a82-136">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="f6a82-137">如果引发了异常，则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="f6a82-137">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="f6a82-138">此方法会创建读取器所处理的数据的副本，因此，不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="f6a82-138">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="f6a82-139"><xref:System.Text.Json.JsonReaderOptions>用于创建实例的的在 <xref:System.Text.Json.Utf8JsonReader> <xref:System.Text.Json.JsonSerializerOptions> 冲突时优先于。</span><span class="sxs-lookup"><span data-stu-id="f6a82-139">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f6a82-140">因此， <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> 在 <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> 读取时使用、、和。</span><span class="sxs-lookup"><span data-stu-id="f6a82-140">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="f6a82-141">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-141">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-142"><paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-142"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-143">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-143">The JSON is invalid.</span></span>
          
<span data-ttu-id="f6a82-144">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-144">-or-</span></span>

<span data-ttu-id="f6a82-145"><typeparamref name="returnType" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-145"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-146">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-146">-or-</span></span>

<span data-ttu-id="f6a82-147">无法从读取器中读取值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-147">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6a82-148"><paramref name="reader" /> 使用的是不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-148"><paramref name="reader" /> is using unsupported options.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-149"><paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-149">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt;? utf8Json, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = Nothing) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-150">UTF-8 编码文本的目标类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-150">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="f6a82-151">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="f6a82-151">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-152">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-152">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f6a82-153">将表示单个 JSON 值的 UTF-8 编码文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="f6a82-153">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="f6a82-154">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-154">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-155">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-155">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-156">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-156">The JSON is invalid.</span></span>

<span data-ttu-id="f6a82-157">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-157">-or-</span></span>

<span data-ttu-id="f6a82-158"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-158"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-159">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-159">-or-</span></span>

<span data-ttu-id="f6a82-160">单个 JSON 值以外的跨度中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-160">There is remaining data in the span beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-161"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-161">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string? json, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = Nothing) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-162">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-162">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="f6a82-163">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="f6a82-163">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-164">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-164">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f6a82-165">将表示单个 JSON 值的文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="f6a82-165">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="f6a82-166">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-166">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-167">使用的不如 <xref:System.String> 使用 utf-8 方法，因为实现本身使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="f6a82-167">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="f6a82-168">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-168">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-169"><paramref name="json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-169"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-170">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-170">The JSON is invalid.</span></span>

<span data-ttu-id="f6a82-171">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-171">-or-</span></span>

<span data-ttu-id="f6a82-172"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-172"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-173">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-173">-or-</span></span>

<span data-ttu-id="f6a82-174">单个 JSON 值以外的字符串中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-174">There is remaining data in the string beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-175"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-175">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = Nothing) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-176">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-176">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="f6a82-177">要从中读取 JSON 的读取器。</span><span class="sxs-lookup"><span data-stu-id="f6a82-177">The reader to read the JSON from.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-178">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-178">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="f6a82-179">将一个 JSON 值（包括对象或数组）从提供的读取器读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="f6a82-179">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="f6a82-180">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-180">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-181">如果的 <xref:System.Text.Json.Utf8JsonReader.TokenType> 属性 `reader` 为 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或，则通过调用来使 <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType> 读取器前进， <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> 以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="f6a82-181">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="f6a82-182">此方法完成后， `reader` 将位于 JSON 值中的最终标记处。</span><span class="sxs-lookup"><span data-stu-id="f6a82-182">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="f6a82-183">如果引发了异常，则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="f6a82-183">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="f6a82-184">此方法会创建读取器所处理的数据的副本，因此，不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="f6a82-184">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="f6a82-185"><xref:System.Text.Json.JsonReaderOptions>用于创建实例的的在 <xref:System.Text.Json.Utf8JsonReader> <xref:System.Text.Json.JsonSerializerOptions> 冲突时优先于。</span><span class="sxs-lookup"><span data-stu-id="f6a82-185">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f6a82-186">因此， <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> 在 <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> 读取时使用、、和。</span><span class="sxs-lookup"><span data-stu-id="f6a82-186">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="f6a82-187">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-187">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-188">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-188">The JSON is invalid.</span></span>

<span data-ttu-id="f6a82-189">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-189">-or-</span></span>

<span data-ttu-id="f6a82-190"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-190"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-191">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-191">-or-</span></span>

<span data-ttu-id="f6a82-192">无法从读取器中读取值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-192">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6a82-193"><paramref name="reader" /> 不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-193"><paramref name="reader" /> uses unsupported options.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-194"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-194">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt;? DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeserializeAsync (utf8Json As Stream, returnType As Type, Optional options As JsonSerializerOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Object)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f6a82-195">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-195">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="f6a82-196">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-196">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-197">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-197">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f6a82-198">可能用于取消读取操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="f6a82-198">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="f6a82-199">将表示单个 JSON 值的 UTF-8 编码文本异步读取到指定类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="f6a82-199">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="f6a82-200">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="f6a82-200">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="f6a82-201">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-201">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-202">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-202">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-203"><paramref name="utf8Json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-203"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-204">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-204">The JSON is invalid.</span></span>

<span data-ttu-id="f6a82-205">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-205">-or-</span></span>

<span data-ttu-id="f6a82-206"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-206"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-207">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-207">-or-</span></span>

<span data-ttu-id="f6a82-208">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-208">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-209"><paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-209">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt;? DeserializeAsync&lt;TValue&gt; (System.IO.Stream? utf8Json, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeserializeAsync(Of TValue) (utf8Json As Stream, Optional options As JsonSerializerOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TValue)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-210">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-210">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="f6a82-211">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-211">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-212">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-212">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f6a82-213">可能用于取消读取操作的标记。</span><span class="sxs-lookup"><span data-stu-id="f6a82-213">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="f6a82-214">将表示单个 JSON 值的 UTF-8 编码文本异步读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="f6a82-214">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="f6a82-215">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="f6a82-215">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="f6a82-216">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="f6a82-216">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-217">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-217">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f6a82-218">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="f6a82-218">The JSON is invalid.</span></span>

<span data-ttu-id="f6a82-219">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-219">-or-</span></span>

<span data-ttu-id="f6a82-220"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-220"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f6a82-221">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f6a82-221">-or-</span></span>

<span data-ttu-id="f6a82-222">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="f6a82-222">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-223"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-223">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-224"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-224"><paramref name="utf8Json" />is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object? value, Type inputType, System.Text.Json.JsonSerializerOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = Nothing) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f6a82-225">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-225">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="f6a82-226">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-226">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-227">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-227">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="f6a82-228">将指定类型的值转换为 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="f6a82-228">Converts the value of a specified type into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="f6a82-229">值的 JSON 字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="f6a82-229">The JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-230">使用的不如 <xref:System.String> 使用 utf-8 编码，因为在内部实现使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="f6a82-230">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="f6a82-231">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="f6a82-231">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="f6a82-232">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-232">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6a82-233"><paramref name="inputType" /> 与 <paramref name="value" /> 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-233"><paramref name="inputType" /> is not compatible with <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-234"><paramref name="inputType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-234"><paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-235"><paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-235">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object? value, Type inputType, System.Text.Json.JsonSerializerOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = Nothing)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="f6a82-236">要写入到的 JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="f6a82-236">The JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f6a82-237">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-237">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="f6a82-238">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-238">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-239">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-239">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="f6a82-240">将指定类型的 JSON 表示形式写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="f6a82-240">Writes the JSON representation of the specified type to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-241"><xref:System.Text.Json.JsonWriterOptions>用于创建实例的的在 <xref:System.Text.Json.Utf8JsonWriter> <xref:System.Text.Json.JsonSerializerOptions> 冲突时优先于。</span><span class="sxs-lookup"><span data-stu-id="f6a82-241">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f6a82-242">因此， <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType> 在 <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType> <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> 编写时使用、、和。</span><span class="sxs-lookup"><span data-stu-id="f6a82-242">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="f6a82-243">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-243">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6a82-244"><paramref name="inputType" /> 与 <paramref name="value" /> 不兼容</span><span class="sxs-lookup"><span data-stu-id="f6a82-244"><paramref name="inputType" /> is not compatible with <paramref name="value" /></span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-245"><paramref name="writer" /> 或 <paramref name="inputType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-245"><paramref name="writer" /> or <paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-246"><paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-246">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = Nothing) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-247">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-247">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="f6a82-248">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-248">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-249">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-249">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="f6a82-250">将泛型类型参数指定的类型的值转换为 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="f6a82-250">Converts the value of a type specified by a generic type parameter into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="f6a82-251">值的 JSON 字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="f6a82-251">A JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-252">使用的不如 <xref:System.String> 使用 utf-8 编码，因为在内部实现使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="f6a82-252">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="f6a82-253">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="f6a82-253">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="f6a82-254">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-254">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-255"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-255">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = Nothing)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-256">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-256">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="f6a82-257">要写入到的 JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="f6a82-257">A JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f6a82-258">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-258">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-259">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-259">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="f6a82-260">将泛型类型参数指定的类型的 JSON 表示形式写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="f6a82-260">Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-261"><xref:System.Text.Json.JsonWriterOptions>用于创建实例的的在 <xref:System.Text.Json.Utf8JsonWriter> <xref:System.Text.Json.JsonSerializerOptions> 冲突时优先于。</span><span class="sxs-lookup"><span data-stu-id="f6a82-261">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f6a82-262">因此， <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType> 在 <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType> <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> 编写时使用、、和。</span><span class="sxs-lookup"><span data-stu-id="f6a82-262">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="f6a82-263">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-263">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-264"><paramref name="writer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-264"><paramref name="writer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-265"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-265">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object? value, Type inputType, System.Text.Json.JsonSerializerOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeAsync (utf8Json As Stream, value As Object, inputType As Type, Optional options As JsonSerializerOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f6a82-266">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="f6a82-266">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f6a82-267">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-267">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="f6a82-268">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-268">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-269">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-269">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f6a82-270">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="f6a82-270">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="f6a82-271">将指定类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入指定流。</span><span class="sxs-lookup"><span data-stu-id="f6a82-271">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="f6a82-272">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="f6a82-272">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-273">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-273">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6a82-274"><paramref name="inputType" /> 与 <paramref name="value" /> 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-274"><paramref name="inputType" /> is not compatible with <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-275"><paramref name="utf8Json" /> 或 <paramref name="inputType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-275"><paramref name="utf8Json" /> or <paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-276"><paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-276">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeAsync(Of TValue) (utf8Json As Stream, value As TValue, Optional options As JsonSerializerOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-277">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-277">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="f6a82-278">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="f6a82-278">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f6a82-279">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-279">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-280">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-280">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f6a82-281">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="f6a82-281">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="f6a82-282">将泛型类型参数指定的类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入流。</span><span class="sxs-lookup"><span data-stu-id="f6a82-282">Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="f6a82-283">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="f6a82-283">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-284">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-284">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-285"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-285"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-286"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-286">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object? value, Type inputType, System.Text.Json.JsonSerializerOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f6a82-287">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-287">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="f6a82-288">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-288">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-289">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-289">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="f6a82-290">将指定类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="f6a82-290">Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="f6a82-291">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</span><span class="sxs-lookup"><span data-stu-id="f6a82-291">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-292">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-292">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6a82-293"><paramref name="inputType" /> 与 <paramref name="value" /> 不兼容。</span><span class="sxs-lookup"><span data-stu-id="f6a82-293"><paramref name="inputType" /> is not compatible with <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6a82-294"><paramref name="inputType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-294"><paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-295"><paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-295">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = default);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f6a82-296">值的类型。</span><span class="sxs-lookup"><span data-stu-id="f6a82-296">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="f6a82-297">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="f6a82-297">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f6a82-298">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="f6a82-298">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="f6a82-299">将泛型类型参数指定的类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="f6a82-299">Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="f6a82-300">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</span><span class="sxs-lookup"><span data-stu-id="f6a82-300">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6a82-301">有关详细信息，请参阅 [如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to)。</span><span class="sxs-lookup"><span data-stu-id="f6a82-301">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f6a82-302"><typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</span><span class="sxs-lookup"><span data-stu-id="f6a82-302">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
