<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b00893863cba8edb48480549b0b46cac92f0df5" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83891516" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="99e06-101">允许用户在使用 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 编写 JSON 时定义自定义行为。</span><span class="sxs-lookup"><span data-stu-id="99e06-101">Allows the user to define custom behavior when writing JSON using the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="99e06-102">默认情况下，将写入 JSON，而不会有任何缩进或额外的空白区域。</span><span class="sxs-lookup"><span data-stu-id="99e06-102">By default, the JSON is written without any indentation or extra white space.</span></span> <span data-ttu-id="99e06-103">此外，如果用户尝试写入结构无效的 JSON，<xref:System.Text.Json.Utf8JsonWriter> 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="99e06-103">Also, <xref:System.Text.Json.Utf8JsonWriter> throws an exception if the user attempts to write structurally invalid JSON.</span></span>

<span data-ttu-id="99e06-104">有关详细信息，请参阅[如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to#use-utf8jsonwriter)。</span><span class="sxs-lookup"><span data-stu-id="99e06-104">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#use-utf8jsonwriter).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonWriterOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99e06-105">获取或设置要在转义字符串时使用的编码器，或为 <see langword="null" />（要使用默认编码器的话）。</span><span class="sxs-lookup"><span data-stu-id="99e06-105">Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</span></span></summary>
        <value><span data-ttu-id="99e06-106">用于重写转义行为的 JavaScript 字符编码器。</span><span class="sxs-lookup"><span data-stu-id="99e06-106">The JavaScript character encoder used to override the escaping behavior.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99e06-107">获取或设置一个值，该值指示 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否应对 JSON 输入进行格式设置，包括缩进嵌套的 JSON 令牌、添加新行以及在属性名称和值之间添加空格。</span><span class="sxs-lookup"><span data-stu-id="99e06-107">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.</span></span></summary>
        <value><span data-ttu-id="99e06-108"><see langword="true" /> 格式化 JSON 输出;要写入的 <see langword="false" /> 不含任何额外的空格。</span><span class="sxs-lookup"><span data-stu-id="99e06-108"><see langword="true" /> to format the JSON output; <see langword="false" /> to write without any extra white space.</span></span> <span data-ttu-id="99e06-109">默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99e06-109">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99e06-110">获取或设置一个值，该值指示 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否应跳过结构验证并允许用户编写无效 JSON。</span><span class="sxs-lookup"><span data-stu-id="99e06-110">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should skip structural validation and allow the user to write invalid JSON.</span></span></summary>
        <value><span data-ttu-id="99e06-111"><see langword="true" /> 跳过结构验证并允许无效的 JSON，则为;<see langword="false" /> 引发 <see cref="T:System.InvalidOperationException" /> 尝试写入无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="99e06-111"><see langword="true" /> to skip structural validation and allow invalid JSON; <see langword="false" /> to throw an <see cref="T:System.InvalidOperationException" /> on any attempt to write invalid JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="99e06-112">如果已知写入的 JSON 是正确的，则跳过验证（通过将此属性设置为 `true`）可以提高性能。</span><span class="sxs-lookup"><span data-stu-id="99e06-112">If the JSON being written is known to be correct, then skipping validation (by setting this property to `true`) could improve performance.</span></span>
<span data-ttu-id="99e06-113">在不使用属性名称的 JSON 对象中写入值时，将引发写入器将引发的 JSON （如果 `SkipValidation` 设置为 `false`）的示例。</span><span class="sxs-lookup"><span data-stu-id="99e06-113">An example of invalid JSON where the writer will throw (when `SkipValidation` is set to `false`) is when you write a value within a JSON object without a property name.</span></span> 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
