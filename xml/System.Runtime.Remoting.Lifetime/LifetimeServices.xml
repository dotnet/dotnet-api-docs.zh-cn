<Type Name="LifetimeServices" FullName="System.Runtime.Remoting.Lifetime.LifetimeServices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7deac05b2ef7b17c5f5683daef47a402cbb28184" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953331" /></Metadata><TypeSignature Language="C#" Value="public sealed class LifetimeServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LifetimeServices extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Lifetime.LifetimeServices" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LifetimeServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifetimeServices sealed" />
  <TypeSignature Language="F#" Value="type LifetimeServices = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LifetimeServices extends System.Object" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7d264-101">控制 .NET 远程处理生存期服务。</span><span class="sxs-lookup"><span data-stu-id="7d264-101">Controls the.NET remoting lifetime services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d264-102">分布式垃圾回收负责控制服务器应用程序的生存期，并在其生存期过期时将其删除。</span><span class="sxs-lookup"><span data-stu-id="7d264-102">Distributed garbage collection is responsible for controlling the lifetimes of server applications, and for deleting them when their lifetimes have expired.</span></span> <span data-ttu-id="7d264-103">传统上，分布式垃圾回收使用引用计数和 ping 控制。</span><span class="sxs-lookup"><span data-stu-id="7d264-103">Traditionally, distributed garbage collection uses reference counts and pinging for control.</span></span> <span data-ttu-id="7d264-104">如果每个对象有少量的客户端，则这种方法很有效，但当每个对象有数千个客户端时，此功能就不能正常工作。</span><span class="sxs-lookup"><span data-stu-id="7d264-104">This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object.</span></span> <span data-ttu-id="7d264-105">生存期服务可以假定传统分布式垃圾回收器的功能，并且在客户端数量增加时可以很好地进行缩放。</span><span class="sxs-lookup"><span data-stu-id="7d264-105">The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.</span></span>  
  
 <span data-ttu-id="7d264-106">生存期服务将租约与每个远程激活的对象相关联。</span><span class="sxs-lookup"><span data-stu-id="7d264-106">The lifetime service associates a lease with each remotely activated object.</span></span> <span data-ttu-id="7d264-107">当租约过期时，将删除该对象。</span><span class="sxs-lookup"><span data-stu-id="7d264-107">When the lease expires, the object is removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d264-108">此类发出链接请求。</span><span class="sxs-lookup"><span data-stu-id="7d264-108">This class makes a link demand.</span></span> <span data-ttu-id="7d264-109">如果直接调用方没有基础结构权限，则会引发 SecurityException。</span><span class="sxs-lookup"><span data-stu-id="7d264-109">A SecurityException is thrown if the immediate caller does not have infrastructure permission.</span></span> <span data-ttu-id="7d264-110">有关详细信息，请参阅[链接要求](/dotnet/framework/misc/link-demands)。</span><span class="sxs-lookup"><span data-stu-id="7d264-110">See [Link Demands](/dotnet/framework/misc/link-demands) for more information.</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/CPP/server.cpp#2)]
 [!code-csharp[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/CS/server.cs#2)]
 [!code-vb[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/VB/server.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LifetimeServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LifetimeServices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Call the static methods directly on this type instead", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Do not create instances of the LifetimeServices class.  Call the static methods directly on this type instead", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d264-111">创建 <see cref="T:System.Runtime.Remoting.Lifetime.LifetimeServices" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="7d264-111">Creates an instance of <see cref="T:System.Runtime.Remoting.Lifetime.LifetimeServices" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaseManagerPollTime">
      <MemberSignature Language="C#" Value="public static TimeSpan LeaseManagerPollTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan LeaseManagerPollTime" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LeaseManagerPollTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan LeaseManagerPollTime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.LeaseManagerPollTime : TimeSpan with get, set" Usage="System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d264-112">获取或设置每次激活租约管理器以清除到期租约之间的时间间隔。</span><span class="sxs-lookup"><span data-stu-id="7d264-112">Gets or sets the time interval between each activation of the lease manager to clean up expired leases.</span></span></summary>
        <value><span data-ttu-id="7d264-113">租约管理器检查到期租约后休眠的默认时间。</span><span class="sxs-lookup"><span data-stu-id="7d264-113">The default amount of time the lease manager sleeps after checking for expired leases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d264-114">当前属性定义租约管理器激活的频率，以清理过期的租约。</span><span class="sxs-lookup"><span data-stu-id="7d264-114">The current property defines the frequency at which the lease manager becomes active to clean up expired leases.</span></span> <span data-ttu-id="7d264-115">例如，如果 <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> 设置为100秒，则每100秒检查一次租约列表中是否有清理和续订。</span><span class="sxs-lookup"><span data-stu-id="7d264-115">For example, if <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds.</span></span>  
  
 <span data-ttu-id="7d264-116"><xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> 属性的默认值为10秒。</span><span class="sxs-lookup"><span data-stu-id="7d264-116">The default value of the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> property is 10 seconds.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7d264-117">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。</span><span class="sxs-lookup"><span data-stu-id="7d264-117">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</span></span> <span data-ttu-id="7d264-118">仅在设置该属性值时才会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="7d264-118">This exception is thrown only when setting the property value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LeaseTime">
      <MemberSignature Language="C#" Value="public static TimeSpan LeaseTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan LeaseTime" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LeaseTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan LeaseTime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.LeaseTime : TimeSpan with get, set" Usage="System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d264-119">获取或设置 <see cref="T:System.AppDomain" /> 的初始租约时间范围。</span><span class="sxs-lookup"><span data-stu-id="7d264-119">Gets or sets the initial lease time span for an <see cref="T:System.AppDomain" />.</span></span></summary>
        <value><span data-ttu-id="7d264-120">可以在 <see cref="T:System.TimeSpan" /> 中拥有租约的对象的初始租约 <see cref="T:System.AppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="7d264-120">The initial lease <see cref="T:System.TimeSpan" /> for objects that can have leases in the <see cref="T:System.AppDomain" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d264-121">默认租约时间跨度为5分钟。</span><span class="sxs-lookup"><span data-stu-id="7d264-121">The default lease time span is 5 minutes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7d264-122">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。</span><span class="sxs-lookup"><span data-stu-id="7d264-122">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</span></span> <span data-ttu-id="7d264-123">仅在设置该属性值时才会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="7d264-123">This exception is thrown only when setting the property value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RenewOnCallTime">
      <MemberSignature Language="C#" Value="public static TimeSpan RenewOnCallTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan RenewOnCallTime" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property RenewOnCallTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan RenewOnCallTime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.RenewOnCallTime : TimeSpan with get, set" Usage="System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d264-124">获取或设置每当调用到达服务器对象时延续租约的时间。</span><span class="sxs-lookup"><span data-stu-id="7d264-124">Gets or sets the amount of time by which the lease is extended every time a call comes in on the server object.</span></span></summary>
        <value><span data-ttu-id="7d264-125">每次调用后延续当前 <see cref="T:System.TimeSpan" /> 中的生存期租约的 <see cref="T:System.AppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="7d264-125">The <see cref="T:System.TimeSpan" /> by which a lifetime lease in the current <see cref="T:System.AppDomain" /> is extended after each call.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d264-126">生存期租约延长的默认续订时间为2分钟。</span><span class="sxs-lookup"><span data-stu-id="7d264-126">The default renewal time by which a lifetime lease is extended is 2 minutes.</span></span>  
  
   
  
## Examples  
 [!code-cpp[ILease_ILease#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ILease_ILease/CPP/ilease_client.cpp#3)]
 [!code-csharp[ILease_ILease#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ILease_ILease/CS/ilease_client.cs#3)]
 [!code-vb[ILease_ILease#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ILease_ILease/VB/ilease_client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7d264-127">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。</span><span class="sxs-lookup"><span data-stu-id="7d264-127">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</span></span> <span data-ttu-id="7d264-128">仅在设置该属性值时才会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="7d264-128">This exception is thrown only when setting the property value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SponsorshipTimeout">
      <MemberSignature Language="C#" Value="public static TimeSpan SponsorshipTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan SponsorshipTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SponsorshipTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan SponsorshipTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.SponsorshipTimeout : TimeSpan with get, set" Usage="System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d264-129">获取或设置租约管理器等待主办方返回租约续订时间的时间。</span><span class="sxs-lookup"><span data-stu-id="7d264-129">Gets or sets the amount of time the lease manager waits for a sponsor to return with a lease renewal time.</span></span></summary>
        <value><span data-ttu-id="7d264-130">初始主办关系超时。</span><span class="sxs-lookup"><span data-stu-id="7d264-130">The initial sponsorship time-out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d264-131">调用主办方的默认时间超时为2分钟。</span><span class="sxs-lookup"><span data-stu-id="7d264-131">The default time until a call to a sponsor is timed out is 2 minutes.</span></span>  
  
   
  
## Examples  
 [!code-cpp[ILease_ILease#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ILease_ILease/CPP/ilease_client.cpp#3)]
 [!code-csharp[ILease_ILease#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ILease_ILease/CS/ilease_client.cs#3)]
 [!code-vb[ILease_ILease#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ILease_ILease/VB/ilease_client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7d264-132">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。</span><span class="sxs-lookup"><span data-stu-id="7d264-132">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</span></span> <span data-ttu-id="7d264-133">仅在设置该属性值时才会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="7d264-133">This exception is thrown only when setting the property value.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
