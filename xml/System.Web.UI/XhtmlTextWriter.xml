<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d3f4ba5d57c5d0535df1aff4fc1819d71d8a5f3" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89800831" /></Metadata><TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将特定于可扩展超文本标记语言 (XHTML) 的字符（包括从 XHTML 派生的 XHTML 模块的所有变体）写入移动设备的 ASP.NET 服务器控件的输出流。 重写 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 类以为 ASP.NET 页和服务器控件提供自定义 XHTML 呈现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML 是一种基于 XML 的标记语言，基于 HTML 4.1，使你能够创建适用于多个设备类型的网站。 它将 HTML 提供的易用性与 XML 提供的严格元素准则结合起来，以生成带有各种格式和样式选项的标记语言，同时降低标记标记的歧义。 <xref:System.Web.UI.XhtmlTextWriter>类提供 ASP.NET 服务器控件在向客户端呈现 XHTML 内容时使用的格式化功能。 可以使用 <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> 方法指定文本编写器呈现的 XHTML 类型。 枚举中定义了支持的文档类型 <xref:System.Web.UI.XhtmlMobileDocType> 。  
  
 <xref:System.Web.UI.XhtmlTextWriter>类呈现元素的两个属性集。 一个集是公共特性的集合，在属性中引用 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 。 第二个集是元素特定特性的集合，如属性中所引用 <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> 。 有关呈现的元素和样式的详细信息，请参阅 [万维网联合会 (W3C) ](https://go.microsoft.com/fwlink/?linkid=37125)网站上的 XHTML 模块化规范。  
  
 您可以使用类的成员 <xref:System.Web.UI.XhtmlTextWriter> 和任何派生类来创建自定义的文本编写器，以在自定义 XHTML 页适配器或类适配器中使用。 你还可以创建替代类的标准行为的派生类 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 默认情况下，当你使用的浏览器支持 HTML 4.0 时，ASP.NET 页和控件将呈现与 XHTML 1.1 标准兼容的标记。 有关详细信息，请参阅 [Visual Studio 中的 XHTML 标准和 ASP.NET](https://docs.microsoft.com/previous-versions/aspnet/exc57y7e(v=vs.100))。  
  
 <xref:System.Web.UI.HtmlTextWriter>除非专门将 ASP.NET 配置为不呈现 xhtml 标记，否则输出 xhtml。 有关详细信息，请参阅 [如何：在 ASP.NET 网站中配置 XHTML 呈现](https://docs.microsoft.com/previous-versions/aspnet/ms178159(v=vs.100))。  
  
   
  
## Examples  
 本节中的代码示例包含四个部分。 第一个示例演示如何创建派生类。 第二个代码示例演示如何创建自定义控件。 第三个代码示例演示如何使用自定义控件。 第四个代码示例提供运行自定义控件所需的代码。  
  
 下面的代码示例演示如何创建派生自类的自定义类 <xref:System.Web.UI.XhtmlTextWriter> 。 它有两个构造函数，这是直接或间接从类继承的所有类的标准 <xref:System.Web.UI.HtmlTextWriter> 。 第一个构造函数采用 <xref:System.IO.TextWriter> 对象作为参数，并调用第二个构造函数，同时传递以下两个参数值：  
  
-   <xref:System.IO.TextWriter> 实例。  
  
-   属性的值 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> ，定义 XHTML 文本编写器使用的默认行缩进。  
  
 此代码示例还演示了如何重写 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 和 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 方法，分别用于筛选文本大小和颜色样式。 此外，它会重写 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> 和 <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> 方法，以便在呈现控件之前和之后编写文本字符串。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 下面的代码示例演示如何创建一个 <xref:System.Web.UI.WebControls.Label> 名为的自定义控件 `TestLabel` 和一个名为的自定义适配器 `XhtmlTestLabelAdapter` ，该适配器将控件内容呈现为 XHTML。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 下面的代码示例演示如何 `TestLabel` 在 ASP.NET 网页上使用自定义控件。  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 若要在前面的代码示例中使用自定义控件，请将以下 `<controlAdapters>` 元素添加到以下两个文件之一。 可以将其添加到特定浏览器的子目录中的相应计算机范围内的文件中，作为 .NET Framework 配置目录的子文件夹。 或者，你可以将其添加到 Web 应用程序根目录下的 App_Browsers 目录中的自定义浏览器文件。  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/exc57y7e(v=vs.100)">ASP.NET 和 XHTML 遵从性</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">呈现 XHTML 内容的 <see cref="T:System.IO.TextWriter" /> 实例。</param>
        <summary>初始化 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 类的新实例，该类使用在 <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> 字段中指定的行缩进。 如果不希望更改默认行缩进，请使用 <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> 构造函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A>采用对象作为参数的构造函数将 <xref:System.IO.TextWriter> 调用第二个构造函数，同时传递两个参数值：  
  
-   <xref:System.IO.TextWriter> 实例。  
  
-   在字段中指定的字符串值 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> ，用于定义 XHTML 文本编写器使用的制表符间距。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.HtmlTextWriter> 为从类派生的自定义类，为直接或间接从类派生的所有类创建两个构造函数 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">呈现 XHTML 内容的 <see cref="T:System.IO.TextWriter" /> 实例。</param>
        <param name="tabString">用于呈现行缩进的字符串。</param>
        <summary>使用指定的行缩进初始化 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.HtmlTextWriter> 为从类派生的自定义类，为直接或间接从类派生的所有类创建两个构造函数 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要添加特性的 XHTML 元素。</param>
        <param name="attributeName">要添加的特性。</param>
        <summary>将特性添加到 XHTML 元素中。 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 对象的特定于元素的特性的集合由 <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> 属性引用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> 方法可将特性添加到 XHTML 元素。 然后，可由对象识别并呈现添加的属性 <xref:System.Web.UI.XhtmlTextWriter> 。 若要防止编写器呈现 XHTML 元素的公共属性，请使用 <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> 方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Collections.Hashtable" /> 对象，该对象包含 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 对象的加价标记的公共特性。</summary>
        <value>一个包含公共特性的 <see cref="T:System.Collections.Hashtable" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A>集合包含在 XHTML 元素中允许的属性，这些属性不会在属性中取消 <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> 。 有关常见特性的详细信息，请参阅 [ (W3C) 网站万维网联合会](https://go.microsoft.com/fwlink/?linkid=37125)。  
  
 创建类的新实例时 <xref:System.Web.UI.XhtmlTextWriter> ，将初始化的公共特性如下：  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个包含特定于元素的特性的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>一个 <see cref="T:System.Collections.Hashtable" /> 对象，其中包含特定于元素的特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> 方法可将可识别的特性添加到 XHTML 元素。 若要删除 XHTML 元素上的公共属性，请使用 <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> 方法。  
  
 创建类的新实例时 <xref:System.Web.UI.XhtmlTextWriter> ，将 <xref:System.Collections.Hashtable> 使用下表中显示的属性填充特定于元素的特性的对象。  
  
|元素|属性|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 有关呈现的元素和样式的详细信息，请参阅 [万维网联合会 (W3C) ](https://go.microsoft.com/fwlink/?linkid=37125)网站上的 XHTML 模块化规范。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">要检查的特性名称。</param>
        <summary>检查一个 XHTML 特性以确保它可以在 <see langword="&lt;form&gt;" /> 元素的开始标记中呈现。</summary>
        <returns>如果特性可以应用于 <see langword="&lt;form&gt;" /> 元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于根据请求的设备的 XHTML 文档类型有条件地呈现特性。  
  
   
  
## Examples  
 下面的代码示例摘自一个更大的示例，该示例创建一个自定义 <xref:System.Web.UI.WebControls.Label> 控件和一个将控件内容呈现为 XHTML 的适配器。  
  
 此代码示例演示如何创建一个名为的布尔变量 `attTest` ，并将其设置为通过调用 <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> 具有参数值 "style" 的方法而产生的返回值。 如果该 <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> 方法返回 `true` ，则使用和方法呈现与该控件关联的样式 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> 。 如果 `attTest` 值为 `false` ，则不呈现样式。 相反，此页显示控件的文本、 `<br/>` 由方法呈现的元素 <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> ，以及一个文本字符串，通知用户控件的 XHTML 内容有条件地呈现。  
  
 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">要呈现的 XHTML 特性。</param>
        <param name="value">分配给 XHTML 特性的值。</param>
        <param name="key">与 XHTML 特性关联的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 枚举值。</param>
        <summary>确定是否可以将指定的 XHTML 特性及其值呈现给当前的加价元素。</summary>
        <returns>如果该特性呈现到页，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何重写 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 方法，以检查是否为 `size` 此文本编写器呈现的任何元素呈现特性。 如果 `size` 呈现属性，则代码将检查其值是否为8磅。 如果是这样，则该 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 方法返回 `true` ，允许属性及其值呈现。 如果值不是8点，则方法将 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 返回 `false` ，并且不呈现特性及其值。 如果方法的键参数 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 与特性不匹配，则将 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 调用方法的基本功能 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> ，如类中所定义 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">要呈现的 XHTML 样式特性。</param>
        <param name="value">分配给 XHTML 样式特性的值。</param>
        <param name="key">与 XHTML 样式特性关联的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 枚举值。</param>
        <summary>确定是否可以将指定的 XHTML 样式特性及其值呈现给当前的标记元素。</summary>
        <returns>如果呈现样式特性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何重写 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 方法，以检查是否 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 正在为此文本编写器呈现的任何元素呈现特性。 如果 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 呈现属性，则代码将检查其值是否为紫色。 如果值为紫色，则 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 方法将返回 `false` ，并且不呈现特性及其值。 如果 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 特性设置为任何其他值，则方法将 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 返回 `true` ，并且将呈现特性及其值。 如果方法的键参数 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 与特性不匹配，则将 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 调用方法的基本功能 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> ，如类中所定义 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.XhtmlTextWriter> 。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要从中移除特性的 XHTML 元素。</param>
        <param name="attributeName">要从指定的 XHTML 元素中移除的特性。</param>
        <summary>从元素的 <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> 集合移除一个特性。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType"><see cref="T:System.Web.UI.XhtmlMobileDocType" /> 枚举值之一。</param>
        <summary>指定文本编写器要呈现到页或控件的 XHTML 文档类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> 自定义页适配器中的方法可以定义要呈现到请求设备的 XHTML 类型。 枚举中定义了支持的文档类型 <xref:System.Web.UI.XhtmlMobileDocType> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由取消了 <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> 特性的元素组成的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>元素的 <see cref="T:System.Collections.Hashtable" />，其中包含未呈现的 <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> 的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取消的特性集合包含未呈现其特性的 XHTML 元素列表 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 。  
  
 创建类的新实例时 <xref:System.Web.UI.XhtmlTextWriter> ， <xref:System.Collections.Hashtable> 禁止显示其属性的元素的对象 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 包括：  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see langword="&lt;br/&gt;" /> 元素写入 XHTML 输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何重写继承的 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> 方法，以便使用 <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> 方法和具有方法的元素编写文本字符串 `<br/>` <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> 。  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
