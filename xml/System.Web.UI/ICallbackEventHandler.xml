<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47d99e02fed19cb8c444b298b6279eaab32b9d30" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83908269" /></Metadata><TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>用于指示控件可以作为服务器上的回调事件的目标。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为需要接收回叫事件的任何自定义控件实现 <xref:System.Web.UI.ICallbackEventHandler> 接口。 有关详细信息，请参阅[实现无回发的客户端回调](https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100))。  
  
 实现 <xref:System.Web.UI.ICallbackEventHandler> 接口的控件的示例包括 <xref:System.Web.UI.WebControls.GridView>、<xref:System.Web.UI.WebControls.DetailsView>和 <xref:System.Web.UI.WebControls.TreeView> 控件。 当回调事件面向实现 <xref:System.Web.UI.ICallbackEventHandler> 接口的控件时，将调用 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 方法来处理事件，并将事件自变量作为参数传递，并且 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> 方法返回回调的结果。  
  
 在回调过程中从数据源控件检索数据的控件可以同步或异步执行此操作。 ASP.NET 控件，如 <xref:System.Web.UI.WebControls.GridView>、<xref:System.Web.UI.WebControls.DetailsView>和 <xref:System.Web.UI.WebControls.TreeView> 都同步实现。 同步回调不会阻止用户在浏览器中工作。 在同步模式下，一次只能执行一个回调，并优先处理最后一个回调。 实现 Web 控件以支持异步行为时，可以同时引发多个回调。 有关异步编程的详细信息，请参阅[基于事件的异步模式（EAP）](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap)。  
  
 您可以指定是否验证源自实现 <xref:System.Web.UI.ICallbackEventHandler> 接口的控件所呈现的用户界面的回调事件。 事件验证是一种很好的安全做法。 但出于性能原因，你可以禁用它。 若要控制是否对回调事件执行事件验证，请设置[@ Page](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ydy4x04a(v=vs.100))指令的 `enableEventValidation` 属性或 web.config 文件的[pages 元素（ASP.NET 设置架构）](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/950xf363(v=vs.100))的 `enableEventValidation` 属性。 如果在代码中设置 <xref:System.Web.UI.Page.EnableEventValidation%2A> 属性，请在 "页面处理" 的 "`Page_Init`" 阶段设置该属性。 若要详细了解事件验证的安全优势及其性能成本，请参阅[ASP.NET 性能概述](https://docs.microsoft.com/previous-versions/aspnet/cc668225(v=vs.100))。
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回以控件为目标的回调事件的结果。</summary>
        <returns>回调的结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 中引发的异常不会阻止调用 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> 并返回结果。 若要防止 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> 返回结果，请在 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 中引发异常时设置标志，并从 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>返回空字符串。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">一个字符串，表示要传递到事件处理程序的事件参数。</param>
        <summary>处理以控件为目标的回调事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 `null` 用作事件参数参数时，字符串将被序列化为 "null" 并发送回服务器。 由于没有办法区分 `null` 和 "null"，因此应避免将 `null` 参数参数用于回调。  
  
 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 中引发的异常不会阻止调用 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> 并返回结果。 若要防止 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> 返回结果，请在 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 中引发异常时设置标志，并从 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>返回空字符串。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>
