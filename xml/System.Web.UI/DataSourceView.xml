<Type Name="DataSourceView" FullName="System.Web.UI.DataSourceView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="179627a0522ad1c3c45720b26fa8116260ab7c43" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86656823" /></Metadata><TypeSignature Language="C#" Value="public abstract class DataSourceView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataSourceView extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataSourceView" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DataSourceView" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSourceView abstract" />
  <TypeSignature Language="F#" Value="type DataSourceView = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>用作所有数据源视图类的基类，这些视图类定义数据源控件的功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 支持一种数据绑定体系结构，使 Web 服务器控件能够以一致的方式绑定到数据。 绑定到数据的 Web 服务器控件被称为数据绑定控件，而用于简化绑定的类称为数据源控件。 数据源控件可以表示任意数据源：关系数据库、文件、流、业务对象等。 数据源控件以一致的方式向数据绑定控件提供数据，而与基础数据的源或格式无关。  
  
 使用随 ASP.NET 提供的数据源控件（包括 <xref:System.Web.UI.WebControls.SqlDataSource> 、 <xref:System.Web.UI.WebControls.AccessDataSource> 和 <xref:System.Web.UI.WebControls.XmlDataSource> ）来执行大多数 Web 开发任务。 <xref:System.Web.UI.DataSourceControl> <xref:System.Web.UI.DataSourceView> 如果要实现自己的自定义数据源控件，请使用基和类。  
  
 您可以将数据源控件看作是 <xref:System.Web.UI.IDataSource> 对象及其关联的数据列表（称为数据源视图）的组合。 每个数据列表由一个对象表示 <xref:System.Web.UI.DataSourceView> 。 <xref:System.Web.UI.DataSourceView>类是与数据源控件关联的所有数据源视图或数据列表的基类。 数据源视图定义数据源控件的功能。 由于基础数据存储包含一个或多个数据列表，因此数据源控件始终与一个或多个命名数据源视图相关联。 数据源控件使用 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> 方法来枚举当前与数据源控件关联的数据源视图，并使用 <xref:System.Web.UI.DataSourceControl.GetView%2A> 方法来按名称检索特定的数据源视图实例。  
  
 所有 <xref:System.Web.UI.DataSourceView> 对象均支持使用方法从基础数据源中检索数据 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 。 所有视图都可以选择支持一组基本操作，其中包括 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 、 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 和等操作 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 。 数据绑定控件可以通过使用和方法检索关联的数据源视图 <xref:System.Web.UI.DataSourceControl.GetView%2A> <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> ，以及在设计时或运行时查询视图来发现数据源控件的功能。  
  
   
  
## Examples  
 下面的代码示例演示如何扩展 <xref:System.Web.UI.DataSourceView> 类以为数据源控件创建强类型视图类。 `CsVDataSourceView`类定义 `CsvDataSource` 数据源控件的功能，并为数据绑定控件提供一个实现，以便使用以逗号分隔的值存储在逗号分隔值 ( .csv) 文件中的数据。 有关 `CsvDataSource` 数据源控件的详细信息，请参阅 <xref:System.Web.UI.DataSourceControl> 类。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#5)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.HierarchicalDataSourceView" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSourceView (System.Web.UI.IDataSource owner, string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.IDataSource owner, string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.#ctor(System.Web.UI.IDataSource,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (owner As IDataSource, viewName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSourceView(System::Web::UI::IDataSource ^ owner, System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.DataSourceView : System.Web.UI.IDataSource * string -&gt; System.Web.UI.DataSourceView" Usage="new System.Web.UI.DataSourceView (owner, viewName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.IDataSource" />
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="owner">与 <see cref="T:System.Web.UI.DataSourceView" /> 关联的数据源控件。</param>
        <param name="viewName"><see cref="T:System.Web.UI.DataSourceView" /> 对象的名称。</param>
        <summary>初始化 <see cref="T:System.Web.UI.DataSourceView" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="owner" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="viewName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanDelete">
      <MemberSignature Language="C#" Value="public virtual bool CanDelete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.CanDelete" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanDelete { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanDelete : bool" Usage="System.Web.UI.DataSourceView.CanDelete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前 <see cref="T:System.Web.UI.DataSourceControl" /> 对象关联的 <see cref="T:System.Web.UI.DataSourceView" /> 对象是否支持 <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" /> 操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。 基类实现返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.CanDelete%2A>属性不仅反映数据源控件的功能，而且还反映它当前是否适用于执行操作。 例如，即使数据源视图同时支持该 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 操作，如果未设置所需的属性或其他某些数据，属性也将 <xref:System.Web.UI.DataSourceView.CanDelete%2A> 返回 `false` ，因为删除操作会失败。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.DataSourceView.CanDelete%2A> <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 在扩展类的类中重写属性和方法 <xref:System.Web.UI.DataSourceView> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#8)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public virtual bool CanExecute (string commandName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecute(string commandName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.CanExecute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanExecute (commandName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanExecute(System::String ^ commandName);" />
      <MemberSignature Language="F#" Value="abstract member CanExecute : string -&gt; bool&#xA;override this.CanExecute : string -&gt; bool" Usage="dataSourceView.CanExecute commandName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="commandName">命令的名称。</param>
        <summary>确定是否能执行指定命令。</summary>
        <returns>如果能够执行命令，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanInsert">
      <MemberSignature Language="C#" Value="public virtual bool CanInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.CanInsert" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanInsert { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanInsert : bool" Usage="System.Web.UI.DataSourceView.CanInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前 <see cref="T:System.Web.UI.DataSourceControl" /> 对象关联的 <see cref="T:System.Web.UI.DataSourceView" /> 对象是否支持 <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" /> 操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。 基类实现返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.CanInsert%2A>属性不仅反映数据源控件的功能，而且还反映它当前是否适用于执行操作。 例如，即使数据源控件支持该 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 操作，如果未设置所需的 insert 命令或一些其他数据，属性也将 <xref:System.Web.UI.DataSourceView.CanInsert%2A> 返回 `false` ，因为插入操作将失败。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.DataSourceView.CanInsert%2A> <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 在扩展类的类中重写属性和方法 <xref:System.Web.UI.DataSourceView> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#9)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanPage">
      <MemberSignature Language="C#" Value="public virtual bool CanPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.CanPage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanPage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanPage : bool" Usage="System.Web.UI.DataSourceView.CanPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前 <see cref="T:System.Web.UI.DataSourceControl" /> 对象关联的 <see cref="T:System.Web.UI.DataSourceView" /> 对象是否支持对通过 <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 方法检索到的数据进行分页。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。 基类实现返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件可以通过将 <xref:System.Web.UI.DataSourceCapabilities.Page> 字段添加到 <xref:System.Web.UI.DataSourceSelectArguments> 传递给方法的对象来请求分页 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 。 如果数据绑定控件请求分页，但 <xref:System.Web.UI.DataSourceView.CanPage%2A> 属性返回 `false` ，则数据源视图会引发异常。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.StartRowIndex" />
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.MaximumRows" />
        <altmember cref="T:System.Web.UI.DataSourceCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="CanRetrieveTotalRowCount">
      <MemberSignature Language="C#" Value="public virtual bool CanRetrieveTotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRetrieveTotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.CanRetrieveTotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanRetrieveTotalRowCount As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRetrieveTotalRowCount { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRetrieveTotalRowCount : bool" Usage="System.Web.UI.DataSourceView.CanRetrieveTotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前 <see cref="T:System.Web.UI.DataSourceControl" /> 对象关联的 <see cref="T:System.Web.UI.DataSourceView" /> 对象是否支持检索数据的总行数（而不是数据）。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。 基类实现返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件可以通过将 <xref:System.Web.UI.DataSourceCapabilities.RetrieveTotalRowCount?displayProperty=nameWithType> 字段添加到 <xref:System.Web.UI.DataSourceSelectArguments?displayProperty=nameWithType> 传递给方法的对象来请求总行数 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 。 如果数据绑定控件请求总计行计数，但 <xref:System.Web.UI.DataSourceView.CanRetrieveTotalRowCount%2A> 属性返回 `false` ，则数据源视图会引发异常。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.TotalRowCount" />
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" />
        <altmember cref="T:System.Web.UI.DataSourceCapabilities" />
        <altmember cref="F:System.Web.UI.DataSourceOperation.SelectCount" />
      </Docs>
    </Member>
    <Member MemberName="CanSort">
      <MemberSignature Language="C#" Value="public virtual bool CanSort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.CanSort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSort { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSort : bool" Usage="System.Web.UI.DataSourceView.CanSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前 <see cref="T:System.Web.UI.DataSourceControl" /> 对象关联的 <see cref="T:System.Web.UI.DataSourceView" /> 对象是否支持基础数据源的排序视图。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认实现返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件可以通过将 <xref:System.Web.UI.DataSourceCapabilities.Sort> 字段添加到 <xref:System.Web.UI.DataSourceSelectArguments> 传递给方法的对象来请求排序 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 。 如果数据绑定控件请求排序，但 <xref:System.Web.UI.DataSourceView.CanSort%2A> 属性返回 `false` ，则数据源视图会引发异常。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.DataSourceView.CanSort%2A> 在扩展类的类中重写属性 <xref:System.Web.UI.DataSourceView> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#7)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.SortExpression" />
        <altmember cref="T:System.Web.UI.DataSourceCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="CanUpdate">
      <MemberSignature Language="C#" Value="public virtual bool CanUpdate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.CanUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanUpdate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanUpdate : bool" Usage="System.Web.UI.DataSourceView.CanUpdate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前 <see cref="T:System.Web.UI.DataSourceControl" /> 对象关联的 <see cref="T:System.Web.UI.DataSourceView" /> 对象是否支持 <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" /> 操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认实现返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.CanUpdate%2A>属性不仅反映数据源控件的功能，而且还反映它当前是否适用于执行操作。 例如，即使数据绑定控件支持该 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 操作，如果未设置所需的 update 命令或一些其他数据，属性也将 <xref:System.Web.UI.DataSourceView.CanUpdate%2A> 返回 `false` ，因为更新操作会失败。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.DataSourceView.CanUpdate%2A> <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 在扩展类的类中重写属性和方法 <xref:System.Web.UI.DataSourceView> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#10)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceViewChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceViewChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceViewChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.DataSourceView.DataSourceViewChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataSourceViewChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DataSourceViewChanged;" />
      <MemberSignature Language="F#" Value="member this.DataSourceViewChanged : EventHandler " Usage="member this.DataSourceViewChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在数据源视图更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对数据源视图所做的更改可能是由于数据源视图所执行的数据操作更改了其属性值或数据更改引起的。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual void Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues, System.Web.UI.DataSourceViewOperationCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues, class System.Web.UI.DataSourceViewOperationCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Delete (keys As IDictionary, oldValues As IDictionary, callback As DataSourceViewOperationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues, System::Web::UI::DataSourceViewOperationCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Delete : System.Collections.IDictionary * System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit&#xA;override this.Delete : System.Collections.IDictionary * System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit" Usage="dataSourceView.Delete (keys, oldValues, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
        <Parameter Name="callback" Type="System.Web.UI.DataSourceViewOperationCallback" />
      </Parameters>
      <Docs>
        <param name="keys">由 <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" /> 操作删除的对象或行键的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="oldValues">表示数据元素及其原始值的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="callback">用于在异步操作完成时通知数据绑定控件的 <see cref="T:System.Web.UI.DataSourceViewOperationCallback" /> 委托。</param>
        <summary>对 <see cref="T:System.Web.UI.DataSourceView" /> 对象所表示的数据列表执行异步删除操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.Delete%2A>方法是所有数据源视图对象的异步数据删除接口。 <xref:System.Web.UI.DataSourceView.Delete%2A>方法 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 使用提供的任何 `keys` 和 `oldValues` 参数值调用方法。 `callback`参数是数据绑定控件传递到数据源视图的委托，用于在操作完成时通知数据绑定控件 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 。 方法使用委托的参数 <xref:System.Web.UI.DataSourceViewOperationCallback> 来返回受影响的记录数，以及 <xref:System.Exception> 由方法引发的任何异常 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">提供的 <see cref="T:System.Web.UI.DataSourceViewOperationCallback" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Web.UI.DataSourceViewOperationCallback" />
        <altmember cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Events">
      <MemberSignature Language="C#" Value="protected System.ComponentModel.EventHandlerList Events { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.EventHandlerList Events" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.Events" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Events As EventHandlerList" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::ComponentModel::EventHandlerList ^ Events { System::ComponentModel::EventHandlerList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Events : System.ComponentModel.EventHandlerList" Usage="System.Web.UI.DataSourceView.Events" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.EventHandlerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据源视图的事件处理程序委托的列表。</summary>
        <value>事件处理程序委托的列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的类型为 <xref:System.ComponentModel.EventHandlerList> ，它使用线性搜索算法查找委托列表中的项。 线性搜索算法在处理大量条目时效率低下。 因此，当您有一个较大的列表时，查找具有此属性的条目的速度会很慢。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteCommand">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>执行指定的命令。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteCommand (string commandName, System.Collections.IDictionary keys, System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteCommand(string commandName, class System.Collections.IDictionary keys, class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteCommand (commandName As String, keys As IDictionary, values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteCommand(System::String ^ commandName, System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteCommand : string * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int&#xA;override this.ExecuteCommand : string * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="dataSourceView.ExecuteCommand (commandName, keys, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="keys" Type="System.Collections.IDictionary" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="values" Type="System.Collections.IDictionary" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="commandName">命令的名称。</param>
        <param name="keys">要对其执行操作的对象键或行键的字典。</param>
        <param name="values">表示数据元素及其值的名称/值对的字典。</param>
        <summary>执行指定的命令。</summary>
        <returns>受操作影响的项数。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="public virtual void ExecuteCommand (string commandName, System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Web.UI.DataSourceViewOperationCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExecuteCommand(string commandName, class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Web.UI.DataSourceViewOperationCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExecuteCommand (commandName As String, keys As IDictionary, values As IDictionary, callback As DataSourceViewOperationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExecuteCommand(System::String ^ commandName, System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Web::UI::DataSourceViewOperationCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteCommand : string * System.Collections.IDictionary * System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit&#xA;override this.ExecuteCommand : string * System.Collections.IDictionary * System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit" Usage="dataSourceView.ExecuteCommand (commandName, keys, values, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="keys" Type="System.Collections.IDictionary" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="values" Type="System.Collections.IDictionary" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="callback" Type="System.Web.UI.DataSourceViewOperationCallback" Index="3" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="commandName">命令的名称。</param>
        <param name="keys">要对其执行操作的对象键或行键的字典。</param>
        <param name="values">表示数据元素及其值的名称/值对的字典。</param>
        <param name="callback"><see cref="T:System.Web.UI.DataSourceViewOperationCallback" /> 对象。</param>
        <summary>执行指定的命令。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不返回值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDelete">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteDelete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteDelete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteDelete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteDelete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int&#xA;override this.ExecuteDelete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="dataSourceView.ExecuteDelete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">由 <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" /> 操作删除的对象或行键的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="oldValues">表示数据元素及其原始值的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>对 <see cref="T:System.Web.UI.DataSourceView" /> 对象所表示的数据列表执行删除操作。</summary>
        <returns>已从基础数据存储中删除的项数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件可以 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 通过 <xref:System.Web.UI.DataSourceView> 使用方法检索对象 <xref:System.Web.UI.DataSourceControl.GetView%2A?displayProperty=nameWithType> 并检查属性来确定数据源控件是否支持该操作 <xref:System.Web.UI.DataSourceView.CanDelete%2A> 。  
  
 `keys`参数表示要删除的数据的对象或行键。 对于表示关系数据的数据源（例如 <xref:System.Web.UI.WebControls.SqlDataSource> 控件）， `keys` 参数是数据库主键的集合。 在其他情况下， `keys` 参数是名称/值对的集合，用于筛选数据列表。 与名称/值对匹配的任何数据都将被删除。  
  
> [!NOTE]
>  <xref:System.Web.UI.DataSourceView>类的默认实现是引发 <xref:System.NotSupportedException> 异常。 如果扩展 <xref:System.Web.UI.DataSourceView> 类，请在 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 类支持从基础数据存储中删除的情况下重写方法。  
  
   
  
## Examples  
 下面的代码示例演示如何扩展类的类 <xref:System.Web.UI.DataSourceView> 可以重写 <xref:System.Web.UI.DataSourceView.CanDelete%2A> 属性和 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 方法。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#8)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" /> 操作不受 <see cref="T:System.Web.UI.DataSourceView" /> 支持。</exception>
        <altmember cref="P:System.Web.UI.DataSourceView.CanDelete" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteInsert">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteInsert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteInsert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteInsert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteInsert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteInsert : System.Collections.IDictionary -&gt; int&#xA;override this.ExecuteInsert : System.Collections.IDictionary -&gt; int" Usage="dataSourceView.ExecuteInsert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">在插入操作期间使用的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>对 <see cref="T:System.Web.UI.DataSourceView" /> 对象所表示的数据列表执行插入操作。</summary>
        <returns>已插入到基础数据存储中的项数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件可以 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 通过 <xref:System.Web.UI.DataSourceView> 使用方法检索对象 <xref:System.Web.UI.DataSourceControl.GetView%2A> 并检查属性来确定数据源控件是否支持该操作 <xref:System.Web.UI.DataSourceView.CanInsert%2A> 。  
  
 `values`参数是一组名称/值对，这些名称/值对表示要插入的数据列、字段和相应的值。  
  
> [!NOTE]
>  <xref:System.Web.UI.DataSourceView>类的默认实现是引发 <xref:System.NotSupportedException> 异常。 如果扩展 <xref:System.Web.UI.DataSourceView> 类，请重写 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 方法（如果类支持向基础数据存储插入）。  
  
   
  
## Examples  
 下面的代码示例演示如何扩展类的类 <xref:System.Web.UI.DataSourceView> 可以重写 <xref:System.Web.UI.DataSourceView.CanInsert%2A> 属性和 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 方法。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#9)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" /> 操作不受 <see cref="T:System.Web.UI.DataSourceView" /> 支持。</exception>
        <altmember cref="P:System.Web.UI.DataSourceView.CanInsert" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteSelect">
      <MemberSignature Language="C#" Value="protected internal abstract System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Collections.IEnumerable ExecuteSelect(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function ExecuteSelect (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Collections::IEnumerable ^ ExecuteSelect(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSelect : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="dataSourceView.ExecuteSelect arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">用于请求对数据执行基本数据检索以外的操作的 <see cref="T:System.Web.UI.DataSourceSelectArguments" />。</param>
        <summary>从基础数据存储获取数据列表。</summary>
        <returns>来自基础数据存储的数据的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A>调用方法以从基础数据存储区中检索数据，并将其作为 <xref:System.Collections.IEnumerable> 对象返回。 所有数据源控件都支持从其基础数据存储中检索数据，即使不支持插入和排序等其他操作。 由于数据绑定控件可以作为事件或方法调用的结果随时请求数据列表，因此必须按 <xref:System.Web.UI.IDataSource.DataSourceChanged> <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 需执行数据检索。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 在扩展类的类中重写方法 <xref:System.Web.UI.DataSourceView> 。 `CsvDataSourceView`会打开一个逗号分隔值 ( .csv) 文件，逐行分析它，并创建一个 <xref:System.Data.DataTable> 对象和一个 <xref:System.Data.DataView> 对象来保存内存中的数据。 最后，如果对象提供了一个排序表达式 <xref:System.Web.UI.DataSourceSelectArguments> ，并将该 <xref:System.Data.DataView> 对象作为实例返回，则该表达式将被应用 <xref:System.Collections.IEnumerable> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#6)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceView.CanSort" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteUpdate">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteUpdate(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteUpdate (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteUpdate(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteUpdate : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int&#xA;override this.ExecuteUpdate : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="dataSourceView.ExecuteUpdate (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">更新操作要更新的对象或行键的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="values">表示数据元素及其新值的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="oldValues">表示数据元素及其原始值的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>对 <see cref="T:System.Web.UI.DataSourceView" /> 对象所表示的数据列表执行更新操作。</summary>
        <returns>已在基础数据存储中更新的项数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件可以 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 通过使用 <xref:System.Web.UI.DataSourceControl.GetView%2A?displayProperty=nameWithType> 方法检索 <xref:System.Web.UI.DataSourceView> 对象并检查属性的值，来确定数据源控件是否支持该操作 <xref:System.Web.UI.DataSourceView.CanUpdate%2A> 。  
  
 `keys`参数表示要更新的数据的对象或行键。 对于表示关系数据的数据源（例如 <xref:System.Web.UI.WebControls.SqlDataSource> 控件）， `keys` 参数是数据库主键的集合。 在其他情况下， `keys` 参数是名称/值对的集合，用于筛选数据列表。 所有与名称/值对匹配的数据将使用参数中的值进行更新 `values` ，该参数是表示现有字段或列的新值的一组名称/值对。  
  
> [!NOTE]
>  <xref:System.Web.UI.DataSourceView>类的默认实现是引发 <xref:System.NotSupportedException> 异常。 如果扩展 <xref:System.Web.UI.DataSourceView> 类， <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 如果类支持更新基础数据存储中的数据，则重写方法。  
  
   
  
## Examples  
 下面的代码示例演示如何扩展类的类 <xref:System.Web.UI.DataSourceView> 可以重写 <xref:System.Web.UI.DataSourceView.CanUpdate%2A> 属性和 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 方法。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.DataSourceView> 。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#10)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" /> 操作不受 <see cref="T:System.Web.UI.DataSourceView" /> 支持。</exception>
        <altmember cref="P:System.Web.UI.DataSourceView.CanUpdate" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (System.Collections.IDictionary values, System.Web.UI.DataSourceViewOperationCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(class System.Collections.IDictionary values, class System.Web.UI.DataSourceViewOperationCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.Insert(System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (values As IDictionary, callback As DataSourceViewOperationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(System::Collections::IDictionary ^ values, System::Web::UI::DataSourceViewOperationCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Insert : System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit&#xA;override this.Insert : System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit" Usage="dataSourceView.Insert (values, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="callback" Type="System.Web.UI.DataSourceViewOperationCallback" />
      </Parameters>
      <Docs>
        <param name="values">在插入操作期间使用的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="callback">用于在异步操作完成时通知数据绑定控件的 <see cref="T:System.Web.UI.DataSourceViewOperationCallback" /> 委托。</param>
        <summary>对 <see cref="T:System.Web.UI.DataSourceView" /> 对象所表示的数据列表执行异步插入操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.Insert%2A>方法是所有数据源视图对象的异步数据插入接口。 <xref:System.Web.UI.DataSourceView.Insert%2A>方法 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 使用提供的调用方法 `values` 。 `callback`参数是数据绑定控件传递到数据源视图的委托，用于在操作完成时通知数据绑定控件 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 。 方法使用委托的参数 <xref:System.Web.UI.DataSourceViewOperationCallback> 来返回受影响的记录数，以及 <xref:System.Exception> 由方法调用引发的任何异常 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">提供的 <see cref="T:System.Web.UI.DataSourceViewOperationCallback" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Web.UI.DataSourceViewOperationCallback" />
        <altmember cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceView.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Web.UI.DataSourceView.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据源视图的名称。</summary>
        <value><see cref="T:System.Web.UI.DataSourceView" /> 的名称（如果该视图有名称）。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.DataSourceControl.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.DataSourceControl.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceViewChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceViewChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceViewChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.OnDataSourceViewChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDataSourceViewChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDataSourceViewChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDataSourceViewChanged : EventArgs -&gt; unit&#xA;override this.OnDataSourceViewChanged : EventArgs -&gt; unit" Usage="dataSourceView.OnDataSourceViewChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.DataSourceView.DataSourceViewChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.OnDataSourceViewChanged%2A>方法通知数据绑定控件，基础数据源已更改，且控件应重新绑定并执行任何必要的工作。 通常， <xref:System.Web.UI.DataSourceView.OnDataSourceViewChanged%2A> 当数据源视图的属性发生更改时，将调用方法。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.DataSourceView.OnDataSourceViewChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.DataSourceView.OnDataSourceViewChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.DataSourceView.OnDataSourceViewChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseUnsupportedCapabilityError">
      <MemberSignature Language="C#" Value="protected internal virtual void RaiseUnsupportedCapabilityError (System.Web.UI.DataSourceCapabilities capability);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void RaiseUnsupportedCapabilityError(valuetype System.Web.UI.DataSourceCapabilities capability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub RaiseUnsupportedCapabilityError (capability As DataSourceCapabilities)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void RaiseUnsupportedCapabilityError(System::Web::UI::DataSourceCapabilities capability);" />
      <MemberSignature Language="F#" Value="abstract member RaiseUnsupportedCapabilityError : System.Web.UI.DataSourceCapabilities -&gt; unit&#xA;override this.RaiseUnsupportedCapabilityError : System.Web.UI.DataSourceCapabilities -&gt; unit" Usage="dataSourceView.RaiseUnsupportedCapabilityError capability" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="System.Web.UI.DataSourceCapabilities" />
      </Parameters>
      <Docs>
        <param name="capability">与视图支持的功能进行比较的 <see cref="T:System.Web.UI.DataSourceCapabilities" /> 值之一。</param>
        <summary>由 <see cref="M:System.Web.UI.DataSourceSelectArguments.RaiseUnsupportedCapabilitiesError(System.Web.UI.DataSourceView)" /> 方法调用，用于将 <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 操作所请求的功能与视图所支持的功能进行比较。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError%2A>数据源视图使用方法来检查由传递给方法的对象所表示的数据绑定控件所请求的每个功能， <xref:System.Web.UI.DataSourceSelectArguments> 并将其与 <xref:System.Web.UI.DataSourceView.Select%2A> 数据源视图所支持的功能进行比较。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">数据源视图不支持指定的数据源功能。</exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual void Select (System.Web.UI.DataSourceSelectArguments arguments, System.Web.UI.DataSourceViewSelectCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Select(class System.Web.UI.DataSourceSelectArguments arguments, class System.Web.UI.DataSourceViewSelectCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.Select(System.Web.UI.DataSourceSelectArguments,System.Web.UI.DataSourceViewSelectCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Select (arguments As DataSourceSelectArguments, callback As DataSourceViewSelectCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Select(System::Web::UI::DataSourceSelectArguments ^ arguments, System::Web::UI::DataSourceViewSelectCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Select : System.Web.UI.DataSourceSelectArguments * System.Web.UI.DataSourceViewSelectCallback -&gt; unit&#xA;override this.Select : System.Web.UI.DataSourceSelectArguments * System.Web.UI.DataSourceViewSelectCallback -&gt; unit" Usage="dataSourceView.Select (arguments, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
        <Parameter Name="callback" Type="System.Web.UI.DataSourceViewSelectCallback" />
      </Parameters>
      <Docs>
        <param name="arguments">用于请求对数据执行基本数据检索以外的操作的 <see cref="T:System.Web.UI.DataSourceSelectArguments" />。</param>
        <param name="callback">用于在异步操作完成时通知数据绑定控件的 <see cref="T:System.Web.UI.DataSourceViewSelectCallback" /> 委托。</param>
        <summary>从基础数据存储中异步获取数据列表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.Select%2A>方法是所有数据源视图对象的异步数据检索接口。 <xref:System.Web.UI.DataSourceView.Select%2A>方法调用 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 方法，并传递任何 <xref:System.Web.UI.DataSourceSelectArguments> 提供的。 `callback`参数是数据绑定控件传递到数据源视图的委托，用于在操作完成时通知数据绑定控件 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 。 调用返回的数据 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 在委托的参数中返回 <xref:System.Web.UI.DataSourceViewSelectCallback> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">提供的 <see cref="T:System.Web.UI.DataSourceViewSelectCallback" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Web.UI.DataSourceViewSelectCallback" />
        <altmember cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues, System.Web.UI.DataSourceViewOperationCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues, class System.Web.UI.DataSourceViewOperationCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary, callback As DataSourceViewOperationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues, System::Web::UI::DataSourceViewOperationCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit&#xA;override this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary * System.Web.UI.DataSourceViewOperationCallback -&gt; unit" Usage="dataSourceView.Update (keys, values, oldValues, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
        <Parameter Name="callback" Type="System.Web.UI.DataSourceViewOperationCallback" />
      </Parameters>
      <Docs>
        <param name="keys">更新操作要更新的对象或行键的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="values">表示数据元素及其新值的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="oldValues">表示数据元素及其原始值的名称/值对的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="callback">用于在异步操作完成时通知数据绑定控件的 <see cref="T:System.Web.UI.DataSourceViewOperationCallback" /> 委托。</param>
        <summary>对 <see cref="T:System.Web.UI.DataSourceView" /> 对象所表示的数据列表执行异步更新操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.DataSourceView.Update%2A>方法是所有数据源视图对象的异步数据修改接口。 <xref:System.Web.UI.DataSourceView.Update%2A>方法 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 使用提供的任何 `keys` 、 `values` 和 `oldValues` 参数值调用方法。 `callback`参数是数据绑定控件传递到数据源视图的委托，用于在操作完成时通知数据绑定控件 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 。 方法使用委托的参数 <xref:System.Web.UI.DataSourceViewOperationCallback> 来返回受影响的记录数和调用所引发的任何 <xref:System.Exception> 异常 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">提供的 <see cref="T:System.Web.UI.DataSourceViewOperationCallback" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Web.UI.DataSourceViewOperationCallback" />
        <altmember cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>
