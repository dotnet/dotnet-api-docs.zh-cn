<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04ac4ff1b7cbb197a32e6dd8a30c611659f7688a" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89918169" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <TypeSignature Language="F#" Value="type ClientScriptManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="80b0c-101">在 Web 应用程序中定义用于管理客户端脚本的方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-101">Defines methods for managing client scripts in Web applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-102"><xref:System.Web.UI.ClientScriptManager>类用于管理客户端脚本并将其添加到 Web 应用程序。</span><span class="sxs-lookup"><span data-stu-id="80b0c-102">The <xref:System.Web.UI.ClientScriptManager> class is used to manage client scripts and add them to Web applications.</span></span> <span data-ttu-id="80b0c-103">可以 <xref:System.Web.UI.ClientScriptManager> 从对象的属性中获取对类的引用 <xref:System.Web.UI.Page.ClientScript%2A> <xref:System.Web.UI.Page> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-103">You can get a reference to the <xref:System.Web.UI.ClientScriptManager> class from the <xref:System.Web.UI.Page.ClientScript%2A> property of the <xref:System.Web.UI.Page> object.</span></span>  
  
 <span data-ttu-id="80b0c-104">可以通过在页的 HTML 标记中包含脚本，以声明方式向网页添加客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-104">You can add a client script to a Web page declaratively by including the script in the HTML markup of the page.</span></span> <span data-ttu-id="80b0c-105">但是，在某些情况下，需要动态添加客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-105">However, there are situations when adding client script dynamically is needed.</span></span> <span data-ttu-id="80b0c-106">若要动态添加脚本，请使用 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 方法、方法、方法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 或 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> 方法，具体取决于你希望何时以及如何添加脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-106">To add a script dynamically, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, or the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method, depending on when and how you want to add the script.</span></span> <span data-ttu-id="80b0c-107">有关详细信息，请参阅 [如何：将客户端脚本动态添加到 ASP.NET 网页](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)。</span><span class="sxs-lookup"><span data-stu-id="80b0c-107">For more information, see [How to: Add Client Script Dynamically to ASP.NET Web Pages](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666).</span></span>  
  
 <span data-ttu-id="80b0c-108"><xref:System.Web.UI.ClientScriptManager>类通过键和来唯一标识脚本 <xref:System.String> <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-108">The <xref:System.Web.UI.ClientScriptManager> class uniquely identifies scripts by a key <xref:System.String> and a <xref:System.Type>.</span></span> <span data-ttu-id="80b0c-109">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-109">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-110">使用脚本类型有助于避免混淆不同用户控件中可能正在页面上使用的类似脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-110">Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.</span></span>  
  
 <span data-ttu-id="80b0c-111"><xref:System.Web.UI.ClientScriptManager>如果需要在不执行回发的情况下从客户端运行服务器代码，则可以使用类来调用客户端回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-111">The <xref:System.Web.UI.ClientScriptManager> class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback.</span></span> <span data-ttu-id="80b0c-112">这称为对服务器执行带外回拨。</span><span class="sxs-lookup"><span data-stu-id="80b0c-112">This is referred to as performing an out-of-band callback to the server.</span></span> <span data-ttu-id="80b0c-113">在客户端回调中，客户端脚本函数将异步请求发送到 ASP.NET 网页。</span><span class="sxs-lookup"><span data-stu-id="80b0c-113">In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page.</span></span> <span data-ttu-id="80b0c-114">网页运行其正常生命周期的修改版本来处理回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-114">The Web page runs a modified version of its normal life cycle to process the callback.</span></span> <span data-ttu-id="80b0c-115">使用 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 方法可获取对客户端函数的引用，在调用该函数时，将启动对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-115">Use the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event.</span></span> <span data-ttu-id="80b0c-116">有关详细信息，请参阅 [实现无回发的客户端回调](https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="80b0c-116">For more information, see [Implementing Client Callbacks Without Postbacks](https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80b0c-117">脚本回调将无法在旧版浏览器中工作，这些浏览器不支持文档对象模型 (DOM) ，它们要求在客户端上启用 ECMAScript。</span><span class="sxs-lookup"><span data-stu-id="80b0c-117">Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client.</span></span> <span data-ttu-id="80b0c-118">若要检查浏览器是否支持回调，请使用 <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> 属性，该属性可通过 <xref:System.Web.HttpRequest.Browser%2A> ASP.NET 内部对象的属性访问 <xref:System.Web.HttpContext.Request%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-118">To check if the browser supports callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property, which is accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the ASP.NET intrinsic <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="80b0c-119">使用 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法和 <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> 方法定义客户端回发事件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-119">Use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method and the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method to define a client postback event.</span></span> <span data-ttu-id="80b0c-120">这些方法启用客户端脚本函数（在调用时），以使服务器回发到页面。</span><span class="sxs-lookup"><span data-stu-id="80b0c-120">These methods enable client script functions, when invoked, to cause the server to post back to the page.</span></span> <span data-ttu-id="80b0c-121">客户端回发事件不同于客户端回调，因为网页完成了正常生命周期来处理客户端回发事件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-121">A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80b0c-122">如果使用 <xref:System.Web.UI.WebControls.Button> 控件并且 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> 属性设置为 `false` ，则可以使用 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法返回控件的客户端回发事件 <xref:System.Web.UI.WebControls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-122">If you are using a <xref:System.Web.UI.WebControls.Button> control and the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is set to `false`, then you can use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method to return the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="80b0c-123"><xref:System.Web.UI.WebControls.Button.OnClientClick%2A> <xref:System.Web.UI.WebControls.Button> 控件、 <xref:System.Web.UI.WebControls.ImageButton> 控件和控件的属性 <xref:System.Web.UI.WebControls.LinkButton> 可用于运行客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-123">The <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control, <xref:System.Web.UI.WebControls.ImageButton> control, and <xref:System.Web.UI.WebControls.LinkButton> control can be used to run client script.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-124">下面的代码示例演示如何使用类的 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 方法 <xref:System.Web.UI.ClientScriptManager> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-124">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="80b0c-125">在页中定义了两个客户端脚本： `PopupScript` ，这会在加载页面时显示一条警告消息， `ButtonClickScript` 后者用于定义 HTML 按钮事件的客户端处理程序 `onClick` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-125">Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/3hc29e2a(v=vs.100)"><span data-ttu-id="80b0c-126">ASP.NET 网页中的客户端脚本</span><span class="sxs-lookup"><span data-stu-id="80b0c-126">Client Script in ASP.NET Web Pages</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-127">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-127">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-128">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-128">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (control As Control, argument As String, clientCallback As String, context As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="80b0c-129">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-129">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="80b0c-130">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-130">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-131">从客户端脚本传递给服务器的一个参数</span><span class="sxs-lookup"><span data-stu-id="80b0c-131">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="80b0c-132"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-132"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="80b0c-133">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="80b0c-133">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="80b0c-134">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-134">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="80b0c-135">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="80b0c-135">The result of the script is passed back to the client event handler.</span></span></param>
        <summary><span data-ttu-id="80b0c-136">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-136">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span> <span data-ttu-id="80b0c-137">此重载方法的客户端函数包含指定的控件、参数、客户端脚本和上下文。</span><span class="sxs-lookup"><span data-stu-id="80b0c-137">The client function for this overloaded method includes a specified control, argument, client script, and context.</span></span></summary>
        <returns><span data-ttu-id="80b0c-138">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-138">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-139"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>方法执行对服务器的带外回调，该服务器是页的正常生命周期的修改版本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-139">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle.</span></span> <span data-ttu-id="80b0c-140">有关详细信息，请参阅 [实现无回发的客户端回调](https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="80b0c-140">For more information, see [Implementing Client Callbacks Without Postbacks](https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80b0c-141">当浏览器是 Microsoft Internet Explorer (版本5.0 或更高版本) 时，脚本回调机制是通过 Microsoft.XmlHttp COM 对象实现的，并且需要将浏览器设置为运行 ActiveX 控件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-141">When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls.</span></span> <span data-ttu-id="80b0c-142">对于其他浏览器，使用浏览器的本地文档对象模型 (DOM) 的 XMLHttpRequest。</span><span class="sxs-lookup"><span data-stu-id="80b0c-142">For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used.</span></span> <span data-ttu-id="80b0c-143">若要检查浏览器是否支持客户端回调，请使用 <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="80b0c-143">To check whether a browser supports client callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property.</span></span> <span data-ttu-id="80b0c-144">若要检查浏览器是否支持 XML over HTTP，请使用 <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="80b0c-144">To check whether a browser supports XML over HTTP, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> property.</span></span> <span data-ttu-id="80b0c-145">这两个属性都可以通过 <xref:System.Web.HttpRequest.Browser%2A> 内部 ASP.NET 对象的属性进行访问 <xref:System.Web.HttpContext.Request%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-145">Both properties are accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the intrinsic ASP.NET <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="80b0c-146"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法的重载 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 使用 XML over HTTP 来同步执行回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-146">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method performs a callback synchronously using XML over HTTP.</span></span> <span data-ttu-id="80b0c-147">在回调方案中同步发送数据时，同步回调会立即返回，而不会阻止浏览器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-147">When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser.</span></span> <span data-ttu-id="80b0c-148">在浏览器中，不能同时执行两个同步回调回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-148">No two synchronous callbacks callback can execute at the same time in the browser.</span></span> <span data-ttu-id="80b0c-149">如果在当前挂起一个同步回调时激发另一个同步回调，则第二个同步回调将取消第一个回调，并且只有第二个回调返回。</span><span class="sxs-lookup"><span data-stu-id="80b0c-149">If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.</span></span>  
  
 <span data-ttu-id="80b0c-150">若要以异步方式发送数据，请使用采用参数的重载之一 `useAsync` ，这是控制此行为的布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-150">To send data asynchronously, use one of the overloads that takes the `useAsync` parameter, which is a Boolean value controlling this behavior.</span></span> <span data-ttu-id="80b0c-151">在异步方案中，可以有多个挂起的回调;但是，不能保证它们返回的顺序与启动顺序一致。</span><span class="sxs-lookup"><span data-stu-id="80b0c-151">In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.</span></span>  
  
 <span data-ttu-id="80b0c-152">此外，此方法的重载 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 指定无客户端函数来处理方法生成的错误条件 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-152">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method specifies no client function to handle the case of an error condition generated by the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method.</span></span> <span data-ttu-id="80b0c-153">若要指定客户端错误回调处理程序，请使用采用参数的重载之一 `clientErrorCallback` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-153">To specify a client error callback handler, use one of the overloads that takes the `clientErrorCallback` parameter.</span></span>  
  
 <span data-ttu-id="80b0c-154"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>方法采用一个可选的字符串 `argument` 参数并返回一个字符串。</span><span class="sxs-lookup"><span data-stu-id="80b0c-154">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method takes an optional string `argument` parameter and returns a string.</span></span> <span data-ttu-id="80b0c-155">若要传入或接收多个值，请分别连接输入或返回字符串中的值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-155">To pass in or to receive multiple values, concatenate values in the input or return string, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80b0c-156">避免在脚本回调操作期间需要更新的页或控件属性的实现中使用视图状态。</span><span class="sxs-lookup"><span data-stu-id="80b0c-156">Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations.</span></span> <span data-ttu-id="80b0c-157">如果属性在页面请求后仍然存在，则可以使用会话状态。</span><span class="sxs-lookup"><span data-stu-id="80b0c-157">If the properties are to survive page requests, you can use session state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-158">下面的代码示例演示如何 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 在递增整数的客户端回调方案中使用方法的两个重载。</span><span class="sxs-lookup"><span data-stu-id="80b0c-158">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="80b0c-159">将显示两个回调机制：它们之间的区别在于使用 `context` 参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-159">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="80b0c-160">`ReceiveServerData1`使用参数提供客户端回调函数 `context` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-160">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="80b0c-161">相反， `ReceiveServerData2` 客户端回调函数在页的块中定义 `<script>` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-161">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="80b0c-162"><xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法是增加传递给它的值并且 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> 方法以字符串形式返回递增值的服务器处理程序。</span><span class="sxs-lookup"><span data-stu-id="80b0c-162">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="80b0c-163">如果该 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 方法返回错误，则 `ProcessCallBackError` 调用客户端函数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-163">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-164">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-164">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="80b0c-165">指定的 <see cref="T:System.Web.UI.Control" /> 未实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-165">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-166">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-166">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (control As Control, argument As String, clientCallback As String, context As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="80b0c-167">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-167">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="80b0c-168">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-168">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-169">从客户端脚本传递给服务器的一个参数</span><span class="sxs-lookup"><span data-stu-id="80b0c-169">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="80b0c-170"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-170"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="80b0c-171">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="80b0c-171">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="80b0c-172">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-172">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="80b0c-173">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="80b0c-173">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="80b0c-174"><see langword="true" /> 表示异步执行回调；<see langword="false" /> 表示同步执行回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-174"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="80b0c-175">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-175">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="80b0c-176">此重载方法的客户端函数包含指定的控件、参数、客户端脚本、上下文和布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-176">The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="80b0c-177">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-177">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-178">此 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 方法重载需要一个 `useAsync` 参数，该参数允许您通过将值设置为，以异步方式执行客户端回调 `true` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-178">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` parameter, which allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="80b0c-179">默认情况下，此方法的重载版本不需要 `useAsync` 参数将值设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-179">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span>  
  
 <span data-ttu-id="80b0c-180">有关此方法的详细信息，请参阅重载方法的备注 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-180">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-181">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-181">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="80b0c-182">指定的 <see cref="T:System.Web.UI.Control" /> 未实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-182">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-183">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-183">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : string * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (target, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="80b0c-184">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-184">The name of a server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="80b0c-185">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-185">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-186">从客户端脚本传递给服务器的一个参数</span><span class="sxs-lookup"><span data-stu-id="80b0c-186">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="80b0c-187"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-187"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="80b0c-188">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="80b0c-188">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="80b0c-189">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-189">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="80b0c-190">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="80b0c-190">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="80b0c-191">客户端事件处理程序的名称，该处理程序在服务器端事件处理程序出现错误时接收结果。</span><span class="sxs-lookup"><span data-stu-id="80b0c-191">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="80b0c-192"><see langword="true" /> 表示异步执行回调；<see langword="false" /> 表示同步执行回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-192"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="80b0c-193">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-193">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="80b0c-194">此重载方法的客户端函数包含指定的目标、参数、客户端脚本、上下文、错误处理程序和布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-194">The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="80b0c-195">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-195">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-196">此方法的重载 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 采用 `target` 字符串参数，而不是 <xref:System.Web.UI.Control> 参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-196">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method takes a `target` string parameter instead of a <xref:System.Web.UI.Control> parameter.</span></span> <span data-ttu-id="80b0c-197">如果希望回调返回到包含控件的的字符串以外的其他内容，请使用此重载 <xref:System.Web.UI.Control.UniqueID%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-197">Use this overload when you want the callback to go back to something other than a string containing the <xref:System.Web.UI.Control.UniqueID%2A> of the control.</span></span>  
  
 <span data-ttu-id="80b0c-198">此外，此 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 方法重载需要 `useAsync` 和 `clientErrorCallback` 参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-198">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="80b0c-199">`useAsync`参数允许您通过将值设置为，以异步方式执行客户端回调 `true` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-199">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="80b0c-200">默认情况下，此方法的重载版本不需要 `useAsync` 参数将值设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-200">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="80b0c-201">`clientErrorCallback`参数允许您定义在服务器处理程序（ <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 方法）返回错误的情况下调用的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-201">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method, returns an error.</span></span> <span data-ttu-id="80b0c-202">此方法的重载版本不需要 `clientErrorCallback` 参数将值设置为 null。</span><span class="sxs-lookup"><span data-stu-id="80b0c-202">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="80b0c-203">有关此方法的详细信息，请参阅重载方法的备注 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-203">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-204">下面的代码示例演示如何 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 在递增整数的客户端回调方案中使用方法的两个重载。</span><span class="sxs-lookup"><span data-stu-id="80b0c-204">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="80b0c-205">将显示两个回调机制：它们之间的区别在于使用 `context` 参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-205">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="80b0c-206">`ReceiveServerData1`使用参数提供客户端回调函数 `context` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-206">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="80b0c-207">相反， `ReceiveServerData2` 客户端回调函数在页的块中定义 `<script>` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-207">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="80b0c-208"><xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法是增加传递给它的值并且 <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> 方法以字符串形式返回递增值的服务器处理程序。</span><span class="sxs-lookup"><span data-stu-id="80b0c-208">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="80b0c-209">如果该 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 方法返回错误，则调用客户端函数 `ProcessCallBackError` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-209">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-210">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-210">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (control As Control, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="80b0c-211">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-211">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="80b0c-212">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-212">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-213">从客户端脚本传递给服务器的 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法的参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-213">An argument passed from the client script to the server <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="80b0c-214">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="80b0c-214">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="80b0c-215">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-215">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="80b0c-216">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="80b0c-216">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="80b0c-217">客户端事件处理程序的名称，该处理程序在服务器端事件处理程序出现错误时接收结果。</span><span class="sxs-lookup"><span data-stu-id="80b0c-217">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="80b0c-218"><see langword="true" /> 表示异步执行回调；<see langword="false" /> 表示同步执行回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-218"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="80b0c-219">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-219">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="80b0c-220">此重载方法的客户端函数包含指定的控件、参数、客户端脚本、上下文、错误处理程序和布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-220">The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="80b0c-221">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-221">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-222">此 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 方法重载需要 `useAsync` 和 `clientErrorCallback` 参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-222">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="80b0c-223">`useAsync`参数允许您通过将值设置为，以异步方式执行客户端回调 `true` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-223">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="80b0c-224">默认情况下，此方法的重载版本不需要 `useAsync` 参数将值设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-224">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="80b0c-225">`clientErrorCallback`如果服务器处理程序 (<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 方法) 返回错误，则可以使用参数定义调用的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-225">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler (the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method) returns an error.</span></span> <span data-ttu-id="80b0c-226">此方法的重载版本不需要 `clientErrorCallback` 参数将值设置为 null。</span><span class="sxs-lookup"><span data-stu-id="80b0c-226">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="80b0c-227">有关此方法的详细信息，请参阅重载方法的备注 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-227">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-228">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-228">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="80b0c-229">指定的 <see cref="T:System.Web.UI.Control" /> 未实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-229">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-230">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-230">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-231">获取一个引用，并将 <see langword="javascript:" /> 追加到引用的开始处，用于在客户端事件中回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-231">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackClientHyperlink (control As Control, argument As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="80b0c-232">处理回发的服务器控件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-232">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-233">传递给服务器控件的参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-233">The parameter passed to the server control.</span></span></param>
        <summary><span data-ttu-id="80b0c-234">获取一个引用，并在其开头附加 <see langword="javascript:" />，可以在客户端事件中使用该引用，并将该引用与指定的事件参数一起使用，以便回发到指定控件的服务器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-234">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</span></span></summary>
        <returns><span data-ttu-id="80b0c-235">一个字符串，表示对包含目标控件的 ID 和事件参数的回发函数的 JavaScript 调用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-235">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-236">使用 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法需要处理回发的控件来实现 <xref:System.Web.UI.IPostBackEventHandler> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-236">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="80b0c-237">若要实现的 <xref:System.Web.UI.IPostBackEventHandler> 接口 <xref:System.Web.UI.Page> ，请使用指令。</span><span class="sxs-lookup"><span data-stu-id="80b0c-237">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-238">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-238">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method.</span></span> <span data-ttu-id="80b0c-239">自定义控件 `MyControl` 实现 <xref:System.Web.UI.IPostBackEventHandler> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-239">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="80b0c-240">当单击页面上的 HTML 定位点元素时，将 <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> 调用自定义控件的方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-240">When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="80b0c-241">下面的代码示例与上面的代码示例具有相同的功能，不同之处在于 <xref:System.Web.UI.Page> 类实现 <xref:System.Web.UI.IPostBackEventHandler> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-241">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackClientHyperlink (control As Control, argument As String, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="80b0c-242">处理回发的服务器控件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-242">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-243">传递给服务器控件的参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-243">The parameter passed to the server control.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="80b0c-244"><see langword="true" /> 表示为验证注册回发事件；<see langword="false" /> 表示不为验证注册回发事件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-244"><see langword="true" /> to register the postback event for validation; <see langword="false" /> to not register the post back event for validation.</span></span></param>
        <summary><span data-ttu-id="80b0c-245">获取一个引用，并在其开头附加 <see langword="javascript:" />，该引用可用于在客户端事件中回发到指定控件的服务器，回发时使用指定的事件参数和一个指示是否为事件验证注册该回发的布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-245">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</span></span></summary>
        <returns><span data-ttu-id="80b0c-246">一个字符串，表示对包含目标控件的 ID 和事件参数的回发函数的 JavaScript 调用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-246">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-247">使用 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法需要处理回发的控件来实现 <xref:System.Web.UI.IPostBackEventHandler> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-247">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="80b0c-248">若要实现的 <xref:System.Web.UI.IPostBackEventHandler> 接口 <xref:System.Web.UI.Page> ，请使用指令。</span><span class="sxs-lookup"><span data-stu-id="80b0c-248">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-249">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-249">Returns a string that can be used in a client event to cause postback to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions -&gt; string" Usage="clientScriptManager.GetPostBackEventReference options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="80b0c-250">定义回发的 <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-250">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <summary><span data-ttu-id="80b0c-251">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-251">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="80b0c-252">由指定的 <see cref="T:System.Web.UI.PostBackOptions" /> 实例定义的字符串。</span><span class="sxs-lookup"><span data-stu-id="80b0c-252">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> instance.</span></span></summary>
        <returns><span data-ttu-id="80b0c-253">一个字符串，当被视为客户端脚本时，它将启动客户端回发。</span><span class="sxs-lookup"><span data-stu-id="80b0c-253">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-254">若要实现的 <xref:System.Web.UI.IPostBackEventHandler> 接口 <xref:System.Web.UI.Page> ，请使用指令。</span><span class="sxs-lookup"><span data-stu-id="80b0c-254">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="80b0c-255"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> <xref:System.Web.UI.WebControls.Button> 当属性为时，可以将方法与控件一起使用 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-255">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="80b0c-256">在这种情况下， <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法返回控件的客户端回发事件 <xref:System.Web.UI.WebControls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-256">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-257"><see cref="T:System.Web.UI.PostBackOptions" /> 参数为 <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="80b0c-257">The <see cref="T:System.Web.UI.PostBackOptions" /> parameter is <see langword="null" /></span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-258">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-258">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (control As Control, argument As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="80b0c-259">在服务器上处理回发的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-259">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-260">要传递给处理回发的控件的可选参数字符串。</span><span class="sxs-lookup"><span data-stu-id="80b0c-260">A string of optional arguments to pass to the control that processes the postback.</span></span></param>
        <summary><span data-ttu-id="80b0c-261">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-261">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="80b0c-262">该引用字符串由处理回发的指定控件和一个附加事件信息的字符串参数定义。</span><span class="sxs-lookup"><span data-stu-id="80b0c-262">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span></summary>
        <returns><span data-ttu-id="80b0c-263">一个字符串，将其视为客户端脚本时，将启动回发。</span><span class="sxs-lookup"><span data-stu-id="80b0c-263">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-264">若要实现的 <xref:System.Web.UI.IPostBackEventHandler> 接口 <xref:System.Web.UI.Page> ，请使用指令。</span><span class="sxs-lookup"><span data-stu-id="80b0c-264">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="80b0c-265"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> <xref:System.Web.UI.WebControls.Button> 当属性为时，可以将方法与控件一起使用 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-265">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="80b0c-266">在这种情况下， <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法返回控件的客户端回发事件 <xref:System.Web.UI.WebControls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-266">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-267">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-267">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method.</span></span> <span data-ttu-id="80b0c-268">自定义控件 `MyControl` 实现 <xref:System.Web.UI.IPostBackEventHandler> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-268">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="80b0c-269">当单击页面上的按钮时，将 <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> 调用自定义控件的方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-269">When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="80b0c-270">下面的代码示例与上面的代码示例具有相同的功能，不同之处在于 <xref:System.Web.UI.Page> 类实现 <xref:System.Web.UI.IPostBackEventHandler> 接口。</span><span class="sxs-lookup"><span data-stu-id="80b0c-270">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-271">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-271">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-272">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-272">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (options, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="80b0c-273">定义回发的 <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-273">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="80b0c-274"><see langword="true" /> 表示为验证注册事件引用；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-274"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="80b0c-275">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-275">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="80b0c-276">由指定的 <see cref="T:System.Web.UI.PostBackOptions" /> 对象定义的字符串。</span><span class="sxs-lookup"><span data-stu-id="80b0c-276">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> object.</span></span> <span data-ttu-id="80b0c-277">可选择为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-277">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="80b0c-278">一个字符串，当被视为客户端脚本时，它将启动客户端回发。</span><span class="sxs-lookup"><span data-stu-id="80b0c-278">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-279">若要实现 <xref:System.Web.UI.IPostBackEventHandler> 对象的接口 <xref:System.Web.UI.Page> ，请使用指令。</span><span class="sxs-lookup"><span data-stu-id="80b0c-279">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page> object, use the  directive.</span></span>  
  
 <span data-ttu-id="80b0c-280"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> <xref:System.Web.UI.WebControls.Button> 当属性为时，可以将方法与控件一起使用 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-280">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="80b0c-281">在这种情况下， <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法返回控件的客户端回发事件 <xref:System.Web.UI.WebControls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-281">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="80b0c-282">如果 `registerForEventValidation` 为 `true` ，则该 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> 方法将调用 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> 方法，以便使用唯一控件 ID （表示生成事件的客户端控件）为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-282">If `registerForEventValidation` is `true`, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-283"><see cref="T:System.Web.UI.PostBackOptions" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-283">The <see cref="T:System.Web.UI.PostBackOptions" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-284">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-284">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (control As Control, argument As String, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="80b0c-285">在服务器上处理回发的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-285">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-286">传递给 <paramref name="control" /> 的可选参数的字符串。</span><span class="sxs-lookup"><span data-stu-id="80b0c-286">A string of optional arguments to pass to <paramref name="control" />.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="80b0c-287"><see langword="true" /> 表示为验证注册事件引用；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-287"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="80b0c-288">返回一个在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="80b0c-288">Returns a string to use in a client event to cause postback to the server.</span></span> <span data-ttu-id="80b0c-289">该引用字符串由处理回发的指定控件和一个附加事件信息的字符串参数定义。</span><span class="sxs-lookup"><span data-stu-id="80b0c-289">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span> <span data-ttu-id="80b0c-290">可选择为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-290">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="80b0c-291">一个字符串，将其视为客户端脚本时，将启动回发。</span><span class="sxs-lookup"><span data-stu-id="80b0c-291">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-292">若要实现的 <xref:System.Web.UI.IPostBackEventHandler> 接口 <xref:System.Web.UI.Page> ，请使用指令。</span><span class="sxs-lookup"><span data-stu-id="80b0c-292">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 <span data-ttu-id="80b0c-293"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> <xref:System.Web.UI.WebControls.Button> 当属性为时，可以将方法与控件一起使用 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-293">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="80b0c-294">在这种情况下， <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 方法返回控件的客户端回发事件 <xref:System.Web.UI.WebControls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-294">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="80b0c-295">如果 `registerForEventValidation` 为 true，则 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> 方法将调用 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> 方法，以便使用唯一控件 ID （表示生成事件的客户端控件）为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-295">If `registerForEventValidation` is true, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-296">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-296">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)"><span data-ttu-id="80b0c-297">ASP.NET 页中没有回发的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-297">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWebResourceUrl (type As Type, resourceName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.GetWebResourceUrl : Type * string -&gt; string" Usage="clientScriptManager.GetWebResourceUrl (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-298">资源类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-298">The type of the resource.</span></span></param>
        <param name="resourceName"><span data-ttu-id="80b0c-299">程序集中资源的完全限定名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-299">The fully qualified name of the resource in the assembly.</span></span></param>
        <summary><span data-ttu-id="80b0c-300">获取对程序集内资源的 URL 引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-300">Gets a URL reference to a resource in an assembly.</span></span></summary>
        <returns><span data-ttu-id="80b0c-301">对资源的 URL 引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-301">The URL reference to the resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-302"><xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>方法返回对嵌入在程序集中的资源的 URL 引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-302">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method returns a URL reference to a resource embedded in an assembly.</span></span> <span data-ttu-id="80b0c-303">返回的引用未进行 URL 编码。</span><span class="sxs-lookup"><span data-stu-id="80b0c-303">The returned reference is not URL encoded.</span></span> <span data-ttu-id="80b0c-304">资源可以是脚本文件、图像或任何静态文件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-304">Resources can be script files, images, or any static file.</span></span> <span data-ttu-id="80b0c-305">基于将访问资源的对象指定类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-305">You specify the type based on the object that will be accessing the resource.</span></span>  
  
 <span data-ttu-id="80b0c-306">用页注册的 Web 资源由其类型和名称唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-306">A Web resource registered with the page is uniquely identified by its type and name.</span></span> <span data-ttu-id="80b0c-307">只能向页面注册一个具有给定类型和名称对的资源。</span><span class="sxs-lookup"><span data-stu-id="80b0c-307">Only one resource with a given type and name pair can be registered with the page.</span></span> <span data-ttu-id="80b0c-308">尝试注册已注册的资源不会创建已注册资源的副本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-308">Attempting to register a resource that is already registered does not create a duplicate of the registered resource.</span></span>  
  
 <span data-ttu-id="80b0c-309"><xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>方法与用于 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> 访问嵌入在程序集中的资源的方法结合使用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-309">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method is used in conjunction with the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method for accessing resources embedded in assemblies.</span></span> <span data-ttu-id="80b0c-310">有关在应用程序中使用资源的详细信息，请参阅 [ASP.NET 网页资源概述](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)。</span><span class="sxs-lookup"><span data-stu-id="80b0c-310">For more information on using resources in applications, see [ASP.NET Web Page Resources Overview](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-311">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-311">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method.</span></span> <span data-ttu-id="80b0c-312">在此示例中， *类型* 参数设置为包含资源的程序集中的类的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-312">The *type* parameter in this example is set to the type of class in the assembly containing the resource.</span></span> <span data-ttu-id="80b0c-313">`resourceName`参数是通过资源的完全限定路径指定的，其中包括默认命名空间。</span><span class="sxs-lookup"><span data-stu-id="80b0c-313">The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="80b0c-314">下面的代码示例演示如何以编程方式应用 <xref:System.Web.UI.WebResourceAttribute> metadata 特性来标记将提供的资源的程序集。</span><span class="sxs-lookup"><span data-stu-id="80b0c-314">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span> <span data-ttu-id="80b0c-315">在将默认命名空间设置为 `Samples.AspNet.CS.Controls` 或 `Samples.AspNet.VB.Controls` （具体取决于所使用的语言）的类库中，编译以下类。</span><span class="sxs-lookup"><span data-stu-id="80b0c-315">Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="80b0c-316">此示例需要一个名为的 JavaScript 文件 `Script_include.js` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-316">This example requires a JavaScript file named `Script_include.js`.</span></span> <span data-ttu-id="80b0c-317">.Js 文件是包含对象的程序集中的嵌入资源 `ClientScriptResourceLabel` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-317">The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object.</span></span> <span data-ttu-id="80b0c-318">如果使用的是 Visual Studio，请在类库项目的属性窗口中，将 " **生成操作** " 设置为 "在选择脚本文件时 **嵌入的资源** "。</span><span class="sxs-lookup"><span data-stu-id="80b0c-318">If you are using Visual Studio, in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected.</span></span> <span data-ttu-id="80b0c-319">如果要在命令行中编译库，请使用 [/resource](/dotnet/csharp/language-reference/compiler-options/resource-compiler-option) 开关来嵌入资源。</span><span class="sxs-lookup"><span data-stu-id="80b0c-319">If you are compiling the library at the command line, use the [/resource](/dotnet/csharp/language-reference/compiler-options/resource-compiler-option) switch to embed the resource.</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-320">Web 资源类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-320">The web resource type is <see langword="null" />.</span></span>

<span data-ttu-id="80b0c-321">- 或 -</span><span class="sxs-lookup"><span data-stu-id="80b0c-321">-or-</span></span>

<span data-ttu-id="80b0c-322">Web 资源名称为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-322">The web resource name is <see langword="null" />.</span></span>  
  
<span data-ttu-id="80b0c-323">- 或 -</span><span class="sxs-lookup"><span data-stu-id="80b0c-323">-or-</span></span> 
<span data-ttu-id="80b0c-324">Web 资源名称长度为零。</span><span class="sxs-lookup"><span data-stu-id="80b0c-324">The web resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227427(v=vs.100)"><span data-ttu-id="80b0c-325">ASP.NET 网页资源概述</span><span class="sxs-lookup"><span data-stu-id="80b0c-325">ASP.NET Web Page Resources Overview</span></span></related>
        <related type="Article" href="/dotnet/csharp/language-reference/compiler-options/resource-compiler-option"><span data-ttu-id="80b0c-326">/resource (将资源文件嵌入到输出)  (c # 编译器选项) </span><span class="sxs-lookup"><span data-stu-id="80b0c-326">/resource (Embed Resource File to Output) (C# Compiler Options)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/reference/command-line-compiler/resource"><span data-ttu-id="80b0c-327">/resource (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80b0c-327">/resource (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-328">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本块。</span><span class="sxs-lookup"><span data-stu-id="80b0c-328">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="80b0c-329">要搜索的客户端脚本块的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-329">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-330">使用指定键确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本块。</span><span class="sxs-lookup"><span data-stu-id="80b0c-330">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="80b0c-331">如果注册了客户端脚本块，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-331"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-332">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> ，以避免注册重复脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-332">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="80b0c-333">如果脚本需要创建大量的服务器资源，则这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-333">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-334">客户端脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-334">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-335">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-335">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="80b0c-336">此方法的重载 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> 调用重载，该重载采用和将 `key` `type` 类型设置为对象的参数。 <xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="80b0c-336">This overload of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-337">要搜索的客户端脚本块的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-337">The type of the client script block to search for.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-338">要搜索的客户端脚本块的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-338">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-339">使用键和类型确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本块。</span><span class="sxs-lookup"><span data-stu-id="80b0c-339">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns><span data-ttu-id="80b0c-340">如果注册了客户端脚本块，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-340"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-341">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> ，以避免注册重复脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-341">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="80b0c-342">如果脚本需要创建大量的服务器资源，则这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-342">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-343">客户端脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-343">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-344">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-344">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-345">基于将访问资源的对象指定类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-345">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="80b0c-346">例如，在使用 `Page` 实例访问资源时，可以指定 `Page` 类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-346">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-347">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-347">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method.</span></span> <span data-ttu-id="80b0c-348">请注意，如果已删除用于检查现有客户端脚本块的逻辑，则呈现的页面的 HTML 源代码中将不会有两个重复的客户端脚本，因为 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 方法会检查是否有重复项。</span><span class="sxs-lookup"><span data-stu-id="80b0c-348">Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates.</span></span> <span data-ttu-id="80b0c-349">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="80b0c-349">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-350">客户端脚本类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-350">The client script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-351">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="80b0c-351">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="80b0c-352">要搜索的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-352">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-353">使用指定键确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="80b0c-353">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="80b0c-354">如果注册了客户端脚本包含，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-354"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-355">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> ，以避免注册重复脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-355">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="80b0c-356">如果脚本需要创建大量的服务器资源，则这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-356">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-357">客户端脚本包含由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-357">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-358">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-358">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="80b0c-359">此方法的重载 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> 调用重载，该重载采用 `key` 和 `type` 将类型设置为对象的参数 <xref:System.Web.UI.Page> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-359">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-360">要搜索的客户端脚本包含的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-360">The type of the client script include to search for.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-361">要搜索的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-361">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-362">使用键和类型确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="80b0c-362">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns><span data-ttu-id="80b0c-363">如果注册了客户端脚本包含，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-363"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-364">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> ，以避免注册重复的客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="80b0c-364">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate client script includes.</span></span> <span data-ttu-id="80b0c-365">如果脚本需要创建大量的服务器资源，则这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-365">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-366">客户端脚本包含由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-366">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-367">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-367">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-368">基于将访问资源的对象指定类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-368">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="80b0c-369">例如，使用页面实例访问资源时，可以指定 `Page` 类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-369">For instance, when using a Page instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-370">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-370">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method.</span></span> <span data-ttu-id="80b0c-371">请注意，如果删除了要检查是否存在现有客户端脚本包含的逻辑，则呈现的页面的 HTML 源代码中将不会有两个重复的客户端脚本，因为 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 方法会检查是否有重复项。</span><span class="sxs-lookup"><span data-stu-id="80b0c-371">Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="80b0c-372">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="80b0c-372">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="80b0c-373">此示例需要一个名为的 JavaScript 文件 `Script_include.js` ，其中包含以下内容：</span><span class="sxs-lookup"><span data-stu-id="80b0c-373">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-374">客户端脚本包含类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-374">The client script include type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-375">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="80b0c-375">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="80b0c-376">要搜索的 OnSubmit 语句的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-376">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-377">确定 <see cref="T:System.Web.UI.Page" /> 对象是否使用指定键注册了 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="80b0c-377">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="80b0c-378">如果已注册 OnSubmit 语句，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-378"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-379">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> ，以避免注册重复的 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="80b0c-379">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate OnSubmit statements.</span></span> <span data-ttu-id="80b0c-380">如果语句需要大量的服务器资源来创建，这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-380">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-381">语句由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-381">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-382">具有相同键和类型的语句被认为是重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-382">Statements with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="80b0c-383">此方法的重载 <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> 调用重载，该重载采用和将 `key` `type` 类型设置为对象的参数。 <xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="80b0c-383">This overload of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-384">要搜索的 OnSubmit 语句的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-384">The type of the OnSubmit statement to search for.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-385">要搜索的 OnSubmit 语句的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-385">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-386">确定 <see cref="T:System.Web.UI.Page" /> 对象是否使用指定的键和类型注册了 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="80b0c-386">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns><span data-ttu-id="80b0c-387">如果已注册 OnSubmit 语句，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-387"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-388">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> ，以避免注册重复的语句。</span><span class="sxs-lookup"><span data-stu-id="80b0c-388">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate statements.</span></span> <span data-ttu-id="80b0c-389">如果语句需要大量的服务器资源来创建，这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-389">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-390">语句由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-390">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-391">具有相同键和类型的语句被认为是重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-391">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-392">基于将访问资源的对象指定类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-392">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="80b0c-393">例如，在使用 `Page` 实例访问资源时，可以指定 `Page` 类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-393">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-394">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-394">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method.</span></span> <span data-ttu-id="80b0c-395">使用注册了一个名 `OnSubmitScript` 为的脚本， <xref:System.Web.UI.Page> 以便在提交该页的窗体时调用该脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-395">A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-396">OnSubmit 语句的类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-396">The OnSubmit statement type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-397">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了启动脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-397">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="80b0c-398">要搜索的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-398">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-399">使用指定键确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了启动脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-399">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="80b0c-400">如果注册了启动脚本，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-400"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-401">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> ，以避免注册重复脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-401">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="80b0c-402">如果脚本需要创建大量的服务器资源，则这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-402">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-403">启动脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-403">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-404">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-404">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="80b0c-405">此方法的重载 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> 调用重载，该重载采用 `key` `type` 将类型设置为对象的字符串和参数 <xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="80b0c-405">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a string `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-406">要搜索的启动脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-406">The type of the startup script to search for.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-407">要搜索的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-407">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="80b0c-408">使用指定键和类型确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了启动脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-408">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns><span data-ttu-id="80b0c-409">如果注册了启动脚本，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-409"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-410">在调用方法之前调用此方法 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> ，以避免注册重复脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-410">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="80b0c-411">如果脚本需要创建大量的服务器资源，则这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="80b0c-411">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="80b0c-412">客户端启动脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-412">A client startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-413">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-413">Scripts with the same key and type are considered duplicates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-414">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-414">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method.</span></span> <span data-ttu-id="80b0c-415">请注意，如果已删除用于检查现有启动脚本块的逻辑，则呈现的页面的 HTML 源代码中将不会有两个重复的启动脚本，因为 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 方法会检查是否有重复项。</span><span class="sxs-lookup"><span data-stu-id="80b0c-415">Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates.</span></span> <span data-ttu-id="80b0c-416">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="80b0c-416">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-417">该启动脚本类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-417">The startup script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterArrayDeclaration : string * string -&gt; unit" Usage="clientScriptManager.RegisterArrayDeclaration (arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName"><span data-ttu-id="80b0c-418">要注册的数组名。</span><span class="sxs-lookup"><span data-stu-id="80b0c-418">The array name to register.</span></span></param>
        <param name="arrayValue"><span data-ttu-id="80b0c-419">要注册的一个或多个数组值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-419">The array value or values to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-420">使用数组名称和数组值向 <see cref="T:System.Web.UI.Page" /> 对象注册 JavaScript 数组声明。</span><span class="sxs-lookup"><span data-stu-id="80b0c-420">Registers a JavaScript array declaration with the <see cref="T:System.Web.UI.Page" /> object using an array name and array value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-421"><xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>检查是否存在与参数中指定的名称相同的已注册数组 `arrayName` ，如果是，则添加参数中指定的值 `arrayValue` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-421">The <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter.</span></span> <span data-ttu-id="80b0c-422">由于基础存储机制基于 <xref:System.Collections.ArrayList> ，因此允许重复项。</span><span class="sxs-lookup"><span data-stu-id="80b0c-422">Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed.</span></span> <span data-ttu-id="80b0c-423">如果与参数具有相同名称的已注册数组不 `arrayName` 存在，则将创建它并将参数中的值 `arrayValue` 添加到该数组。</span><span class="sxs-lookup"><span data-stu-id="80b0c-423">If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.</span></span>  
  
 <span data-ttu-id="80b0c-424">如果需要生成的 JavaScript 数组中的字符串文本，请在参数中包含单引号 ( ") 或转义双引号 (\\ " ) `arrayValue` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-424">If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\") in the `arrayValue` parameter.</span></span> <span data-ttu-id="80b0c-425">参数的值 `arrayValue` 应为单个元素。</span><span class="sxs-lookup"><span data-stu-id="80b0c-425">The value of the `arrayValue` parameter should be a single element.</span></span> <span data-ttu-id="80b0c-426">如果需要将多个值添加到数组，请使用方法进行多次调用 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-426">If more than one value needs to be added to the array, make multiple calls using the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-427">下面的代码示例演示如何使用 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> 和 <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-427">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="80b0c-428">该示例将注册一个数组和一个隐藏值，并定义 `OnClick` 一个按钮的事件， `<input>` 以计算数组的两个值和隐藏值的总和。</span><span class="sxs-lookup"><span data-stu-id="80b0c-428">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-429"><paramref name="arrayName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-429"><paramref name="arrayName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-430">向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-430">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptBlock (type As Type, key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-431">要注册的客户端脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-431">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-432">要注册的客户端脚本的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-432">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="80b0c-433">要注册的客户端脚本文本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-433">The client script literal to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-434">使用类型、键和脚本文本向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-434">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, and script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-435">客户端脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-435">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-436">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-436">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-437">只能向页面注册一个具有给定类型和密钥对的脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-437">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="80b0c-438">尝试注册已经注册的脚本不会创建脚本的副本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-438">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="80b0c-439">调用 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> 方法以确定具有给定键和类型对的客户端脚本是否已注册，并避免不必要地尝试添加脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-439">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="80b0c-440">在方法的此重载中 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> ，必须确保参数中提供的脚本 `script` 包装在 `<script>` 元素块中。</span><span class="sxs-lookup"><span data-stu-id="80b0c-440">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you must make sure that the script provided in the `script` parameter is wrapped in a `<script>` element block.</span></span>  
  
 <span data-ttu-id="80b0c-441"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法将脚本块添加到呈现的页的顶部。</span><span class="sxs-lookup"><span data-stu-id="80b0c-441">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="80b0c-442">不保证脚本块按其注册顺序输出。</span><span class="sxs-lookup"><span data-stu-id="80b0c-442">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="80b0c-443">如果脚本块的顺序很重要，则使用对象将 <xref:System.Text.StringBuilder> 脚本一起收集在单个字符串中，然后将它们全部注册到单个客户端脚本块中。</span><span class="sxs-lookup"><span data-stu-id="80b0c-443">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-444">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-444">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptBlock (type As Type, key As String, script As String, addScriptTags As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-445">要注册的客户端脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-445">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-446">要注册的客户端脚本的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-446">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="80b0c-447">要注册的客户端脚本文本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-447">The client script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="80b0c-448">指示是否添加脚本标记的布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-448">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="80b0c-449">使用类型、键、脚本文本和指示是否添加脚本标记的布尔值向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-449">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-450">客户端脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-450">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-451">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-451">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-452">只能向页面注册一个具有给定类型和密钥对的脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-452">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="80b0c-453">尝试注册已经注册的脚本不会创建脚本的副本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-453">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="80b0c-454">调用 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> 方法以确定是否已注册具有给定键和类型对的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-454">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered.</span></span> <span data-ttu-id="80b0c-455">这样可以避免不必要地尝试添加脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-455">This lets you avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="80b0c-456">在方法的此重载中 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> ，可以通过使用参数指示参数中提供的脚本是否 `script` 使用 `<script>` 元素块进行包装 `addScriptTags` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-456">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="80b0c-457">设置 `addScriptTags` 为 `true` 指示将自动添加脚本标记。</span><span class="sxs-lookup"><span data-stu-id="80b0c-457">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="80b0c-458"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法将脚本块添加到呈现的页的顶部。</span><span class="sxs-lookup"><span data-stu-id="80b0c-458">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="80b0c-459">不保证脚本块按其注册顺序输出。</span><span class="sxs-lookup"><span data-stu-id="80b0c-459">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="80b0c-460">如果脚本块的顺序很重要，则使用对象将 <xref:System.Text.StringBuilder> 脚本一起收集在单个字符串中，然后将它们全部注册到单个客户端脚本块中。</span><span class="sxs-lookup"><span data-stu-id="80b0c-460">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-461">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-461">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span> <span data-ttu-id="80b0c-462">请注意， `addScriptTags` 参数设置为， `true` 因此不会在参数中包含开始和结束脚本标记 `script` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-462">Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-463">客户端脚本块类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-463">The client script block type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-464">向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="80b0c-464">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="80b0c-465">要注册的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-465">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="80b0c-466">要注册的客户端脚本包含的 URL。</span><span class="sxs-lookup"><span data-stu-id="80b0c-466">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-467">使用让客户端能够调用脚本的键和 URL 向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-467">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a key and a URL, which enables the script to be called from the client.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-468">客户端脚本包含由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-468">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-469">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-469">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-470">只能向页面注册一个具有给定类型和密钥对的脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-470">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="80b0c-471">尝试注册已经注册的脚本不会创建脚本的副本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-471">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="80b0c-472">调用 <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> 方法以确定是否已注册了具有给定键和类型对的客户端脚本，并避免不必要地添加脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-472">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80b0c-473">若要解析客户端 URL，请使用 <xref:System.Web.UI.Control.ResolveClientUrl%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-473">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="80b0c-474">此方法使用调用它的 URL 的上下文来解析路径。</span><span class="sxs-lookup"><span data-stu-id="80b0c-474">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="80b0c-475">此 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 方法重载调用采用 `key` 、 `URL` 和参数的重载 `type` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-475">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method calls the overload that takes a `key`, a `URL`, and a `type` parameter.</span></span>  
  
 <span data-ttu-id="80b0c-476">方法在呈现的页的顶部添加一个脚本块。</span><span class="sxs-lookup"><span data-stu-id="80b0c-476">The method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-477">有关相关信息（包括语法、用法和示例），请参阅 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-477">For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (type As Type, key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-478">要注册的客户端脚本包含的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-478">The type of the client script include to register.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-479">要注册的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-479">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="80b0c-480">要注册的客户端脚本包含的 URL。</span><span class="sxs-lookup"><span data-stu-id="80b0c-480">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-481">使用类型、键和 URL 向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="80b0c-481">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-482">此方法的重载 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 采用 *键* 和 *url* 参数来标识脚本，并使用 `type` 参数来指定客户端脚本的标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-482">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method takes *key* and *url* parameters to identify the script, as well as a `type` parameter to specify the identification of the client script include.</span></span> <span data-ttu-id="80b0c-483">基于将访问资源的对象指定类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-483">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="80b0c-484">例如，在使用 `Page` 实例访问资源时，可以指定 `Page` 类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-484">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80b0c-485">若要解析客户端 URL，请使用 <xref:System.Web.UI.Control.ResolveClientUrl%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-485">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="80b0c-486">此方法使用调用它的 URL 的上下文来解析路径。</span><span class="sxs-lookup"><span data-stu-id="80b0c-486">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="80b0c-487">此方法在呈现的页的顶部添加一个脚本块。</span><span class="sxs-lookup"><span data-stu-id="80b0c-487">This method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-488">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-488">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method.</span></span> <span data-ttu-id="80b0c-489">请注意，如果删除了要检查是否存在现有客户端脚本包含的逻辑，则在呈现的页面中仍不会有重复的客户端脚本，因为方法会检查是否有 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 重复项。</span><span class="sxs-lookup"><span data-stu-id="80b0c-489">Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="80b0c-490">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="80b0c-490">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="80b0c-491">此示例需要一个名为 Script_include.js 的 JavaScript 文件，其中包含以下内容：</span><span class="sxs-lookup"><span data-stu-id="80b0c-491">This example requires a JavaScript file named Script_include.js with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-492">客户端脚本包含类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-492">The client script include type is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80b0c-493">该 URL 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-493">The URL is <see langword="null" />.</span></span>  
  
<span data-ttu-id="80b0c-494">- 或 -</span><span class="sxs-lookup"><span data-stu-id="80b0c-494">-or-</span></span> 
<span data-ttu-id="80b0c-495">URL 为空。</span><span class="sxs-lookup"><span data-stu-id="80b0c-495">The URL is empty.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptResource (type As Type, resourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptResource : Type * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptResource (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-496">要注册的客户端脚本资源的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-496">The type of the client script resource to register.</span></span></param>
        <param name="resourceName"><span data-ttu-id="80b0c-497">要注册的客户端脚本资源的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-497">The name of the client script resource to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-498">使用类型和资源名向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本资源。</span><span class="sxs-lookup"><span data-stu-id="80b0c-498">Registers the client script resource with the <see cref="T:System.Web.UI.Page" /> object using a type and a resource name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-499"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>方法用于通过 WEBRESOURCE HTTP 处理程序从程序集访问已编译的资源。</span><span class="sxs-lookup"><span data-stu-id="80b0c-499">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler.</span></span> <span data-ttu-id="80b0c-500"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>方法将脚本注册到 <xref:System.Web.UI.Page> 对象并防止出现重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-500">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method registers the script with the <xref:System.Web.UI.Page> object and prevents duplicate scripts.</span></span> <span data-ttu-id="80b0c-501">此方法使用元素块包装资源 URL 的内容 `<script>` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-501">This method wraps the contents of the resource URL with a `<script>` element block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-502">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-502">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="80b0c-503">下面的代码示例演示如何以编程方式应用 <xref:System.Web.UI.WebResourceAttribute> metadata 特性来标记将提供的资源的程序集。</span><span class="sxs-lookup"><span data-stu-id="80b0c-503">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="80b0c-504">此示例需要一个名为的 JavaScript 文件 `Script_include.js` ，其中包含以下内容：</span><span class="sxs-lookup"><span data-stu-id="80b0c-504">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 <span data-ttu-id="80b0c-505">将该 `Script_include.js` 文件编译为 `Samples.AspNet.CS.Controls` 包含类的程序集中的资源 `ClientScriptResourceLabel` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-505">Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-506">客户端资源类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-506">The client resource type is <see langword="null" />.</span></span>

<span data-ttu-id="80b0c-507">- 或 -</span><span class="sxs-lookup"><span data-stu-id="80b0c-507">-or-</span></span>

<span data-ttu-id="80b0c-508">客户端资源名称为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-508">The client resource name is <see langword="null" />.</span></span>  
  
<span data-ttu-id="80b0c-509">- 或 -</span><span class="sxs-lookup"><span data-stu-id="80b0c-509">-or-</span></span> 
<span data-ttu-id="80b0c-510">客户端资源名称长度为零。</span><span class="sxs-lookup"><span data-stu-id="80b0c-510">The client resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-511">将名称/值对注册为指定控件的自定义 (expando) 特性。</span><span class="sxs-lookup"><span data-stu-id="80b0c-511">Registers a name/value pair as a custom (expando) attribute of the specified control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="80b0c-512">页中包含自定义特性的 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-512">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="80b0c-513">要注册的自定义特性的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-513">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="80b0c-514">自定义特性的值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-514">The value of the custom attribute.</span></span></param>
        <summary><span data-ttu-id="80b0c-515">将名称/值对注册为给定了控件 ID、特性名和特性值的指定控件的自定义 (expando) 特性。</span><span class="sxs-lookup"><span data-stu-id="80b0c-515">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-516"><xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>方法将名称/值对注册为指定的自定义 (expando) 特性 <xref:System.Web.UI.Control> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-516">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="80b0c-517">Expando 特性是从 JavaScript 动态设置的，以保留呈现控件标记的 XHTML 兼容性。</span><span class="sxs-lookup"><span data-stu-id="80b0c-517">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="80b0c-518">自定义 (expando 中的引号和反斜杠) 属性值被转义。</span><span class="sxs-lookup"><span data-stu-id="80b0c-518">Quotes and backslashes in the custom (expando) attribute's values are escaped.</span></span> <span data-ttu-id="80b0c-519">如果不想对引号和反斜杠进行转义，请调用 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> 重载方法，并将 `encode` 参数设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-519">If you do not want to escape quotes and backslashes, call the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload method and set the `encode` parameter to `false`.</span></span>  
  
 <span data-ttu-id="80b0c-520">如果找不到 expando 特性或未找到将 expando 特性添加到的控件，则仍将发出客户端脚本，但它不会影响控件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-520">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="80b0c-521">页中包含自定义特性的 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-521">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="80b0c-522">要注册的自定义特性的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-522">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="80b0c-523">自定义特性的值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-523">The value of the custom attribute.</span></span></param>
        <param name="encode"><span data-ttu-id="80b0c-524">指示是否对要注册的自定义特性进行编码布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-524">A Boolean value indicating whether to encode the custom attribute to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-525">在给定了控件 ID、特性名称、特性值以及指示是否对特性值进行编码的布尔值的情况下，将名称/值对注册为指定控件的自定义 (expando) 特性。</span><span class="sxs-lookup"><span data-stu-id="80b0c-525">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-526"><xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>方法将名称/值对注册为指定的自定义 (expando) 特性 <xref:System.Web.UI.Control> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-526">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="80b0c-527">Expando 特性是从 JavaScript 动态设置的，以保留呈现控件标记的 XHTML 兼容性。</span><span class="sxs-lookup"><span data-stu-id="80b0c-527">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="80b0c-528">`encode` `true` 如果需要对 expando 特性的值中的引号和反斜杠进行转义，请将参数设置为。</span><span class="sxs-lookup"><span data-stu-id="80b0c-528">Set the `encode` parameter to `true` if you need to escape quotes and backslashes in your expando attribute's value.</span></span>  
  
 <span data-ttu-id="80b0c-529">如果找不到 expando 特性或未找到将 expando 特性添加到的控件，则仍将发出客户端脚本，但它不会影响控件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-529">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-530">下面的代码示例演示如何使用类的 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> 方法 <xref:System.Web.UI.ClientScriptManager> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-530">The following code example demonstrates how to use the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="80b0c-531">呈现的页中的客户端脚本设置 `title` 元素的属性 `<span>` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-531">The client script in the rendered page sets the `title` attribute of a `<span>` element.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-532">为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-532">Registers an event reference for validation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="80b0c-533">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="80b0c-533">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="80b0c-534">使用唯一控件 ID（表示生成事件的客户端控件）注册事件引用以进行验证。</span><span class="sxs-lookup"><span data-stu-id="80b0c-534">Registers an event reference for validation with a unique control ID representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-535">有关详细信息和示例，请参阅 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-535">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-536">下面的示例演示如何使用 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 方法和 <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> 方法来注册用于验证的回调，以及如何验证回调是否源自该页。</span><span class="sxs-lookup"><span data-stu-id="80b0c-536">The following example shows how to use the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : System.Web.UI.PostBackOptions -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="80b0c-537"><see cref="T:System.Web.UI.PostBackOptions" /> 对象指定生成客户端 JavaScript 以启动回发事件的方式。</span><span class="sxs-lookup"><span data-stu-id="80b0c-537">A <see cref="T:System.Web.UI.PostBackOptions" /> object that specifies how client JavaScript is generated to initiate a postback event.</span></span></param>
        <summary><span data-ttu-id="80b0c-538">通过 <see cref="T:System.Web.UI.PostBackOptions" /> 为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="80b0c-538">Registers an event reference for validation with <see cref="T:System.Web.UI.PostBackOptions" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-539">有关详细信息和示例，请参阅 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-539">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string * string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="80b0c-540">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="80b0c-540">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-541">随客户端事件传递的事件参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-541">Event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="80b0c-542">使用唯一控件 ID 和事件参数（表示生成事件的客户端控件）注册事件引用以进行验证。</span><span class="sxs-lookup"><span data-stu-id="80b0c-542">Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="80b0c-543">下面的代码示例演示如何使用 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 方法和 <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> 方法来注册验证回调，并验证回调是否源自该页。</span><span class="sxs-lookup"><span data-stu-id="80b0c-543">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="80b0c-544">若要改善示例中所示的验证，可以修改验证 `argument` 参数，使其包含特定于用户的信息，例如标识或角色</span><span class="sxs-lookup"><span data-stu-id="80b0c-544">To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 <span data-ttu-id="80b0c-545">下面的代码示例演示如何使用 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 方法注册用于验证的回调。</span><span class="sxs-lookup"><span data-stu-id="80b0c-545">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method to register a callback for validation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="80b0c-546">在调用 <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> 方法之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-546">The method is called prior to the <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> method.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/18fc94c9-56fc-46c3-9f29-7358f18667df"><span data-ttu-id="80b0c-547">具有验证实现示例的客户端回调</span><span class="sxs-lookup"><span data-stu-id="80b0c-547">Client Callback with Validation Implementation Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterHiddenField : string * string -&gt; unit" Usage="clientScriptManager.RegisterHiddenField (hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName"><span data-ttu-id="80b0c-548">要注册的隐藏字段的名称。</span><span class="sxs-lookup"><span data-stu-id="80b0c-548">The name of the hidden field to register.</span></span></param>
        <param name="hiddenFieldInitialValue"><span data-ttu-id="80b0c-549">要注册的字段的初始值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-549">The initial value of the field to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-550">向 <see cref="T:System.Web.UI.Page" /> 对象注册一个隐藏值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-550">Registers a hidden value with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-551"><xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>方法在 `<input>` 呈现的 HTML 页上创建一个隐藏的元素。</span><span class="sxs-lookup"><span data-stu-id="80b0c-551">The <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> method creates a hidden `<input>` element on the rendered HTML page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-552">下面的代码示例演示如何使用 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> 和 <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-552">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="80b0c-553">该示例将注册一个数组和一个隐藏值，并定义 `OnClick` 一个按钮的事件， `<input>` 以计算数组的两个值和隐藏值的总和。</span><span class="sxs-lookup"><span data-stu-id="80b0c-553">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-554"><paramref name="hiddenFieldName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-554"><paramref name="hiddenFieldName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterOnSubmitStatement (type As Type, key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterOnSubmitStatement : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterOnSubmitStatement (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-555">要注册的 OnSubmit 语句的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-555">The type of the OnSubmit statement to register.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-556">要注册的 OnSubmit 语句的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-556">The key of the OnSubmit statement to register.</span></span></param>
        <param name="script"><span data-ttu-id="80b0c-557">要注册的 OnSubmit 语句的脚本文本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-557">The script literal of the OnSubmit statement to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-558">使用类型、键和脚本文本向 <see cref="T:System.Web.UI.Page" /> 对象注册 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="80b0c-558">Registers an OnSubmit statement with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span> <span data-ttu-id="80b0c-559">该语句在提交 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 时执行。</span><span class="sxs-lookup"><span data-stu-id="80b0c-559">The statement executes when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> is submitted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-560">OnSubmit 语句由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-560">An OnSubmit statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-561">具有相同键和类型的语句被认为是重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-561">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-562">只能向页面注册一个具有给定类型和密钥对的语句。</span><span class="sxs-lookup"><span data-stu-id="80b0c-562">Only one statement with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="80b0c-563">尝试注册已注册的语句不会创建语句的副本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-563">Attempting to register a statement that is already registered will not create a duplicate of the statement.</span></span>  
  
 <span data-ttu-id="80b0c-564">调用 <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> 方法以确定是否已使用给定的键和类型对注册了 OnSubmit 语句，并避免了不必要地尝试添加脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-564">Call the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="80b0c-565">`script`方法的参数 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> 可包含多个脚本命令，只要它们使用分号分隔 (; ) 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-565">The `script` parameter of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method can contain multiple script commands as long as they are properly delimited with a semicolon (;).</span></span>  
  
 <span data-ttu-id="80b0c-566"><xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>添加一个在提交页面之前执行的脚本，并提供取消提交的机会。</span><span class="sxs-lookup"><span data-stu-id="80b0c-566">The <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.</span></span>  
  
 <span data-ttu-id="80b0c-567">有关 HTML 窗体和属性的详细信息 `OnSubmit` ，请参阅 [W3C) 网站 (万维网联合会](https://go.microsoft.com/fwlink/?linkid=37125)。</span><span class="sxs-lookup"><span data-stu-id="80b0c-567">For more information on HTML forms and the `OnSubmit` attribute, see the [World Wide Web Consortium (W3C) Web site](https://go.microsoft.com/fwlink/?linkid=37125).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-568">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-568">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-569"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-569"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-570">向 <see cref="T:System.Web.UI.Page" /> 对象注册启动脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-570">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterStartupScript (type As Type, key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-571">要注册的启动脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-571">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-572">要注册的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-572">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="80b0c-573">要注册的启动脚本文本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-573">The startup script literal to register.</span></span></param>
        <summary><span data-ttu-id="80b0c-574">使用类型、键和脚本文本向 <see cref="T:System.Web.UI.Page" /> 对象注册启动脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-574">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-575">客户端脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-575">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-576">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-576">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-577">只能向页面注册一个具有给定类型和密钥对的脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-577">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="80b0c-578">尝试注册已经注册的脚本不会创建脚本的副本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-578">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="80b0c-579">调用 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> 方法以确定具有给定键和类型对的启动脚本是否已注册，并避免不必要地尝试添加脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-579">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="80b0c-580">在方法的此重载中 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> ，必须确保参数中提供的脚本 `script` 使用 `<script>` 元素块进行包装。</span><span class="sxs-lookup"><span data-stu-id="80b0c-580">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you must make sure that the script provided in the `script` parameter is wrapped with a `<script>` element block.</span></span>  
  
 <span data-ttu-id="80b0c-581"><xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>当页面完成加载但在引发页面事件之前，将执行方法添加的脚本块 <xref:System.Web.UI.Control.OnLoad%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-581">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="80b0c-582">不保证脚本块按其注册顺序输出。</span><span class="sxs-lookup"><span data-stu-id="80b0c-582">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="80b0c-583">如果脚本块的顺序很重要，则使用对象将 <xref:System.Text.StringBuilder> 脚本一起收集在单个字符串中，然后将它们全部注册到单个客户端脚本块中。</span><span class="sxs-lookup"><span data-stu-id="80b0c-583">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-584">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-584">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="80b0c-585">请注意，开始和结束脚本标记包含在参数中 `script` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-585">Note that the beginning and closing script tags are included within the `script` parameter.</span></span> <span data-ttu-id="80b0c-586">若要根据其他参数设置添加脚本标记，请参阅 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="80b0c-586">To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterStartupScript (type As Type, key As String, script As String, addScriptTags As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="80b0c-587">要注册的启动脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="80b0c-587">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="80b0c-588">要注册的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="80b0c-588">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="80b0c-589">要注册的启动脚本文本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-589">The startup script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="80b0c-590">指示是否添加脚本标记的布尔值。</span><span class="sxs-lookup"><span data-stu-id="80b0c-590">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="80b0c-591">使用类型、键、脚本文本和指示是否添加脚本标记的布尔值向 <see cref="T:System.Web.UI.Page" /> 对象注册启动脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-591">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80b0c-592">启动脚本由其键和类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="80b0c-592">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="80b0c-593">具有相同键和类型的脚本被视为重复的。</span><span class="sxs-lookup"><span data-stu-id="80b0c-593">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="80b0c-594">只能向页面注册一个具有给定类型和密钥对的脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-594">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="80b0c-595">尝试注册已经注册的脚本不会创建脚本的副本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-595">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="80b0c-596">调用 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> 方法以确定具有给定键和类型对的启动脚本是否已注册，并避免不必要地尝试添加脚本。</span><span class="sxs-lookup"><span data-stu-id="80b0c-596">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="80b0c-597">在方法的此重载中 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> ，可以通过使用参数指示参数中提供的脚本是否 `script` 使用 `<script>` 元素块进行包装 `addScriptTags` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-597">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="80b0c-598">设置 `addScriptTags` 为 `true` 指示将自动添加脚本标记。</span><span class="sxs-lookup"><span data-stu-id="80b0c-598">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="80b0c-599"><xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>当页面完成加载但在引发页面事件之前，将执行方法添加的脚本块 <xref:System.Web.UI.Control.OnLoad%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-599">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="80b0c-600">不保证脚本块按其注册顺序输出。</span><span class="sxs-lookup"><span data-stu-id="80b0c-600">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="80b0c-601">如果脚本块的顺序很重要，则使用对象将 <xref:System.Text.StringBuilder> 脚本一起收集在单个字符串中，然后将它们全部注册到单个客户端脚本块中。</span><span class="sxs-lookup"><span data-stu-id="80b0c-601">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80b0c-602">下面的代码示例演示方法的用法 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-602">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="80b0c-603">请注意， `addScriptTags` 参数设置为， `false` 因此将在参数中包含开始和结束脚本标记 `script` 。</span><span class="sxs-lookup"><span data-stu-id="80b0c-603">Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80b0c-604"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="80b0c-604"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80b0c-605">验证客户端事件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-605">Validates a client event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string -&gt; unit" Usage="clientScriptManager.ValidateEvent uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="80b0c-606">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="80b0c-606">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="80b0c-607">验证使用 <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> 方法为事件验证注册的客户端事件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-607">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string * string -&gt; unit" Usage="clientScriptManager.ValidateEvent (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="80b0c-608">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="80b0c-608">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="80b0c-609">随客户端事件传递的事件参数。</span><span class="sxs-lookup"><span data-stu-id="80b0c-609">The event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="80b0c-610">验证使用 <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> 方法为事件验证注册的客户端事件。</span><span class="sxs-lookup"><span data-stu-id="80b0c-610">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="80b0c-611">下面的代码示例演示如何使用 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 方法和 <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> 方法来注册验证回调，并验证回调是否源自该页。</span><span class="sxs-lookup"><span data-stu-id="80b0c-611">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="80b0c-612">若要改善此处显示的验证，可以修改验证 `argument` 参数，使其包含特定于用户的信息，例如标识或角色</span><span class="sxs-lookup"><span data-stu-id="80b0c-612">To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80b0c-613"><paramref name="uniqueId" /> 为 <see langword="null" /> 或空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="80b0c-613"><paramref name="uniqueId" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
