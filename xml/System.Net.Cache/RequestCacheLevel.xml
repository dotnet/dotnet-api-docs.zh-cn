<Type Name="RequestCacheLevel" FullName="System.Net.Cache.RequestCacheLevel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="09d928a7c4818ac7098f1a9b22b61739e2496761" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83946718" /></Metadata><TypeSignature Language="C#" Value="public enum RequestCacheLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RequestCacheLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Net.Cache.RequestCacheLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum RequestCacheLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class RequestCacheLevel" />
  <TypeSignature Language="F#" Value="type RequestCacheLevel = " />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="50bf8-101">为使用 <see cref="T:System.Net.WebRequest" /> 及其派生类获取的资源指定缓存行为。</span><span class="sxs-lookup"><span data-stu-id="50bf8-101">Specifies caching behavior for resources obtained using <see cref="T:System.Net.WebRequest" /> and its derived classes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50bf8-102">此枚举的成员用于初始化 <xref:System.Net.Cache.RequestCachePolicy> 对象。</span><span class="sxs-lookup"><span data-stu-id="50bf8-102">Members of this enumeration are used to initialize <xref:System.Net.Cache.RequestCachePolicy> objects.</span></span> <span data-ttu-id="50bf8-103">对象的当前设置 <xref:System.Net.Cache.RequestCachePolicy> 在属性中可用 <xref:System.Net.Cache.HttpRequestCachePolicy.Level%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="50bf8-103">The current setting for a <xref:System.Net.Cache.RequestCachePolicy> object is available in the <xref:System.Net.Cache.HttpRequestCachePolicy.Level%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="50bf8-104">此 <xref:System.Net.Cache.HttpRequestCacheLevel.BypassCache> 值是 .NET Framework 附带的计算机配置文件中指定的默认缓存行为。</span><span class="sxs-lookup"><span data-stu-id="50bf8-104">This <xref:System.Net.Cache.HttpRequestCacheLevel.BypassCache> value is the default cache behavior specified in the machine configuration file that ships with the .NET Framework.</span></span> <span data-ttu-id="50bf8-105">在客户端和服务器之间没有项从缓存中取出、添加到缓存中或从缓存中移除。</span><span class="sxs-lookup"><span data-stu-id="50bf8-105">No entries are taken from caches, added to caches, or removed from caches between the client and server.</span></span>  
  
 <span data-ttu-id="50bf8-106"><xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A?displayProperty=nameWithType>属性用于获取或设置实例的默认缓存策略 <xref:System.Net.HttpWebRequest> 。</span><span class="sxs-lookup"><span data-stu-id="50bf8-106">The <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A?displayProperty=nameWithType> property is used to get or set the default cache policy for <xref:System.Net.HttpWebRequest> instances.</span></span> <span data-ttu-id="50bf8-107"><xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=nameWithType>属性用于获取或设置实例的默认缓存策略 <xref:System.Net.WebRequest> 。</span><span class="sxs-lookup"><span data-stu-id="50bf8-107">The <xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=nameWithType> property is used to get or set the default cache policy for a <xref:System.Net.WebRequest> instances.</span></span> <span data-ttu-id="50bf8-108"><xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=nameWithType>属性用于获取或设置特定请求的缓存策略。</span><span class="sxs-lookup"><span data-stu-id="50bf8-108">The <xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=nameWithType> property is used to get or set the cache policy for a specific request.</span></span>  

<span data-ttu-id="50bf8-109">如果缓存行为为 `CacheIfAvailable` 或，则在 `Revalidate` 检索到资源的响应流并将其读取到流的末尾时，仅将请求的资源的副本添加到缓存中。</span><span class="sxs-lookup"><span data-stu-id="50bf8-109">If the cache behavior is `CacheIfAvailable` or `Revalidate`, a copy of a requested resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream.</span></span> <span data-ttu-id="50bf8-110">对于 `CacheIfAvailable` ，对同一资源的后续请求将使用缓存的副本。</span><span class="sxs-lookup"><span data-stu-id="50bf8-110">With `CacheIfAvailable`, subsequent requests for the same resource would use a cached copy.</span></span> <span data-ttu-id="50bf8-111">对于 `Revalidate` ，如果缓存资源的时间戳与服务器上资源的时间戳相同，则对相同资源的后续请求将使用缓存的副本。</span><span class="sxs-lookup"><span data-stu-id="50bf8-111">With `Revalidate`, subsequent requests for the same resource would use a cached copy if the timestamp for the cached resource is the same as the timestamp of the resource on the server.</span></span>  

<span data-ttu-id="50bf8-112">如果资源的响应流已检索并读取到流的末尾，则仅将资源的副本添加到缓存中。</span><span class="sxs-lookup"><span data-stu-id="50bf8-112">A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream.</span></span> <span data-ttu-id="50bf8-113">因此，对同一资源的另一请求可能会使用缓存的副本，具体取决于此请求的默认缓存策略级别。</span><span class="sxs-lookup"><span data-stu-id="50bf8-113">So another request for the same resource could use a cached copy, depending on the default cache policy level for this request.</span></span>   
  
## Examples  
 <span data-ttu-id="50bf8-114">下面的代码示例创建一个策略，该策略仅在缓存中返回资源。</span><span class="sxs-lookup"><span data-stu-id="50bf8-114">The following code example creates policy that returns a resource only if it is in the cache.</span></span>  
  
 [!code-cpp[NclSimpleCache#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSimpleCache/CPP/NCLSimpleCache.cpp#13)]
 [!code-csharp[NclSimpleCache#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSimpleCache/CS/example.cs#13)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Net.HttpWebRequest.DefaultCachePolicy" />
    <altmember cref="P:System.Net.WebRequest.CachePolicy" />
    <related type="Article" href="/dotnet/framework/network-programming/cache-management-for-network-applications"><span data-ttu-id="50bf8-115">网络应用程序的缓存管理</span><span class="sxs-lookup"><span data-stu-id="50bf8-115">Cache Management for Network Applications</span></span></related>
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/network/requestcaching-element-network-settings"><span data-ttu-id="50bf8-116">RequestCaching 元素（网络设置）</span><span class="sxs-lookup"><span data-stu-id="50bf8-116">RequestCaching Element (Network Settings)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="BypassCache">
      <MemberSignature Language="C#" Value="BypassCache" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Cache.RequestCacheLevel BypassCache = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Cache.RequestCacheLevel.BypassCache" />
      <MemberSignature Language="VB.NET" Value="BypassCache" />
      <MemberSignature Language="C++ CLI" Value="BypassCache" />
      <MemberSignature Language="F#" Value="BypassCache = 1" Usage="System.Net.Cache.RequestCacheLevel.BypassCache" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCacheLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="50bf8-117">使用服务器满足请求。</span><span class="sxs-lookup"><span data-stu-id="50bf8-117">Satisfies a request by using the server.</span></span> <span data-ttu-id="50bf8-118">在客户端和服务器之间没有项从缓存中取出、添加到缓存中或从缓存中移除。</span><span class="sxs-lookup"><span data-stu-id="50bf8-118">No entries are taken from caches, added to caches, or removed from caches between the client and server.</span></span> <span data-ttu-id="50bf8-119">这是 .NET Framework 附带的计算机配置文件中指定的默认缓存行为。</span><span class="sxs-lookup"><span data-stu-id="50bf8-119">This is the default cache behavior specified in the machine configuration file that ships with the .NET Framework.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="CacheIfAvailable">
      <MemberSignature Language="C#" Value="CacheIfAvailable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Cache.RequestCacheLevel CacheIfAvailable = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Cache.RequestCacheLevel.CacheIfAvailable" />
      <MemberSignature Language="VB.NET" Value="CacheIfAvailable" />
      <MemberSignature Language="C++ CLI" Value="CacheIfAvailable" />
      <MemberSignature Language="F#" Value="CacheIfAvailable = 3" Usage="System.Net.Cache.RequestCacheLevel.CacheIfAvailable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCacheLevel</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="50bf8-120">如果资源可用，则从缓存满足资源请求；否则，将资源请求发送到服务器。</span><span class="sxs-lookup"><span data-stu-id="50bf8-120">Satisfies a request for a resource from the cache, if the resource is available; otherwise, sends a request for a resource to the server.</span></span> <span data-ttu-id="50bf8-121">如果请求的项在客户端和服务器之间的任何缓存中可用，则可由中间缓存满足请求。</span><span class="sxs-lookup"><span data-stu-id="50bf8-121">If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheOnly">
      <MemberSignature Language="C#" Value="CacheOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Cache.RequestCacheLevel CacheOnly = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Cache.RequestCacheLevel.CacheOnly" />
      <MemberSignature Language="VB.NET" Value="CacheOnly" />
      <MemberSignature Language="C++ CLI" Value="CacheOnly" />
      <MemberSignature Language="F#" Value="CacheOnly = 2" Usage="System.Net.Cache.RequestCacheLevel.CacheOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCacheLevel</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="50bf8-122">使用本地缓存资源满足请求；不发送对不在缓存中的项的请求。</span><span class="sxs-lookup"><span data-stu-id="50bf8-122">Satisfies a request using the locally cached resource; does not send a request for an item that is not in the cache.</span></span> <span data-ttu-id="50bf8-123">当指定此缓存策略级别时，如果项不在客户端缓存中，则引发 <see cref="T:System.Net.WebException" /> 异常。</span><span class="sxs-lookup"><span data-stu-id="50bf8-123">When this cache policy level is specified, a <see cref="T:System.Net.WebException" /> exception is thrown if the item is not in the client cache.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Cache.RequestCacheLevel Default = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Cache.RequestCacheLevel.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberSignature Language="F#" Value="Default = 0" Usage="System.Net.Cache.RequestCacheLevel.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCacheLevel</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="50bf8-124">通过使用资源的缓存副本或通过将资源请求发送到服务器来满足资源请求。</span><span class="sxs-lookup"><span data-stu-id="50bf8-124">Satisfies a request for a resource either by using the cached copy of the resource or by sending a request for the resource to the server.</span></span> <span data-ttu-id="50bf8-125">采取的操作取决于当前的缓存策略和缓存内容的生存期。</span><span class="sxs-lookup"><span data-stu-id="50bf8-125">The action taken is determined by the current cache policy and the age of the content in the cache.</span></span> <span data-ttu-id="50bf8-126">这是大多数应用程序应使用的缓存级别。</span><span class="sxs-lookup"><span data-stu-id="50bf8-126">This is the cache level that should be used by most applications.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="NoCacheNoStore">
      <MemberSignature Language="C#" Value="NoCacheNoStore" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Cache.RequestCacheLevel NoCacheNoStore = int32(6)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Cache.RequestCacheLevel.NoCacheNoStore" />
      <MemberSignature Language="VB.NET" Value="NoCacheNoStore" />
      <MemberSignature Language="C++ CLI" Value="NoCacheNoStore" />
      <MemberSignature Language="F#" Value="NoCacheNoStore = 6" Usage="System.Net.Cache.RequestCacheLevel.NoCacheNoStore" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCacheLevel</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary><span data-ttu-id="50bf8-127">从不通过使用缓存中的资源来满足请求，也不缓存资源。</span><span class="sxs-lookup"><span data-stu-id="50bf8-127">Never satisfies a request by using resources from the cache and does not cache resources.</span></span> <span data-ttu-id="50bf8-128">如果资源在本地缓存中，则会移除该资源。</span><span class="sxs-lookup"><span data-stu-id="50bf8-128">If the resource is present in the local cache, it is removed.</span></span> <span data-ttu-id="50bf8-129">此策略级别指示中间缓存应移除资源。</span><span class="sxs-lookup"><span data-stu-id="50bf8-129">This policy level indicates to intermediate caches that they should remove the resource.</span></span> <span data-ttu-id="50bf8-130">在 HTTP 缓存协议中，这是通过 <see langword="no-cache" /> 缓存控制指令实现的。</span><span class="sxs-lookup"><span data-stu-id="50bf8-130">In the HTTP caching protocol, this is achieved using the <see langword="no-cache" /> cache control directive.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="Reload" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Cache.RequestCacheLevel Reload = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Cache.RequestCacheLevel.Reload" />
      <MemberSignature Language="VB.NET" Value="Reload" />
      <MemberSignature Language="C++ CLI" Value="Reload" />
      <MemberSignature Language="F#" Value="Reload = 5" Usage="System.Net.Cache.RequestCacheLevel.Reload" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCacheLevel</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary><span data-ttu-id="50bf8-131">使用服务器满足请求。</span><span class="sxs-lookup"><span data-stu-id="50bf8-131">Satisfies a request by using the server.</span></span> <span data-ttu-id="50bf8-132">响应可能保存在缓存中。</span><span class="sxs-lookup"><span data-stu-id="50bf8-132">The response might be saved in the cache.</span></span> <span data-ttu-id="50bf8-133">在 HTTP 缓存协议中，这是通过 <see langword="no-cache" /> 缓存控制指令和 no-cache <see langword="Pragma" /> 标头实现的。</span><span class="sxs-lookup"><span data-stu-id="50bf8-133">In the HTTP caching protocol, this is achieved using the <see langword="no-cache" /> cache control directive and the no-cache <see langword="Pragma" /> header.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Revalidate">
      <MemberSignature Language="C#" Value="Revalidate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Cache.RequestCacheLevel Revalidate = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Cache.RequestCacheLevel.Revalidate" />
      <MemberSignature Language="VB.NET" Value="Revalidate" />
      <MemberSignature Language="C++ CLI" Value="Revalidate" />
      <MemberSignature Language="F#" Value="Revalidate = 4" Usage="System.Net.Cache.RequestCacheLevel.Revalidate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCacheLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="50bf8-134">如果时间戳与服务器上的资源的时间戳相同，则使用资源的缓存副本满足请求；否则从服务器下载资源，将资源展示给调用方，然后再存储在缓存中。</span><span class="sxs-lookup"><span data-stu-id="50bf8-134">Satisfies a request by using the cached copy of the resource if the timestamp is the same as the timestamp of the resource on the server; otherwise, the resource is downloaded from the server, presented to the caller, and stored in the cache.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
