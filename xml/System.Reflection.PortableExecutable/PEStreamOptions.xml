<Type Name="PEStreamOptions" FullName="System.Reflection.PortableExecutable.PEStreamOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a2e4ca6b271cac5d67d32564cc322aed753b1208" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86789870" /></Metadata><TypeSignature Language="C#" Value="public enum PEStreamOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PEStreamOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEStreamOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum PEStreamOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class PEStreamOptions" />
  <TypeSignature Language="F#" Value="type PEStreamOptions = " />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Flags]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Flags&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c57ad-101">提供指定如何从流中读取 PE 映像各部分的选项。</span><span class="sxs-lookup"><span data-stu-id="c57ad-101">Provides options that specify how sections of a PE image are read from a stream.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.PortableExecutable.PEStreamOptions Default = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.PortableExecutable.PEStreamOptions.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberSignature Language="F#" Value="Default = 0" Usage="System.Reflection.PortableExecutable.PEStreamOptions.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEStreamOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c57ad-102">默认情况下，释放 <see cref="T:System.Reflection.PortableExecutable.PEReader" /> 并且延迟读取 PE 映像的各部分时，系统才会释放该流。</span><span class="sxs-lookup"><span data-stu-id="c57ad-102">By default, the stream is disposed when the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> is disposed, and sections of the PE image are read lazily.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="IsLoadedImage" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.PortableExecutable.PEStreamOptions IsLoadedImage = int32(8)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.PortableExecutable.PEStreamOptions.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="IsLoadedImage" />
      <MemberSignature Language="C++ CLI" Value="IsLoadedImage" />
      <MemberSignature Language="F#" Value="IsLoadedImage = 8" Usage="System.Reflection.PortableExecutable.PEStreamOptions.IsLoadedImage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEStreamOptions</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c57ad-103">指示基础 PE 映像已由 OS 加载程序加载到内存中。</span><span class="sxs-lookup"><span data-stu-id="c57ad-103">Indicates that the underlying PE image has been loaded into memory by the OS loader.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaveOpen">
      <MemberSignature Language="C#" Value="LeaveOpen" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.PortableExecutable.PEStreamOptions LeaveOpen = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" />
      <MemberSignature Language="VB.NET" Value="LeaveOpen" />
      <MemberSignature Language="C++ CLI" Value="LeaveOpen" />
      <MemberSignature Language="F#" Value="LeaveOpen = 1" Usage="System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEStreamOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c57ad-104">在释放 <see cref="T:System.Reflection.PortableExecutable.PEReader" /> 时将流保持为开放状态。</span><span class="sxs-lookup"><span data-stu-id="c57ad-104">Keeps the stream open when the <see cref="T:System.Reflection.PortableExecutable.PEReader" /> is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefetchEntireImage">
      <MemberSignature Language="C#" Value="PrefetchEntireImage" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.PortableExecutable.PEStreamOptions PrefetchEntireImage = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage" />
      <MemberSignature Language="VB.NET" Value="PrefetchEntireImage" />
      <MemberSignature Language="C++ CLI" Value="PrefetchEntireImage" />
      <MemberSignature Language="F#" Value="PrefetchEntireImage = 4" Usage="System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEStreamOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c57ad-105">立即将整个映像读入内存中。</span><span class="sxs-lookup"><span data-stu-id="c57ad-105">Reads the entire image into memory right away.</span></span> <span data-ttu-id="c57ad-106">除非指定了 <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" />，否则 <see cref="T:System.Reflection.PortableExecutable.PEReader" /> 会在构造函数返回时自动关闭流。</span><span class="sxs-lookup"><span data-stu-id="c57ad-106"><see cref="T:System.Reflection.PortableExecutable.PEReader" /> closes the stream automatically by the time the constructor returns unless <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" /> is specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c57ad-107">除非指定了 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen>，否则 <xref:System.Reflection.PortableExecutable.PEReader> 会在构造函数返回时自动关闭流。</span><span class="sxs-lookup"><span data-stu-id="c57ad-107"><xref:System.Reflection.PortableExecutable.PEReader> closes the stream automatically by the time the constructor returns unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen> is specified.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefetchMetadata">
      <MemberSignature Language="C#" Value="PrefetchMetadata" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.PortableExecutable.PEStreamOptions PrefetchMetadata = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" />
      <MemberSignature Language="VB.NET" Value="PrefetchMetadata" />
      <MemberSignature Language="C++ CLI" Value="PrefetchMetadata" />
      <MemberSignature Language="F#" Value="PrefetchMetadata = 2" Usage="System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEStreamOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><para><span data-ttu-id="c57ad-108">立即将元数据部分读入内存中。</span><span class="sxs-lookup"><span data-stu-id="c57ad-108">Reads the metadata section into memory right away.</span></span></para>
          <para><span data-ttu-id="c57ad-109">不允许从文件的其他部分进行读取（<see cref="T:System.InvalidOperationException" /> 由 <see cref="T:System.Reflection.PortableExecutable.PEReader" /> 引发）。</span><span class="sxs-lookup"><span data-stu-id="c57ad-109">Reading from other sections of the file is not allowed (<see cref="T:System.InvalidOperationException" /> is thrown by the <see cref="T:System.Reflection.PortableExecutable.PEReader" />).</span></span></para>
          <para><span data-ttu-id="c57ad-110">除非指定了 <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" />，否则 
            <see cref="T:System.Reflection.PortableExecutable.PEReader" /> 会在构造函数返回时自动关闭流。</span><span class="sxs-lookup"><span data-stu-id="c57ad-110">
            <see cref="T:System.Reflection.PortableExecutable.PEReader" /> closes the stream automatically by the time the constructor returns unless <see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen" /> is specified.</span></span> <span data-ttu-id="c57ad-111">构造 <see cref="T:System.Reflection.PortableExecutable.PEReader" /> 之后，基础文件可能会关闭，甚至被删除。</span><span class="sxs-lookup"><span data-stu-id="c57ad-111">The underlying file may be closed and even deleted after <see cref="T:System.Reflection.PortableExecutable.PEReader" /> is constructed.</span></span></para></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c57ad-112">不允许从文件的其他部分进行读取（<xref:System.InvalidOperationException> 由 <xref:System.Reflection.PortableExecutable.PEReader> 引发）。</span><span class="sxs-lookup"><span data-stu-id="c57ad-112">Reading from other sections of the file is not allowed (<xref:System.InvalidOperationException> is thrown by the <xref:System.Reflection.PortableExecutable.PEReader>).</span></span>
<span data-ttu-id="c57ad-113">构造 <xref:System.Reflection.PortableExecutable.PEReader> 之后，基础文件可能会关闭，甚至被删除。</span><span class="sxs-lookup"><span data-stu-id="c57ad-113">The underlying file may be closed and even deleted after <xref:System.Reflection.PortableExecutable.PEReader> is constructed.</span></span>
 
 <span data-ttu-id="c57ad-114">除非指定了 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen>，否则 <xref:System.Reflection.PortableExecutable.PEReader> 会在构造函数返回时自动关闭流。</span><span class="sxs-lookup"><span data-stu-id="c57ad-114"><xref:System.Reflection.PortableExecutable.PEReader> closes the stream automatically by the time the constructor returns unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen> is specified.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
