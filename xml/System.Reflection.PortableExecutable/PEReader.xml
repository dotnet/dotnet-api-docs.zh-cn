<Type Name="PEReader" FullName="System.Reflection.PortableExecutable.PEReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e62ad8062063b2d2b4e923c257f22ee8bda9fced" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100296753" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEReader sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type PEReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供可移植可执行格式 (PE) 文件的读取器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

实现是线程安全的。 也就是说，多个线程可以并行从读取器读取数据。 读取器的处理不是线程安全的 (请参阅 <xref:System.Reflection.PortableExecutable.PEReader.Dispose>) 。

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.Collections.Immutable.ImmutableArray&lt;byte&gt; peImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; peImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peImage As ImmutableArray(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; peImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="peImage">表示 PE 映像的不可变字节数组。</param>
        <summary>通过存储在字节数组中的 PE 映像创建可移植可执行文件读取器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

在构造过程中，不会读取图像的内容 <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImage" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream">PE 映像流。</param>
        <summary>通过存储在流中的 PE 映像创建可移植可执行文件读取器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Reflection.PortableExecutable.PEReader>成功验证构造函数参数后，流的所有权会传输到。 它将由释放 <xref:System.Reflection.PortableExecutable.PEReader> ，并且调用方不能对其进行操作。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peStream" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peImage">指向 PE 映像开头的指针。</param>
        <param name="size">PE 映像的大小。</param>
        <summary>通过存储在内存中的 PE 映像创建可移植可执行文件读取器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

内存由调用方拥有，不会在释放时释放 <xref:System.Reflection.PortableExecutable.PEReader> 。 调用方负责使内存保持活动状态，并在整个生存期内不进行修改 <xref:System.Reflection.PortableExecutable.PEReader> 。


在构造过程中，不会读取图像的内容 <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImage" /> 为 <see cref="F:System.IntPtr.Zero" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> 为负数。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
      </Parameters>
      <Docs>
        <param name="peStream">PE 映像流。</param>
        <param name="options">用于指定如何从流中读取 PE 映像各部分的选项。</param>
        <summary>通过存储在流中的 PE 映像创建可移植可执行文件读取器，从其当前位置开始，并在流的末尾结束。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 
除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定，否则流的所有权将传输到成功的 <xref:System.Reflection.PortableExecutable.PEReader> 参数验证。 它将由释放 <xref:System.Reflection.PortableExecutable.PEReader> ，并且调用方不能对其进行操作。
 
除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 指定或，否则在 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 构造过程中不会从流中读取任何数据 <xref:System.Reflection.PortableExecutable.PEReader> 。 此外，当 <xref:System.Reflection.PortableExecutable.PEReader> 为活动和未释放时，不能由调用方对流进行操作。
 
如果 `options` 包括 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 或 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> ， <xref:System.Reflection.PortableExecutable.PEReader> 将读取在构造过程中请求的所有数据。 同样，如果 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定了，则调用方将保留流的完全所有权，并确保在构造后不会对其进行操作 <xref:System.Reflection.PortableExecutable.PEReader> 。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peStream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> 具有无效值。</exception>
        <exception cref="T:System.IO.IOException">从流中读取时出错（仅在预提取数据时发生）。</exception>
        <exception cref="T:System.BadImageFormatException"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> 已指定，并且映像的 PE 标头无效。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int * bool -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="peImage">指向 PE 映像开头的指针。</param>
        <param name="size">PE 映像的大小。</param>
        <param name="isLoadedImage">如果 OS 加载程序已将 PE 映像加载到内存中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>通过存储在内存中的 PE 映像创建可移植可执行文件读取器。 一个标志，用于指示该映像是否已加载到内存中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

内存由调用方拥有，在释放时不会释放 <xref:System.Reflection.PortableExecutable.PEReader> 。 调用方负责使内存保持活动状态，并在整个生存期内不进行修改 <xref:System.Reflection.PortableExecutable.PEReader> 。


在构造过程中，不会读取图像的内容 <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImage" /> 为 <see cref="F:System.IntPtr.Zero" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> 为负数。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream">PE 映像流。</param>
        <param name="options">用于指定如何从流中读取 PE 映像各部分的选项。</param>
        <param name="size">PE 映像大小。</param>
        <summary>从流的当前位置开始，通过给定大小的 PE 映像创建可移植可执行文件读取器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定，否则流的所有权将传输到成功的 <xref:System.Reflection.PortableExecutable.PEReader> 参数验证。 它将由释放 <xref:System.Reflection.PortableExecutable.PEReader> ，并且调用方不能对其进行操作。
 
除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 指定或，否则在 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 构造过程中不会从流中读取任何数据 <xref:System.Reflection.PortableExecutable.PEReader> 。 此外，在 <xref:System.Reflection.PortableExecutable.PEReader> 为活动和未释放时，调用方不能操作流。
 
如果 `options` 包括 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 或 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 值，则 <xref:System.Reflection.PortableExecutable.PEReader> 将读取在构造过程中请求的所有数据。 同样，如果 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定了，则调用方将保留流的完全所有权，并确保在构造后不会对其进行操作 <xref:System.Reflection.PortableExecutable.PEReader> 。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> 为负或超出了流的末尾。</exception>
        <exception cref="T:System.IO.IOException">从流中读取时出错（仅在预提取数据时发生）。</exception>
        <exception cref="T:System.BadImageFormatException"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> 已指定，并且映像的 PE 标头无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pEReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由读取器分配的所有内存。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.PortableExecutable.PEReader.Dispose>  可以多次调用，但不能并行调用。
> <xref:System.Reflection.PortableExecutable.PEReader.Dispose>与中的任何其他操作并行调用 <xref:System.Reflection.PortableExecutable.PEReader> 或从读取器中读取时，不安全地调用 <xref:System.Reflection.PortableExecutable.PEMemoryBlock> 。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntireImage">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntireImage () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetEntireImage();" />
      <MemberSignature Language="F#" Value="member this.GetEntireImage : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetEntireImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取包含整个 PE 映像的 <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> 对象。</summary>
        <returns>包含整个 PE 映像的内存块。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

可以检索属性的值 <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> ，以确定是否 <xref:System.Reflection.PortableExecutable.PEReader> 使整个图像可用。

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">整个 PE 映像不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetMetadata();" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>加载包含 CLI 元数据的 PE 部分。</summary>
        <returns>包含 CLI 元数据的内存块。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">PE 映像不包含元数据（<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> 返回 <see langword="false" />）。</exception>
        <exception cref="T:System.BadImageFormatException">PE 标头包含无效数据。</exception>
        <exception cref="T:System.IO.IOException">从基础流中读取时出现 IO 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (relativeVirtualAddress As Integer) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : int -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress">要读取的数据的相对虚拟地址。</param>
        <summary>将包含指定的相对虚拟地址的 PE 部分加载到内存中，并返回从该地址开始、至包含部分结尾终止的内存块。</summary>
        <returns>一个内存块，从 <paramref name="relativeVirtualAddress" /> 开始并在包含部分结尾终止，如果 <paramref name="relativeVirtualAddress" /> 不表示此 PE 映像任何 PE 部分中的位置，则为空内存块。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">PE 标头包含无效数据。</exception>
        <exception cref="T:System.IO.IOException">从基础流中读取时发生 IO 错误。</exception>
        <exception cref="T:System.InvalidOperationException">PE 映像不可用。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeVirtualAddress" /> 为负数。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (sectionName As String) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(System::String ^ sectionName);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : string -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData sectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="sectionName">部分的名称。</param>
        <summary>将具有指定名称的 PE 部分加载到内存中，并返回跨越该部分的内存块。</summary>
        <returns>跨越部分的内存块；如果此 PE 映像中不存在给定 <paramref name="sectionName" /> 的部分，则为空内存块。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sectionName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">PE 映像不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasMetadata">
      <MemberSignature Language="C#" Value="public bool HasMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasMetadata As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasMetadata { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasMetadata : bool" Usage="System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 PE 映像是否包含 CLI 元数据。</summary>
        <value><see langword="true" /> 如果 PE 映像包含 CLI 元数据，则为;否则为 <see langword="false" /> 。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">PE 标头包含无效数据。</exception>
        <exception cref="T:System.IO.IOException">从基础流中读取时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEntireImageAvailable">
      <MemberSignature Language="C#" Value="public bool IsEntireImageAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntireImageAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntireImageAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEntireImageAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEntireImageAvailable : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示读取器是否可以访问整个 PE 映像。</summary>
        <value><see langword="true" /> 如果读取器可以访问整个 PE 映像，则为;否则为 <see langword="false" /> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`false`如果 <xref:System.Reflection.PortableExecutable.PEReader> 是从流构建的，并且只将部分预提取到内存中，则属性将返回。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="public bool IsLoadedImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadedImage" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadedImage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadedImage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadedImage : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 OS 加载程序是否已将 PE 映像加载到内存中。</summary>
        <value>如果 OS 加载程序已将 PE 映像加载到内存中，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaders">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeaders PEHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeaders PEHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaders As PEHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeaders ^ PEHeaders { System::Reflection::PortableExecutable::PEHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaders : System.Reflection.PortableExecutable.PEHeaders" Usage="System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 PE 标头。</summary>
        <value>此 PE 映像的 PE 标头。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">标头包含无效数据。</exception>
        <exception cref="T:System.IO.IOException">从流中读取时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCodeViewDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCodeViewDebugDirectoryData (entry As DebugDirectoryEntry) As CodeViewDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadCodeViewDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" Usage="pEReader.ReadCodeViewDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CodeViewDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry">调试目录项实例。</param>
        <summary>读取指定的调试目录项指向的数据，并将其解释为 CodeView。</summary>
        <returns>代码视图调试目录数据实例。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> 不是 CodeView 项。</exception>
        <exception cref="T:System.BadImageFormatException">数据的格式错误。</exception>
        <exception cref="T:System.IO.IOException">从基础流中读取时出现 IO 错误。</exception>
        <exception cref="T:System.InvalidOperationException">PE 映像不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDebugDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDebugDirectory () As ImmutableArray(Of DebugDirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::DebugDirectoryEntry&gt; ReadDebugDirectory();" />
      <MemberSignature Language="F#" Value="member this.ReadDebugDirectory : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;" Usage="pEReader.ReadDebugDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>读取所有调试目录表项。</summary>
        <returns>调试目录表项的数组。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">项的格式错误。</exception>
        <exception cref="T:System.IO.IOException">从基础流中读取时出现 IO 错误。</exception>
        <exception cref="T:System.InvalidOperationException">PE 映像不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEmbeddedPortablePdbDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEmbeddedPortablePdbDebugDirectoryData (entry As DebugDirectoryEntry) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::MetadataReaderProvider ^ ReadEmbeddedPortablePdbDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadEmbeddedPortablePdbDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="pEReader.ReadEmbeddedPortablePdbDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry">要读取其数据的调试目录项。</param>
        <summary>读取指定的调试目录项指向的数据，并将其解释为嵌入式可移植 PDB blob。</summary>
        <returns>用于读取可移植 PDB 映像的元数据读取器提供程序。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> 不是 <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> 项。</exception>
        <exception cref="T:System.BadImageFormatException">数据的格式错误。</exception>
        <exception cref="T:System.InvalidOperationException">PE 映像不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadPdbChecksumDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadPdbChecksumDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPdbChecksumDebugDirectoryData (entry As DebugDirectoryEntry) As PdbChecksumDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadPdbChecksumDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData" Usage="pEReader.ReadPdbChecksumDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry">要读取其数据的调试目录项。</param>
        <summary>读取指定的调试目录项指向的数据，并将其解释为 PDB 校验和项。</summary>
        <returns>PDB 校验和项。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> 不是 PDB 校验和项。</exception>
        <exception cref="T:System.BadImageFormatException">数据的格式错误。</exception>
        <exception cref="T:System.IO.IOException">从基础流中读取时出现 IO 错误。</exception>
        <exception cref="T:System.InvalidOperationException">PE 映像不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenAssociatedPortablePdb">
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream?&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider? pdbReaderProvider, out string? pdbPath);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryOpenAssociatedPortablePdb(string peImagePath, class System.Func`2&lt;string, class System.IO.Stream&gt; pdbFileStreamProvider, [out] class System.Reflection.Metadata.MetadataReaderProvider&amp; pdbReaderProvider, [out] string&amp; pdbPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryOpenAssociatedPortablePdb (peImagePath As String, pdbFileStreamProvider As Func(Of String, Stream), ByRef pdbReaderProvider As MetadataReaderProvider, ByRef pdbPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryOpenAssociatedPortablePdb(System::String ^ peImagePath, Func&lt;System::String ^, System::IO::Stream ^&gt; ^ pdbFileStreamProvider, [Runtime::InteropServices::Out] System::Reflection::Metadata::MetadataReaderProvider ^ % pdbReaderProvider, [Runtime::InteropServices::Out] System::String ^ % pdbPath);" />
      <MemberSignature Language="F#" Value="member this.TryOpenAssociatedPortablePdb : string * Func&lt;string, System.IO.Stream&gt; * MetadataReaderProvider * string -&gt; bool" Usage="pEReader.TryOpenAssociatedPortablePdb (peImagePath, pdbFileStreamProvider, pdbReaderProvider, pdbPath)" />
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peImagePath" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbFileStreamProvider" Type="System.Func&lt;System.String,System.IO.Stream&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbReaderProvider" Type="System.Reflection.Metadata.MetadataReaderProvider" RefType="out" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbPath" Type="System.String" RefType="out" Index="3" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="peImagePath">PE 映像的路径。 该路径用于查找位于包含 PE 文件的目录中的 PDB 文件。</param>
        <param name="pdbFileStreamProvider">如果已指定，则调用以打开给定文件路径的 <see cref="T:System.IO.Stream" />。 如果目标文件不存在，或者出于某种原因应忽略该文件，则提供程序应返回可查找的可读 <see cref="T:System.IO.Stream" /> 或 <see langword="null" />。 如果由于意外的 IO 错误而无法打开文件，则提供程序应引发 <see cref="T:System.IO.IOException" />。</param>
        <param name="pdbReaderProvider">如果成功，则为 <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> 的新实例，用于读取可移植 PDB。</param>
        <param name="pdbPath">如果成功，并且在文件中找到 PDB，则为文件路径，如果 PDB 嵌入到 PE 映像本身中，则为 <see langword="null" />。</param>
        <summary>打开与此 PE 映像关联的可移植 PDB。</summary>
        <returns>如果 PE 映像具有与之关联的 PDB 并且已成功打开 PDB，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此方法基于 PE 映像调试目录的内容实现一个简单的 PDB 文件查找。 更复杂的工具可能需要跟进搜索路径或符号服务器上的额外查找。
 
方法按以下顺序查找 PDB：

1) 检查) 的目录 (包含 PE 文件的目录中找到的名称的匹配 PDB 文件 `peImagePath` 。
2) 检查 PE 映像本身中嵌入的 PDB。
 
返回与调试目录中指定的信息匹配的第一个 PDB。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImagePath" /> 或 <paramref name="pdbFileStreamProvider" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">从 <paramref name="pdbFileStreamProvider" /> 返回的流不支持读取和查找操作。</exception>
        <exception cref="T:System.BadImageFormatException">由于出现错误，找不到匹配的 PDB 文件：PE 映像或 PDB 无效。</exception>
        <exception cref="T:System.IO.IOException">由于出现错误，找不到匹配的 PDB 文件：读取 PE 映像或 PDB 时发生 IO 错误。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
