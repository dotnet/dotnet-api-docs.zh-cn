<Type Name="PEReader" FullName="System.Reflection.PortableExecutable.PEReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cec949c8df1563bc0fcbae26daeb63e13606d8f7" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86789896" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEReader sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type PEReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="fe0d4-101">提供可移植可执行格式 (PE) 文件的读取器。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-101">Provides a reader for Portable Executable format (PE) files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-102">实现是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-102">The implementation is thread-safe.</span></span> <span data-ttu-id="fe0d4-103">也就是说，多个线程可以并行从读取器读取数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-103">That is, multiple threads can read data from the reader in parallel.</span></span> <span data-ttu-id="fe0d4-104">读取器的处理不是线程安全的 (请参阅 <xref:System.Reflection.PortableExecutable.PEReader.Dispose>) 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-104">Disposal of the reader is not thread-safe (see <xref:System.Reflection.PortableExecutable.PEReader.Dispose>).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.Collections.Immutable.ImmutableArray&lt;byte&gt; peImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; peImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peImage As ImmutableArray(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; peImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="fe0d4-105">表示 PE 映像的不可变字节数组。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-105">An immutable array of bytes representing the PE image.</span></span></param>
        <summary><span data-ttu-id="fe0d4-106">通过存储在字节数组中的 PE 映像创建可移植可执行文件读取器。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-106">Creates a Portable Executable reader over a PE image stored in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-107">在构造过程中，不会读取图像的内容 <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="fe0d4-107">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fe0d4-108"><paramref name="peImage" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-108"><paramref name="peImage" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="fe0d4-109">PE 映像流。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-109">PE image stream.</span></span></param>
        <summary><span data-ttu-id="fe0d4-110">通过存储在流中的 PE 映像创建可移植可执行文件读取器。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-110">Creates a Portable Executable reader over a PE image stored in a stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-111"><xref:System.Reflection.PortableExecutable.PEReader>成功验证构造函数参数后，流的所有权会传输到。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-111">Ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful validation of constructor arguments.</span></span> <span data-ttu-id="fe0d4-112">它将由释放 <xref:System.Reflection.PortableExecutable.PEReader> ，并且调用方不能对其进行操作。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-112">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fe0d4-113"><paramref name="peStream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-113"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="fe0d4-114">指向 PE 映像开头的指针。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-114">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="fe0d4-115">PE 映像的大小。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-115">The size of the PE image.</span></span></param>
        <summary><span data-ttu-id="fe0d4-116">通过存储在内存中的 PE 映像创建可移植可执行文件读取器。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-116">Creates a Portable Executable reader over a PE image stored in memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-117">内存由调用方拥有，不会在释放时释放 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-117">The memory is owned by the caller and not released on disposal of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="fe0d4-118">调用方负责使内存保持活动状态，并在整个生存期内不进行修改 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-118">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="fe0d4-119">在构造过程中，不会读取图像的内容 <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="fe0d4-119">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fe0d4-120"><paramref name="peImage" /> 为 <see cref="F:System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-120"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fe0d4-121"><paramref name="size" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-121"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="fe0d4-122">PE 映像流。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-122">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="fe0d4-123">用于指定如何从流中读取 PE 映像各部分的选项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-123">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <summary><span data-ttu-id="fe0d4-124">通过存储在流中的 PE 映像创建可移植可执行文件读取器，从其当前位置开始，并在流的末尾结束。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-124">Creates a Portable Executable reader over a PE image stored in a stream beginning at its current position and ending at the end of the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 
<span data-ttu-id="fe0d4-125">除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定，否则流的所有权将传输到成功的 <xref:System.Reflection.PortableExecutable.PEReader> 参数验证。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-125">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="fe0d4-126">它将由释放 <xref:System.Reflection.PortableExecutable.PEReader> ，并且调用方不能对其进行操作。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-126">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="fe0d4-127">除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 指定或，否则在 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 构造过程中不会从流中读取任何数据 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-127">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="fe0d4-128">此外，当 <xref:System.Reflection.PortableExecutable.PEReader> 为活动和未释放时，不能由调用方对流进行操作。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-128">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="fe0d4-129">如果 `options` 包括 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 或 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> ， <xref:System.Reflection.PortableExecutable.PEReader> 将读取在构造过程中请求的所有数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-129">If `options` includes <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="fe0d4-130">同样，如果 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定了，则调用方将保留流的完全所有权，并确保在构造后不会对其进行操作 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-130">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fe0d4-131"><paramref name="peStream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-131"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fe0d4-132"><paramref name="options" /> 具有无效值。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-132"><paramref name="options" /> has an invalid value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-133">从流中读取时出错（仅在预提取数据时发生）。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-133">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> 已指定，并且映像的 PE 标头无效。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int * bool -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="fe0d4-135">指向 PE 映像开头的指针。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-135">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="fe0d4-136">PE 映像的大小。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-136">The size of the PE image.</span></span></param>
        <param name="isLoadedImage"><span data-ttu-id="fe0d4-137">如果 OS 加载程序已将 PE 映像加载到内存中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-137"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="fe0d4-138">通过存储在内存中的 PE 映像创建可移植可执行文件读取器。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-138">Creates a Portable Executable reader over a PE image stored in memory.</span></span> <span data-ttu-id="fe0d4-139">一个标志，用于指示该映像是否已加载到内存中。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-139">A flag indicates whether the image has already been loaded into memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-140">内存由调用方拥有，在释放时不会释放 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-140">The memory is owned by the caller and is not released when the <xref:System.Reflection.PortableExecutable.PEReader> is disposed.</span></span> <span data-ttu-id="fe0d4-141">调用方负责使内存保持活动状态，并在整个生存期内不进行修改 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-141">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="fe0d4-142">在构造过程中，不会读取图像的内容 <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="fe0d4-142">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fe0d4-143"><paramref name="peImage" /> 为 <see cref="F:System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-143"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fe0d4-144"><paramref name="size" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-144"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="fe0d4-145">PE 映像流。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-145">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="fe0d4-146">用于指定如何从流中读取 PE 映像各部分的选项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-146">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="fe0d4-147">PE 映像大小。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-147">The PE image size.</span></span></param>
        <summary><span data-ttu-id="fe0d4-148">从流的当前位置开始，通过给定大小的 PE 映像创建可移植可执行文件读取器。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-148">Creates a Portable Executable reader over a PE image of the given size beginning at the stream's current position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-149">除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定，否则流的所有权将传输到成功的 <xref:System.Reflection.PortableExecutable.PEReader> 参数验证。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-149">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="fe0d4-150">它将由释放 <xref:System.Reflection.PortableExecutable.PEReader> ，并且调用方不能对其进行操作。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-150">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader>, and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="fe0d4-151">除非 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 指定或，否则在 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 构造过程中不会从流中读取任何数据 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-151">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="fe0d4-152">此外，在 <xref:System.Reflection.PortableExecutable.PEReader> 为活动和未释放时，调用方不能操作流。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-152">Furthermore, the stream must not be manipulated by the caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="fe0d4-153">如果 `options` 包括 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 或 <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 值，则 <xref:System.Reflection.PortableExecutable.PEReader> 将读取在构造过程中请求的所有数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-153">If `options` includes the <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> values, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="fe0d4-154">同样，如果 <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定了，则调用方将保留流的完全所有权，并确保在构造后不会对其进行操作 <xref:System.Reflection.PortableExecutable.PEReader> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-154">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fe0d4-155"><paramref name="size" /> 为负或超出了流的末尾。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-155"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-156">从流中读取时出错（仅在预提取数据时发生）。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-156">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> 已指定，并且映像的 PE 标头无效。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pEReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe0d4-158">释放由读取器分配的所有内存。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-158">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="fe0d4-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose>  可以多次调用，但不能并行调用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose>  can be called multiple times, but not in parallel.</span></span>
> <span data-ttu-id="fe0d4-160"><xref:System.Reflection.PortableExecutable.PEReader.Dispose>与中的任何其他操作并行调用 <xref:System.Reflection.PortableExecutable.PEReader> 或从读取器中读取时，不安全地调用 <xref:System.Reflection.PortableExecutable.PEMemoryBlock> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-160">It is not safe to call <xref:System.Reflection.PortableExecutable.PEReader.Dispose> in parallel with any other operation on the <xref:System.Reflection.PortableExecutable.PEReader> or when reading from <xref:System.Reflection.PortableExecutable.PEMemoryBlock>s retrieved from the reader.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntireImage">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntireImage () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetEntireImage();" />
      <MemberSignature Language="F#" Value="member this.GetEntireImage : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetEntireImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe0d4-161">获取包含整个 PE 映像的 <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-161">Gets a <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> object containing the entire PE image.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-162">包含整个 PE 映像的内存块。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-162">A memory block that contains the entire PE image.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="fe0d4-163">可以检索属性的值 <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> ，以确定是否 <xref:System.Reflection.PortableExecutable.PEReader> 使整个图像可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-163">You can retrieve the value of the <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> property to determine whether the <xref:System.Reflection.PortableExecutable.PEReader> makes the entire image available.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-164">整个 PE 映像不可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-164">The entire PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetMetadata();" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe0d4-165">加载包含 CLI 元数据的 PE 部分。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-165">Loads a PE section that contains CLI metadata.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-166">包含 CLI 元数据的内存块。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-166">A memory block that contains the CLI metadata.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-167">PE 映像不包含元数据（<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> 返回 <see langword="false" />）。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-167">The PE image doesn't contain metadata (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> returns <see langword="false" />).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-168">PE 标头包含无效数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-168">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-169">从基础流中读取时出现 IO 错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-169">IO error while reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (relativeVirtualAddress As Integer) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : int -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress"><span data-ttu-id="fe0d4-170">要读取的数据的相对虚拟地址。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-170">The Relative Virtual Address of the data to read.</span></span></param>
        <summary><span data-ttu-id="fe0d4-171">将包含指定的相对虚拟地址的 PE 部分加载到内存中，并返回从该地址开始、至包含部分结尾终止的内存块。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-171">Loads the PE section that contains the specified relative virtual address into memory and returns a memory block that starts at that address and ends at the end of the containing section.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-172">一个内存块，从 <paramref name="relativeVirtualAddress" /> 开始并在包含部分结尾终止，如果 <paramref name="relativeVirtualAddress" /> 不表示此 PE 映像任何 PE 部分中的位置，则为空内存块。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-172">A memory block that starats at <paramref name="relativeVirtualAddress" /> and ends at the end of the containing section, or an empty block if <paramref name="relativeVirtualAddress" /> doesn't represent a location in any of the PE sections of this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-173">PE 标头包含无效数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-173">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-174">从基础流中读取时发生 IO 错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-174">An IO error occurred while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-175">PE 映像不可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-175">The PE image is not available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fe0d4-176"><paramref name="relativeVirtualAddress" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-176"><paramref name="relativeVirtualAddress" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (sectionName As String) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(System::String ^ sectionName);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : string -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData sectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="sectionName"><span data-ttu-id="fe0d4-177">部分的名称。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-177">The name of the section.</span></span></param>
        <summary><span data-ttu-id="fe0d4-178">将具有指定名称的 PE 部分加载到内存中，并返回跨越该部分的内存块。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-178">Loads the PE section with the specified name into memory and returns a memory block that spans the section.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-179">跨越部分的内存块；如果此 PE 映像中不存在给定 <paramref name="sectionName" /> 的部分，则为空内存块。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-179">A memory block that spans the section, or an empty block if no section of the given <paramref name="sectionName" /> exists in this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fe0d4-180"><paramref name="sectionName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-180"><paramref name="sectionName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-181">PE 映像不可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-181">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasMetadata">
      <MemberSignature Language="C#" Value="public bool HasMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasMetadata As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasMetadata { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasMetadata : bool" Usage="System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe0d4-182">获取一个值，该值指示 PE 映像是否包含 CLI 元数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-182">Gets a value that indicates if the PE image contains CLI metadata.</span></span></summary>
        <value><span data-ttu-id="fe0d4-183"><see langword="true" /> 如果 PE 映像包含 CLI 元数据，则为;否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-183"><see langword="true" /> if the PE image contains CLI metadata; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-184">PE 标头包含无效数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-184">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-185">从基础流中读取时出错。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-185">Error reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEntireImageAvailable">
      <MemberSignature Language="C#" Value="public bool IsEntireImageAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntireImageAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntireImageAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEntireImageAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEntireImageAvailable : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe0d4-186">获取一个值，该值指示读取器是否可以访问整个 PE 映像。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-186">Gets a value that indicates if the reader can access the entire PE image.</span></span></summary>
        <value><span data-ttu-id="fe0d4-187"><see langword="true" /> 如果读取器可以访问整个 PE 映像，则为;否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-187"><see langword="true" /> if the reader can access the entire PE image; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-188">`false`如果 <xref:System.Reflection.PortableExecutable.PEReader> 是从流构建的，并且只将部分预提取到内存中，则属性将返回。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-188">The property returns `false` if the <xref:System.Reflection.PortableExecutable.PEReader> is constructed from a stream and only part of it is prefetched into memory.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="public bool IsLoadedImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadedImage" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadedImage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadedImage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadedImage : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe0d4-189">获取一个值，该值指示 OS 加载程序是否已将 PE 映像加载到内存中。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-189">Gets a value that indicates if the PE image has been loaded into memory by the OS loader.</span></span></summary>
        <value><span data-ttu-id="fe0d4-190">如果 OS 加载程序已将 PE 映像加载到内存中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-190"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaders">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeaders PEHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeaders PEHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaders As PEHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeaders ^ PEHeaders { System::Reflection::PortableExecutable::PEHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaders : System.Reflection.PortableExecutable.PEHeaders" Usage="System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe0d4-191">获取 PE 标头。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-191">Gets the PE headers.</span></span></summary>
        <value><span data-ttu-id="fe0d4-192">此 PE 映像的 PE 标头。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-192">The PE headers for this PE image.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-193">标头包含无效数据。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-193">The headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-194">从流中读取时出错。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-194">Error reading from the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCodeViewDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCodeViewDebugDirectoryData (entry As DebugDirectoryEntry) As CodeViewDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadCodeViewDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" Usage="pEReader.ReadCodeViewDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CodeViewDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="fe0d4-195">调试目录项实例。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-195">A Debug Directory entry instance.</span></span></param>
        <summary><span data-ttu-id="fe0d4-196">读取指定的调试目录项指向的数据，并将其解释为 CodeView。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-196">Reads the data pointed to by the specified Debug Directory entry and interprets it as CodeView.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-197">代码视图调试目录数据实例。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-197">A code view debug directory data instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fe0d4-198"><paramref name="entry" /> 不是 CodeView 项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-198"><paramref name="entry" /> is not a CodeView entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-199">数据的格式错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-199">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-200">从基础流中读取时出现 IO 错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-200">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-201">PE 映像不可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-201">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDebugDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDebugDirectory () As ImmutableArray(Of DebugDirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::DebugDirectoryEntry&gt; ReadDebugDirectory();" />
      <MemberSignature Language="F#" Value="member this.ReadDebugDirectory : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;" Usage="pEReader.ReadDebugDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe0d4-202">读取所有调试目录表项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-202">Reads all Debug Directory table entries.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-203">调试目录表项的数组。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-203">An array of Debug Directory table entries.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-204">项的格式错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-204">Bad format of the entry.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-205">从基础流中读取时出现 IO 错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-205">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-206">PE 映像不可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-206">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEmbeddedPortablePdbDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEmbeddedPortablePdbDebugDirectoryData (entry As DebugDirectoryEntry) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::MetadataReaderProvider ^ ReadEmbeddedPortablePdbDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadEmbeddedPortablePdbDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="pEReader.ReadEmbeddedPortablePdbDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="fe0d4-207">要读取其数据的调试目录项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-207">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="fe0d4-208">读取指定的调试目录项指向的数据，并将其解释为嵌入式可移植 PDB blob。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-208">Reads the data pointed to by the specified Debug Directory entry and interprets it as an Embedded Portable PDB blob.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-209">用于读取可移植 PDB 映像的元数据读取器提供程序。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-209">The provider of a metadata reader for reading a Portable PDB image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fe0d4-210"><paramref name="entry" /> 不是 <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> 项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-210"><paramref name="entry" /> is not a <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-211">数据的格式错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-211">Bad format of the data.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-212">PE 映像不可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-212">PE image not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadPdbChecksumDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadPdbChecksumDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPdbChecksumDebugDirectoryData (entry As DebugDirectoryEntry) As PdbChecksumDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadPdbChecksumDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData" Usage="pEReader.ReadPdbChecksumDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="fe0d4-213">要读取其数据的调试目录项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-213">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="fe0d4-214">读取指定的调试目录项指向的数据，并将其解释为 PDB 校验和项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-214">Reads the data pointed to by the specified Debug Directory entry and interprets it as a PDB Checksum entry.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-215">PDB 校验和项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-215">The PDB Checksum entry.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fe0d4-216"><paramref name="entry" /> 不是 PDB 校验和项。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-216"><paramref name="entry" /> is not a PDB Checksum entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-217">数据的格式错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-217">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-218">从基础流中读取时出现 IO 错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-218">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-219">PE 映像不可用。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-219">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenAssociatedPortablePdb">
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string? peImagePath, Func&lt;string,System.IO.Stream&gt;? pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryOpenAssociatedPortablePdb(string peImagePath, class System.Func`2&lt;string, class System.IO.Stream&gt; pdbFileStreamProvider, [out] class System.Reflection.Metadata.MetadataReaderProvider&amp; pdbReaderProvider, [out] string&amp; pdbPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryOpenAssociatedPortablePdb (peImagePath As String, pdbFileStreamProvider As Func(Of String, Stream), ByRef pdbReaderProvider As MetadataReaderProvider, ByRef pdbPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryOpenAssociatedPortablePdb(System::String ^ peImagePath, Func&lt;System::String ^, System::IO::Stream ^&gt; ^ pdbFileStreamProvider, [Runtime::InteropServices::Out] System::Reflection::Metadata::MetadataReaderProvider ^ % pdbReaderProvider, [Runtime::InteropServices::Out] System::String ^ % pdbPath);" />
      <MemberSignature Language="F#" Value="member this.TryOpenAssociatedPortablePdb : string * Func&lt;string, System.IO.Stream&gt; * MetadataReaderProvider * string -&gt; bool" Usage="pEReader.TryOpenAssociatedPortablePdb (peImagePath, pdbFileStreamProvider, pdbReaderProvider, pdbPath)" />
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peImagePath" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbFileStreamProvider" Type="System.Func&lt;System.String,System.IO.Stream&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbReaderProvider" Type="System.Reflection.Metadata.MetadataReaderProvider" RefType="out" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="pdbPath" Type="System.String" RefType="out" Index="3" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="peImagePath"><span data-ttu-id="fe0d4-220">PE 映像的路径。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-220">The path to the PE image.</span></span> <span data-ttu-id="fe0d4-221">该路径用于查找位于包含 PE 文件的目录中的 PDB 文件。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-221">The path is used to locate the PDB file located in the directory containing the PE file.</span></span></param>
        <param name="pdbFileStreamProvider"><span data-ttu-id="fe0d4-222">如果已指定，则调用以打开给定文件路径的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-222">If specified, called to open a <see cref="T:System.IO.Stream" /> for a given file path.</span></span> <span data-ttu-id="fe0d4-223">如果目标文件不存在，或者出于某种原因应忽略该文件，则提供程序应返回可查找的可读 <see cref="T:System.IO.Stream" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-223">The provider is expected to either return a readable and seekable <see cref="T:System.IO.Stream" />, or <see langword="null" /> if the target file doesn't exist or should be ignored for some reason.</span></span> <span data-ttu-id="fe0d4-224">如果由于意外的 IO 错误而无法打开文件，则提供程序应引发 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-224">The provider should throw <see cref="T:System.IO.IOException" /> if it fails to open the file due to an unexpected IO error.</span></span></param>
        <param name="pdbReaderProvider"><span data-ttu-id="fe0d4-225">如果成功，则为 <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> 的新实例，用于读取可移植 PDB。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-225">If successful, a new instance of <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> to be used to read the Portable PDB,.</span></span></param>
        <param name="pdbPath"><span data-ttu-id="fe0d4-226">如果成功，并且在文件中找到 PDB，则为文件路径，如果 PDB 嵌入到 PE 映像本身中，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-226">If successful and the PDB is found in a file, the path to the file, or <see langword="null" /> if the PDB is embedded in the PE image itself.</span></span></param>
        <summary><span data-ttu-id="fe0d4-227">打开与此 PE 映像关联的可移植 PDB。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-227">Opens a Portable PDB associated with this PE image.</span></span></summary>
        <returns><span data-ttu-id="fe0d4-228">如果 PE 映像具有与之关联的 PDB 并且已成功打开 PDB，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-228"><see langword="true" /> if the PE image has a PDB associated with it and the PDB has been successfully opened; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe0d4-229">此方法基于 PE 映像调试目录的内容实现一个简单的 PDB 文件查找。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-229">This method implements a simple PDB file lookup based on the content of the PE image Debug Directory.</span></span> <span data-ttu-id="fe0d4-230">更复杂的工具可能需要跟进搜索路径或符号服务器上的额外查找。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-230">A more sophisticated tool might need to follow up with additional lookup on search paths or a symbol server.</span></span>
 
<span data-ttu-id="fe0d4-231">方法按以下顺序查找 PDB：</span><span class="sxs-lookup"><span data-stu-id="fe0d4-231">The method looks the PDB up in the following order:</span></span>

1) <span data-ttu-id="fe0d4-232">检查) 的目录 (包含 PE 文件的目录中找到的名称的匹配 PDB 文件 `peImagePath` 。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-232">Checks for a matching PDB file of the name found in the CodeView entry in the directory containing the PE file (the directory of `peImagePath`).</span></span>
2) <span data-ttu-id="fe0d4-233">检查 PE 映像本身中嵌入的 PDB。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-233">Checks for a PDB embedded in the PE image itself.</span></span>
 
<span data-ttu-id="fe0d4-234">返回与调试目录中指定的信息匹配的第一个 PDB。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-234">The first PDB that matches the information specified in the Debug Directory is returned.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fe0d4-235"><paramref name="peImagePath" /> 或 <paramref name="pdbFileStreamProvider" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-235"><paramref name="peImagePath" /> or <paramref name="pdbFileStreamProvider" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe0d4-236">从 <paramref name="pdbFileStreamProvider" /> 返回的流不支持读取和查找操作。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-236">The stream returned from <paramref name="pdbFileStreamProvider" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="fe0d4-237">由于出现错误，找不到匹配的 PDB 文件： PE 映像或 PDB 无效。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-237">No matching PDB file was found due to an error: The PE image or the PDB is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="fe0d4-238">由于出现错误，找不到匹配的 PDB 文件：读取 PE 映像或 PDB 时发生 IO 错误。</span><span class="sxs-lookup"><span data-stu-id="fe0d4-238">No matching PDB file was found due to an error: An IO error occurred while reading the PE image or the PDB.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
