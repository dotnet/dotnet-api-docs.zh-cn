<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53488acd1533d1776d95e00e962bd3acd3295534" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86641548" /></Metadata><TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <TypeSignature Language="F#" Value="type DispatcherObject = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="15067-101">表示与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的对象。</span><span class="sxs-lookup"><span data-stu-id="15067-101">Represents an object that is associated with a <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15067-102">只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> <xref:System.Windows.Threading.DispatcherObject> 直接访问。</span><span class="sxs-lookup"><span data-stu-id="15067-102">Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.</span></span>  <span data-ttu-id="15067-103">若要 <xref:System.Windows.Threading.DispatcherObject> 从创建的线程以外的线程访问 <xref:System.Windows.Threading.DispatcherObject> ，请调用上的或与 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherObject> 关联的。</span><span class="sxs-lookup"><span data-stu-id="15067-103">To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with.</span></span>  
  
 <span data-ttu-id="15067-104"><xref:System.Windows.Threading.DispatcherObject>需要强制执行线程安全的子类可以通过调用所有公共方法来实现此目的 <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="15067-104">Subclasses of <xref:System.Windows.Threading.DispatcherObject> that need to enforce thread safety can do so by calling <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> on all public methods.</span></span>  <span data-ttu-id="15067-105">这可保证调用线程是 <xref:System.Windows.Threading.DispatcherObject> 在其上创建的线程。</span><span class="sxs-lookup"><span data-stu-id="15067-105">This guarantees the calling thread is the thread that the <xref:System.Windows.Threading.DispatcherObject> was created on.</span></span>  
  
 <span data-ttu-id="15067-106"><xref:System.Windows.Threading.DispatcherObject>不能单独实例化; 即，所有构造函数都受到保护。</span><span class="sxs-lookup"><span data-stu-id="15067-106">A <xref:System.Windows.Threading.DispatcherObject> cannot be independently instantiated; that is, all constructors are protected.</span></span>  
  
 <span data-ttu-id="15067-107">派生自的对象 <xref:System.Windows.Threading.DispatcherObject> 具有线程关联。</span><span class="sxs-lookup"><span data-stu-id="15067-107">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="15067-108">从派生的对象在 <xref:System.Windows.Freezable> 被冻结时是自由线程的。</span><span class="sxs-lookup"><span data-stu-id="15067-108">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="15067-109">有关详细信息，请参阅 [Freezable 对象概述](/dotnet/framework/wpf/advanced/freezable-objects-overview)。</span><span class="sxs-lookup"><span data-stu-id="15067-109">For more information, see the [Freezable Objects Overview](/dotnet/framework/wpf/advanced/freezable-objects-overview).</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="15067-110"><see langword="static" />此类型的任何公共成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="15067-110">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="15067-111">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="15067-111">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="15067-112">只能从创建此对象的线程访问此对象。</span><span class="sxs-lookup"><span data-stu-id="15067-112">This object can be accessed only from the thread on which it was created.</span></span> <span data-ttu-id="15067-113">尝试从其他线程访问它将引发 <see cref="T:System.InvalidOperationException" /> 。</span><span class="sxs-lookup"><span data-stu-id="15067-113">Attempts to access it from other threads will throw an <see cref="T:System.InvalidOperationException" />.</span></span> <span data-ttu-id="15067-114"><see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> 或者向 <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> 正确的线程提供对封送处理工作的支持。</span><span class="sxs-lookup"><span data-stu-id="15067-114"><see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> or <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> provide support for marshaling work to the correct thread.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="15067-115">初始化 <see cref="T:System.Windows.Threading.DispatcherObject" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="15067-115">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcherObject.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="15067-116">确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。</span><span class="sxs-lookup"><span data-stu-id="15067-116">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</span></span></summary>
        <returns><span data-ttu-id="15067-117">如果调用线程可以访问此对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="15067-117"><see langword="true" /> if the calling thread has access to this object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15067-118">只有 <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> 在上创建的线程可以访问 <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="15067-118">Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="15067-119">任何线程都可以检查它是否有权访问此 <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="15067-119">Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="15067-120">与之间的区别在于 <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> ， <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> 返回一个布尔值，该值指定调用线程是否有权访问此值 <xref:System.Windows.Threading.DispatcherObject> ， <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> 如果调用线程没有访问此的权限，则会引发异常 <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="15067-120">The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="15067-121">调用此方法与调用 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 关联对象的方法相同 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="15067-121">Calling this method is identical to calling <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> on the associated <xref:System.Windows.Threading.Dispatcher> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="15067-122">下面的示例使用 <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> 来确定线程是否有权访问 <xref:System.Windows.Controls.Button> 在上创建的线程。</span><span class="sxs-lookup"><span data-stu-id="15067-122">The following example uses <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="15067-123"><xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>调用上的方法 <xref:System.Windows.Controls.Button> 来验证对线程的访问。</span><span class="sxs-lookup"><span data-stu-id="15067-123">The <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="15067-124">如果调用线程具有访问权限，则 <xref:System.Windows.Controls.Button> 只需访问的成员即可更新 <xref:System.Windows.Controls.Button> ; 否则，将在的 <xref:System.Windows.Controls.Button> 上发布一个接受作为参数的委托 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="15067-124">If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="15067-125">获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的 <see cref="T:System.Windows.Threading.DispatcherObject" />。</span><span class="sxs-lookup"><span data-stu-id="15067-125">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this <see cref="T:System.Windows.Threading.DispatcherObject" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="15067-126">调度程序。</span><span class="sxs-lookup"><span data-stu-id="15067-126">The dispatcher.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15067-127">只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> <xref:System.Windows.Threading.DispatcherObject> 直接访问。</span><span class="sxs-lookup"><span data-stu-id="15067-127">Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.</span></span>  <span data-ttu-id="15067-128">若要 <xref:System.Windows.Threading.DispatcherObject> 从创建的线程以外的线程访问，请在与 <xref:System.Windows.Threading.DispatcherObject> <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 关联的上调用和 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="15067-128">To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcherObject.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="15067-129">强制调用线程具有此 <see cref="T:System.Windows.Threading.DispatcherObject" /> 的访问权限。</span><span class="sxs-lookup"><span data-stu-id="15067-129">Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15067-130">只有 <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> 在上创建的线程可以访问 <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="15067-130">Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="15067-131">任何线程都可以检查它是否有权访问此 <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="15067-131">Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="15067-132">与之间的区别在于 <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> ， <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> 返回一个布尔值，该值指定调用线程是否有权访问此值 <xref:System.Windows.Threading.DispatcherObject> ， <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> 如果调用线程没有访问此的权限，则会引发异常 <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="15067-132">The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="15067-133">下面的示例使用 <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> 来确定线程是否有权访问 <xref:System.Windows.Controls.Button> 在上创建的线程。</span><span class="sxs-lookup"><span data-stu-id="15067-133">The following example uses <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="15067-134">如果调用线程没有访问权限， <xref:System.InvalidOperationException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="15067-134">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="15067-135">调用线程不可以访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。</span><span class="sxs-lookup"><span data-stu-id="15067-135">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
