<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bd8ad0602044d72c30878f0952ec28e254b400d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83968599" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Dispatcher extends System.Object" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="01fde-101">提供用于管理线程工作项队列的服务。</span><span class="sxs-lookup"><span data-stu-id="01fde-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-102"><xref:System.Windows.Threading.Dispatcher> 维护特定线程的工作项的优先顺序队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="01fde-103">在线程上创建 <xref:System.Windows.Threading.Dispatcher> 时，即使 <xref:System.Windows.Threading.Dispatcher> 关闭，它也会成为可以与线程关联的唯一 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="01fde-104">如果尝试获取当前线程的 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>，但 <xref:System.Windows.Threading.Dispatcher> 与该线程不关联，则将创建一个 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="01fde-105">当你创建 <xref:System.Windows.Threading.DispatcherObject>时，还会创建一个 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="01fde-106">如果在后台线程上创建 <xref:System.Windows.Threading.Dispatcher>，请确保在退出该线程前关闭调度程序。</span><span class="sxs-lookup"><span data-stu-id="01fde-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="01fde-107">如果 <xref:System.Windows.Threading.Dispatcher> 关闭，则无法重启它。</span><span class="sxs-lookup"><span data-stu-id="01fde-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="01fde-108">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只能通过与 <xref:System.Windows.Threading.DispatcherObject> 相关联的 <xref:System.Windows.Threading.Dispatcher> 访问。</span><span class="sxs-lookup"><span data-stu-id="01fde-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="01fde-109">例如，后台线程无法在 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 线程上更新与 <xref:System.Windows.Threading.Dispatcher> 关联的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="01fde-110">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 <xref:System.Windows.Controls.ContentControl.Content%2A> 属性，后台线程必须将工作委托给与 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="01fde-111">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="01fde-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-113">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-114">如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。</span><span class="sxs-lookup"><span data-stu-id="01fde-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="01fde-115">除 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>以外，<xref:System.Windows.Threading.Dispatcher>上的所有方法均可自由线程。</span><span class="sxs-lookup"><span data-stu-id="01fde-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="01fde-116">派生自 <xref:System.Windows.Threading.DispatcherObject> 的对象具有线程关联。</span><span class="sxs-lookup"><span data-stu-id="01fde-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="01fde-117">从 <xref:System.Windows.Freezable> 派生的对象在被冻结时是自由线程的。</span><span class="sxs-lookup"><span data-stu-id="01fde-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="01fde-118">有关详细信息，请参阅 [Freezable 对象概述](/dotnet/framework/wpf/advanced/freezable-objects-overview)。</span><span class="sxs-lookup"><span data-stu-id="01fde-118">For more information, see [Freezable Objects Overview](/dotnet/framework/wpf/advanced/freezable-objects-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-119">下面的示例演示如何将操作置于 <xref:System.Windows.Threading.Dispatcher>上。</span><span class="sxs-lookup"><span data-stu-id="01fde-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="01fde-120">有关此示例的完整源代码，请参阅[具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="01fde-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="01fde-121">首先，创建了不接受任何参数的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="01fde-122">接下来，调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>。</span><span class="sxs-lookup"><span data-stu-id="01fde-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="01fde-123">对 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 的此调用采用以下两个参数：优先级设置为 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>，后者通过委托 `NextPrimeDelegate`的实例传入。</span><span class="sxs-lookup"><span data-stu-id="01fde-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="01fde-124">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="01fde-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01fde-125">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-126">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-127">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-128">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-129">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-131">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="01fde-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="01fde-134">可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：</span><span class="sxs-lookup"><span data-stu-id="01fde-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="01fde-135">更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-136">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-137">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="01fde-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="01fde-138">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="01fde-139">如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="01fde-140">如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。</span><span class="sxs-lookup"><span data-stu-id="01fde-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="01fde-141">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-142">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="01fde-143">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01fde-144">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程的指定参数异步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="01fde-145">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-146">可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：</span><span class="sxs-lookup"><span data-stu-id="01fde-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="01fde-147">更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-148">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-149">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="01fde-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="01fde-150">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="01fde-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="01fde-152">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="01fde-153">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="01fde-154">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="01fde-155">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="01fde-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="01fde-157">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-158">如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。</span><span class="sxs-lookup"><span data-stu-id="01fde-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-159">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-160">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="01fde-161">按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-162">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-163">如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="01fde-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="01fde-165">可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：</span><span class="sxs-lookup"><span data-stu-id="01fde-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="01fde-166">更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-167">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-168">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="01fde-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="01fde-169">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="01fde-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="01fde-171">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-172">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-173">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-174">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-176">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-177">如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。</span><span class="sxs-lookup"><span data-stu-id="01fde-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-178">下面的示例演示如何将操作置于 <xref:System.Windows.Threading.Dispatcher>上。</span><span class="sxs-lookup"><span data-stu-id="01fde-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="01fde-179">有关此示例的完整源代码，请参阅[具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="01fde-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="01fde-180">首先，创建了不接受任何参数的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="01fde-181">接下来，调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>。</span><span class="sxs-lookup"><span data-stu-id="01fde-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="01fde-182">由于每个 <xref:System.Windows.Threading.DispatcherObject> 都有一个属性，该属性返回与之关联的 <xref:System.Windows.Threading.Dispatcher>，因此所需的 <xref:System.Windows.Threading.Dispatcher> 是通过查询 <xref:System.Windows.Threading.DispatcherObject>获取的，在此示例中，名为 <xref:System.Windows.Controls.Button>。`startStopButton`</span><span class="sxs-lookup"><span data-stu-id="01fde-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="01fde-183">对 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 的调用采用以下两个参数：将设置为 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>的优先级，以及通过委托 `NextPrimeDelegate`的实例传入的回调。</span><span class="sxs-lookup"><span data-stu-id="01fde-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-184"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-185"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="01fde-186">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="01fde-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="01fde-187">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-188">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-189">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="01fde-190">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01fde-191">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上的指定参数，按指定优先级异步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="01fde-192">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-193">可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：</span><span class="sxs-lookup"><span data-stu-id="01fde-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="01fde-194">更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-195">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-196">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="01fde-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="01fde-197">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="01fde-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="01fde-199">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="01fde-200">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="01fde-201">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="01fde-202">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="01fde-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="01fde-204">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-205">如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。</span><span class="sxs-lookup"><span data-stu-id="01fde-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-206">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-207">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="01fde-208">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="01fde-209">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-210">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-211">如果不需要参数，则可以 `null` `Arg`。</span><span class="sxs-lookup"><span data-stu-id="01fde-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="01fde-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="01fde-213">可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：</span><span class="sxs-lookup"><span data-stu-id="01fde-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="01fde-214">更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-215">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-216">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="01fde-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="01fde-217">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="01fde-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="01fde-219">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-220">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-221">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-222">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-224">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-225">如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="01fde-226">如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。</span><span class="sxs-lookup"><span data-stu-id="01fde-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-227">下面的示例演示如何将操作置于 <xref:System.Windows.Threading.Dispatcher>上。</span><span class="sxs-lookup"><span data-stu-id="01fde-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="01fde-228">首先，创建一个接受一个参数（在本例中为字符串）的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="01fde-229">接下来，调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="01fde-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="01fde-230">由于每个 <xref:System.Windows.Threading.DispatcherObject> 都有一个属性，该属性返回与之关联的 <xref:System.Windows.Threading.Dispatcher>，因此所需的 <xref:System.Windows.Threading.Dispatcher> 是通过查询 <xref:System.Windows.Threading.DispatcherObject>获取的，在此示例中，名为 <xref:System.Windows.Controls.Grid>。`tomorrowsWeather`</span><span class="sxs-lookup"><span data-stu-id="01fde-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="01fde-231">对 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 的调用采用三个参数：优先级设置为 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>;通过委托的实例传入的回调 `OneArgDelegate`;和一个名为 `weather`的字符串，它是回调的参数。</span><span class="sxs-lookup"><span data-stu-id="01fde-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-232"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-233"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="01fde-234">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="01fde-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-235">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-236">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="01fde-237">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-238">作为指定方法的参数传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="01fde-239">按指定的优先级并使用指定的参数数组在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-240">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-241">如果不需要参数，则可以 `null` `arg` 参数。</span><span class="sxs-lookup"><span data-stu-id="01fde-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="01fde-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="01fde-243">可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：</span><span class="sxs-lookup"><span data-stu-id="01fde-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="01fde-244">更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-245">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="01fde-246">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="01fde-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="01fde-247">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="01fde-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="01fde-249">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-250">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-251">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-252">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-254">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-255">如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="01fde-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="01fde-256">如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。</span><span class="sxs-lookup"><span data-stu-id="01fde-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-257"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="01fde-259">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="01fde-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-260">将按其开始关闭调度程序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="01fde-261">异步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 要求无限制的 UI 权限。</span><span class="sxs-lookup"><span data-stu-id="01fde-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="01fde-263">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="01fde-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-264">在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="01fde-265">当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。</span><span class="sxs-lookup"><span data-stu-id="01fde-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-266">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="01fde-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01fde-267">确定调用线程是否为与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</span><span class="sxs-lookup"><span data-stu-id="01fde-267">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="01fde-268">如果调用线程是与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-268"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-269">仅在其上创建 <xref:System.Windows.Threading.DispatcherObject> 的 <xref:System.Windows.Threading.Dispatcher> 可以访问对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-269">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="01fde-270">使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 从其他线程访问对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-270">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="01fde-271">可以从任何线程调用 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>。</span><span class="sxs-lookup"><span data-stu-id="01fde-271"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="01fde-272"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 和 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 之间的区别在于 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 会返回一个布尔值，指示调用线程是否有权访问 <xref:System.Windows.Threading.Dispatcher>，<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 引发了异常。</span><span class="sxs-lookup"><span data-stu-id="01fde-272">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-273">下面的示例使用 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 来确定线程是否有权访问 <xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="01fde-273">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="01fde-274">将调用与 <xref:System.Windows.Controls.Button> 关联的 <xref:System.Windows.Threading.Dispatcher> 的 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 方法来验证对线程的访问。</span><span class="sxs-lookup"><span data-stu-id="01fde-274">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="01fde-275">如果调用线程具有对 <xref:System.Windows.Threading.Dispatcher>的访问权限，则 <xref:System.Windows.Controls.Button> 会通过访问 <xref:System.Windows.Controls.Button>的成员进行更新;否则，将 <xref:System.Windows.Controls.Button> 作为参数接受的委托将置于 <xref:System.Windows.Threading.Dispatcher>上。</span><span class="sxs-lookup"><span data-stu-id="01fde-275">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="01fde-276"><xref:System.Windows.Threading.Dispatcher> 将委派更新 <xref:System.Windows.Controls.Button>的工作。</span><span class="sxs-lookup"><span data-stu-id="01fde-276">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-277">获取当前正在执行的线程的 <see cref="T:System.Windows.Threading.Dispatcher" />，并在该线程没有关联的调度程序时创建一个新的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-277">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="01fde-278">与当前线程关联的调度程序。</span><span class="sxs-lookup"><span data-stu-id="01fde-278">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-279">如果 <xref:System.Windows.Threading.Dispatcher> 与当前线程不关联，则将创建一个新的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-279">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="01fde-280">这不同于使用 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 方法的情况。</span><span class="sxs-lookup"><span data-stu-id="01fde-280">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="01fde-281">如果没有与指定线程关联的调度程序，<xref:System.Windows.Threading.Dispatcher.FromThread%2A> 将返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="01fde-281"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01fde-282">禁用对 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的处理。</span><span class="sxs-lookup"><span data-stu-id="01fde-282">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="01fde-283">一个用于重新启用调度程序处理的结构。</span><span class="sxs-lookup"><span data-stu-id="01fde-283">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-284">禁用调度程序处理是一种用于消除不相关的重入机会的高级方法。</span><span class="sxs-lookup"><span data-stu-id="01fde-284">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="01fde-285">禁用处理的影响如下：</span><span class="sxs-lookup"><span data-stu-id="01fde-285">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="01fde-286">CLR 锁不会在内部抽取消息。</span><span class="sxs-lookup"><span data-stu-id="01fde-286">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="01fde-287">不允许推送 <xref:System.Windows.Threading.DispatcherFrame> 的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-287"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="01fde-288">不允许消息处理。</span><span class="sxs-lookup"><span data-stu-id="01fde-288">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="01fde-289">调用时，<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 返回的 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构可用于重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="01fde-289">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="01fde-290">对 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构调用 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 会重新启用处理。</span><span class="sxs-lookup"><span data-stu-id="01fde-290">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="01fde-291">只能在与 <xref:System.Windows.Threading.Dispatcher> 相关联的线程上调用 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>。</span><span class="sxs-lookup"><span data-stu-id="01fde-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-292">下面的示例演示如何禁用调度程序处理并重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="01fde-292">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="01fde-293">在**using**语句中调用 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>。</span><span class="sxs-lookup"><span data-stu-id="01fde-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="01fde-294"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 返回一个 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构，该结构用作在**使用**块完成时要释放的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-294"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="01fde-295">如果对 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构调用 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>，则重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="01fde-295">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01fde-296">请求退出所有帧，包括嵌套的帧。</span><span class="sxs-lookup"><span data-stu-id="01fde-296">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromThread (thread As Thread) As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="01fde-297">要从中获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程。</span><span class="sxs-lookup"><span data-stu-id="01fde-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="01fde-298">获取指定线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="01fde-299"><paramref name="thread" /> 的调度程序。</span><span class="sxs-lookup"><span data-stu-id="01fde-299">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-300">如果调度程序不可用于指定的线程，则将返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="01fde-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="01fde-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 不会在没有 <xref:System.Windows.Threading.Dispatcher>的线程上创建 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="01fde-302">尝试使用 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 属性获取 <xref:System.Windows.Threading.Dispatcher> 时，将在没有 <xref:System.Windows.Threading.Dispatcher> 的线程上创建新 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-303">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已经完成关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="01fde-304">如果调度程序已经完成关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-304"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-305">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="01fde-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-306">在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="01fde-307">当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。</span><span class="sxs-lookup"><span data-stu-id="01fde-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-308">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="01fde-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-309">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否正在关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="01fde-310">如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已经开始关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-310"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-311">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="01fde-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-312">在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="01fde-313">当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。</span><span class="sxs-lookup"><span data-stu-id="01fde-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-314">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="01fde-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-315">获取提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 的其他事件信息的挂钩集合。</span><span class="sxs-lookup"><span data-stu-id="01fde-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="01fde-316">与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的挂钩。</span><span class="sxs-lookup"><span data-stu-id="01fde-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-317"><xref:System.Windows.Threading.DispatcherHooks> 类提供有关 <xref:System.Windows.Threading.Dispatcher>的其他事件信息，如 <xref:System.Windows.Threading.Dispatcher> 不活动或操作成功时。</span><span class="sxs-lookup"><span data-stu-id="01fde-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01fde-318">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-318">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-319">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-319">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-320">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-320">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-321">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-321">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-322">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-322">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-323"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-323"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-324">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-324">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-326">下面的示例使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>将委托置于 <xref:System.Windows.Threading.DispatcherPriority.Normal> 上的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-326">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="01fde-327">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-327">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="01fde-328">在与 <see cref="T:System.Action" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-328">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="01fde-329">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-329">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-330">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-330">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="01fde-331">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-331">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="01fde-332">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-332">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-333">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-333">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="01fde-334">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-334">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01fde-335">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数同步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-335">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-336">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-336">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-337">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-337">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="01fde-338">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-338">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="01fde-339">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-339">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="01fde-340">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-340">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="01fde-341"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-341"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="01fde-342">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-342">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-344">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-344">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-345">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-345">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="01fde-346">按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-346">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-347">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-347">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-348">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-348">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-349">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-349">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-350">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-350">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-351">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-351">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-352"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-352"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-353">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-353">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-355">下面的示例使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>将委托置于 <xref:System.Windows.Threading.DispatcherPriority.Normal> 上的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-355">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01fde-356"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-356"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-357"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-357"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-358"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-358"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="01fde-359">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-359">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-360">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-360">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="01fde-361">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-361">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="01fde-362">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-362">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="01fde-363">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-363">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="01fde-364">等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="01fde-364">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-365">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-365">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="01fde-366">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-366">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01fde-367">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-367">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-368">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-368">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-369">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-369">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="01fde-370">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-370">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="01fde-371">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-371">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="01fde-372">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-372">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="01fde-373"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-373"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="01fde-374">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-374">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="01fde-376">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-376">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-377">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-377">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-378">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-378">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="01fde-379">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-379">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01fde-380">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-380">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-381">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-381">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-382">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-382">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="01fde-383">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-383">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="01fde-384">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-384">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="01fde-385">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-385">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="01fde-386"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-386"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="01fde-387">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-387">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-389">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-389">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-390">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-390">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="01fde-391">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-391">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="01fde-392">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-392">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-393">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-393">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-394">如果不需要参数，则可以 `null` `Arg`</span><span class="sxs-lookup"><span data-stu-id="01fde-394">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="01fde-395">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-395">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-396">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-396">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-397">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-397">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-398">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-398">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-399"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-399"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-400">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-400">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01fde-402"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-402"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-403"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-403"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-404"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-404"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-405">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-405">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="01fde-406">用于等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="01fde-406">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-407">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-407">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="01fde-408">按指定的优先级并使用指定的超时值在创建 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-408">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="01fde-409">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-409">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-410">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-410">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-411">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-411">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-412">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-412">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-413">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-413">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-414"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-414"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-415">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-415">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="01fde-417">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-417">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-418">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-418">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="01fde-419">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-419">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="01fde-420">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="01fde-420">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="01fde-421">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-421">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="01fde-422">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-422">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="01fde-423">等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="01fde-423">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-424">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-424">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-425">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-425">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="01fde-426">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-426">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="01fde-427">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-427">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-428">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-428">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-429">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-429">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="01fde-430">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-430">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="01fde-431">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-431">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="01fde-432">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-432">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="01fde-433"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-433"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="01fde-434">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-434">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-436">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-436">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-437">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-437">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="01fde-438">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-438">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-439">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-439">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="01fde-440">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-440">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-441">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-441">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-442">如果不需要参数，则可以 `null` `Arg`</span><span class="sxs-lookup"><span data-stu-id="01fde-442">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="01fde-443">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-443">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-444">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-444">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-445">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-445">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-446">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-446">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-447"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-447"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-448">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-448">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01fde-450"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-450"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-451"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-451"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-452"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-452"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-453">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-453">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="01fde-454">用于等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="01fde-454">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-455">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-455">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="01fde-456">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-456">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="01fde-457">如果不需要自变量，则可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-457">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="01fde-458">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-458">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-459">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-459">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-460">如果不需要参数，则可以 `null` `Arg`</span><span class="sxs-lookup"><span data-stu-id="01fde-460">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="01fde-461">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-461">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-462">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-462">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-463">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-463">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-464">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-464">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-465"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-465"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-466">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-466">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01fde-468"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-468"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-469"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-469"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-470"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-470"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-471">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="01fde-471">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="01fde-472">用于等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="01fde-472">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="01fde-473">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-473">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="01fde-474">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-474">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="01fde-475">作为指定方法的参数传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="01fde-475">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="01fde-476">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-476">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-477">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-477">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-478">如果不需要参数，则可以 `null` `Arg`。</span><span class="sxs-lookup"><span data-stu-id="01fde-478">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="01fde-479">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-479">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="01fde-480">例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。</span><span class="sxs-lookup"><span data-stu-id="01fde-480">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="01fde-481">为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-481">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="01fde-482">这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。</span><span class="sxs-lookup"><span data-stu-id="01fde-482">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="01fde-483"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="01fde-483"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="01fde-484">操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-484">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="01fde-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="01fde-486"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-486"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-487"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-487"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-488"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-488"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="01fde-489">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="01fde-489">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="01fde-490">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-490">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="01fde-491">在与 <see cref="T:System.Func`1" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-491">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-492">`callback`返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-492">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="01fde-493">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="01fde-493">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="01fde-494">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-494">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-495">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-495">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="01fde-496">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-496">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-497">`callback`返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-497">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="01fde-498">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="01fde-498">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="01fde-499">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-499">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-500">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-500">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="01fde-501">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-501">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="01fde-502">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-503">`callback`返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="01fde-504">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="01fde-504">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="01fde-505">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-505">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-506">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="01fde-507">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-507">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="01fde-508">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="01fde-508">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="01fde-509">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-509">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-510">`callback`返回的值。</span><span class="sxs-lookup"><span data-stu-id="01fde-510">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01fde-511">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-511">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="01fde-512">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-512">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="01fde-513">在与 <see cref="T:System.Action" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-513">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-514">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-514">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="01fde-515">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-515">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-516">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-516">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="01fde-517">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-517">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-518">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-518">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="01fde-519">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-519">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-520">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-520">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="01fde-521">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-521">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="01fde-522">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-522">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-523">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-523">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="01fde-524">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="01fde-524">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="01fde-525">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-525">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="01fde-526">在与 <see cref="T:System.Func`1" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-526">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-527">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-527">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="01fde-528">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="01fde-528">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="01fde-529">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-529">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-530">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-530">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="01fde-531">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-531">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-532">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-532">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="01fde-533">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="01fde-533">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="01fde-534">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="01fde-534">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="01fde-535">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-535">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="01fde-536">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-536">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="01fde-537">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="01fde-538">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="01fde-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01fde-539">同步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭过程。</span><span class="sxs-lookup"><span data-stu-id="01fde-539">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-540"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 要求无限制的 UI 权限。</span><span class="sxs-lookup"><span data-stu-id="01fde-540"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="01fde-541">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="01fde-541">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-542">在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-542">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="01fde-543">当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。</span><span class="sxs-lookup"><span data-stu-id="01fde-543">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-544">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="01fde-544">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="01fde-545">调度程序要处理的帧。</span><span class="sxs-lookup"><span data-stu-id="01fde-545">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="01fde-546">进入执行循环。</span><span class="sxs-lookup"><span data-stu-id="01fde-546">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-547">一个 <xref:System.Windows.Threading.DispatcherFrame> 表示处理挂起工作项的循环。</span><span class="sxs-lookup"><span data-stu-id="01fde-547">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="01fde-548">调度程序在循环中处理工作项队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-548">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="01fde-549">循环称为 "帧"。</span><span class="sxs-lookup"><span data-stu-id="01fde-549">The loop is referred to as a frame.</span></span>  <span data-ttu-id="01fde-550">初始循环通常由应用程序通过调用 <xref:System.Windows.Threading.Dispatcher.Run%2A>来启动。</span><span class="sxs-lookup"><span data-stu-id="01fde-550">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="01fde-551"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 进入由参数 `frame`表示的循环。</span><span class="sxs-lookup"><span data-stu-id="01fde-551"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="01fde-552">循环的每次迭代时，<xref:System.Windows.Threading.Dispatcher> 将检查 <xref:System.Windows.Threading.DispatcherFrame> 类的 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 属性，以确定循环应继续还是应停止。</span><span class="sxs-lookup"><span data-stu-id="01fde-552">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="01fde-553"><xref:System.Windows.Threading.DispatcherFrame> 允许显式设置 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 属性，并遵循 <xref:System.Windows.Threading.Dispatcher>上的 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="01fde-553"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="01fde-554">这意味着当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，使用默认 <xref:System.Windows.Threading.DispatcherFrame> 实现的帧将退出，这将使所有嵌套帧退出。</span><span class="sxs-lookup"><span data-stu-id="01fde-554">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-555">下面的示例演示如何使用 <xref:System.Windows.Threading.DispatcherFrame> 来实现与 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> 方法类似的结果。</span><span class="sxs-lookup"><span data-stu-id="01fde-555">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="01fde-556"><paramref name="frame" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-556"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01fde-557"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 是 <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="01fde-557"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="01fde-558">- 或 -</span><span class="sxs-lookup"><span data-stu-id="01fde-558">-or-</span></span> 
 <span data-ttu-id="01fde-559"><paramref name="frame" /> 在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 中运行。</span><span class="sxs-lookup"><span data-stu-id="01fde-559"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="01fde-560">- 或 -</span><span class="sxs-lookup"><span data-stu-id="01fde-560">-or-</span></span> 
<span data-ttu-id="01fde-561">已禁用对调度程序的处理。</span><span class="sxs-lookup"><span data-stu-id="01fde-561">Dispatcher processing has been disabled.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01fde-562">将主执行帧推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="01fde-562">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-563"><xref:System.Windows.Threading.Dispatcher> 在循环中处理事件队列。</span><span class="sxs-lookup"><span data-stu-id="01fde-563">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="01fde-564">循环称为 "帧"。</span><span class="sxs-lookup"><span data-stu-id="01fde-564">The loop is referred to as a frame.</span></span>  <span data-ttu-id="01fde-565">初始循环通常由应用程序通过调用 <xref:System.Windows.Threading.Dispatcher.Run%2A>来启动。</span><span class="sxs-lookup"><span data-stu-id="01fde-565">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="01fde-566">主执行帧将继续运行，直至 <xref:System.Windows.Threading.Dispatcher> 关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-566">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-567">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="01fde-567">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-568">启动 <xref:System.Windows.Threading.Dispatcher> 的关闭进程时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="01fde-568">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-569">在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-569">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="01fde-570">当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。</span><span class="sxs-lookup"><span data-stu-id="01fde-570">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-571">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="01fde-571">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-572">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 开始关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="01fde-572">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-573">启动 <xref:System.Windows.Threading.Dispatcher> 的关闭进程时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="01fde-573">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-574">在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="01fde-574">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="01fde-575">当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。</span><span class="sxs-lookup"><span data-stu-id="01fde-575">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="01fde-576">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="01fde-576">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-577">获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</span><span class="sxs-lookup"><span data-stu-id="01fde-577">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="01fde-578">线程。</span><span class="sxs-lookup"><span data-stu-id="01fde-578">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-579">在通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</span><span class="sxs-lookup"><span data-stu-id="01fde-579">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-580">如果 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 未捕获到委托执行期间引发的异常，则会引发此事件。</span><span class="sxs-lookup"><span data-stu-id="01fde-580">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="01fde-581">处理程序可以将异常标记为已处理，这将阻止调用内部异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="01fde-581">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="01fde-582">必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="01fde-582">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="01fde-583">建议避免在处理程序中分配内存或执行任何资源密集型操作。</span><span class="sxs-lookup"><span data-stu-id="01fde-583">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="01fde-584"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件提供了不引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件的方法。</span><span class="sxs-lookup"><span data-stu-id="01fde-584">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="01fde-585">首先引发 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件，如果 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 上的 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 设置为 `false`，则不会引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件。</span><span class="sxs-lookup"><span data-stu-id="01fde-585">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01fde-586">当在筛选阶段通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</span><span class="sxs-lookup"><span data-stu-id="01fde-586">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-587">此事件在筛选阶段期间引发异常，该异常在委托执行过程中通过 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 方式引发，未捕获。</span><span class="sxs-lookup"><span data-stu-id="01fde-587">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="01fde-588">此时不展开调用堆栈（第一次出现异常）。</span><span class="sxs-lookup"><span data-stu-id="01fde-588">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="01fde-589">必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="01fde-589">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="01fde-590">建议避免在处理程序中分配内存或执行任何资源密集型操作。</span><span class="sxs-lookup"><span data-stu-id="01fde-590">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="01fde-591"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件提供了不引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件的方法。</span><span class="sxs-lookup"><span data-stu-id="01fde-591">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="01fde-592">首先引发 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件，如果 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 上的 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 设置为 `false`，则不会引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件。</span><span class="sxs-lookup"><span data-stu-id="01fde-592">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-593">要检查的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-593">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="01fde-594">将由优先级无效时发生的异常返回的字符串。</span><span class="sxs-lookup"><span data-stu-id="01fde-594">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="01fde-595">确定指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否为有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="01fde-595">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="01fde-596"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-596"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01fde-597">确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-597">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-598">仅在其上创建 <xref:System.Windows.Threading.Dispatcher> 线程可以访问 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-598">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="01fde-599">此方法是公共的;因此，任何线程都可以检查它是否有权访问 <xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="01fde-599">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="01fde-600"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 和 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 之间的区别在于，如果调用线程不能访问 <xref:System.Windows.Threading.Dispatcher> 并且 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 引发异常，则 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 会返回一个布尔值。</span><span class="sxs-lookup"><span data-stu-id="01fde-600">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01fde-601">下面的示例使用 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 来确定线程是否有权访问在其上创建了 <xref:System.Windows.Controls.Button> 的线程。</span><span class="sxs-lookup"><span data-stu-id="01fde-601">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="01fde-602">方法采用对象作为参数，该参数强制转换为 <xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="01fde-602">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="01fde-603">将调用 <xref:System.Windows.Controls.Button> 的 <xref:System.Windows.Threading.Dispatcher> 的 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 方法来验证对线程的访问。</span><span class="sxs-lookup"><span data-stu-id="01fde-603">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="01fde-604">如果调用线程具有对 <xref:System.Windows.Threading.Dispatcher>的访问权限，则只需访问 <xref:System.Windows.Controls.Button>的成员即可更新 <xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="01fde-604">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="01fde-605">如果调用线程没有访问权限，则会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="01fde-605">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="01fde-606">此示例捕获异常并将接受 <xref:System.Windows.Controls.Button> 作为参数的委托推送到 <xref:System.Windows.Controls.Button>的 <xref:System.Windows.Threading.Dispatcher> 上。</span><span class="sxs-lookup"><span data-stu-id="01fde-606">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="01fde-607">此 <xref:System.Windows.Threading.Dispatcher> 将执行更新 <xref:System.Windows.Controls.Button>的操作。</span><span class="sxs-lookup"><span data-stu-id="01fde-607">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01fde-608">调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="01fde-608">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01fde-609">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-609">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01fde-610">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-610">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="01fde-611">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-611">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-612">此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。</span><span class="sxs-lookup"><span data-stu-id="01fde-612">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="01fde-613">在返回值上使用 `await`或 `Await` Visual Basic，运算符，以将控制权返回给当前调度程序。</span><span class="sxs-lookup"><span data-stu-id="01fde-613">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="01fde-614">如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。</span><span class="sxs-lookup"><span data-stu-id="01fde-614">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="01fde-615">例如，可以在更新控件的长时间运行的循环中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="01fde-615">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="01fde-616">此方法等效于调用 <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> 方法并传入 <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="01fde-616">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="01fde-617">安排延续的优先级别。</span><span class="sxs-lookup"><span data-stu-id="01fde-617">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="01fde-618">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-618">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="01fde-619">当控件返回等待此方法的结果的代码按指定的优先级计划时，发生的操作。</span><span class="sxs-lookup"><span data-stu-id="01fde-619">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="01fde-620">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="01fde-620">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01fde-621">此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。</span><span class="sxs-lookup"><span data-stu-id="01fde-621">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="01fde-622">在返回值上使用 `await`或 `Await` Visual Basic，运算符，以将控制权返回给当前调度程序。</span><span class="sxs-lookup"><span data-stu-id="01fde-622">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="01fde-623">如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。</span><span class="sxs-lookup"><span data-stu-id="01fde-623">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="01fde-624">例如，可以在更新控件的长时间运行的循环中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="01fde-624">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
