<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bd8ad0602044d72c30878f0952ec28e254b400d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83968599" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Dispatcher extends System.Object" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于管理线程工作项队列的服务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher> 维护特定线程的工作项的优先顺序队列。  
  
 在线程上创建 <xref:System.Windows.Threading.Dispatcher> 时，即使 <xref:System.Windows.Threading.Dispatcher> 关闭，它也会成为可以与线程关联的唯一 <xref:System.Windows.Threading.Dispatcher>。  
  
 如果尝试获取当前线程的 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>，但 <xref:System.Windows.Threading.Dispatcher> 与该线程不关联，则将创建一个 <xref:System.Windows.Threading.Dispatcher>。 当你创建 <xref:System.Windows.Threading.DispatcherObject>时，还会创建一个 <xref:System.Windows.Threading.Dispatcher>。 如果在后台线程上创建 <xref:System.Windows.Threading.Dispatcher>，请确保在退出该线程前关闭调度程序。  
  
 如果 <xref:System.Windows.Threading.Dispatcher> 关闭，则无法重启它。  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只能通过与 <xref:System.Windows.Threading.DispatcherObject> 相关联的 <xref:System.Windows.Threading.Dispatcher> 访问。  例如，后台线程无法在 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 线程上更新与 <xref:System.Windows.Threading.Dispatcher> 关联的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 <xref:System.Windows.Controls.ContentControl.Content%2A> 属性，后台线程必须将工作委托给与 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的队列中。  
  
 如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。  
  
 除 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>以外，<xref:System.Windows.Threading.Dispatcher>上的所有方法均可自由线程。  
  
 派生自 <xref:System.Windows.Threading.DispatcherObject> 的对象具有线程关联。  
  
 从 <xref:System.Windows.Freezable> 派生的对象在被冻结时是自由线程的。  有关详细信息，请参阅 [Freezable 对象概述](/dotnet/framework/wpf/advanced/freezable-objects-overview)。  
  
   
  
## Examples  
 下面的示例演示如何将操作置于 <xref:System.Windows.Threading.Dispatcher>上。  有关此示例的完整源代码，请参阅[具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。  
  
 首先，创建了不接受任何参数的委托。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 接下来，调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>。  对 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 的此调用采用以下两个参数：优先级设置为 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>，后者通过委托 `NextPrimeDelegate`的实例传入。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">具有长时间运行计算的单线程应用程序示例</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行委托。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。  
  
 可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：  
  
-   更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。  
  
-   从事件队列中删除委托。  
  
-   正在等待委托返回。  
  
-   获取委托在执行后返回的值。  
  
 如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。  
  
 如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="args">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
        <summary>用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程的指定参数异步执行指定委托。</summary>
        <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：  
  
-   更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。  
  
-   从事件队列中删除委托。  
  
-   正在等待委托返回。  
  
-   获取委托在执行后返回的值。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。 例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。 为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。 这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。 操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="method">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <summary>按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
        <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。  
  
 可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：  
  
-   更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。  
  
-   从事件队列中删除委托。  
  
-   正在等待委托返回。  
  
-   获取委托在执行后返回的值。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。  
  
   
  
## Examples  
 下面的示例演示如何将操作置于 <xref:System.Windows.Threading.Dispatcher>上。  有关此示例的完整源代码，请参阅[具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。  
  
 首先，创建了不接受任何参数的委托。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 接下来，调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>。  由于每个 <xref:System.Windows.Threading.DispatcherObject> 都有一个属性，该属性返回与之关联的 <xref:System.Windows.Threading.Dispatcher>，因此所需的 <xref:System.Windows.Threading.Dispatcher> 是通过查询 <xref:System.Windows.Threading.DispatcherObject>获取的，在此示例中，名为 <xref:System.Windows.Controls.Button>。`startStopButton`   对 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 的调用采用以下两个参数：将设置为 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>的优先级，以及通过委托 `NextPrimeDelegate`的实例传入的回调。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">具有长时间运行计算的单线程应用程序示例</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="args">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
        <summary>用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上的指定参数，按指定优先级异步执行指定委托。</summary>
        <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：  
  
-   更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。  
  
-   从事件队列中删除委托。  
  
-   正在等待委托返回。  
  
-   获取委托在执行后返回的值。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。 例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。 为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。 这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。 操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="method">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="arg">作为参数传递到指定方法中的对象。</param>
        <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
        <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不需要参数，则可以 `null` `Arg`。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。  
  
 可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：  
  
-   更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。  
  
-   从事件队列中删除委托。  
  
-   正在等待委托返回。  
  
-   获取委托在执行后返回的值。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。  
  
 如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。  
  
   
  
## Examples  
 下面的示例演示如何将操作置于 <xref:System.Windows.Threading.Dispatcher>上。  
  
 首先，创建一个接受一个参数（在本例中为字符串）的委托。  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 接下来，调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>。  由于每个 <xref:System.Windows.Threading.DispatcherObject> 都有一个属性，该属性返回与之关联的 <xref:System.Windows.Threading.Dispatcher>，因此所需的 <xref:System.Windows.Threading.Dispatcher> 是通过查询 <xref:System.Windows.Threading.DispatcherObject>获取的，在此示例中，名为 <xref:System.Windows.Controls.Grid>。`tomorrowsWeather` 对 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 的调用采用三个参数：优先级设置为 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>;通过委托的实例传入的回调 `OneArgDelegate`;和一个名为 `weather`的字符串，它是回调的参数。  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">具有长时间运行计算的单线程应用程序示例</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="arg">作为参数传递到指定方法中的对象。</param>
        <param name="args">作为指定方法的参数传递的对象数组。</param>
        <summary>按指定的优先级并使用指定的参数数组在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
        <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中挂起执行的委托进行交互。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不需要参数，则可以 `null` `arg` 参数。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，当委托在事件队列中时，该对象可用于与委托交互。  
  
 可以通过多种方式使用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回的 <xref:System.Windows.Threading.DispatcherOperation> 对象与指定的委托进行交互，例如：  
  
-   更改委托的 <xref:System.Windows.Threading.DispatcherPriority>，因为该委托正在事件队列中挂起执行。  
  
-   从事件队列中删除委托。  
  
-   正在等待委托返回。  
  
-   获取委托在执行后返回的值。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 如果在同一 <xref:System.Windows.Threading.DispatcherPriority>上发出多个 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 调用，则它们将按照调用的顺序执行。  
  
 如果对已关闭的 <xref:System.Windows.Threading.Dispatcher> 调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>，则返回 <xref:System.Windows.Threading.DispatcherOperation> 的 "状态" 属性设置为 "<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的优先级。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">具有长时间运行计算的单线程应用程序示例</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">将按其开始关闭调度程序的优先级。</param>
        <summary>异步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 要求无限制的 UI 权限。  
  
 当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。  
  
 在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。  
  
 当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。  
  
 关闭进程开始后，将中止队列中所有挂起的工作项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定调用线程是否为与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</summary>
        <returns>如果调用线程是与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅在其上创建 <xref:System.Windows.Threading.DispatcherObject> 的 <xref:System.Windows.Threading.Dispatcher> 可以访问对象。  使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 从其他线程访问对象。  
  
 可以从任何线程调用 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>。  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 和 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 之间的区别在于 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 会返回一个布尔值，指示调用线程是否有权访问 <xref:System.Windows.Threading.Dispatcher>，<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 引发了异常。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 来确定线程是否有权访问 <xref:System.Windows.Controls.Button>。  将调用与 <xref:System.Windows.Controls.Button> 关联的 <xref:System.Windows.Threading.Dispatcher> 的 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 方法来验证对线程的访问。  如果调用线程具有对 <xref:System.Windows.Threading.Dispatcher>的访问权限，则 <xref:System.Windows.Controls.Button> 会通过访问 <xref:System.Windows.Controls.Button>的成员进行更新;否则，将 <xref:System.Windows.Controls.Button> 作为参数接受的委托将置于 <xref:System.Windows.Threading.Dispatcher>上。  <xref:System.Windows.Threading.Dispatcher> 将委派更新 <xref:System.Windows.Controls.Button>的工作。  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前正在执行的线程的 <see cref="T:System.Windows.Threading.Dispatcher" />，并在该线程没有关联的调度程序时创建一个新的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <value>与当前线程关联的调度程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Threading.Dispatcher> 与当前线程不关联，则将创建一个新的 <xref:System.Windows.Threading.Dispatcher>。  这不同于使用 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 方法的情况。  如果没有与指定线程关联的调度程序，<xref:System.Windows.Threading.Dispatcher.FromThread%2A> 将返回 `null`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>禁用对 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的处理。</summary>
        <returns>一个用于重新启用调度程序处理的结构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 禁用调度程序处理是一种用于消除不相关的重入机会的高级方法。  
  
 禁用处理的影响如下：  
  
-   CLR 锁不会在内部抽取消息。  
  
-   不允许推送 <xref:System.Windows.Threading.DispatcherFrame> 的对象。  
  
-   不允许消息处理。  
  
 调用时，<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 返回的 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构可用于重新启用调度程序处理。  对 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构调用 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 会重新启用处理。  
  
 只能在与 <xref:System.Windows.Threading.Dispatcher> 相关联的线程上调用 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>。  
  
   
  
## Examples  
 下面的示例演示如何禁用调度程序处理并重新启用调度程序处理。  在**using**语句中调用 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>。  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 返回一个 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构，该结构用作在**使用**块完成时要释放的对象。  如果对 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构调用 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>，则重新启用调度程序处理。  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>请求退出所有帧，包括嵌套的帧。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromThread (thread As Thread) As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">要从中获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程。</param>
        <summary>获取指定线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns><paramref name="thread" /> 的调度程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调度程序不可用于指定的线程，则将返回 `null`。  
  
 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 不会在没有 <xref:System.Windows.Threading.Dispatcher>的线程上创建 <xref:System.Windows.Threading.Dispatcher>。   尝试使用 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 属性获取 <xref:System.Windows.Threading.Dispatcher> 时，将在没有 <xref:System.Windows.Threading.Dispatcher> 的线程上创建新 <xref:System.Windows.Threading.Dispatcher>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已经完成关闭。</summary>
        <value>如果调度程序已经完成关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。  
  
 在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。  
  
 当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。  
  
 关闭进程开始后，将中止队列中所有挂起的工作项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否正在关闭。</summary>
        <value>如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已经开始关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。  
  
 在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。  
  
 当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。  
  
 关闭进程开始后，将中止队列中所有挂起的工作项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 的其他事件信息的挂钩集合。</summary>
        <value>与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的挂钩。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherHooks> 类提供有关 <xref:System.Windows.Threading.Dispatcher>的其他事件信息，如 <xref:System.Windows.Threading.Dispatcher> 不活动或操作成功时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>将委托置于 <xref:System.Windows.Threading.DispatcherPriority.Normal> 上的 <xref:System.Windows.Threading.Dispatcher>。  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">要通过调度程序调用的委托。</param>
        <summary>在与 <see cref="T:System.Action" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <summary>在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="args">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
        <summary>用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数同步执行指定委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。 例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。 为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。 这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。 操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="method">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <summary>按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>将委托置于 <xref:System.Windows.Threading.DispatcherPriority.Normal> 上的 <xref:System.Windows.Threading.Dispatcher>。  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的优先级。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <param name="cancellationToken">指示是否取消操作的对象。</param>
        <summary>在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="timeout">等待操作完成的最长时间。</param>
        <param name="args">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
        <summary>用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。 例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。 为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。 这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。 操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="args">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
        <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。 例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。 为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。 这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。 操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="method">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="arg">作为参数传递到给定方法中的对象。</param>
        <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不需要参数，则可以 `null` `Arg`  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的优先级。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="timeout">用于等待操作完成的最长时间。</param>
        <param name="method">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <summary>按指定的优先级并使用指定的超时值在创建 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上同步执行指定的委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <param name="cancellationToken">指示是否取消操作的对象。</param>
        <param name="timeout">等待操作启动的最长时间。</param>
        <summary>在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="timeout">等待操作完成的最长时间。</param>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="args">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
        <summary>用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。 例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。 为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。 这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。 操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="arg">作为参数传递到给定方法中的对象。</param>
        <param name="args">作为给定方法的自变量传递的对象数组。</param>
        <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不需要参数，则可以 `null` `Arg`  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的优先级。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="timeout">用于等待操作完成的最长时间。</param>
        <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="arg">作为参数传递到给定方法中的对象。 如果不需要自变量，则可以为 <see langword="null" />。</param>
        <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不需要参数，则可以 `null` `Arg`  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的优先级。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
        <param name="timeout">用于等待操作完成的最长时间。</param>
        <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
        <param name="arg">作为参数传递到指定方法中的对象。</param>
        <param name="args">作为指定方法的参数传递的对象数组。</param>
        <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
        <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不需要参数，则可以 `null` `Arg`。  
  
 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建 <xref:System.Windows.Threading.DispatcherObject> 的线程才能访问该对象。  例如，从主 UI 线程旋转的后台线程无法更新在 UI 线程上创建的 <xref:System.Windows.Controls.Button> 的内容。  为了让后台线程访问 <xref:System.Windows.Controls.Button>的 Content 属性，后台线程必须将工作委托给与 UI 线程关联的 <xref:System.Windows.Threading.Dispatcher>。  这是通过使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来实现的。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同步，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。  操作将添加到指定 <xref:System.Windows.Threading.DispatcherPriority><xref:System.Windows.Threading.Dispatcher> 的事件队列。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一种同步操作;因此，在回调返回后，控件才会返回到调用对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定委托的返回值类型。</typeparam>
        <param name="callback">要通过调度程序调用的委托。</param>
        <summary>在与 <see cref="T:System.Func`1" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback`返回的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定委托的返回值类型。</typeparam>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <summary>在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback`返回的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定委托的返回值类型。</typeparam>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <param name="cancellationToken">指示是否取消操作的对象。</param>
        <summary>在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback`返回的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定委托的返回值类型。</typeparam>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <param name="cancellationToken">指示是否取消操作的对象。</param>
        <param name="timeout">等待操作启动的最长时间。</param>
        <summary>在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `callback`返回的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">要通过调度程序调用的委托。</param>
        <summary>在与 <see cref="T:System.Action" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <summary>在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <param name="cancellationToken">指示是否取消操作的对象。</param>
        <summary>在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定委托的返回值类型。</typeparam>
        <param name="callback">要通过调度程序调用的委托。</param>
        <summary>在与 <see cref="T:System.Func`1" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定委托的返回值类型。</typeparam>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <summary>在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定委托的返回值类型。</typeparam>
        <param name="callback">要通过调度程序调用的委托。</param>
        <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
        <param name="cancellationToken">指示是否取消操作的对象。</param>
        <summary>在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>同步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭过程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 要求无限制的 UI 权限。  
  
 当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。  
  
 在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。  
  
 当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。  
  
 关闭进程开始后，将中止队列中所有挂起的工作项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">调度程序要处理的帧。</param>
        <summary>进入执行循环。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个 <xref:System.Windows.Threading.DispatcherFrame> 表示处理挂起工作项的循环。  
  
 调度程序在循环中处理工作项队列。  循环称为 "帧"。  初始循环通常由应用程序通过调用 <xref:System.Windows.Threading.Dispatcher.Run%2A>来启动。  
  
 <xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 进入由参数 `frame`表示的循环。  循环的每次迭代时，<xref:System.Windows.Threading.Dispatcher> 将检查 <xref:System.Windows.Threading.DispatcherFrame> 类的 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 属性，以确定循环应继续还是应停止。  
  
 <xref:System.Windows.Threading.DispatcherFrame> 允许显式设置 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 属性，并遵循 <xref:System.Windows.Threading.Dispatcher>上的 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 属性。  这意味着当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，使用默认 <xref:System.Windows.Threading.DispatcherFrame> 实现的帧将退出，这将使所有嵌套帧退出。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Windows.Threading.DispatcherFrame> 来实现与 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> 方法类似的结果。  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="frame" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 是 <see langword="true" />  
  
- 或 - 
 <paramref name="frame" /> 在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 中运行。  
  
- 或 - 
已禁用对调度程序的处理。</exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将主执行帧推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 的事件队列中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher> 在循环中处理事件队列。  循环称为 "帧"。  初始循环通常由应用程序通过调用 <xref:System.Windows.Threading.Dispatcher.Run%2A>来启动。  
  
 主执行帧将继续运行，直至 <xref:System.Windows.Threading.Dispatcher> 关闭。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成关闭时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启动 <xref:System.Windows.Threading.Dispatcher> 的关闭进程时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。  
  
 在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。  
  
 当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。  
  
 关闭进程开始后，将中止队列中所有挂起的工作项。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:System.Windows.Threading.Dispatcher" /> 开始关闭时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启动 <xref:System.Windows.Threading.Dispatcher> 的关闭进程时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 设置为 `true`。  
  
 在事件队列展开之前，<xref:System.Windows.Threading.Dispatcher> 不会完全关闭。  
  
 当调度程序完成关闭时，将引发 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 事件，并且 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 "`true`"。  
  
 关闭进程开始后，将中止队列中所有挂起的工作项。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</summary>
        <value>线程。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 未捕获到委托执行期间引发的异常，则会引发此事件。  
  
 处理程序可以将异常标记为已处理，这将阻止调用内部异常处理程序。  
  
 必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。 建议避免在处理程序中分配内存或执行任何资源密集型操作。  
  
 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件提供了不引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件的方法。  首先引发 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件，如果 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 上的 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 设置为 `false`，则不会引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在筛选阶段通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件在筛选阶段期间引发异常，该异常在委托执行过程中通过 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 方式引发，未捕获。  
  
 此时不展开调用堆栈（第一次出现异常）。  
  
 必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。  建议避免在处理程序中分配内存或执行任何资源密集型操作。  
  
 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件提供了不引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件的方法。  首先引发 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 事件，如果 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 上的 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 设置为 `false`，则不会引发 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">要检查的优先级。</param>
        <param name="parameterName">将由优先级无效时发生的异常返回的字符串。</param>
        <summary>确定指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否为有效的优先级。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅在其上创建 <xref:System.Windows.Threading.Dispatcher> 线程可以访问 <xref:System.Windows.Threading.Dispatcher>。  
  
 此方法是公共的;因此，任何线程都可以检查它是否有权访问 <xref:System.Windows.Threading.Dispatcher>。  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 和 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 之间的区别在于，如果调用线程不能访问 <xref:System.Windows.Threading.Dispatcher> 并且 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 引发异常，则 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 会返回一个布尔值。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 来确定线程是否有权访问在其上创建了 <xref:System.Windows.Controls.Button> 的线程。  方法采用对象作为参数，该参数强制转换为 <xref:System.Windows.Controls.Button>。  将调用 <xref:System.Windows.Controls.Button> 的 <xref:System.Windows.Threading.Dispatcher> 的 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 方法来验证对线程的访问。  
  
 如果调用线程具有对 <xref:System.Windows.Threading.Dispatcher>的访问权限，则只需访问 <xref:System.Windows.Controls.Button>的成员即可更新 <xref:System.Windows.Controls.Button>。  
  
 如果调用线程没有访问权限，则会引发 <xref:System.InvalidOperationException>。  此示例捕获异常并将接受 <xref:System.Windows.Controls.Button> 作为参数的委托推送到 <xref:System.Windows.Controls.Button>的 <xref:System.Windows.Threading.Dispatcher> 上。  此 <xref:System.Windows.Threading.Dispatcher> 将执行更新 <xref:System.Windows.Controls.Button>的操作。  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</summary>
        <returns>异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。 在返回值上使用 `await`或 `Await` Visual Basic，运算符，以将控制权返回给当前调度程序。 如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。 例如，可以在更新控件的长时间运行的循环中使用此方法。  
  
 此方法等效于调用 <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> 方法并传入 <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority">安排延续的优先级别。</param>
        <summary>创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。  当控件返回等待此方法的结果的代码按指定的优先级计划时，发生的操作。</summary>
        <returns>异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。 在返回值上使用 `await`或 `Await` Visual Basic，运算符，以将控制权返回给当前调度程序。 如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。 例如，可以在更新控件的长时间运行的循环中使用此方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
