<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb453b55817bdece49fca73f5a99dbaa6726d300" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86992012" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Dispatcher extends System.Object" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e5220-101">提供用于管理线程工作项队列的服务。</span><span class="sxs-lookup"><span data-stu-id="e5220-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-102"><xref:System.Windows.Threading.Dispatcher>维护特定线程的工作项的优先顺序队列。</span><span class="sxs-lookup"><span data-stu-id="e5220-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="e5220-103">在 <xref:System.Windows.Threading.Dispatcher> 线程上创建时，即使关闭，它也将变为 <xref:System.Windows.Threading.Dispatcher> 可与线程关联的唯一 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="e5220-104">如果尝试获取 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 当前线程的，并且 <xref:System.Windows.Threading.Dispatcher> 没有与线程关联，则 <xref:System.Windows.Threading.Dispatcher> 将创建一个。</span><span class="sxs-lookup"><span data-stu-id="e5220-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="e5220-105"><xref:System.Windows.Threading.Dispatcher>当你创建时，还会创建一个 <xref:System.Windows.Threading.DispatcherObject> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="e5220-106">如果 <xref:System.Windows.Threading.Dispatcher> 在后台线程上创建，请确保在退出该线程前关闭调度程序。</span><span class="sxs-lookup"><span data-stu-id="e5220-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="e5220-107">如果 <xref:System.Windows.Threading.Dispatcher> 关闭，则无法重启它。</span><span class="sxs-lookup"><span data-stu-id="e5220-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="e5220-108">在 WPF 中， <xref:System.Windows.Threading.DispatcherObject> 只能由与相关联的来访问 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-108">In WPF, a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="e5220-109">例如，后台线程无法 <xref:System.Windows.Controls.Button> 在线程上更新与关联的的内容 <xref:System.Windows.Threading.Dispatcher> [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="e5220-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="e5220-110">为了让后台线程访问 <xref:System.Windows.Controls.ContentControl.Content%2A> 的属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与线程关联的 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="e5220-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="e5220-111">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="e5220-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-113">操作将添加到指定的的队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-114">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 对 <xref:System.Windows.Threading.Dispatcher> 已关闭的调用，则返回的状态属性 <xref:System.Windows.Threading.DispatcherOperation> 设置为 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="e5220-115">除之外的所有方法 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 均为自由线程。</span><span class="sxs-lookup"><span data-stu-id="e5220-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="e5220-116">派生自的对象 <xref:System.Windows.Threading.DispatcherObject> 具有线程关联。</span><span class="sxs-lookup"><span data-stu-id="e5220-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="e5220-117">从派生的对象在 <xref:System.Windows.Freezable> 被冻结时是自由线程的。</span><span class="sxs-lookup"><span data-stu-id="e5220-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="e5220-118">有关详细信息，请参阅 [Freezable 对象概述](/dotnet/framework/wpf/advanced/freezable-objects-overview)。</span><span class="sxs-lookup"><span data-stu-id="e5220-118">For more information, see [Freezable Objects Overview](/dotnet/framework/wpf/advanced/freezable-objects-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5220-119">下面的示例演示如何在上放置操作 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="e5220-120">有关此示例的完整源代码，请参阅 [具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="e5220-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="e5220-121">首先，创建了不接受任何参数的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="e5220-122">接下来， <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="e5220-123">此调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 使用两个参数：设置为的优先级， <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType> 以及通过委托的实例传入的回调 `NextPrimeDelegate` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="e5220-124">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="e5220-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5220-125">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-126">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-126">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-127">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-128">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-129">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-131">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="e5220-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="e5220-134"><xref:System.Windows.Threading.DispatcherOperation>返回的对象 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="e5220-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="e5220-135">更改委托的， <xref:System.Windows.Threading.DispatcherPriority> 因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-136">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-137">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="e5220-138">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="e5220-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="e5220-139">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 在同一位置进行多个调用 <xref:System.Windows.Threading.DispatcherPriority> ，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="e5220-140">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 对 <xref:System.Windows.Threading.Dispatcher> 已关闭的调用，则返回的状态属性 <xref:System.Windows.Threading.DispatcherOperation> 设置为 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="e5220-141">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-142">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="e5220-143">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e5220-144">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程的指定参数异步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="e5220-145">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-146"><xref:System.Windows.Threading.DispatcherOperation>返回的对象 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="e5220-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="e5220-147">更改委托的， <xref:System.Windows.Threading.DispatcherPriority> 因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-148">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-149">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="e5220-150">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="e5220-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="e5220-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="e5220-152">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-152">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="e5220-153">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="e5220-154">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="e5220-155">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="e5220-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="e5220-157">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-158">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 对 <xref:System.Windows.Threading.Dispatcher> 已关闭的调用，则返回的状态属性 <xref:System.Windows.Threading.DispatcherOperation> 设置为 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-159">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-160">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="e5220-161">按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-162">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-163">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 在同一位置进行多个调用 <xref:System.Windows.Threading.DispatcherPriority> ，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="e5220-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="e5220-165"><xref:System.Windows.Threading.DispatcherOperation>返回的对象 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="e5220-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="e5220-166">更改委托的， <xref:System.Windows.Threading.DispatcherPriority> 因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-167">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-168">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="e5220-169">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="e5220-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="e5220-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="e5220-171">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-171">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-172">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-173">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-174">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-176">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-177">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 对 <xref:System.Windows.Threading.Dispatcher> 已关闭的调用，则返回的状态属性 <xref:System.Windows.Threading.DispatcherOperation> 设置为 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5220-178">下面的示例演示如何在上放置操作 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="e5220-179">有关此示例的完整源代码，请参阅 [具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="e5220-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="e5220-180">首先，创建了不接受任何参数的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="e5220-181">接下来， <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="e5220-182">由于每个 <xref:System.Windows.Threading.DispatcherObject> 都有一个属性，该属性返回与之关联的，因此，所 <xref:System.Windows.Threading.Dispatcher> 需的 <xref:System.Windows.Threading.Dispatcher> 通过查询来获得， <xref:System.Windows.Threading.DispatcherObject> 在此示例中为一个 <xref:System.Windows.Controls.Button> 名为的 `startStopButton` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="e5220-183">调用将 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 使用两个参数：设置为的优先级， <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType> 以及通过委托的实例传入的回调 `NextPrimeDelegate` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-184"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-185"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="e5220-186">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="e5220-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="e5220-187">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-188">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-189">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="e5220-190">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e5220-191">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上的指定参数，按指定优先级异步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="e5220-192">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-193"><xref:System.Windows.Threading.DispatcherOperation>返回的对象 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="e5220-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="e5220-194">更改委托的， <xref:System.Windows.Threading.DispatcherPriority> 因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-195">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-196">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="e5220-197">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="e5220-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="e5220-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="e5220-199">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-199">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="e5220-200">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="e5220-201">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="e5220-202">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="e5220-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="e5220-204">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-205">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 对 <xref:System.Windows.Threading.Dispatcher> 已关闭的调用，则返回的状态属性 <xref:System.Windows.Threading.DispatcherOperation> 设置为 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-206">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-207">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="e5220-208">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="e5220-209">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-210">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-211">`arg``null`如果不需要参数，则可以为。</span><span class="sxs-lookup"><span data-stu-id="e5220-211">`arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="e5220-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="e5220-213"><xref:System.Windows.Threading.DispatcherOperation>返回的对象 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="e5220-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="e5220-214">更改委托的， <xref:System.Windows.Threading.DispatcherPriority> 因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-215">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-216">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="e5220-217">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="e5220-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="e5220-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="e5220-219">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-219">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-220">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-221">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-222">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-224">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-225">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 在同一位置进行多个调用 <xref:System.Windows.Threading.DispatcherPriority> ，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="e5220-226">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 对 <xref:System.Windows.Threading.Dispatcher> 已关闭的调用，则返回的状态属性 <xref:System.Windows.Threading.DispatcherOperation> 设置为 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>
  
## Examples  
 <span data-ttu-id="e5220-227">下面的示例演示如何在上放置操作 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="e5220-228">首先，创建一个接受一个参数（在本例中为字符串）的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="e5220-229">接下来， <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="e5220-230">由于每个 <xref:System.Windows.Threading.DispatcherObject> 都有一个属性，该属性返回与之关联的，因此，所 <xref:System.Windows.Threading.Dispatcher> 需的 <xref:System.Windows.Threading.Dispatcher> 通过查询来获得， <xref:System.Windows.Threading.DispatcherObject> 在此示例中为一个 <xref:System.Windows.Controls.Grid> 名为的 `tomorrowsWeather` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="e5220-231">对的调用 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 采用三个参数：优先级设置为 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType> ; 通过委托的实例传入的回调 `OneArgDelegate` ; 以及一个名为的字符串 `weather` ，它是回调的参数。</span><span class="sxs-lookup"><span data-stu-id="e5220-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-232"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-233"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="e5220-234">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="e5220-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-235">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-236">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="e5220-237">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-238">作为指定方法的参数传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="e5220-239">按指定的优先级并使用指定的参数数组在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-240">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-241">`arg` `null` 如果不需要任何参数，则该参数可以为。</span><span class="sxs-lookup"><span data-stu-id="e5220-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="e5220-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返回一个 <xref:System.Windows.Threading.DispatcherOperation> 对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="e5220-243"><xref:System.Windows.Threading.DispatcherOperation>返回的对象 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="e5220-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="e5220-244">更改委托的， <xref:System.Windows.Threading.DispatcherPriority> 因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-245">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="e5220-246">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="e5220-247">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="e5220-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="e5220-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="e5220-249">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-249">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-250">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-251">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-252">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-254">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-255">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 在同一位置进行多个调用 <xref:System.Windows.Threading.DispatcherPriority> ，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="e5220-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="e5220-256">如果 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 对 <xref:System.Windows.Threading.Dispatcher> 已关闭的调用，则返回的状态属性 <xref:System.Windows.Threading.DispatcherOperation> 设置为 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-257"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="e5220-259">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="e5220-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-260">将按其开始关闭调度程序的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="e5220-261">异步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 要求无限制的 UI 权限。</span><span class="sxs-lookup"><span data-stu-id="e5220-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="e5220-263">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 引发事件，并 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 将设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-264">在 <xref:System.Windows.Threading.Dispatcher> 事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="e5220-265">当调度程序完成关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 引发事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-266">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="e5220-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5220-267">确定调用线程是否为与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</span><span class="sxs-lookup"><span data-stu-id="e5220-267">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="e5220-268">如果调用线程是与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-268"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-269">只有 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherObject> 在上创建的可以访问对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-269">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="e5220-270">使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 从其他线程访问对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-270">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="e5220-271"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 可以从任何线程调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-271"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="e5220-272">与之间的 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 差异 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 将 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 返回一个布尔值，该值指示调用线程是否有权访问 <xref:System.Windows.Threading.Dispatcher> 并 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 引发异常。</span><span class="sxs-lookup"><span data-stu-id="e5220-272">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>
  
## Examples  
 <span data-ttu-id="e5220-273">下面的示例使用 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 来确定线程是否有权访问 <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-273">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="e5220-274"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> <xref:System.Windows.Threading.Dispatcher> 调用与关联的的方法 <xref:System.Windows.Controls.Button> 来验证对线程的访问。</span><span class="sxs-lookup"><span data-stu-id="e5220-274">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="e5220-275">如果调用线程具有对的访问权限 <xref:System.Windows.Threading.Dispatcher> ，则将 <xref:System.Windows.Controls.Button> 通过访问的成员进行更新 <xref:System.Windows.Controls.Button> ; 否则，会将接受作为参数的委托 <xref:System.Windows.Controls.Button> 置于上 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-275">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="e5220-276"><xref:System.Windows.Threading.Dispatcher>将委托更新的工作 <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-276">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-277">获取当前正在执行的线程的 <see cref="T:System.Windows.Threading.Dispatcher" />，并在该线程没有关联的调度程序时创建一个新的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-277">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="e5220-278">与当前线程关联的调度程序。</span><span class="sxs-lookup"><span data-stu-id="e5220-278">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-279">如果与 <xref:System.Windows.Threading.Dispatcher> 当前线程不关联，则将创建一个新的 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-279">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="e5220-280">这不同于使用 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 方法的情况。</span><span class="sxs-lookup"><span data-stu-id="e5220-280">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="e5220-281"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 如果没有 `null` 与指定线程关联的调度程序，将返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-281"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5220-282">禁用对 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的处理。</span><span class="sxs-lookup"><span data-stu-id="e5220-282">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="e5220-283">一个用于重新启用调度程序处理的结构。</span><span class="sxs-lookup"><span data-stu-id="e5220-283">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-284">禁用调度程序处理是一种用于消除不相关的重入机会的高级方法。</span><span class="sxs-lookup"><span data-stu-id="e5220-284">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="e5220-285">禁用处理的影响如下：</span><span class="sxs-lookup"><span data-stu-id="e5220-285">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="e5220-286">CLR 锁不会在内部抽取消息。</span><span class="sxs-lookup"><span data-stu-id="e5220-286">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="e5220-287"><xref:System.Windows.Threading.DispatcherFrame> 不允许推送对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-287"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="e5220-288">不允许消息处理。</span><span class="sxs-lookup"><span data-stu-id="e5220-288">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="e5220-289"><xref:System.Windows.Threading.DispatcherProcessingDisabled> <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 调用时返回的结构可用于重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="e5220-289">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="e5220-290"><xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>对结构调用将 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 重新启用处理。</span><span class="sxs-lookup"><span data-stu-id="e5220-290">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="e5220-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 只能在与关联的线程上调用 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>
  
## Examples  
 <span data-ttu-id="e5220-292">下面的示例演示如何禁用调度程序处理并重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="e5220-292">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="e5220-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 在 **using** 语句中调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="e5220-294"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 返回一个 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 结构，该结构用作在 **使用** 块完成时要释放的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-294"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="e5220-295">在 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 结构上调用时 <xref:System.Windows.Threading.DispatcherProcessingDisabled> ，将重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="e5220-295">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5220-296">请求退出所有帧，包括嵌套的帧。</span><span class="sxs-lookup"><span data-stu-id="e5220-296">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromThread (thread As Thread) As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="e5220-297">要从中获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程。</span><span class="sxs-lookup"><span data-stu-id="e5220-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="e5220-298">获取指定线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="e5220-299"><paramref name="thread" /> 的调度程序。</span><span class="sxs-lookup"><span data-stu-id="e5220-299">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-300">如果调度程序不可用于指定的线程， `null` 则将返回。</span><span class="sxs-lookup"><span data-stu-id="e5220-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="e5220-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 不会 <xref:System.Windows.Threading.Dispatcher> 在不具有的线程上创建 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="e5220-302"><xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher> 尝试使用属性获取时，将在尚未具有的线程上创建新的 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-303">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已经完成关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="e5220-304">如果调度程序已经完成关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-304"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-305">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 引发事件，并 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 将设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-306">在 <xref:System.Windows.Threading.Dispatcher> 事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="e5220-307">当调度程序完成关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 引发事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-308">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="e5220-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-309">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否正在关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="e5220-310">如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已经开始关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-310"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-311">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 引发事件，并 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 将设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-312">在 <xref:System.Windows.Threading.Dispatcher> 事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="e5220-313">当调度程序完成关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 引发事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-314">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="e5220-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-315">获取提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 的其他事件信息的挂钩集合。</span><span class="sxs-lookup"><span data-stu-id="e5220-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="e5220-316">与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的挂钩。</span><span class="sxs-lookup"><span data-stu-id="e5220-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-317"><xref:System.Windows.Threading.DispatcherHooks>类提供有关的其他事件信息 <xref:System.Windows.Threading.Dispatcher> ，例如当 <xref:System.Windows.Threading.Dispatcher> 处于非活动状态或操作成功时。</span><span class="sxs-lookup"><span data-stu-id="e5220-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5220-318">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-318">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-319">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-319">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-320">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-320">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-321">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-321">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-322">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-322">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-323"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-323"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-324">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-324">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>
  
## Examples  
 <span data-ttu-id="e5220-326">下面的示例使用将委托放到 <xref:System.Windows.Threading.Dispatcher> 中 <xref:System.Windows.Threading.DispatcherPriority.Normal> 的 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-326">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e5220-327">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-327">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="e5220-328">在与 <see cref="T:System.Action" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-328">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e5220-329">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-329">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-330">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-330">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="e5220-331">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-331">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="e5220-332">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-332">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-333">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-333">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="e5220-334">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-334">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e5220-335">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数同步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-335">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-336">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-336">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-337">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-337">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="e5220-338">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-338">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="e5220-339">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-339">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="e5220-340">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-340">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="e5220-341"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-341"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="e5220-342">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-342">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-344">与指定的方法相对应的优先级，与事件队列中的其他挂起操作相关 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-344">The priority with which the specified method is invoked, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-345">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-345">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="e5220-346">按指定的优先级在与关联的线程上同步执行指定的委托 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-346">Executes the specified delegate synchronously at the specified priority on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-347">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-347">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-348">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-348">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-349">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-349">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-350">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-350">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-351">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-351">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-352"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-352"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-353">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-353">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>
  
## Examples  
 <span data-ttu-id="e5220-355">下面的示例使用将委托放到 <xref:System.Windows.Threading.Dispatcher> 中 <xref:System.Windows.Threading.DispatcherPriority.Normal> 的 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-355">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5220-356"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-356"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-357"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-357"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-358"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-358"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e5220-359">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-359">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-360">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-360">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e5220-361">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-361">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="e5220-362">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-362">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="e5220-363">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-363">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="e5220-364">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="e5220-364">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="e5220-365">但在操作启动后，它将在此方法返回前完成。</span><span class="sxs-lookup"><span data-stu-id="e5220-365">However, once the operation starts, it will complete before this method returns.</span></span> <span data-ttu-id="e5220-366">若要指定无限期等待，请使用值-1。</span><span class="sxs-lookup"><span data-stu-id="e5220-366">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="e5220-367">在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e5220-367">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="e5220-368">在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-368">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-369">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-369">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="e5220-370"><see langword="null" />如果不需要参数，则可以为。</span><span class="sxs-lookup"><span data-stu-id="e5220-370">Can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="e5220-371">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-371">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-372">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-372">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-373">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-373">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="e5220-374">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-374">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="e5220-375">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-375">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="e5220-376">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-376">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="e5220-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="e5220-378">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-378">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control won't return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-380"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-380"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e5220-381"><paramref name="timeout" /> 是一个非-1 的负数，并且您要跨线程调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-381"><paramref name="timeout" /> is a negative number other than -1, and you're invoking across threads.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="e5220-382">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-383">与指定的方法相对应的优先级，与事件队列中的其他挂起操作相关 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-383">The priority with which the specified method is invoked, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-384">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="e5220-385">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e5220-386">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-387">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-388">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-388">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="e5220-389">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="e5220-390">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="e5220-391">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="e5220-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="e5220-393">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-395">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-396">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="e5220-397">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="e5220-398">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-399">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-400">`arg``null`如果不需要参数，则可以为</span><span class="sxs-lookup"><span data-stu-id="e5220-400">`arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="e5220-401">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-401">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-402">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-403">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-404">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-406">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5220-408"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-409"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-410"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-411">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="e5220-412">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="e5220-412">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="e5220-413">操作开始后，它将在此方法返回前完成。</span><span class="sxs-lookup"><span data-stu-id="e5220-413">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="e5220-414">若要指定无限期等待，请使用值-1。</span><span class="sxs-lookup"><span data-stu-id="e5220-414">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="e5220-415">在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e5220-415">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="e5220-416">在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-416">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-417">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-417">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="e5220-418">按指定的优先级并使用指定的超时值在创建 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-418">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="e5220-419">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-419">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-420">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-420">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-421">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-421">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-422">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-422">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-423">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-423">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-424"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-424"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-425">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-425">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-426"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-426"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-427"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-427"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e5220-428"><paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</span><span class="sxs-lookup"><span data-stu-id="e5220-428"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5220-429"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-429"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-430"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-430"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e5220-431">要通过调度程序调用的操作委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-431">An Action delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-432">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-432">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e5220-433">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-433">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="e5220-434">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="e5220-434">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="e5220-435">操作开始后，它将在此方法返回前完成。</span><span class="sxs-lookup"><span data-stu-id="e5220-435">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="e5220-436">若要指定无限期等待，请使用值-1。</span><span class="sxs-lookup"><span data-stu-id="e5220-436">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="e5220-437">在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e5220-437">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="e5220-438">在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-438">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <summary><span data-ttu-id="e5220-439">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-439">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-440"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-440"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e5220-441"><paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</span><span class="sxs-lookup"><span data-stu-id="e5220-441"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-442"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-442"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="e5220-443">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-443">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="e5220-444">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="e5220-444">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="e5220-445">操作开始后，它将在此方法返回前完成。</span><span class="sxs-lookup"><span data-stu-id="e5220-445">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="e5220-446">若要指定无限期等待，请使用值-1。</span><span class="sxs-lookup"><span data-stu-id="e5220-446">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="e5220-447">在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e5220-447">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="e5220-448">在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-448">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-449">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-449">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-450">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-450">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="e5220-451">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-451">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e5220-452">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-452">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-453">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-453">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-454">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-454">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="e5220-455">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-455">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="e5220-456">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-456">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="e5220-457">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-457">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="e5220-458"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-458"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="e5220-459">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-459">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-460"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-460"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-461"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-461"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e5220-462"><paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</span><span class="sxs-lookup"><span data-stu-id="e5220-462"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5220-463"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-463"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-464"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-464"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-465">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-465">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-466">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-466">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="e5220-467">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-467">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-468">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-468">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="e5220-469">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-469">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-470">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-470">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-471">`arg``null`如果不需要参数，则可以为</span><span class="sxs-lookup"><span data-stu-id="e5220-471">`arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="e5220-472">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-472">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-473">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-473">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-474">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-474">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-475">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-475">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-476"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-476"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-477">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-477">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-478"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-478"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5220-479"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-479"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-480"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-480"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-481"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-481"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-482">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-482">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="e5220-483">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="e5220-483">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="e5220-484">操作开始后，它将在此方法返回前完成。</span><span class="sxs-lookup"><span data-stu-id="e5220-484">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="e5220-485">若要指定无限期等待，请使用值-1。</span><span class="sxs-lookup"><span data-stu-id="e5220-485">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="e5220-486">在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e5220-486">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="e5220-487">在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-487">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-488">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-488">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="e5220-489">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-489">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="e5220-490">如果不需要参数，则可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-490">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="e5220-491">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-491">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-492">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-492">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-493">`arg``null`如果不需要参数，则可以为</span><span class="sxs-lookup"><span data-stu-id="e5220-493">`arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="e5220-494">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-494">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-495">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-495">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-496">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-496">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-497">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-497">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-498"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-498"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-499">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-499">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-500"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-500"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5220-501"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-501"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-502"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-502"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-503"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-503"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-504">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</span><span class="sxs-lookup"><span data-stu-id="e5220-504">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="e5220-505">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="e5220-505">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="e5220-506">操作开始后，它将在此方法返回前完成。</span><span class="sxs-lookup"><span data-stu-id="e5220-506">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="e5220-507">若要指定无限期等待，请使用值-1。</span><span class="sxs-lookup"><span data-stu-id="e5220-507">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="e5220-508">在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e5220-508">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="e5220-509">在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-509">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="method"><span data-ttu-id="e5220-510">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-510">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="e5220-511">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-511">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="e5220-512">作为指定方法的参数传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="e5220-512">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="e5220-513">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-513">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-514">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-514">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-515">`arg``null`如果不需要参数，则可以为。</span><span class="sxs-lookup"><span data-stu-id="e5220-515">`arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="e5220-516">在 WPF 中，只有创建的线程才能 <xref:System.Windows.Threading.DispatcherObject> 访问该对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-516">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="e5220-517">例如，从主 UI 线程旋转的后台线程无法更新 <xref:System.Windows.Controls.Button> 在 ui 线程上创建的的内容。</span><span class="sxs-lookup"><span data-stu-id="e5220-517">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="e5220-518">为了让后台线程访问的内容属性 <xref:System.Windows.Controls.Button> ，后台线程必须将工作委托给 <xref:System.Windows.Threading.Dispatcher> 与 UI 线程关联的。</span><span class="sxs-lookup"><span data-stu-id="e5220-518">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="e5220-519">这可以通过使用或来 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 完成 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-519">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="e5220-520"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步的，并且 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是异步的。</span><span class="sxs-lookup"><span data-stu-id="e5220-520"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="e5220-521">操作将添加到指定的的事件队列中 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-521">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="e5220-522"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-522"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5220-523"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-523"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-524"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-524"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-525"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-525"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e5220-526"><paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</span><span class="sxs-lookup"><span data-stu-id="e5220-526"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="e5220-527">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="e5220-527">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="e5220-528">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-528">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="e5220-529">在与 <see cref="T:System.Func`1" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-529">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-530">返回的值 <paramref name="callback" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-530">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="e5220-531">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="e5220-531">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="e5220-532">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-532">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-533">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-533">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="e5220-534">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-534">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-535">返回的值 <paramref name="callback" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-535">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="e5220-536">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="e5220-536">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="e5220-537">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-537">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-538">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-538">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e5220-539">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-539">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="e5220-540">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-540">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-541">返回的值 <paramref name="callback" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-541">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="e5220-542">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="e5220-542">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="e5220-543">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-543">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-544">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-544">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e5220-545">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-545">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="e5220-546">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="e5220-546">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="e5220-547">操作开始后，它将在此方法返回前完成。</span><span class="sxs-lookup"><span data-stu-id="e5220-547">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="e5220-548">若要指定无限期等待，请使用值-1。</span><span class="sxs-lookup"><span data-stu-id="e5220-548">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="e5220-549">在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e5220-549">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="e5220-550">在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-550">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <summary><span data-ttu-id="e5220-551">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-551">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-552">返回的值 <paramref name="callback" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-552">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-553"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-553"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e5220-554"><paramref name="timeout" /> 是一个非-1 的负数，并且该方法是跨线程调用的。</span><span class="sxs-lookup"><span data-stu-id="e5220-554"><paramref name="timeout" /> is a negative number other than -1, and the method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-555"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-555"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5220-556">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-556">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e5220-557">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-557">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="e5220-558">在与 <see cref="T:System.Action" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-558">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-559">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-559">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e5220-560">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-560">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-561">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-561">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="e5220-562">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-562">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-563">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-563">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e5220-564">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-564">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-565">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-565">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e5220-566">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-566">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="e5220-567">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-567">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-568">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-568">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="e5220-569">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="e5220-569">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="e5220-570">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-570">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="e5220-571">在与 <see cref="T:System.Func`1" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-571">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-572">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-572">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="e5220-573">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="e5220-573">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="e5220-574">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-574">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-575">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-575">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="e5220-576">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-576">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-577">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-577">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="e5220-578">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="e5220-578">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="e5220-579">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e5220-579">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="e5220-580">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-580">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e5220-581">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-581">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="e5220-582">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-582">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="e5220-583">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="e5220-583">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5220-584">同步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭过程。</span><span class="sxs-lookup"><span data-stu-id="e5220-584">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-585"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 要求无限制的 UI 权限。</span><span class="sxs-lookup"><span data-stu-id="e5220-585"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="e5220-586">当 <xref:System.Windows.Threading.Dispatcher> 开始关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 引发事件，并 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 将设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-586">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-587">在 <xref:System.Windows.Threading.Dispatcher> 事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-587">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="e5220-588">当调度程序完成关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 引发事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-588">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-589">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="e5220-589">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="e5220-590">调度程序要处理的帧。</span><span class="sxs-lookup"><span data-stu-id="e5220-590">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="e5220-591">进入执行循环。</span><span class="sxs-lookup"><span data-stu-id="e5220-591">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-592"><xref:System.Windows.Threading.DispatcherFrame>表示处理挂起工作项的循环。</span><span class="sxs-lookup"><span data-stu-id="e5220-592">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="e5220-593">调度程序在循环中处理工作项队列。</span><span class="sxs-lookup"><span data-stu-id="e5220-593">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="e5220-594">循环称为 "帧"。</span><span class="sxs-lookup"><span data-stu-id="e5220-594">The loop is referred to as a frame.</span></span>  <span data-ttu-id="e5220-595">初始循环通常由应用程序通过调用来启动 <xref:System.Windows.Threading.Dispatcher.Run%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-595">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="e5220-596"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 输入由参数表示的循环 `frame` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-596"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="e5220-597">循环的每次迭代时， <xref:System.Windows.Threading.Dispatcher> 将检查类的 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 属性 <xref:System.Windows.Threading.DispatcherFrame> 以确定循环应继续还是应停止。</span><span class="sxs-lookup"><span data-stu-id="e5220-597">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="e5220-598"><xref:System.Windows.Threading.DispatcherFrame> 允许 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 显式设置属性，并且该属性遵循中的 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 属性 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-598"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="e5220-599">这意味着当开始关闭时 <xref:System.Windows.Threading.Dispatcher> ，使用默认实现的帧 <xref:System.Windows.Threading.DispatcherFrame> 将退出，这将使所有嵌套帧退出。</span><span class="sxs-lookup"><span data-stu-id="e5220-599">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>
  
## Examples  
 <span data-ttu-id="e5220-600">下面的示例演示如何使用 <xref:System.Windows.Threading.DispatcherFrame> 来实现与方法类似的结果 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-600">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5220-601"><paramref name="frame" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-601"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e5220-602"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 为 <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="e5220-602"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="e5220-603">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e5220-603">-or-</span></span> 
 <span data-ttu-id="e5220-604"><paramref name="frame" /> 在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 中运行。</span><span class="sxs-lookup"><span data-stu-id="e5220-604"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="e5220-605">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e5220-605">-or-</span></span> 
<span data-ttu-id="e5220-606">已禁用对调度程序的处理。</span><span class="sxs-lookup"><span data-stu-id="e5220-606">Dispatcher processing has been disabled.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5220-607">将主执行帧推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="e5220-607">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-608">在 <xref:System.Windows.Threading.Dispatcher> 循环中处理事件队列。</span><span class="sxs-lookup"><span data-stu-id="e5220-608">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="e5220-609">循环称为 "帧"。</span><span class="sxs-lookup"><span data-stu-id="e5220-609">The loop is referred to as a frame.</span></span>  <span data-ttu-id="e5220-610">初始循环通常由应用程序通过调用来启动 <xref:System.Windows.Threading.Dispatcher.Run%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-610">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="e5220-611">主执行帧将继续运行，直到 <xref:System.Windows.Threading.Dispatcher> 关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-611">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-612">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="e5220-612">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-613">启动的关闭过程后 <xref:System.Windows.Threading.Dispatcher> ，将 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 引发事件，并 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 将设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-613">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-614">在 <xref:System.Windows.Threading.Dispatcher> 事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-614">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="e5220-615">当调度程序完成关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 引发事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-615">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-616">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="e5220-616">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-617">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 开始关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="e5220-617">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-618">启动的关闭过程后 <xref:System.Windows.Threading.Dispatcher> ，将 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 引发事件，并 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 将设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-618">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-619">在 <xref:System.Windows.Threading.Dispatcher> 事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="e5220-619">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="e5220-620">当调度程序完成关闭时，将 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 引发事件，并将 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e5220-620">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="e5220-621">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="e5220-621">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-622">获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</span><span class="sxs-lookup"><span data-stu-id="e5220-622">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="e5220-623">线程。</span><span class="sxs-lookup"><span data-stu-id="e5220-623">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-624">在通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</span><span class="sxs-lookup"><span data-stu-id="e5220-624">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-625">如果未捕获到委托执行过程中引发的异常，则会引发此事件 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-625">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="e5220-626">处理程序可以将异常标记为已处理，这将阻止调用内部异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="e5220-626">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="e5220-627">必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="e5220-627">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="e5220-628">建议避免在处理程序中分配内存或执行任何资源密集型操作。</span><span class="sxs-lookup"><span data-stu-id="e5220-628">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="e5220-629"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件提供了不引发事件的方法 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-629">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="e5220-630"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>首先引发事件，如果 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 上的 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 设置为 `false` ，则 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="e5220-630">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[add: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;add: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[remove: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;remove: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5220-631">当在筛选阶段通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</span><span class="sxs-lookup"><span data-stu-id="e5220-631">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-632">此事件在筛选阶段中引发，该异常在通过或的委托执行过程中引发的异常被 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 捕获。</span><span class="sxs-lookup"><span data-stu-id="e5220-632">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="e5220-633">调用堆栈此时未展开 (第一次异常) 。</span><span class="sxs-lookup"><span data-stu-id="e5220-633">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="e5220-634">必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="e5220-634">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="e5220-635">建议避免在处理程序中分配内存或执行任何资源密集型操作。</span><span class="sxs-lookup"><span data-stu-id="e5220-635">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="e5220-636"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件提供了不引发事件的方法 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-636">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="e5220-637"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>首先引发事件，如果 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 上的 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 设置为 `false` ，则 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="e5220-637">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-638">要检查的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-638">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="e5220-639">将由优先级无效时发生的异常返回的字符串。</span><span class="sxs-lookup"><span data-stu-id="e5220-639">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="e5220-640">确定指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否为有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="e5220-640">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e5220-641"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-641"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5220-642">确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-642">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-643">只有 <xref:System.Windows.Threading.Dispatcher> 在上创建的线程可以访问 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-643">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="e5220-644">此方法是公共的;因此，任何线程都可以检查它是否有权访问 <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-644">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="e5220-645"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 如果调用线程无权访问，则和将返回一个布尔值 <xref:System.Windows.Threading.Dispatcher> ，并 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 引发异常。</span><span class="sxs-lookup"><span data-stu-id="e5220-645">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>
  
## Examples  
 <span data-ttu-id="e5220-646">下面的示例使用 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 来确定线程是否有权访问 <xref:System.Windows.Controls.Button> 在上创建的线程。</span><span class="sxs-lookup"><span data-stu-id="e5220-646">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="e5220-647">方法采用对象作为参数，该参数强制转换为 <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-647">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="e5220-648">调用的的 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 方法 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Controls.Button> 来验证对线程的访问。</span><span class="sxs-lookup"><span data-stu-id="e5220-648">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="e5220-649">如果调用线程具有对的访问权限 <xref:System.Windows.Threading.Dispatcher> ，则 <xref:System.Windows.Controls.Button> 只需访问的成员即可更新 <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-649">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="e5220-650">如果调用线程没有访问权限， <xref:System.InvalidOperationException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="e5220-650">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="e5220-651">此示例捕获异常并将接受作为参数的委托推送 <xref:System.Windows.Controls.Button> 到的 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-651">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="e5220-652">这 <xref:System.Windows.Threading.Dispatcher> 将执行更新操作 <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-652">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e5220-653">调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="e5220-653">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5220-654">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-654">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5220-655">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-655">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="e5220-656">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-656">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-657">此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。</span><span class="sxs-lookup"><span data-stu-id="e5220-657">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="e5220-658">使用 `await` 、或 `Await` 在 Visual Basic 中，对返回值使用运算符，以将控制权返回给当前调度程序。</span><span class="sxs-lookup"><span data-stu-id="e5220-658">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="e5220-659">如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。</span><span class="sxs-lookup"><span data-stu-id="e5220-659">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="e5220-660">例如，可以在更新控件的长时间运行的循环中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="e5220-660">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="e5220-661">此方法等效于调用 <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> 方法并传入 <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="e5220-661">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="e5220-662">安排延续的优先级别。</span><span class="sxs-lookup"><span data-stu-id="e5220-662">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="e5220-663">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-663">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="e5220-664">当控件返回等待此方法的结果的代码按指定的优先级计划时，发生的操作。</span><span class="sxs-lookup"><span data-stu-id="e5220-664">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="e5220-665">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="e5220-665">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5220-666">此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。</span><span class="sxs-lookup"><span data-stu-id="e5220-666">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="e5220-667">使用 `await` 、或 `Await` 在 Visual Basic 中，对返回值使用运算符，以将控制权返回给当前调度程序。</span><span class="sxs-lookup"><span data-stu-id="e5220-667">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="e5220-668">如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。</span><span class="sxs-lookup"><span data-stu-id="e5220-668">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="e5220-669">例如，可以在更新控件的长时间运行的循环中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="e5220-669">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
