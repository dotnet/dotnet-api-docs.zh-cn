<Type Name="EntityConnection" FullName="System.Data.EntityClient.EntityConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55a902087792ed68482eb926bcebb940b0ff60cc" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89760175" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityConnection : System.Data.Common.DbConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntityConnection extends System.Data.Common.DbConnection" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityClient.EntityConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityConnection&#xA;Inherits DbConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityConnection sealed : System::Data::Common::DbConnection" />
  <TypeSignature Language="F#" Value="type EntityConnection = class&#xA;    inherit DbConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含对概念模型和数据源连接的引用。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例是通过无参数构造函数构造的，或是通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 接受连接字符串的构造函数构造的。 在任何一种情况下，连接字符串可能在打开连接前进行多次更改。 调用 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 构造函数进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。

 有关代码示例，请参阅使用 [EntityClient](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))。

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/entityclient-provider-for-the-entity-framework">用于实体框架的 EntityClient 提供程序</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/bb738679(v=vs.90)">使用 EntityClient</related>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/connection-strings">连接字符串</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例是通过无参数构造函数构造的，或是通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 接受连接字符串的构造函数构造的。 在任何一种情况下，连接字符串可能在打开连接前进行多次更改。 调用 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 构造函数进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。

 有关代码示例，请参阅使用 [EntityClient](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例是通过无参数构造函数构造的，或是通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 接受连接字符串的构造函数构造的。 在任何一种情况下，连接字符串可能在打开连接前进行多次更改。 调用 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 构造函数进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。

 有关代码示例，请参阅使用 [EntityClient](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : string -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">提供程序特定的连接字符串。</param>
        <summary>基于连接字符串初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 [实体数据模型工具](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399249(v=vs.100))会生成一个名为的连接字符串，该字符串存储在应用程序的配置文件中。 在实例化类时，可以提供此命名连接字符串来代替 `connectionString` 参数 <xref:System.Data.EntityClient.EntityConnection> 。

 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例通过无参数构造函数构造，或通过此构造函数构造 (<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>) ，该构造函数接受一个连接字符串。 在任何一种情况下，连接字符串可能在打开连接前进行多次更改。 调用 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 构造函数进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。

 有关代码示例，请参阅使用 [EntityClient](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">提供的连接字符串关键字无效，或未提供所需的连接字符串关键字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace workspace, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workspace As MetadataWorkspace, connection As DbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::Data::Metadata::Edm::MetadataWorkspace ^ workspace, System::Data::Common::DbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : System.Data.Metadata.Edm.MetadataWorkspace * System.Data.Common.DbConnection -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection (workspace, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="workspace">与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <param name="connection">此 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象的基础数据源连接。</param>
        <summary>使用指定的 和 初始化  类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此构造函数使您可从非磁盘文件或非程序集嵌入资源的元数据创建 <xref:System.Data.EntityClient.EntityConnection>。

 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例是通过无参数构造函数构造的，或是通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 接受连接字符串的构造函数构造的。 在任何一种情况下，连接字符串可能在打开连接前进行多次更改。 调用 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过构造函数（<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>）进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workspace" /> 或 <paramref name="connection" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">工作区缺少概念性模型。

- 或 -

工作区缺少映射文件。

- 或 -

工作区缺少存储模型。

- 或 -

<paramref name="connection" /> 不处于已关闭状态。</exception>
        <exception cref="T:System.Data.ProviderIncompatibleException"><paramref name="connection" /> 并非来自与 ADO.NET Entity Framework 兼容的提供程序。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function BeginDbTransaction (isolationLevel As IsolationLevel) As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginDbTransaction : System.Data.IsolationLevel -&gt; System.Data.Common.DbTransaction" Usage="entityConnection.BeginDbTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>开始一项数据库事务。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction();" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : unit -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用基础提供程序开始一个事务。</summary>
        <returns>一个新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 实例以后可以与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 方法使用 <xref:System.Data.IsolationLevel.Unspecified> 事务隔离级别。 若要指定不同的隔离级别，请调用 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>。 不同的基础提供程序可能用不同的方法对此值进行解释。 如果要应用程序可以跨多个提供程序移植，该应用程序应通过调用 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 显式指定事务隔离级别。

 任何特定时刻都只能存在一个通过 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 创建的活动事务。 尝试对已具有当前事务的 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 调用任何 <xref:System.Data.EntityClient.EntityConnection> 重载将引发 <xref:System.InvalidOperationException>。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基础提供程序未知。

- 或 -

对已具有当前事务的 调用 。

- 或 -

<see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (isolationLevel As IsolationLevel) As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : System.Data.IsolationLevel -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">事务的隔离级别。</param>
        <summary>使用基础提供程序开始一个具有指定隔离级别的事务。</summary>
        <returns>一个新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 实例以后可以与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 任何特定时刻都只能存在一个通过 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 创建的活动事务。 尝试对已具有当前事务的 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 调用任何 <xref:System.Data.EntityClient.EntityConnection> 重载将引发 <xref:System.InvalidOperationException>。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基础提供程序未知。

- 或 -

对已具有当前事务的 调用 。

- 或 -

<see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (databaseName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ databaseName);" />
      <MemberSignature Language="F#" Value="override this.ChangeDatabase : string -&gt; unit" Usage="entityConnection.ChangeDatabase databaseName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="databaseName">不支持。</param>
        <summary>不支持。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.EntityClient.EntityConnection.ChangeDatabase%2A>从派生时，此方法是必需的 <xref:System.Data.Common.DbConnection> 。 此方法不受支持，将引发 <xref:System.NotSupportedException> 。

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">调用该方法时。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="entityConnection.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭与数据库之间的连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果基础数据提供程序未知，则调用 <xref:System.Data.EntityClient.EntityConnection.Close%2A> 将不起任何作用。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">关闭连接时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.EntityClient.EntityConnection" /> 连接字符串。</summary>
        <value>建立与数据源的初始连接所需的连接字符串。 默认值为一个空字符串。 连接关闭时，将返回当前设置的值。 如果未设置任何值，则将返回一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `EntityClient`连接字符串由关键字/值参数对序列（由分号分隔）组成。 每个关键字和它的值之间用等号 (=) 连接。 下表列出了 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> 中的关键字值的有效名称。

|关键字|说明|
|-------------|-----------------|
|`Provider`|此关键字在未指定 `Name` 关键字时是必需的。 提供程序名称，用于检索基础提供程序的 <xref:System.Data.Common.DbProviderFactory> 对象。 该值为常量。<br /><br /> 如果 `Name` 连接字符串中未包含关键字，则需要关键字的非空值 `Provider` 。 此关键字与 `Name` 关键字互斥。|
|`Provider Connection String`|可选。 指定要传递给基础数据源的提供程序特定的连接字符串。 此连接字符串用数据提供程序的有效关键字/值对表示。 如果 `Provider Connection String` 无效，则当数据源计算此字符串时，将导致运行时错误。<br /><br /> 此关键字与 `Name` 关键字互斥。<br /><br /> `Provider Connection String` 的值必须用引号引起来。 以下是一个示例：<br /><br /> `Provider Connection String ="Server=serverName; User ID = userID";`<br /><br /> 以下示例将无效：<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|
|`Metadata`|此关键字在未指定 `Name` 关键字时是必需的。 要在其中查找模型和映射信息的以管道分隔的目录、文件和资源位置的列表。 以下是一个示例：<br /><br /> `Metadata=`<br /><br /> `c:\model &#124; c:\model\sql\mapping.msl;`<br /><br /> 竖线分隔符两侧的空格将被忽略。<br /><br /> 此关键字与 `Name` 关键字互斥。|
|`Name`|应用程序可以选择在应用程序配置文件中指定连接名称，以用于提供所需的关键字/值连接字符串值。 在此情况下，无法在连接字符串中直接提供这些值。 配置文件中不允许出现 `Name` 关键字。<br /><br /> 如果连接字符串中未包含 `Name` 关键字，则需要一个非空的 Provider 关键字值。<br /><br /> 此关键字与所有其他连接字符串关键字互斥。|

 应用程序可以直接在属性中提供关键字/值 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> ，也可以指定关键字的值 `Name` 。 如果 `Name` 指定关键字，将从应用程序配置文件中检索连接字符串关键字/值，如下所示：

 `Name=AdventureWorksEntities;`

 如果在 `Name` 属性中使用关键字 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> ，则不允许使用其他关键字。 `Name`关键字引用存储在 `connectionStrings` 应用程序配置文件的节中的命名连接字符串，如下面的示例中所示。 `Provider` `Metadata` `Provider Connection String` 在运行时从配置文件中检索、和值。



 应用程序也可以直接在 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> 属性中提供关键字/值对，如下面的示例所示。 在这种情况下， `Name` 不使用关键字。

```
"Provider=System.Data.SqlClient;
Metadata=c:\metadata|c:\Metadata\Sql;
Provider Connection String= 'Data Source=localhost;
    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' "
```

 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例是通过无参数构造函数构造的，或是通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 接受连接字符串的构造函数构造的。 在任何一种情况下，连接字符串可能在打开连接前进行多次更改。 调用 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 构造函数进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。



## Examples
 下面的示例演示如何配合使用 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 和 <xref:System.Data.SqlClient.SqlConnectionStringBuilder>。 该代码设置的属性 `SqlConnectionStringBuilder` 以创建一个 <xref:System.Data.SqlClient.SqlConnection> 字符串，该字符串提供基础提供程序连接字符串的一部分。 请注意 `Provider` ，不能使用设置该名称 `SqlConnectionStringBuilder` ，因为它不使用有效的 `SqlConnection` 语法。 此代码 <xref:System.Data.EntityClient.EntityConnection> 通过设置属性来创建字符串 `EntityConnectionStringBuilder` 。

 [!code-csharp[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/csharp/VS_Snippets_Data/eSQLBasicExamples/CS/Program.cs#buildingconnectionstringwithentitycommand)]
 [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/visualbasic/VS_Snippets_Data/eSQLBasicExamples/VB/Program.vb#buildingconnectionstringwithentitycommand)]

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尝试在初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 后设置 <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> 属性。 在通过重载（此重载将 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 作为参数）构造 <see cref="T:System.Data.EntityClient.EntityConnection" /> 实例，或者打开 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 实例时，初始化 <see cref="T:System.Data.EntityClient.EntityConnection" />。</exception>
        <exception cref="T:System.ArgumentException">提供的连接字符串关键字无效，或未提供所需的连接字符串关键字。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/connection-strings">连接字符串</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/connection-strings">连接字符串（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionTimeout : int" Usage="System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从尝试建立连接到结束尝试并生成错误需要等待的秒数。</summary>
        <value>等待连接打开所需的时间（以秒为单位）。 默认值为基础数据提供程序的默认超时值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果基础数据提供程序未知，则返回零。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置的值小于 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As EntityCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityCommand ^ CreateCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateCommand : unit -&gt; System.Data.EntityClient.EntityCommand" Usage="entityConnection.CreateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在 <see cref="T:System.Data.EntityClient.EntityCommand" /> 设置为此 <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> 的情况下创建 <see cref="T:System.Data.EntityClient.EntityConnection" /> 的新实例。</summary>
        <returns>一个 <see cref="T:System.Data.EntityClient.EntityCommand" /> 对象。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">基础数据提供程序的名称未知。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateDbCommand : unit -&gt; System.Data.Common.DbCommand" Usage="entityConnection.CreateDbCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Database : string" Usage="System.Data.EntityClient.EntityConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前数据库或将在连接打开后使用的数据库的名称。</summary>
        <value>基础数据提供程序的 <see langword="Database" /> 属性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对于映射到属性的特定关键字值（如 `Database` ）， <xref:System.Data.EntityClient.EntityConnection.Database%2A> 请参见基础数据提供程序的文档。 有关 SQL Server 等效关键字，请参阅属性的文档 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> 。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基础数据提供程序未知。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : string" Usage="System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要连接到的数据源的名称或网络地址。</summary>
        <value>数据源的名称。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对于映射到属性的特定关键字值（如 `DataSource` ）， <xref:System.Data.EntityClient.EntityConnection.DataSource%2A> 请参见基础数据提供程序的文档。 有关 SQL Server 等效关键字，请参阅属性的文档 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> 。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基础数据提供程序未知。</exception>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbProviderFactory : System.Data.Common.DbProviderFactory" Usage="System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="entityConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EnlistTransaction (transaction As Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberSignature Language="F#" Value="override this.EnlistTransaction : System.Transactions.Transaction -&gt; unit" Usage="entityConnection.EnlistTransaction transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">要在其中进行登记的事务对象。</param>
        <summary>在指定的事务中登记此 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法转发对数据源连接的调用，以在传递的 <xref:System.Transactions.Transaction> 中显式登记。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataWorkspace () As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::MetadataWorkspace ^ GetMetadataWorkspace();" />
      <MemberSignature Language="F#" Value="member this.GetMetadataWorkspace : unit -&gt; System.Data.Metadata.Edm.MetadataWorkspace" Usage="entityConnection.GetMetadataWorkspace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
        <returns>与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 创建 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 类时，将自动创建 <xref:System.Data.EntityClient.EntityConnection>。 创建过程可能引发特定元数据异常。 元数据将被加载到内存中，Entity Data Model (EDM) 应用程序则使用该元数据访问有关基础数据源的信息。 有关详细信息，请参阅 [ADO.NET Metadata](https://docs.microsoft.com/previous-versions/bb399207(v=vs.90))。

 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例是通过无参数构造函数构造的，或是通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 接受连接字符串的构造函数构造的。 在任一情况下，连接字符串可能在打开连接前进行多次更改。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 构造函数进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。

 ]]></format>
        </remarks>
        <exception cref="T:System.Data.MetadataException">内联连接字符串包含一个无效的 <see langword="Metadata" /> 关键字值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberSignature Language="F#" Value="override this.Open : unit -&gt; unit" Usage="entityConnection.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过调用基础数据提供程序的 <see langword="Open" /> 方法，建立与数据源的连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 为了避免无意使对象（如 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext>）与其元数据失去同步，<xref:System.Data.EntityClient.EntityConnection> 必须锁定对象的元数据。 锁定元数据后，不允许对连接字符串做出任何更改。 下面是锁定元数据的两种方案：

-   <xref:System.Data.EntityClient.EntityConnection>实例是通过无参数构造函数构造的，或是通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 接受连接字符串的构造函数构造的。 在任何一种情况下，连接字符串可能在打开连接前进行多次更改。 调用 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 锁定元数据。

-   <xref:System.Data.EntityClient.EntityConnection> 实例通过 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 构造函数进行构造，此构造函数接受 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 和 <xref:System.Data.Common.DbConnection>。 在这种情况下，元数据在构造时锁定。 不允许对连接字符串做出任何更改。

 加载元数据后，<xref:System.Data.EntityClient.EntityConnection> 验证概念性模型、存储模型和映射文件是否全部存在。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">打开连接时出错，或基础数据提供程序的名称未知。</exception>
        <exception cref="T:System.Data.MetadataException">内联连接字符串包含一个无效的 <see langword="Metadata" /> 关键字值。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServerVersion : string" Usage="System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，该字符串包含客户端连接到的数据源的版本。</summary>
        <value>提供程序连接字符串中包含的数据源的版本。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Data.ConnectionState" Usage="System.Data.EntityClient.EntityConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果 <see cref="T:System.Data.ConnectionState" /> 打开，则获取基础提供程序的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 属性。 否则返回 <see cref="F:System.Data.ConnectionState.Closed" />。</summary>
        <value><see cref="F:System.Data.ConnectionState.Open" />当且仅当的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 内部状态和基础提供程序的处于打开状态时，才 <see cref="T:System.Data.ConnectionState" /> 为。 如果 <see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态为 "已打开"，但提供程序的 <see cref="T:System.Data.ConnectionState" /> 处于关闭状态，则此属性返回 <see cref="F:System.Data.ConnectionState.Broken" /> 。 否则，将返回 <see cref="F:System.Data.ConnectionState.Closed" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreConnection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection StoreConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection StoreConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ StoreConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StoreConnection : System.Data.Common.DbConnection" Usage="System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供对 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象使用的基础数据源连接的访问。</summary>
        <value>数据源连接的 <see cref="T:System.Data.Common.DbConnection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果 <xref:System.Data.EntityClient.EntityConnection> 对象已关闭，则返回的数据源连接将关闭。 如果该对象已打开，则将返回打开的数据源连接。 如果设置了数据源连接信息，则返回的值始终为非 null。 如果没有数据源连接信息 (例如，如果使用了无参数的构造函数，并且之后未设置任何连接字符串) ，则返回空引用。

 实体框架使用的同一数据连接可以与应用程序的其他部分共享。                数据源连接以 <xref:System.Data.Common.DbConnection> 对象的形式从 <xref:System.Data.Objects.ObjectContext.Connection%2A> 的 <xref:System.Data.Objects.ObjectContext> 属性或从 <xref:System.Data.EntityClient.EntityConnection.StoreConnection%2A> 的 <xref:System.Data.EntityClient.EntityConnection> 属性返回。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
