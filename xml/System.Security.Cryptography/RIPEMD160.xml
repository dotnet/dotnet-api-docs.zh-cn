<Type Name="RIPEMD160" FullName="System.Security.Cryptography.RIPEMD160">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ffacfc232823fb7ad8dc7e982d7707ea1dde2b81" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83961181" /></Metadata><TypeSignature Language="C#" Value="public abstract class RIPEMD160 : System.Security.Cryptography.HashAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RIPEMD160 extends System.Security.Cryptography.HashAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.RIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RIPEMD160&#xA;Inherits HashAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class RIPEMD160 abstract : System::Security::Cryptography::HashAlgorithm" />
  <TypeSignature Language="F#" Value="type RIPEMD160 = class&#xA;    inherit HashAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HashAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 MD160 哈希算法的所有实现均从中继承的抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 哈希函数将任意长度的二进制字符串映射为固定长度的小型二进制字符串。 加密哈希函数具有属性，该属性无法进行计算，从而无法找到哈希处理为同一值的两个不同的输入;也就是说，如果相应的数据也匹配，则两个数据集的哈希应该匹配。 对数据的小更改会导致哈希中的大量无法预测的更改。  
  
 RIPEMD-160 是160位的加密哈希函数。 它用于替代128位哈希函数 MD4、MD5 和 RIPEMD。 RIPEMD 是在 EU 项目准备好的框架中开发的（争用完整性基元计算，1988-1992）。  
  
> [!NOTE]
>  <xref:System.Security.Cryptography.RIPEMD160> 已被安全哈希算法 SHA-256 和 SHA-512 及其派生类取代。 <xref:System.Security.Cryptography.SHA256> 和 <xref:System.Security.Cryptography.SHA512> 提供比 <xref:System.Security.Cryptography.RIPEMD160>更好的安全性和性能。 使用 <xref:System.Security.Cryptography.RIPEMD160> 仅适用于与旧版应用程序和数据的兼容性。  
  
   
  
## Examples  
 下面的代码示例计算目录中所有文件的 <xref:System.Security.Cryptography.RIPEMD160> 哈希值。  
  
 [!code-cpp[RIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/RIPEMD160/CPP/ripemd160.cpp#1)]
 [!code-csharp[RIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/RIPEMD160/CS/ripemd160.cs#1)]
 [!code-vb[RIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RIPEMD160/vb/ripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/security/cryptographic-services">加密服务</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.RIPEMD160" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能创建抽象类的实例。 应用程序代码将创建派生类的新实例。 有关详细信息，请参阅 <xref:System.Security.Cryptography.RIPEMD160Managed> 类。  
  
   
  
## Examples  
 下面的代码示例计算目录中所有文件的 <xref:System.Security.Cryptography.RIPEMD160> 哈希值。  
  
 [!code-cpp[RIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/RIPEMD160/CPP/ripemd160.cpp#1)]
 [!code-csharp[RIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/RIPEMD160/CS/ripemd160.cs#1)]
 [!code-vb[RIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RIPEMD160/vb/ripemd160.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services">加密服务</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 <see cref="T:System.Security.Cryptography.RIPEMD160" /> 类的特定实现。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.RIPEMD160 Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.RIPEMD160 Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RIPEMD160.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As RIPEMD160" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::RIPEMD160 ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.RIPEMD160" Usage="System.Security.Cryptography.RIPEMD160.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.RIPEMD160</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Security.Cryptography.RIPEMD160" /> 哈希算法的默认实现的实例。</summary>
        <returns><see cref="T:System.Security.Cryptography.RIPEMD160" /> 哈希算法的新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能创建抽象类的实例。 应用程序代码将创建派生类的新实例。 有关详细信息，请参阅 <xref:System.Security.Cryptography.RIPEMD160Managed> 类。  
  
   
  
## Examples  
 下面的代码示例计算目录中所有文件的 <xref:System.Security.Cryptography.RIPEMD160> 哈希值。  
  
 [!code-cpp[RIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/RIPEMD160/CPP/ripemd160.cpp#1)]
 [!code-csharp[RIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/RIPEMD160/CS/ripemd160.cs#1)]
 [!code-vb[RIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RIPEMD160/vb/ripemd160.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">该算法在使用时启用了联邦信息处理标准 (FIPS) 模式，但它与 FIPS 不兼容。</exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services">加密服务</related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.RIPEMD160 Create (string hashName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.RIPEMD160 Create(string hashName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RIPEMD160.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (hashName As String) As RIPEMD160" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::RIPEMD160 ^ Create(System::String ^ hashName);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.RIPEMD160" Usage="System.Security.Cryptography.RIPEMD160.Create hashName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.RIPEMD160</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hashName">要使用的 <see cref="T:System.Security.Cryptography.RIPEMD160" /> 的特定实现的名称。</param>
        <summary>创建 <see cref="T:System.Security.Cryptography.RIPEMD160" /> 哈希算法的指定实现的实例。</summary>
        <returns><see cref="T:System.Security.Cryptography.RIPEMD160" /> 的指定实现的新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能创建抽象类的实例。 应用程序代码将创建派生类的新实例。 有关详细信息，请参阅 <xref:System.Security.Cryptography.RIPEMD160Managed> 类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="hashName" /> 参数描述的算法在使用时启用了联邦信息处理标准 (FIPS) 模式，但它与 FIPS 不兼容。</exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services">加密服务</related>
      </Docs>
    </Member>
  </Members>
</Type>
