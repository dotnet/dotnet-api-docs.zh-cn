<Type Name="ECDiffieHellman" FullName="System.Security.Cryptography.ECDiffieHellman">
  <Metadata><Meta Name="ms.openlocfilehash" Value="96cc3325360f7b52507ce848afe763a72b24a4c0" /><Meta Name="ms.sourcegitcommit" Value="ec905a25e6dd05a6a3ffa7f30bf59f3095a8cd67" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/01/2020" /><Meta Name="ms.locfileid" Value="89250405" /></Metadata><TypeSignature Language="C#" Value="public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ECDiffieHellman extends System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ECDiffieHellman&#xA;Inherits AsymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellman abstract : System::Security::Cryptography::AsymmetricAlgorithm" />
  <TypeSignature Language="F#" Value="type ECDiffieHellman = class&#xA;    inherit AsymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
    <AssemblyVersion>4.3.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Security.Cryptography.Algorithms" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.Cryptography.AsymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0758c-101">提供一个抽象基类，可以从它派生椭圆曲线 Diffie-Hellman (ECDH) 算法实现。</span><span class="sxs-lookup"><span data-stu-id="0758c-101">Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from.</span></span> <span data-ttu-id="0758c-102">此类提供一个所有 ECDH 实现都必须支持的基本操作集。</span><span class="sxs-lookup"><span data-stu-id="0758c-102">This class provides the basic set of operations that all ECDH implementations must support.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class serves as the abstract base class for ECDH implementations.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ECDiffieHellman ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ECDiffieHellman();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0758c-104">初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-104">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is called by classes that derive from the <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph> class. <span data-ttu-id="0758c-106"><xref:System.Security.Cryptography.ECDiffieHellmanCng>类是当前包含在中的唯一实现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="0758c-106">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span> <span data-ttu-id="0758c-107">有关如何创建椭圆曲线 Diffie-hellman (ECDH) 算法的新实现的信息，请参阅 <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-107">For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0758c-108">创建椭圆曲线 Diffie-Hellman (ECDH) 算法的实现的一个新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-108">Creates a new instance of an implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0758c-109">创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的一个新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-109">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span></summary>
        <returns><span data-ttu-id="0758c-110">此类的默认实现的一个新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-110">A new instance of the default implementation of this class.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (curve As ECCurve) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="0758c-111">用于生成新公钥/私钥对的曲线。</span><span class="sxs-lookup"><span data-stu-id="0758c-111">The curve to use to generate a new public/private key-pair.</span></span></param>
        <summary><span data-ttu-id="0758c-112">使用通过指定曲线生成的新公钥/私钥对，创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-112">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.</span></span></summary>
        <returns><span data-ttu-id="0758c-113">椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-113">A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 curve must validate (that is, it must return true when passed to the <ph id="ph1">&lt;xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType&gt;</ph> method.  
  
 <span data-ttu-id="0758c-115">在 Windows 上不支持特性2曲线。</span><span class="sxs-lookup"><span data-stu-id="0758c-115">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-116"><paramref name="curve" /> 不进行验证。</span><span class="sxs-lookup"><span data-stu-id="0758c-116"><paramref name="curve" /> does not validate.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (parameters As ECParameters) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.ECParameters -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="0758c-117">椭圆曲线加密 (ECC) 算法的参数。</span><span class="sxs-lookup"><span data-stu-id="0758c-117">The parameters  for the elliptic curve cryptography (ECC) algorithm.</span></span></param>
        <summary><span data-ttu-id="0758c-118">创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的新实例，密钥由指定的 <see cref="T:System.Security.Cryptography.ECParameters" /> 对象描述。</span><span class="sxs-lookup"><span data-stu-id="0758c-118">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="0758c-119">椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-119">A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">`parameters`</ph> must validate (that is, it must return <ph id="ph2">`true`</ph>) when passed to the <ph id="ph3">&lt;xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType&gt;</ph> method. <span data-ttu-id="0758c-121">不支持隐式曲线上的参数。</span><span class="sxs-lookup"><span data-stu-id="0758c-121">Parameters over implicit curves are not supported.</span></span>  
  
 <span data-ttu-id="0758c-122">在 Windows 上不支持特性2曲线。</span><span class="sxs-lookup"><span data-stu-id="0758c-122">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-123"><paramref name="parameters" /> 不进行验证。</span><span class="sxs-lookup"><span data-stu-id="0758c-123"><paramref name="parameters" /> does not validate.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman? Create (string algorithm);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algorithm As String) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create algorithm" />
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="0758c-124">ECDH 算法的实现的名称。</span><span class="sxs-lookup"><span data-stu-id="0758c-124">The name of an implementation of the ECDH algorithm.</span></span></param>
        <summary><span data-ttu-id="0758c-125">创建椭圆曲线 Diffie-hellman (ECDH) 算法的特定实现的新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-125">Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span></summary>
        <returns><span data-ttu-id="0758c-126">此类的指定实现的新实例。</span><span class="sxs-lookup"><span data-stu-id="0758c-126">A new instance of the specified implementation of this class.</span></span> <span data-ttu-id="0758c-127">如果指定的算法名称未映射到 ECDH 实现，此方法将返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-127">If the specified algorithm name does not map to an ECDH implementation, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you develop your own implementation of an <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph> object, you can use the <ph id="ph2">&lt;xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29&gt;</ph> method overload to create a custom <ph id="ph3">`algorithm`</ph> string that specifies your implementation.  
  
 <span data-ttu-id="0758c-129">`algorithm`参数指定 ECDH 算法的实现的名称。</span><span class="sxs-lookup"><span data-stu-id="0758c-129">The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm.</span></span> <span data-ttu-id="0758c-130">以下字符串指的是同一个实现，它是当前 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中支持的唯一实现。</span><span class="sxs-lookup"><span data-stu-id="0758c-130">The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:</span></span>  
  
-   <span data-ttu-id="0758c-131">ECDH</span><span class="sxs-lookup"><span data-stu-id="0758c-131">"ECDH"</span></span>  
  
-   <span data-ttu-id="0758c-132">ECDiffieHellman</span><span class="sxs-lookup"><span data-stu-id="0758c-132">"ECDiffieHellman"</span></span>  
  
-   <span data-ttu-id="0758c-133">ECDiffieHellmanCng</span><span class="sxs-lookup"><span data-stu-id="0758c-133">"ECDiffieHellmanCng"</span></span>  
  
-   <span data-ttu-id="0758c-134">"ECDiffieHellmanCng"。</span><span class="sxs-lookup"><span data-stu-id="0758c-134">"System.Security.Cryptography.ECDiffieHellmanCng"</span></span>  
  
 <span data-ttu-id="0758c-135">还可以为参数提供自定义 ECDH 实现的名称 `algorithm` 。</span><span class="sxs-lookup"><span data-stu-id="0758c-135">You can also provide the name of a custom ECDH implementation for the `algorithm` parameter.</span></span> <span data-ttu-id="0758c-136">如果执行此操作， <xref:System.Security.Cryptography.CryptoConfig> 对象将使用它来确定是否可以创建 ECDH 对象。</span><span class="sxs-lookup"><span data-stu-id="0758c-136">If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0758c-137"><paramref name="algorithm" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-137">The <paramref name="algorithm" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0758c-138">使用指定的哈希算法执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-138">Performs key derivation using a specified hash algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="0758c-139">另一方的公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-139">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="0758c-140">用于派生密钥材料的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-140">The hash algorithm to use to derive the key material.</span></span></param>
        <summary><span data-ttu-id="0758c-141">使用指定的哈希算法执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-141">Performs key derivation using a specified hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="0758c-142">共享机密的哈希。</span><span class="sxs-lookup"><span data-stu-id="0758c-142">The hash of the shared secret.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overload calls the <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A&gt;</ph> method passing <ph id="ph2">`null`</ph> as the prepend and append values.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-144"><paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-144">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="0758c-145">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-145">-or-</span></span>

<span data-ttu-id="0758c-146"><paramref name="hashAlgorithm" /> 参数未指定哈希值。</span><span class="sxs-lookup"><span data-stu-id="0758c-146">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0758c-147"><paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-147"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-148"><paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-148">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="0758c-149">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-149">-or-</span></span>

<span data-ttu-id="0758c-150">此实例仅表示一个公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-150">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[]? secretPrepend, byte[]? secretAppend);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]&#xA;override this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm, secretPrepend, secretAppend)" />
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="secretAppend" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="0758c-151">另一方的公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-151">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="0758c-152">用于派生密钥材料的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-152">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="0758c-153">在进行哈希算法之前，要预置到派生密钥前面的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-153">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="0758c-154">在进行哈希算法之前，要追加到派生密钥的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-154">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="0758c-155">在派生类中实现时，使用指定的哈希算法对可选的添加数据或追加数据执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-155">When implemented in a derived class, performs key derivation using a specified hash algorithm with optional prepended or appended data.</span></span></summary>
        <returns><span data-ttu-id="0758c-156">按需添加数据或追加数据之后的共享机密的哈希值。</span><span class="sxs-lookup"><span data-stu-id="0758c-156">The hash of the shared secret after prepending or appending data as requested.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

This method internally performs the Elliptic Curve Diffie-Hellman key agreement to produce the shared secret (<ph id="ph1">`z`</ph>).
<span data-ttu-id="0758c-158">此方法的返回值是 `HASH(secretPrepend || z || secretAppend)` 使用指定哈希算法的结果，其中 `||` 表示串联。</span><span class="sxs-lookup"><span data-stu-id="0758c-158">The return value from this method is the result of `HASH(secretPrepend || z || secretAppend)` using the specified hash algorithm, where `||` signifies concatenation.</span></span>

<span data-ttu-id="0758c-159">如果或的值 `secretPrepend` `secretAppend` 为 `null` ，则将它们视为空数组。</span><span class="sxs-lookup"><span data-stu-id="0758c-159">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-160">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-160">A derived class must override this method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-161"><paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-161">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="0758c-162">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-162">-or-</span></span>

<span data-ttu-id="0758c-163"><paramref name="hashAlgorithm" /> 参数未指定哈希值。</span><span class="sxs-lookup"><span data-stu-id="0758c-163">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0758c-164"><paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-164"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-165"><paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-165">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="0758c-166">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-166">-or-</span></span>

<span data-ttu-id="0758c-167">此实例仅表示一个公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-167">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0758c-168">使用指定的 HMAC（基于哈希的消息验证代码）算法执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-168">Performs key derivation using a specified HMAC (Hash-based Message Authentication Code) algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[]? hmacKey);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey)" />
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="hmacKey" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="0758c-169">另一方的公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-169">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="0758c-170">用于派生密钥材料的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-170">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="hmacKey"><span data-ttu-id="0758c-171">HMAC 的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-171">The key for the HMAC.</span></span></param>
        <summary><span data-ttu-id="0758c-172">使用指定的 HMAC（基于哈希的消息验证代码）算法执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-172">Performs key derivation using a specified HMAC (Hash-based Message Authentication Code) algorithm.</span></span></summary>
        <returns><span data-ttu-id="0758c-173">共享机密的 HMAC。</span><span class="sxs-lookup"><span data-stu-id="0758c-173">The HMAC of the shared secret.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overload calls the <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A&gt;</ph> method passing <ph id="ph2">`null`</ph> as the prepend and append values.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-175"><paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-175">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="0758c-176">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-176">-or-</span></span>

<span data-ttu-id="0758c-177"><paramref name="hashAlgorithm" /> 参数未指定哈希值。</span><span class="sxs-lookup"><span data-stu-id="0758c-177">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0758c-178"><paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-178"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-179"><paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-179">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="0758c-180">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-180">-or-</span></span>

<span data-ttu-id="0758c-181">此实例仅表示一个公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-181">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public virtual byte[]? DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey? otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]&#xA;override this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey, secretPrepend, secretAppend)" />
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="hmacKey" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="secretAppend" Type="System.Byte[]" Index="4" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="0758c-182">另一方的公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-182">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="0758c-183">用于派生密钥材料的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-183">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="hmacKey"><span data-ttu-id="0758c-184">HMAC 的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-184">The key for the HMAC.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="0758c-185">在进行哈希算法之前，要预置到派生密钥前面的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-185">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="0758c-186">在进行哈希算法之前，要追加到派生密钥的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-186">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="0758c-187">在派生类中实现时，使用指定的 HMAC（基于哈希的消息验证代码）算法对可选的添加数据或追加数据执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-187">When implemented in a derived class, performs key derivation using a specified HMAC (Hash-based Message Authentication Code) algorithm with optional prepended or appended data.</span></span></summary>
        <returns><span data-ttu-id="0758c-188">按需添加数据或追加数据之后的共享机密的 HMAC。</span><span class="sxs-lookup"><span data-stu-id="0758c-188">The HMAC of the shared secret after prepending or appending data as requested.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

This method internally performs the Elliptic Curve Diffie-Hellman key agreement to produce the shared secret (<ph id="ph1">`z`</ph>).

<span data-ttu-id="0758c-190">当 `hmacKey` 为时 `null` ，此方法的返回值是 `HMAC-HASH(z, secretPrepend || z || secretAppend)` 使用指定的 HMAC 算法的结果，其中 `||` 表示串联。</span><span class="sxs-lookup"><span data-stu-id="0758c-190">When `hmacKey` is `null`, the return value from this method is the result of `HMAC-HASH(z, secretPrepend || z || secretAppend)` using the specified HMAC algorithm, where `||` signifies concatenation.</span></span> <span data-ttu-id="0758c-191">否则，此方法的返回值为的结果 `HMAC-HASH(hmacKey, secretPrepend || z || secretAppend)` 。</span><span class="sxs-lookup"><span data-stu-id="0758c-191">Otherwise, the return value from this method is the result of `HMAC-HASH(hmacKey, secretPrepend || z || secretAppend)`.</span></span>

<span data-ttu-id="0758c-192">如果或的值 `secretPrepend` `secretAppend` 为 `null` ，则将它们视为空数组。</span><span class="sxs-lookup"><span data-stu-id="0758c-192">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-193">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-193">A derived class must override this method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-194"><paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-194">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="0758c-195">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-195">-or-</span></span>

<span data-ttu-id="0758c-196"><paramref name="hashAlgorithm" /> 参数未指定哈希值。</span><span class="sxs-lookup"><span data-stu-id="0758c-196">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0758c-197"><paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-197"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-198"><paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-198">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="0758c-199">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-199">-or-</span></span>

<span data-ttu-id="0758c-200">此实例仅表示一个公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-200">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]&#xA;override this.DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyMaterial otherPartyPublicKey" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public abstract byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyMaterial otherPartyPublicKey" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="0758c-201">另一方的公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-201">The other party's public key.</span></span></param>
        <summary><span data-ttu-id="0758c-202">在派生类中实现时，对共享机密执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-202">When implemented in a derived class, performs a key derivation on the shared secret.</span></span></summary>
        <returns><span data-ttu-id="0758c-203">使用共享机密作为输入的密钥派生功能的结果。</span><span class="sxs-lookup"><span data-stu-id="0758c-203">The result of the key derivation function, using the shared secret as an input.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

The default behavior of this method is equivalent to calling <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A&gt;</ph> specifying SHA-256 as the hash algorithm with no prepend or append values.
<span data-ttu-id="0758c-205">某些实现允许更改此方法的行为，并建议调用方调用任何方法，以显式指示它执行所需的密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-205">Some implementations allow the behavior of this method to be changed, and callers are advised to call whichever method explicitly says it performs the key derivation they need.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-206"><paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-206">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0758c-207"><paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-207"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-208"><paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-208">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="0758c-209">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-209">-or-</span></span>

<span data-ttu-id="0758c-210">此实例仅表示一个公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-210">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]&#xA;override this.DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyTls (otherPartyPublicKey, prfLabel, prfSeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="prfLabel" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
        <Parameter Name="prfSeed" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="0758c-211">另一方的公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-211">The other party's public key.</span></span></param>
        <param name="prfLabel"><span data-ttu-id="0758c-212">ASCII 编码的 PRF 标签。</span><span class="sxs-lookup"><span data-stu-id="0758c-212">The ASCII-encoded PRF label.</span></span></param>
        <param name="prfSeed"><span data-ttu-id="0758c-213">64 字节的 PRF 种子。</span><span class="sxs-lookup"><span data-stu-id="0758c-213">The 64-byte PRF seed.</span></span></param>
        <summary><span data-ttu-id="0758c-214">在派生类中实现时，使用 TLS（传输层安全性）1.1 PRF（伪随机函数）执行密钥派生。</span><span class="sxs-lookup"><span data-stu-id="0758c-214">When implemented in a derived class, performs key derivation using the TLS (Transport Layer Security) 1.1 PRF (Pseudo-Random Function).</span></span></summary>
        <returns><span data-ttu-id="0758c-215">使用共享机密作为密钥的 TLS 1.1 PRF 中的前 48 个字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-215">The first 48 bytes from the TLS 1.1 PRF, using the shared secret as the key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

This method internally performs the Elliptic Curve Diffie-Hellman key agreement to produce the shared secret (<ph id="ph1">`z`</ph>).

<span data-ttu-id="0758c-217">此方法的返回值是 TLS 1.1 PRF (伪随机函数) 的48字节输出 `PRF(z, prfLabel, prfSeed)` 。</span><span class="sxs-lookup"><span data-stu-id="0758c-217">The return value of this method is a 48 byte output of the TLS 1.1 PRF (Pseudo-Random Function), `PRF(z, prfLabel, prfSeed)`.</span></span>

<span data-ttu-id="0758c-218">有关详细信息，请参阅 [IETF RFC 4346 第5部分](https://tools.ietf.org/html/rfc4346#section-5)。</span><span class="sxs-lookup"><span data-stu-id="0758c-218">For more information, see [IETF RFC 4346, section 5](https://tools.ietf.org/html/rfc4346#section-5).</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-219">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-219">A derived class must override this method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-220"><paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-220">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0758c-221"><paramref name="otherPartyPublicKey" />、<paramref name="prfLabel" /> 或 <paramref name="prfSeed" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-221"><paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> or <paramref name="prfSeed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-222"><paramref name="prfSeed" /> 的长度并不正好是 64 字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-222"><paramref name="prfSeed" /> is not exactly 64 bytes in length.</span></span>

<span data-ttu-id="0758c-223">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-223">-or-</span></span>

<span data-ttu-id="0758c-224"><paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。</span><span class="sxs-lookup"><span data-stu-id="0758c-224">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="0758c-225">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-225">-or-</span></span>

<span data-ttu-id="0758c-226">此实例仅表示一个公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-226">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportECPrivateKey">
      <MemberSignature Language="C#" Value="public virtual byte[] ExportECPrivateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ExportECPrivateKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportECPrivateKey () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ ExportECPrivateKey();" />
      <MemberSignature Language="F#" Value="abstract member ExportECPrivateKey : unit -&gt; byte[]&#xA;override this.ExportECPrivateKey : unit -&gt; byte[]" Usage="eCDiffieHellman.ExportECPrivateKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0758c-227">以 ECPrivateKey 格式导出当前密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-227">Exports the current key in the ECPrivateKey format.</span></span></summary>
        <returns><span data-ttu-id="0758c-228">一个字节数组，它包含此密钥的 ECPrivateKey 表示形式。</span><span class="sxs-lookup"><span data-stu-id="0758c-228">A byte array containing the ECPrivateKey representation of this key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-229">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-229">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters&#xA;override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellman.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="0758c-230">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-230"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0758c-231">在派生类中替换时，使用显式曲线形式，从正常运行的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 密钥将公钥或公钥和私钥信息导出到 <see cref="T:System.Security.Cryptography.ECParameters" /> 结构，使其可传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-231">When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span></span></summary>
        <returns><span data-ttu-id="0758c-232">表示此项在曲线上的点的对象（使用显式曲线格式）。</span><span class="sxs-lookup"><span data-stu-id="0758c-232">An object that represents the point on the curve for this key, using the explicit curve format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-233">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-233">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters&#xA;override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellman.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="0758c-234">若要包含专用参数，则为 <see langword="true" />；否则，若要仅包含公用参数，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-234"><see langword="true" /> to include private parameters; otherwise, <see langword="false" /> to include public parameters only.</span></span></param>
        <summary><span data-ttu-id="0758c-235">在派生类中替换时，从正常运行的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 密钥将公钥或公钥和私钥信息导出到 <see cref="T:System.Security.Cryptography.ECParameters" /> 结构，使其可传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-235">When overridden in a derived class, exports either the public or the public and private key information from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span></span></summary>
        <returns><span data-ttu-id="0758c-236">表示此项在曲线上的点的对象。</span><span class="sxs-lookup"><span data-stu-id="0758c-236">An object that represents the point on the curve for this key.</span></span> <span data-ttu-id="0758c-237">可将其传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-237">It can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the curve has a name, the <ph id="ph1">&lt;xref:System.Security.Cryptography.ECParameters.Curve&gt;</ph> property contains named curve parameters; otherwise, it will contain explicit parameters.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-239">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-239">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="override this.FromXmlString : string -&gt; unit" Usage="eCDiffieHellman.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="xmlString"><span data-ttu-id="0758c-240">用于重新构造 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象的 XML 字符串。</span><span class="sxs-lookup"><span data-stu-id="0758c-240">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.</span></span></param>
        <summary><span data-ttu-id="0758c-241">在所有情况下均引发此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-241">This method throws in all cases.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-242">在所有情况下。</span><span class="sxs-lookup"><span data-stu-id="0758c-242">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="abstract member GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit&#xA;override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDiffieHellman.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="0758c-243">用于生成临时公钥/私钥对的曲线。</span><span class="sxs-lookup"><span data-stu-id="0758c-243">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="0758c-244">在派生类中替换时，为指定曲线生成新的临时公钥/私钥对。</span><span class="sxs-lookup"><span data-stu-id="0758c-244">When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">`curve`</ph> must validate (that is, it must return <ph id="ph2">`true`</ph>) when passed to the <ph id="ph3">&lt;xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType&gt;</ph> method) and must not be implicit.  
  
 <span data-ttu-id="0758c-246">在 Windows 上不支持特性2曲线。</span><span class="sxs-lookup"><span data-stu-id="0758c-246">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-247"><paramref name="curve" /> 不进行验证。</span><span class="sxs-lookup"><span data-stu-id="0758c-247"><paramref name="curve" /> does not validate.</span></span></exception>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-248">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-248">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportECPrivateKey">
      <MemberSignature Language="C#" Value="public virtual void ImportECPrivateKey (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportECPrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ImportECPrivateKey (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ImportECPrivateKey(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="abstract member ImportECPrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit&#xA;override this.ImportECPrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDiffieHellman.ImportECPrivateKey (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0758c-249">ASN.1-BER 编码中 ECPrivateKey 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-249">The bytes of an ECPrivateKey structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="0758c-250">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-250">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="0758c-251">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-251">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-252">从 ECPrivateKey 结构中导入公共/私有密钥对，替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-252">Imports the public/private keypair from an ECPrivateKey structure, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

This method only supports the binary (BER/CER/DER) encoding of ECPrivateKey.
<span data-ttu-id="0758c-254">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="0758c-254">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-255"><paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 ECPrivateKey 结构。</span><span class="sxs-lookup"><span data-stu-id="0758c-255">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 ECPrivateKey structure.</span></span>

<span data-ttu-id="0758c-256">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-256">-or-</span></span>

<span data-ttu-id="0758c-257">密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="0758c-257">The key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDiffieHellman.ImportEncryptedPkcs8PrivateKey (passwordBytes, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="0758c-258">解密密钥材料时用作密码的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-258">The bytes to use as a password when decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="0758c-259">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-259">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="0758c-260">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-260">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="0758c-261">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-261">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-262">使用基于字节的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-262">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a byte-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

 The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by the EncryptedPrivateKeyInfo contents.
<span data-ttu-id="0758c-264">这样，在使用 PBKDF2 处理密码时，与使用 UTF-8 以外的文本编码的其他系统兼容， (基于密码的密钥派生函数 2) 。</span><span class="sxs-lookup"><span data-stu-id="0758c-264">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
<span data-ttu-id="0758c-265">此方法仅支持 EncryptedPrivateKeyInfo 的 BER/CER/DER) 编码的二进制 (。</span><span class="sxs-lookup"><span data-stu-id="0758c-265">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="0758c-266">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="0758c-266">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-267">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="0758c-267">The password is incorrect.</span></span>

<span data-ttu-id="0758c-268">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-268">-or-</span></span>

<span data-ttu-id="0758c-269"><paramref name="source" /> 的内容表示要应用的密钥派生功能 (KDF) 是旧的 PKCS#12 KDF，需要基于 <see cref="T:System.Char" /> 的密码。</span><span class="sxs-lookup"><span data-stu-id="0758c-269">The contents of <paramref name="source" /> indicate the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</span></span>

<span data-ttu-id="0758c-270">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-270">-or-</span></span>

<span data-ttu-id="0758c-271"><paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="0758c-271">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="0758c-272">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-272">-or-</span></span>

<span data-ttu-id="0758c-273"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-273">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="0758c-274">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-274">-or-</span></span>

<span data-ttu-id="0758c-275"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="0758c-275">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="0758c-276">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-276">-or-</span></span>

<span data-ttu-id="0758c-277">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="0758c-277">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDiffieHellman.ImportEncryptedPkcs8PrivateKey (password, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="0758c-278">用于解密密钥材料的密码。</span><span class="sxs-lookup"><span data-stu-id="0758c-278">The password to use for decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="0758c-279">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-279">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="0758c-280">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-280">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="0758c-281">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-281">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-282">使用基于字符的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-282">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a char-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the contents of <ph id="ph1">`source`</ph> indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.
<span data-ttu-id="0758c-284">此方法仅支持 EncryptedPrivateKeyInfo 的 BER/CER/DER) 编码的二进制 (。</span><span class="sxs-lookup"><span data-stu-id="0758c-284">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="0758c-285">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="0758c-285">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-286">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="0758c-286">The password is incorrect.</span></span>

<span data-ttu-id="0758c-287">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-287">-or-</span></span>

<span data-ttu-id="0758c-288"><paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="0758c-288">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="0758c-289">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-289">-or-</span></span>

<span data-ttu-id="0758c-290"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-290">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="0758c-291">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-291">-or-</span></span>

<span data-ttu-id="0758c-292"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="0758c-292">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="0758c-293">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-293">-or-</span></span>

<span data-ttu-id="0758c-294">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="0758c-294">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;byte&gt; passwordBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), passwordBytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;System::Byte&gt; passwordBytes);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="eCDiffieHellman.ImportFromEncryptedPem (input, passwordBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="0758c-295">要导入的加密密钥的 PEM 文本。</span><span class="sxs-lookup"><span data-stu-id="0758c-295">The PEM text of the encrypted key to import.</span></span></param>
        <param name="passwordBytes"><span data-ttu-id="0758c-296">解密密钥材料时用作密码的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-296">The bytes to use as a password when decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="0758c-297">导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-297">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by <ph id="ph1">`pbeParameters`</ph>. <span data-ttu-id="0758c-299">这样，在使用 PBKDF2 处理密码时，与使用 UTF-8 以外的文本编码的其他系统兼容， (基于密码的密钥派生函数 2) 。</span><span class="sxs-lookup"><span data-stu-id="0758c-299">This enables compatibility with other systems that use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
 

 <span data-ttu-id="0758c-300">不支持或格式不正确的 PEM 编码对象将被忽略。</span><span class="sxs-lookup"><span data-stu-id="0758c-300">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="0758c-301">如果找到多个受支持的 PEM 标签，则会引发异常，以防当键不明确时导入密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-301">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="0758c-302">此方法支持 `ENCRYPTED PRIVATE KEY` PEM 标签。</span><span class="sxs-lookup"><span data-stu-id="0758c-302">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-303"><paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-303"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="0758c-304">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-304">-or-</span></span>

<span data-ttu-id="0758c-305"><paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-305"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-306">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="0758c-306">The password is incorrect.</span></span>

<span data-ttu-id="0758c-307">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-307">-or-</span></span>

<span data-ttu-id="0758c-308"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="0758c-308">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="0758c-309">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-309">-or-</span></span>

<span data-ttu-id="0758c-310"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-310">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="0758c-311">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-311">-or-</span></span>

<span data-ttu-id="0758c-312"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="0758c-312">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="0758c-313">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-313">-or-</span></span>

<span data-ttu-id="0758c-314">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="0758c-314">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), password As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="eCDiffieHellman.ImportFromEncryptedPem (input, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="0758c-315">要导入的加密密钥的 PEM 文本。</span><span class="sxs-lookup"><span data-stu-id="0758c-315">The PEM text of the encrypted key to import.</span></span></param>
        <param name="password"><span data-ttu-id="0758c-316">用于解密密钥材料的密码。</span><span class="sxs-lookup"><span data-stu-id="0758c-316">The password to use for decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="0758c-317">导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-317">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 When the base-64 decoded contents of <ph id="ph1">`input`</ph> indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.
 

 <span data-ttu-id="0758c-319">不支持或格式不正确的 PEM 编码对象将被忽略。</span><span class="sxs-lookup"><span data-stu-id="0758c-319">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="0758c-320">如果找到多个受支持的 PEM 标签，则会引发异常，以防当键不明确时导入密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-320">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="0758c-321">此方法支持 `ENCRYPTED PRIVATE KEY` PEM 标签。</span><span class="sxs-lookup"><span data-stu-id="0758c-321">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-322"><paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-322"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="0758c-323">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-323">-or-</span></span>

<span data-ttu-id="0758c-324"><paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-324"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-325">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="0758c-325">The password is incorrect.</span></span>

<span data-ttu-id="0758c-326">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-326">-or-</span></span>

<span data-ttu-id="0758c-327"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="0758c-327">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="0758c-328">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-328">-or-</span></span>

<span data-ttu-id="0758c-329"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-329">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="0758c-330">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-330">-or-</span></span>

<span data-ttu-id="0758c-331"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="0758c-331">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="0758c-332">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-332">-or-</span></span>

<span data-ttu-id="0758c-333">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="0758c-333">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromPem">
      <MemberSignature Language="C#" Value="public override void ImportFromPem (ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportFromPem(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromPem (input As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromPem(ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="F#" Value="override this.ImportFromPem : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="eCDiffieHellman.ImportFromPem input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="0758c-334">要导入的密钥的 PEM 文本。</span><span class="sxs-lookup"><span data-stu-id="0758c-334">The PEM text of the key to import.</span></span></param>
        <summary><span data-ttu-id="0758c-335">导入 RFC 7468 PEM 编码的密钥，替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-335">Imports an RFC 7468 PEM-encoded key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 Unsupported or malformed PEM-encoded objects will be ignored. <span data-ttu-id="0758c-337">如果找到多个受支持的 PEM 标签，则会引发异常，以防止在键不明确时导入密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-337">If multiple supported PEM labels are found, an exception is raised to prevent importing a key when the key is ambiguous.</span></span>
 

 <span data-ttu-id="0758c-338">此方法支持以下 PEM 标签：</span><span class="sxs-lookup"><span data-stu-id="0758c-338">This method supports the following PEM labels:</span></span>
 
 - <span data-ttu-id="0758c-339">公钥</span><span class="sxs-lookup"><span data-stu-id="0758c-339">PUBLIC KEY</span></span>
 - <span data-ttu-id="0758c-340">私钥</span><span class="sxs-lookup"><span data-stu-id="0758c-340">PRIVATE KEY</span></span>
 - <span data-ttu-id="0758c-341">EC 私钥</span><span class="sxs-lookup"><span data-stu-id="0758c-341">EC PRIVATE KEY</span></span>


          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0758c-342"><paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-342"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="0758c-343">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-343">-or-</span></span>

<span data-ttu-id="0758c-344"><paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-344"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span>

<span data-ttu-id="0758c-345">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-345">-or-</span></span>

<span data-ttu-id="0758c-346"><paramref name="input" /> 包含已加密的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-346"><paramref name="input" /> contains an encrypted PEM-encoded key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="abstract member ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit&#xA;override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDiffieHellman.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="0758c-347">要导入的曲线参数。</span><span class="sxs-lookup"><span data-stu-id="0758c-347">The curve's parameters to import.</span></span></param>
        <summary><span data-ttu-id="0758c-348">在派生类中替代时，将 <see cref="T:System.Security.Cryptography.ECCurve" /> 的指定参数作为临时密钥导入到当前 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0758c-348">When overridden in a derived class, imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> as an ephemeral key into the current <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">`parameters`</ph> must validate (that is, it must return <ph id="ph2">`true`</ph>) when passed to the <ph id="ph3">&lt;xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType&gt;</ph> method. <span data-ttu-id="0758c-350">不支持隐式曲线上的参数。</span><span class="sxs-lookup"><span data-stu-id="0758c-350">Parameters over implicit curves are not supported.</span></span>  
  
 <span data-ttu-id="0758c-351">在 Windows 上不支持特性2曲线。</span><span class="sxs-lookup"><span data-stu-id="0758c-351">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-352"><paramref name="parameters" /> 不进行验证。</span><span class="sxs-lookup"><span data-stu-id="0758c-352"><paramref name="parameters" /> does not validate.</span></span></exception>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-353">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-353">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportPkcs8PrivateKey (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDiffieHellman.ImportPkcs8PrivateKey (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0758c-354">ASN.1-BER 编码中 PKCS#8 PrivateKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-354">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="0758c-355">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-355">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="0758c-356">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-356">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-357">解密后，从 PKCS#8 PrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-357">Imports the public/private keypair from a PKCS#8 PrivateKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method only supports the binary (BER/CER/DER) encoding of PrivateKeyInfo.
<span data-ttu-id="0758c-359">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="0758c-359">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-360"><paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 PrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="0758c-360">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</span></span>

<span data-ttu-id="0758c-361">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-361">-or-</span></span>

<span data-ttu-id="0758c-362"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-362">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="0758c-363">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-363">-or-</span></span>

<span data-ttu-id="0758c-364"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="0758c-364">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="0758c-365">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-365">-or-</span></span>

<span data-ttu-id="0758c-366">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="0758c-366">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override void ImportSubjectPublicKeyInfo (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportSubjectPublicKeyInfo(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportSubjectPublicKeyInfo (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportSubjectPublicKeyInfo(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportSubjectPublicKeyInfo : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="eCDiffieHellman.ImportSubjectPublicKeyInfo (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0758c-367">ASN.1-DER 编码中的 X.509 SubjectPublicKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-367">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="0758c-368">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-368">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="0758c-369">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-369">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-370">解密后，从 X.509 SubjectPublicKeyInfo 结构中导入公钥，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-370">Imports the public key from an X.509 SubjectPublicKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method only supports the binary (DER) encoding of SubjectPublicKeyInfo.
<span data-ttu-id="0758c-372">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="0758c-372">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-373"><paramref name="source" /> 的内容不表示 ASN.1-DER 编码的 X.509 SubjectPublicKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="0758c-373">The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</span></span>

<span data-ttu-id="0758c-374">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-374">-or-</span></span>

<span data-ttu-id="0758c-375"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="0758c-375">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="0758c-376">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-376">-or-</span></span>

<span data-ttu-id="0758c-377"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="0758c-377">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="0758c-378">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-378">-or-</span></span>

<span data-ttu-id="0758c-379">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="0758c-379">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeAlgorithm">
      <MemberSignature Language="C#" Value="public override string KeyExchangeAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyExchangeAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property KeyExchangeAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ KeyExchangeAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyExchangeAlgorithm : string" Usage="System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0758c-380">获取密钥交换算法的名称。</span><span class="sxs-lookup"><span data-stu-id="0758c-380">Gets the name of the key exchange algorithm.</span></span></summary>
        <value><span data-ttu-id="0758c-381">密钥交换算法的名称。</span><span class="sxs-lookup"><span data-stu-id="0758c-381">The name of the key exchange algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default (non-overridden) implementation of this property returns the string "ECDiffieHellman".  
  
 <span data-ttu-id="0758c-383">此属性继承自 <xref:System.Security.Cryptography.AsymmetricAlgorithm> 基类。</span><span class="sxs-lookup"><span data-stu-id="0758c-383">This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Cryptography.ECDiffieHellmanPublicKey" Usage="System.Security.Cryptography.ECDiffieHellman.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0758c-384">获取当前椭圆曲线 Diffie-Hellman (ECDH) 实例正在使用的公钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-384">Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</span></span></summary>
        <value><span data-ttu-id="0758c-385">此 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 实例正在使用的 ECDH 密钥对的公共部分。</span><span class="sxs-lookup"><span data-stu-id="0758c-385">The public part of the ECDH key pair that is being used by this <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureAlgorithm">
      <MemberSignature Language="C#" Value="public override string? SignatureAlgorithm { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SignatureAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SignatureAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureAlgorithm : string" Usage="System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm" />
      <MemberSignature Language="C#" Value="public override string SignatureAlgorithm { get; }" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0758c-386">获取签名算法的名称。</span><span class="sxs-lookup"><span data-stu-id="0758c-386">Gets the name of the signature algorithm.</span></span></summary>
        <value><span data-ttu-id="0758c-387">总是为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-387">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is inherited from the <ph id="ph1">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> base class.  
  
 <span data-ttu-id="0758c-389">椭圆曲线 Diffie-hellman (ECDH) 算法用于密钥派生，而不是数字签名生成。</span><span class="sxs-lookup"><span data-stu-id="0758c-389">The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation.</span></span> <span data-ttu-id="0758c-390">因此，此属性返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="0758c-390">Therefore, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ToXmlString : bool -&gt; string" Usage="eCDiffieHellman.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="0758c-391">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-391"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0758c-392">在所有情况下均引发此方法。</span><span class="sxs-lookup"><span data-stu-id="0758c-392">This method throws in all cases.</span></span></summary>
        <returns><span data-ttu-id="0758c-393">此方法不返回值。</span><span class="sxs-lookup"><span data-stu-id="0758c-393">This method does not return a value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="0758c-394">在所有情况下。</span><span class="sxs-lookup"><span data-stu-id="0758c-394">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportECPrivateKey">
      <MemberSignature Language="C#" Value="public virtual bool TryExportECPrivateKey (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryExportECPrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryExportECPrivateKey (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryExportECPrivateKey(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryExportECPrivateKey : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.TryExportECPrivateKey : Span&lt;byte&gt; * int -&gt; bool" Usage="eCDiffieHellman.TryExportECPrivateKey (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="0758c-395">接收 <see langword="ECPrivateKey" /> 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="0758c-395">The byte span to receive the <see langword="ECPrivateKey" /> data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="0758c-396">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-396">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="0758c-397">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-397">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-398">尝试以 <see langword="ECPrivateKey" /> 格式将当前密钥导入所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0758c-398">Attempts to export the current key in the <see langword="ECPrivateKey" /> format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="0758c-399">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-399"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-400">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-400">The key could not be exported.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="eCDiffieHellman.TryExportEncryptedPkcs8PrivateKey (passwordBytes, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="0758c-401">加密密钥材料时用作密码的字节。</span><span class="sxs-lookup"><span data-stu-id="0758c-401">The bytes to use as a password when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="0758c-402">加密密钥材料时使用的基于密码加密 (PBE) 参数。</span><span class="sxs-lookup"><span data-stu-id="0758c-402">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="0758c-403">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="0758c-403">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="0758c-404">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-404">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="0758c-405">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-405">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-406">尝试使用基于字节的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0758c-406">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</span></span></summary>
        <returns><span data-ttu-id="0758c-407">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-407"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by <ph id="ph1">`pbeParameters`</ph>.
<span data-ttu-id="0758c-409">这样，在使用 PBKDF2 处理密码时，与使用 UTF-8 以外的文本编码的其他系统兼容， (基于密码的密钥派生函数 2) 。</span><span class="sxs-lookup"><span data-stu-id="0758c-409">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-410">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-410">The key could not be exported.</span></span>

<span data-ttu-id="0758c-411">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0758c-411">-or-</span></span>

<span data-ttu-id="0758c-412"><paramref name="pbeParameters" /> 指示应使用需要基于 <see cref="T:System.Char" /> 密码的 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-412"><paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="eCDiffieHellman.TryExportEncryptedPkcs8PrivateKey (password, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="0758c-413">加密密钥材料时使用的密码。</span><span class="sxs-lookup"><span data-stu-id="0758c-413">The password to use when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="0758c-414">加密密钥材料时使用的基于密码加密 (PBE) 参数。</span><span class="sxs-lookup"><span data-stu-id="0758c-414">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="0758c-415">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="0758c-415">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="0758c-416">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-416">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="0758c-417">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-417">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-418">尝试使用基于字符的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导入所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0758c-418">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</span></span></summary>
        <returns><span data-ttu-id="0758c-419">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-419"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When <ph id="ph1">`pbeParameters`</ph> indicates an algorithm that uses PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-421">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-421">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportPkcs8PrivateKey (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportPkcs8PrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportPkcs8PrivateKey (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportPkcs8PrivateKey(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportPkcs8PrivateKey : Span&lt;byte&gt; * int -&gt; bool" Usage="eCDiffieHellman.TryExportPkcs8PrivateKey (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="0758c-422">接收 PKCS#8 PrivateKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="0758c-422">The byte span to receive the PKCS#8 PrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="0758c-423">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-423">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="0758c-424">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-424">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-425">尝试以 PKCS#8 PrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0758c-425">Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="0758c-426">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-426"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-427">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-427">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override bool TryExportSubjectPublicKeyInfo (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportSubjectPublicKeyInfo(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportSubjectPublicKeyInfo (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportSubjectPublicKeyInfo(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportSubjectPublicKeyInfo : Span&lt;byte&gt; * int -&gt; bool" Usage="eCDiffieHellman.TryExportSubjectPublicKeyInfo (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="0758c-428">接收 X.509 SubjectPublicKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="0758c-428">The byte span to receive the X.509 SubjectPublicKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="0758c-429">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="0758c-429">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="0758c-430">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="0758c-430">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0758c-431">尝试以 X.509 SubjectPublicKeyInfo 格式将当前密钥导出到所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0758c-431">Attempts to export the current key in the X.509 SubjectPublicKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="0758c-432">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0758c-432"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="0758c-433">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="0758c-433">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
