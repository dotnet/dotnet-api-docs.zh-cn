<Type Name="DataProtector" FullName="System.Security.Cryptography.DataProtector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d720035271acb761c1c7f0e0cf58ce2f9bf050c0" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86751876" /></Metadata><TypeSignature Language="C#" Value="public abstract class DataProtector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataProtector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.DataProtector" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DataProtector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataProtector abstract" />
  <TypeSignature Language="F#" Value="type DataProtector = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供数据保护程序的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类保护存储的数据不受查看和篡改。 通过创建此类的实例并使用用于保护数据的确切目的字符串来获取对受保护数据的访问权限。  调用方不需要使用密钥来保护数据或取消对数据的保护。 密钥由加密算法提供。  
  
 派生类必须重写 <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> <xref:System.Security.Cryptography.DataProtector.Unprotect%2A> 基类调用的和方法 <xref:System.Security.Cryptography.DataProtector> 。 它们还必须重写 <xref:System.Security.Cryptography.DataProtector.IsReprotectRequired%2A> 方法， `true` 当应用程序刷新存储的密码文本数据库时，此方法始终可能会降低效率。 派生类应提供调用基类构造函数的构造函数，该构造函数将设置 <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A> 、 <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> 和 <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> 属性。  
  
   
  
## Examples  
 下面的示例演示如何创建一个数据保护程序，该保护程序使用具有额外熵的选项的保护类。 默认情况下， <xref:System.Security.Cryptography.DataProtector> 类将目的属性的哈希预先给要加密的数据。 您可以关闭该功能，并在使用额外的平均信息量选项调用数据保护程序时，使用哈希目的作为额外的平均信息量。  
  
 [!code-csharp[Cryptography.DataProtector#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.dataprotector/cs/class1.cs#1)]
 [!code-vb[Cryptography.DataProtector#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.dataprotector/vb/class1.vb#1)]  
  
 下面的示例演示了一个使用类的功能的简单数据保护程序 <xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A> <xref:System.Security.Cryptography.DataProtector> 。  
  
 [!code-csharp[Cryptography.MemoryProtector#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#1)]
 [!code-vb[Cryptography.MemoryProtector#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataProtector (string applicationName, string primaryPurpose, string[] specificPurposes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string applicationName, string primaryPurpose, string[] specificPurposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (applicationName As String, primaryPurpose As String, specificPurposes As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataProtector(System::String ^ applicationName, System::String ^ primaryPurpose, cli::array &lt;System::String ^&gt; ^ specificPurposes);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.DataProtector : string * string * string[] -&gt; System.Security.Cryptography.DataProtector" Usage="new System.Security.Cryptography.DataProtector (applicationName, primaryPurpose, specificPurposes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="applicationName" Type="System.String" />
        <Parameter Name="primaryPurpose" Type="System.String" />
        <Parameter Name="specificPurposes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="applicationName">应用程序的名称。</param>
        <param name="primaryPurpose">保护的数据的主要目的。</param>
        <param name="specificPurposes">数据保护器的指定目的。</param>
        <summary>使用提供的应用程序名称、主要用途和具体目的，创建 <see cref="T:System.Security.Cryptography.DataProtector" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置 <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A> 、 <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> 和 <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> 属性。 这三个属性的组合必须唯一标识要保护的数据。 如果数据不是唯一标识的，则可能会无意中读取错误数据，或者其他数据可能会替换为您的数据。 主要和特定用途对的示例有 "发票" 和发票号，"礼品卡" 和礼品卡编号，"密码" 和 URL 字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="applicationName" /> 为空字符串或 <see langword="null" />。  
  
- 或 - 
 <paramref name="primaryPurpose" /> 为空字符串或 <see langword="null" />。  
  
- 或 - 
 <paramref name="specificPurposes" /> 包含空字符串或 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="protected string ApplicationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ApplicationName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string" Usage="System.Security.Cryptography.DataProtector.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的名称。</summary>
        <value>应用程序的名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DataProtector Create (string providerClass, string applicationName, string primaryPurpose, params string[] specificPurposes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DataProtector Create(string providerClass, string applicationName, string primaryPurpose, string[] specificPurposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (providerClass As String, applicationName As String, primaryPurpose As String, ParamArray specificPurposes As String()) As DataProtector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DataProtector ^ Create(System::String ^ providerClass, System::String ^ applicationName, System::String ^ primaryPurpose, ... cli::array &lt;System::String ^&gt; ^ specificPurposes);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string[] -&gt; System.Security.Cryptography.DataProtector" Usage="System.Security.Cryptography.DataProtector.Create (providerClass, applicationName, primaryPurpose, specificPurposes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DataProtector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerClass" Type="System.String" />
        <Parameter Name="applicationName" Type="System.String" />
        <Parameter Name="primaryPurpose" Type="System.String" />
        <Parameter Name="specificPurposes" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="providerClass">数据保护器的类名称。</param>
        <param name="applicationName">应用程序的名称。</param>
        <param name="primaryPurpose">保护的数据的主要目的。</param>
        <param name="specificPurposes">数据保护器的指定目的。</param>
        <summary>使用数据保护器的指定类名、应用程序名称、主要用途和特定目的，创建数据保护器实现的实例。</summary>
        <returns>数据保护器实现对象。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="providerClass" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashedPurpose">
      <MemberSignature Language="C#" Value="protected virtual byte[] GetHashedPurpose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] GetHashedPurpose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.GetHashedPurpose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetHashedPurpose () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetHashedPurpose();" />
      <MemberSignature Language="F#" Value="abstract member GetHashedPurpose : unit -&gt; byte[]&#xA;override this.GetHashedPurpose : unit -&gt; byte[]" Usage="dataProtector.GetHashedPurpose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建由构造函数指定的属性值的哈希。</summary>
        <returns>包含 <see cref="P:System.Security.Cryptography.DataProtector.ApplicationName" />、 <see cref="P:System.Security.Cryptography.DataProtector.PrimaryPurpose" />和 <see cref="P:System.Security.Cryptography.DataProtector.SpecificPurposes" /> 属性的哈希的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.DataProtector.GetHashedPurpose%2A> 计算应用程序名称和完全用途的哈希值。  完全用途是所有 <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> 和属性的串联 <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> 。  这三个部分中的每个部分都以其长度开头，因此可以反转哈希。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Security.Cryptography.DataProtector.GetHashedPurpose%2A> 方法对用途属性进行哈希处理，以便将其用作额外的平均信息量。  它是类的更大代码示例的一部分 <xref:System.Security.Cryptography.DataProtector> 。  
  
 [!code-csharp[Cryptography.DataProtector#3](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.dataprotector/cs/class1.cs#3)]
 [!code-vb[Cryptography.DataProtector#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.dataprotector/vb/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReprotectRequired">
      <MemberSignature Language="C#" Value="public abstract bool IsReprotectRequired (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsReprotectRequired(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsReprotectRequired (encryptedData As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsReprotectRequired(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="abstract member IsReprotectRequired : byte[] -&gt; bool" Usage="dataProtector.IsReprotectRequired encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">需评估的加密数据。</param>
        <summary>确定指定的加密数据是否需要重新加密。</summary>
        <returns>如果必须加再密数据，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrependHashedPurposeToPlaintext">
      <MemberSignature Language="C#" Value="protected virtual bool PrependHashedPurposeToPlaintext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrependHashedPurposeToPlaintext" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property PrependHashedPurposeToPlaintext As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool PrependHashedPurposeToPlaintext { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PrependHashedPurposeToPlaintext : bool" Usage="System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定哈希是否已附加到加密前的文本数组。</summary>
        <value>总是为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，假定派生类在加密之前将、和属性的哈希预先预置 <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A> <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> 到纯文本，并在解密过程中检查并验证哈希。  如果派生类需要在其自身的 (上指定预置数据（例如) 可选的熵值），则可以重写此属性，并将其设置为返回 `false` 。  如果 <xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A> 为 `false` ，则将 <xref:System.Security.Cryptography.DataProtector.Protect%2A> <xref:System.Security.Cryptography.DataProtector.Unprotect%2A> 直接传递到 <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> 并重 <xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A> 写，而不会更改字节数组。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryPurpose">
      <MemberSignature Language="C#" Value="protected string PrimaryPurpose { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PrimaryPurpose" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.PrimaryPurpose" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PrimaryPurpose As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ PrimaryPurpose { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryPurpose : string" Usage="System.Security.Cryptography.DataProtector.PrimaryPurpose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取保护的数据的主要目的。</summary>
        <value>保护的数据的主要目的。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public byte[] Protect (byte[] userData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Protect(unsigned int8[] userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Protect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Protect (userData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Protect(cli::array &lt;System::Byte&gt; ^ userData);" />
      <MemberSignature Language="F#" Value="member this.Protect : byte[] -&gt; byte[]" Usage="dataProtector.Protect userData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="userData">受保护的数据。</param>
        <summary>保护指定用户数据。</summary>
        <returns>一个包含加密数据的字节数组。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="userData" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ProviderProtect">
      <MemberSignature Language="C#" Value="protected abstract byte[] ProviderProtect (byte[] userData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ProviderProtect(unsigned int8[] userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ProviderProtect (userData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ProviderProtect(cli::array &lt;System::Byte&gt; ^ userData);" />
      <MemberSignature Language="F#" Value="abstract member ProviderProtect : byte[] -&gt; byte[]" Usage="dataProtector.ProviderProtect userData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="userData">要加密的数据。</param>
        <summary>指定基类中回调的 <see cref="M:System.Security.Cryptography.DataProtector.Protect(System.Byte[])" /> 方法中派生类的委托方法。</summary>
        <returns>一个包含加密数据的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示 <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> 方法的实现。  它是类的更大代码示例的一部分 <xref:System.Security.Cryptography.DataProtector> 。  
  
 [!code-csharp[Cryptography.MemoryProtector#3](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#3)]
 [!code-vb[Cryptography.MemoryProtector#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderUnprotect">
      <MemberSignature Language="C#" Value="protected abstract byte[] ProviderUnprotect (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ProviderUnprotect(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ProviderUnprotect (encryptedData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ProviderUnprotect(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="abstract member ProviderUnprotect : byte[] -&gt; byte[]" Usage="dataProtector.ProviderUnprotect encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">将取消加密的数据。</param>
        <summary>指定基类中回调的 <see cref="M:System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])" /> 方法中派生类的委托方法。</summary>
        <returns>取消加密的数据。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示 <xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A> 方法的实现。  它是类的更大代码示例的一部分 <xref:System.Security.Cryptography.DataProtector> 。  
  
 [!code-csharp[Cryptography.MemoryProtector#4](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#4)]
 [!code-vb[Cryptography.MemoryProtector#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecificPurposes">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IEnumerable&lt;string&gt; SpecificPurposes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; SpecificPurposes" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.SpecificPurposes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SpecificPurposes As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ SpecificPurposes { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SpecificPurposes : seq&lt;string&gt;" Usage="System.Security.Cryptography.DataProtector.SpecificPurposes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取保护数据的指定目的。</summary>
        <value>保护数据的特定用途的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public byte[] Unprotect (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Unprotect(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Unprotect (encryptedData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Unprotect(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="member this.Unprotect : byte[] -&gt; byte[]" Usage="dataProtector.Unprotect encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">将被不受保护的加密数据。</param>
        <summary>取消对指定保护数据保护。</summary>
        <returns>包含纯文本数据的字节数组。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="encryptedData" /> 包含了无效的用途。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
