<Type Name="DSA" FullName="System.Security.Cryptography.DSA">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b977801dcf85f4a84e7bb41b9865ae164b34417f" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94456276" /></Metadata><TypeSignature Language="C#" Value="public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DSA extends System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.DSA" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DSA&#xA;Inherits AsymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class DSA abstract : System::Security::Cryptography::AsymmetricAlgorithm" />
  <TypeSignature Language="F#" Value="type DSA = class&#xA;    inherit AsymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
    <AssemblyVersion>4.3.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Security.Cryptography.Algorithms" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Security.Cryptography.Algorithms" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.Cryptography.AsymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6310f-101">表示数字签名算法（<see cref="T:System.Security.Cryptography.DSA" />）的所有实现都必须从中继承的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="6310f-101">Represents the abstract base class from which all implementations of the Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) must inherit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-102">可以使用 <xref:System.Security.Cryptography.DSA> 类和派生类创建数字签名，以帮助保护数据的完整性。</span><span class="sxs-lookup"><span data-stu-id="6310f-102">You can use the <xref:System.Security.Cryptography.DSA> class and derived classes to create digital signatures that help protect the integrity of your data.</span></span>  <span data-ttu-id="6310f-103"><xref:System.Security.Cryptography.DSACryptoServiceProvider>提供此类的实现。</span><span class="sxs-lookup"><span data-stu-id="6310f-103">The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class.</span></span>  
  
 <span data-ttu-id="6310f-104">若要使用公钥系统对消息进行数字签名，则发送方首先将哈希函数应用于消息，以创建消息摘要。</span><span class="sxs-lookup"><span data-stu-id="6310f-104">To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest.</span></span> <span data-ttu-id="6310f-105">然后，发送方用发件人的私钥加密消息摘要，以创建发送方的个人签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-105">The sender then encrypts the message digest with the sender's private key to create the sender's personal signature.</span></span> <span data-ttu-id="6310f-106">收到消息和签名后，接收方使用发送方的公钥解密签名，以恢复消息摘要，并使用发送方使用的相同哈希算法对消息进行哈希处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-106">Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used.</span></span> <span data-ttu-id="6310f-107">如果接收方计算的消息摘要与发送方收到的消息摘要完全匹配，接收方可能会假设消息在传输过程中未被更改。</span><span class="sxs-lookup"><span data-stu-id="6310f-107">If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit.</span></span> <span data-ttu-id="6310f-108">请注意，任何人都可以验证签名，因为发件人的公钥是常见的知识。</span><span class="sxs-lookup"><span data-stu-id="6310f-108">Note that a signature can be verified by anyone, because the sender's public key is common knowledge.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="6310f-109">DSA 算法的创建者已经撤销了对它的支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-109">The creators of the DSA algorithm have withdrawn their support for it.</span></span> <span data-ttu-id="6310f-110">请考虑使用类 <xref:System.Security.Cryptography.RSA> 或 <xref:System.Security.Cryptography.ECDsa> 类而不是 <xref:System.Security.Cryptography.DSA> 类。</span><span class="sxs-lookup"><span data-stu-id="6310f-110">Consider using the <xref:System.Security.Cryptography.RSA> class or the <xref:System.Security.Cryptography.ECDsa> class instead of the <xref:System.Security.Cryptography.DSA> class.</span></span> <span data-ttu-id="6310f-111"><xref:System.Security.Cryptography.DSA>仅用于与旧版应用程序和数据兼容。</span><span class="sxs-lookup"><span data-stu-id="6310f-111">Use <xref:System.Security.Cryptography.DSA> only for compatibility with legacy applications and data.</span></span>  
  
 <span data-ttu-id="6310f-112">存在两种不同版本的 DSA 算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-112">Two different versions of the DSA algorithm exist.</span></span>
<span data-ttu-id="6310f-113">FIPS 186-2 中所述的原始格式要求使用 SHA-1 作为哈希算法，并支持从512位到1024位的密钥长度（以64位为增量）。</span><span class="sxs-lookup"><span data-stu-id="6310f-113">The original form, described in FIPS 186-2, requires the use of SHA-1 as the hash algorithm and supports key lengths from 512 bits to 1024 bits in increments of 64 bits.</span></span>
<span data-ttu-id="6310f-114">FIPS 186-3 中描述了算法的更新版本，该版本允许使用 SHA-2 系列哈希算法并添加了对2048位密钥和3072位密钥的支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-114">An updated version of the algorithm was described in FIPS 186-3, which enabled the use of the SHA-2 family of hash algorithms and added support for 2048 bit keys and 3072 bit keys.</span></span>
<span data-ttu-id="6310f-115">并非该类型的所有派生实现都支持对 DSA 进行 FIPS 186-3 增强。</span><span class="sxs-lookup"><span data-stu-id="6310f-115">Not all derived implementations of this type support the FIPS 186-3 enhancements to DSA.</span></span> <span data-ttu-id="6310f-116">可以通过属性检测支持 <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes> 。</span><span class="sxs-lookup"><span data-stu-id="6310f-116">Support can be detected via the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes> property.</span></span>
 
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-117">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-117">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DSA ();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.#ctor" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DSA();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6310f-118">初始化 <see cref="T:System.Security.Cryptography.DSA" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="6310f-118">Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSA" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6310f-119">创建用于执行非对称算法的加密对象。</span><span class="sxs-lookup"><span data-stu-id="6310f-119">Creates a cryptographic object used to perform the asymmetric algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6310f-120">创建用于执行不对称算法的默认加密对象。</span><span class="sxs-lookup"><span data-stu-id="6310f-120">Creates the default cryptographic object used to perform the asymmetric algorithm.</span></span></summary>
        <returns><span data-ttu-id="6310f-121">一个加密对象，用于执行不对称算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-121">A cryptographic object used to perform the asymmetric algorithm.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-122">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-122">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create (int keySizeInBits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create(int32 keySizeInBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (keySizeInBits As Integer) As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create(int keySizeInBits);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create keySizeInBits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySizeInBits" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="keySizeInBits"><span data-ttu-id="6310f-123">密钥大小（以位为单位）。</span><span class="sxs-lookup"><span data-stu-id="6310f-123">The key size, in bits.</span></span></param>
        <summary><span data-ttu-id="6310f-124">创建具有指定密钥大小的新临时 DSA 密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-124">Creates a new ephemeral DSA key with the specified key size.</span></span></summary>
        <returns><span data-ttu-id="6310f-125">具有指定密钥大小的新临时 DSA 密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-125">A new ephemeral DSA key with the specified key size.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-126"><see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" /> 不允许 <paramref name="keySizeInBits" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-126"><paramref name="keySizeInBits" /> is not permitted by <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create (System.Security.Cryptography.DSAParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create(valuetype System.Security.Cryptography.DSAParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (parameters As DSAParameters) As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create(System::Security::Cryptography::DSAParameters parameters);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.DSAParameters -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.DSAParameters" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="6310f-127"><see cref="T:System.Security.Cryptography.DSA" /> 算法的参数。</span><span class="sxs-lookup"><span data-stu-id="6310f-127">The parameters for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</span></span></param>
        <summary><span data-ttu-id="6310f-128">创建具有指定 DSA 密钥参数的新临时 DSA 密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-128">Creates a new ephemeral DSA key with the specified DSA key parameters.</span></span></summary>
        <returns><span data-ttu-id="6310f-129">新的临时 DSA 密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-129">A new ephemeral DSA key.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA? Create (string algName);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA Create(string algName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algName As String) As DSA" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DSA ^ Create(System::String ^ algName);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.DSA" Usage="System.Security.Cryptography.DSA.Create algName" />
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA Create (string algName);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSA</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algName"><span data-ttu-id="6310f-130">要使用的 <see cref="T:System.Security.Cryptography.DSA" /> 的特定实现的名称。</span><span class="sxs-lookup"><span data-stu-id="6310f-130">The name of the specific implementation of <see cref="T:System.Security.Cryptography.DSA" /> to use.</span></span></param>
        <summary><span data-ttu-id="6310f-131">创建用于执行不对称算法的指定加密对象。</span><span class="sxs-lookup"><span data-stu-id="6310f-131">Creates the specified cryptographic object used to perform the asymmetric algorithm.</span></span></summary>
        <returns><span data-ttu-id="6310f-132">一个加密对象，用于执行不对称算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-132">A cryptographic object used to perform the asymmetric algorithm.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-133">对于 <xref:System.Security.Cryptography.DSA> ，请使用名称 "system.string"。</span><span class="sxs-lookup"><span data-stu-id="6310f-133">For <xref:System.Security.Cryptography.DSA>, use the name System.Security.Cryptography.DSA.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-134">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-134">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateSignature">
      <MemberSignature Language="C#" Value="public abstract byte[] CreateSignature (byte[] rgbHash);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] CreateSignature(unsigned int8[] rgbHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateSignature (rgbHash As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ CreateSignature(cli::array &lt;System::Byte&gt; ^ rgbHash);" />
      <MemberSignature Language="F#" Value="abstract member CreateSignature : byte[] -&gt; byte[]" Usage="dSA.CreateSignature rgbHash" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="6310f-135">要签名的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-135">The hash value to be signed.</span></span></param>
        <summary><span data-ttu-id="6310f-136">在派生类中重写时，为指定的哈希值创建 <see cref="T:System.Security.Cryptography.DSA" /> 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-136">When overridden in a derived class, creates the <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified hash value.</span></span></summary>
        <returns><span data-ttu-id="6310f-137">指定哈希值的数字签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-137">The digital signature for the specified hash value.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-138">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-138">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateSignature">
      <MemberSignature Language="C#" Value="public byte[] CreateSignature (byte[] rgbHash, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CreateSignature(unsigned int8[] rgbHash, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[],System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSignature (rgbHash As Byte(), signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CreateSignature(cli::array &lt;System::Byte&gt; ^ rgbHash, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.CreateSignature : byte[] * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.CreateSignature (rgbHash, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="6310f-139">要签名的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-139">The hash value to sign.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-140">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-140">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="6310f-141">采用指定格式为指定的哈希值创建 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-141">Creates the DSA signature for the specified hash value in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="6310f-142">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-142">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-143"><paramref name="rgbHash" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-143"><paramref name="rgbHash" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-144"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-144"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-145">签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-145">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSignatureCore">
      <MemberSignature Language="C#" Value="protected virtual byte[]? CreateSignatureCore (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] CreateSignatureCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.CreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateSignatureCore (hash As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ CreateSignatureCore(ReadOnlySpan&lt;System::Byte&gt; hash, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member CreateSignatureCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.CreateSignatureCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.CreateSignatureCore (hash, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="6310f-146">要签名的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-146">The hash value to sign.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-147">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-147">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="6310f-148">采用指定格式为指定的哈希值创建 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-148">Creates the DSA signature for the specified hash value in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="6310f-149">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-149">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-150">签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-150">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExportParameters (includePrivateParameters As Boolean) As DSAParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::Cryptography::DSAParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportParameters : bool -&gt; System.Security.Cryptography.DSAParameters" Usage="dSA.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DSAParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="6310f-151">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-151"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6310f-152">当在派生类中重写时，导出 <see cref="T:System.Security.Cryptography.DSAParameters" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-152">When overridden in a derived class, exports the <see cref="T:System.Security.Cryptography.DSAParameters" />.</span></span></summary>
        <returns><span data-ttu-id="6310f-153"><see cref="T:System.Security.Cryptography.DSA" /> 的参数。</span><span class="sxs-lookup"><span data-stu-id="6310f-153">The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-154">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-154">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="override this.FromXmlString : string -&gt; unit" Usage="dSA.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString"><span data-ttu-id="6310f-155">用于重新构造 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串。</span><span class="sxs-lookup"><span data-stu-id="6310f-155">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.DSA" /> object.</span></span></param>
        <summary><span data-ttu-id="6310f-156">通过 XML 字符串重新构造 <see cref="T:System.Security.Cryptography.DSA" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6310f-156">Reconstructs a <see cref="T:System.Security.Cryptography.DSA" /> object from an XML string.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-157"><paramref name="xmlString" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-157">The <paramref name="xmlString" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-158"><paramref name="xmlString" /> 参数的格式无效。</span><span class="sxs-lookup"><span data-stu-id="6310f-158">The format of the <paramref name="xmlString" /> parameter is not valid.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-159">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-159">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetMaxSignatureSize">
      <MemberSignature Language="C#" Value="public int GetMaxSignatureSize (System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetMaxSignatureSize(valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMaxSignatureSize (signatureFormat As DSASignatureFormat) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetMaxSignatureSize(System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.GetMaxSignatureSize : System.Security.Cryptography.DSASignatureFormat -&gt; int" Usage="dSA.GetMaxSignatureSize signatureFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="signatureFormat"><span data-ttu-id="6310f-160">签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-160">The encoding format for a signature.</span></span></param>
        <summary><span data-ttu-id="6310f-161">获取此密钥按指定格式生成的签名的最大尺寸（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="6310f-161">Gets the largest size, in bytes, for a signature produced by this key in the indicated format.</span></span></summary>
        <returns><span data-ttu-id="6310f-162">此密钥按指定格式生成的签名的最大尺寸（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="6310f-162">The largest size, in bytes, for a signature produced by this key in the indicated format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-163"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-163"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="HashData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6310f-164">计算二进制数据的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-164">Computes the hash value of binary data.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member HashData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.HashData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.HashData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-165">要进行哈希处理的二进制流。</span><span class="sxs-lookup"><span data-stu-id="6310f-165">The binary stream to hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-166">要用于对数据进行哈希处理的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-166">The algorithm to use to hash the data.</span></span></param>
        <summary><span data-ttu-id="6310f-167">在派生类中被重写时，使用指定的哈希算法计算指定的二进制流的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-167">When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.</span></span></summary>
        <returns><span data-ttu-id="6310f-168">经过哈希处理的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-168">The hashed data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="6310f-169">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="6310f-169">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member HashData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.HashData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.HashData (data, offset, count, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-170">要进行哈希处理的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-170">The data to be hashed.</span></span></param>
        <param name="offset"><span data-ttu-id="6310f-171"><paramref name="data" /> 中要进行哈希处理的第一个字节的索引。</span><span class="sxs-lookup"><span data-stu-id="6310f-171">The index of the first byte in <paramref name="data" /> that is to be hashed.</span></span></param>
        <param name="count"><span data-ttu-id="6310f-172">要进行哈希处理的字节数。</span><span class="sxs-lookup"><span data-stu-id="6310f-172">The number of bytes to hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-173">要用于对数据进行哈希处理的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-173">The algorithm to use to hash the data.</span></span></param>
        <summary><span data-ttu-id="6310f-174">在派生类中被重写时，使用指定的哈希算法计算字节数组指定部分的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-174">When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.</span></span></summary>
        <returns><span data-ttu-id="6310f-175">经过哈希处理的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-175">The hashed data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="6310f-176">派生方法必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="6310f-176">A derived class must override this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportEncryptedPkcs8PrivateKey (passwordBytes, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="6310f-177">解密密钥材料时用作密码的字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-177">The bytes to use as a password when decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="6310f-178">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-178">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="6310f-179">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-179">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="6310f-180">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-180">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-181">使用基于字节的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-181">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a byte-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-182">密码字节直接传递到密钥派生函数 (KDF) 由 EncryptedPrivateKeyInfo 内容指示的算法使用。</span><span class="sxs-lookup"><span data-stu-id="6310f-182">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by the EncryptedPrivateKeyInfo contents.</span></span>
<span data-ttu-id="6310f-183">这样，在使用 PBKDF2 处理密码时，与使用 UTF-8 以外的文本编码的其他系统兼容， (基于密码的密钥派生函数 2) 。</span><span class="sxs-lookup"><span data-stu-id="6310f-183">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
<span data-ttu-id="6310f-184">此方法仅支持 EncryptedPrivateKeyInfo 的 BER/CER/DER) 编码的二进制 (。</span><span class="sxs-lookup"><span data-stu-id="6310f-184">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="6310f-185">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="6310f-185">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-186">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="6310f-186">The password is incorrect.</span></span>

<span data-ttu-id="6310f-187">或</span><span class="sxs-lookup"><span data-stu-id="6310f-187">-or-</span></span>

<span data-ttu-id="6310f-188"><paramref name="source" /> 的内容表示要应用的密钥派生功能 (KDF) 是旧的 PKCS#12 KDF，需要基于 <see cref="T:System.Char" /> 的密码。</span><span class="sxs-lookup"><span data-stu-id="6310f-188">The contents of <paramref name="source" /> indicate the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</span></span>

<span data-ttu-id="6310f-189">或</span><span class="sxs-lookup"><span data-stu-id="6310f-189">-or-</span></span>

<span data-ttu-id="6310f-190"><paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="6310f-190">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="6310f-191">或</span><span class="sxs-lookup"><span data-stu-id="6310f-191">-or-</span></span>

<span data-ttu-id="6310f-192"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-192">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="6310f-193">或</span><span class="sxs-lookup"><span data-stu-id="6310f-193">-or-</span></span>

<span data-ttu-id="6310f-194"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-194">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="6310f-195">或</span><span class="sxs-lookup"><span data-stu-id="6310f-195">-or-</span></span>

<span data-ttu-id="6310f-196">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-196">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportEncryptedPkcs8PrivateKey (password, source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="6310f-197">用于解密密钥材料的密码。</span><span class="sxs-lookup"><span data-stu-id="6310f-197">The password to use for decrypting the key material.</span></span></param>
        <param name="source"><span data-ttu-id="6310f-198">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-198">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="6310f-199">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-199">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="6310f-200">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-200">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-201">使用基于字符的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-201">Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a char-based password, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-202">如果的内容 `source` 指示使用 PBKDF1 (基于密码的密钥派生函数 1) 或 PBKDF2 (基于密码的密钥派生函数 2) 的算法，则密码将通过 utf-8 编码转换为字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-202">When the contents of `source` indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
<span data-ttu-id="6310f-203">此方法仅支持 EncryptedPrivateKeyInfo 的 BER/CER/DER) 编码的二进制 (。</span><span class="sxs-lookup"><span data-stu-id="6310f-203">This method only supports the binary (BER/CER/DER) encoding of EncryptedPrivateKeyInfo.</span></span>
<span data-ttu-id="6310f-204">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="6310f-204">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-205">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="6310f-205">The password is incorrect.</span></span>

<span data-ttu-id="6310f-206">或</span><span class="sxs-lookup"><span data-stu-id="6310f-206">-or-</span></span>

<span data-ttu-id="6310f-207"><paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="6310f-207">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="6310f-208">或</span><span class="sxs-lookup"><span data-stu-id="6310f-208">-or-</span></span>

<span data-ttu-id="6310f-209"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-209">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="6310f-210">或</span><span class="sxs-lookup"><span data-stu-id="6310f-210">-or-</span></span>

<span data-ttu-id="6310f-211"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-211">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="6310f-212">或</span><span class="sxs-lookup"><span data-stu-id="6310f-212">-or-</span></span>

<span data-ttu-id="6310f-213">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-213">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;byte&gt; passwordBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), passwordBytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;System::Byte&gt; passwordBytes);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="dSA.ImportFromEncryptedPem (input, passwordBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="6310f-214">要导入的加密密钥的 PEM 文本。</span><span class="sxs-lookup"><span data-stu-id="6310f-214">The PEM text of the encrypted key to import.</span></span></param>
        <param name="passwordBytes"><span data-ttu-id="6310f-215">解密密钥材料时用作密码的字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-215">The bytes to use as a password when decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="6310f-216">导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-216">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="6310f-217">密码字节直接传递到密钥派生函数 (KDF) 使用的算法所使用的算法 `pbeParameters` 。</span><span class="sxs-lookup"><span data-stu-id="6310f-217">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span> <span data-ttu-id="6310f-218">这样，在使用 PBKDF2 处理密码时，与使用 UTF-8 以外的文本编码的其他系统兼容， (基于密码的密钥派生函数 2) 。</span><span class="sxs-lookup"><span data-stu-id="6310f-218">This enables compatibility with other systems that use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
 

 <span data-ttu-id="6310f-219">不支持或格式不正确的 PEM 编码对象将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6310f-219">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="6310f-220">如果找到多个受支持的 PEM 标签，则会引发异常，以防当键不明确时导入密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-220">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="6310f-221">此方法支持 `ENCRYPTED PRIVATE KEY` PEM 标签。</span><span class="sxs-lookup"><span data-stu-id="6310f-221">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-222"><paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-222"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="6310f-223">或</span><span class="sxs-lookup"><span data-stu-id="6310f-223">-or-</span></span>

            <span data-ttu-id="6310f-224"><paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-224"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-225">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="6310f-225">The password is incorrect.</span></span>

<span data-ttu-id="6310f-226">或</span><span class="sxs-lookup"><span data-stu-id="6310f-226">-or-</span></span>

<span data-ttu-id="6310f-227"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="6310f-227">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="6310f-228">或</span><span class="sxs-lookup"><span data-stu-id="6310f-228">-or-</span></span>

<span data-ttu-id="6310f-229"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-229">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="6310f-230">或</span><span class="sxs-lookup"><span data-stu-id="6310f-230">-or-</span></span>

<span data-ttu-id="6310f-231"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-231">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="6310f-232">或</span><span class="sxs-lookup"><span data-stu-id="6310f-232">-or-</span></span>

<span data-ttu-id="6310f-233">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-233">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public override void ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromEncryptedPem (input As ReadOnlySpan(Of Char), password As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="F#" Value="override this.ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="dSA.ImportFromEncryptedPem (input, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="6310f-234">要导入的加密密钥的 PEM 文本。</span><span class="sxs-lookup"><span data-stu-id="6310f-234">The PEM text of the encrypted key to import.</span></span></param>
        <param name="password"><span data-ttu-id="6310f-235">用于解密密钥材料的密码。</span><span class="sxs-lookup"><span data-stu-id="6310f-235">The password to use for decrypting the key material.</span></span></param>
        <summary><span data-ttu-id="6310f-236">导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-236">Imports an encrypted RFC 7468 PEM-encoded private key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="6310f-237">如果64的已解码内容 `input` 指示使用 PBKDF1 (基于密码的密钥派生函数 1) 或 PBKDF2 (基于密码的密钥派生函数 2) 的算法，则密码将通过 utf-8 编码转换为字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-237">When the base-64 decoded contents of `input` indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
 

 <span data-ttu-id="6310f-238">不支持或格式不正确的 PEM 编码对象将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6310f-238">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="6310f-239">如果找到多个受支持的 PEM 标签，则会引发异常，以防当键不明确时导入密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-239">If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</span></span>
 

<span data-ttu-id="6310f-240">此方法支持 `ENCRYPTED PRIVATE KEY` PEM 标签。</span><span class="sxs-lookup"><span data-stu-id="6310f-240">This method supports the `ENCRYPTED PRIVATE KEY` PEM label.</span></span>



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-241"><paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-241"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="6310f-242">或</span><span class="sxs-lookup"><span data-stu-id="6310f-242">-or-</span></span>

            <span data-ttu-id="6310f-243"><paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-243"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-244">密码不正确。</span><span class="sxs-lookup"><span data-stu-id="6310f-244">The password is incorrect.</span></span>

<span data-ttu-id="6310f-245">或</span><span class="sxs-lookup"><span data-stu-id="6310f-245">-or-</span></span>

<span data-ttu-id="6310f-246"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="6310f-246">The base-64 decoded contents of the PEM text from <paramref name="input" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</span></span>

<span data-ttu-id="6310f-247">或</span><span class="sxs-lookup"><span data-stu-id="6310f-247">-or-</span></span>

<span data-ttu-id="6310f-248"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-248">The base-64 decoded contents of the PEM text from <paramref name="input" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="6310f-249">或</span><span class="sxs-lookup"><span data-stu-id="6310f-249">-or-</span></span>

<span data-ttu-id="6310f-250"><paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-250">The base-64 decoded contents of the PEM text from <paramref name="input" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="6310f-251">或</span><span class="sxs-lookup"><span data-stu-id="6310f-251">-or-</span></span>

<span data-ttu-id="6310f-252">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-252">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromPem">
      <MemberSignature Language="C#" Value="public override void ImportFromPem (ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportFromPem(valuetype System.ReadOnlySpan`1&lt;char&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportFromPem(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportFromPem (input As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportFromPem(ReadOnlySpan&lt;char&gt; input);" />
      <MemberSignature Language="F#" Value="override this.ImportFromPem : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="dSA.ImportFromPem input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="6310f-253">要导入的密钥的 PEM 文本。</span><span class="sxs-lookup"><span data-stu-id="6310f-253">The PEM text of the key to import.</span></span></param>
        <summary><span data-ttu-id="6310f-254">导入 RFC 7468 PEM 编码的密钥，替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-254">Imports an RFC 7468 PEM-encoded key, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="6310f-255">不支持或格式不正确的 PEM 编码对象将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6310f-255">Unsupported or malformed PEM-encoded objects will be ignored.</span></span> <span data-ttu-id="6310f-256">如果找到多个受支持的 PEM 标签，则会引发异常，以防止在键不明确时导入密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-256">If multiple supported PEM labels are found, an exception is raised to prevent importing a key when the key is ambiguous.</span></span>
 

 <span data-ttu-id="6310f-257">此方法支持以下 PEM 标签：</span><span class="sxs-lookup"><span data-stu-id="6310f-257">This method supports the following PEM labels:</span></span>

  - <span data-ttu-id="6310f-258">公钥</span><span class="sxs-lookup"><span data-stu-id="6310f-258">PUBLIC KEY</span></span>
  - <span data-ttu-id="6310f-259">私钥</span><span class="sxs-lookup"><span data-stu-id="6310f-259">PRIVATE KEY</span></span>


          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-260"><paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-260"><paramref name="input" /> does not contain a PEM-encoded key with a recognized label.</span></span>

<span data-ttu-id="6310f-261">或</span><span class="sxs-lookup"><span data-stu-id="6310f-261">-or-</span></span>

            <span data-ttu-id="6310f-262"><paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-262"><paramref name="input" /> contains multiple PEM-encoded keys with a recognized label.</span></span>

<span data-ttu-id="6310f-263">或</span><span class="sxs-lookup"><span data-stu-id="6310f-263">-or-</span></span>

            <span data-ttu-id="6310f-264"><paramref name="input" /> 包含已加密的 PEM 编码的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-264"><paramref name="input" /> contains an encrypted PEM-encoded key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportParameters(valuetype System.Security.Cryptography.DSAParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ImportParameters (parameters As DSAParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ImportParameters(System::Security::Cryptography::DSAParameters parameters);" />
      <MemberSignature Language="F#" Value="abstract member ImportParameters : System.Security.Cryptography.DSAParameters -&gt; unit" Usage="dSA.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.DSAParameters" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="6310f-265"><see cref="T:System.Security.Cryptography.DSA" /> 的参数。</span><span class="sxs-lookup"><span data-stu-id="6310f-265">The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</span></span></param>
        <summary><span data-ttu-id="6310f-266">当在派生类中重写时，导入指定的 <see cref="T:System.Security.Cryptography.DSAParameters" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-266">When overridden in a derived class, imports the specified <see cref="T:System.Security.Cryptography.DSAParameters" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-267"><paramref name="parameters" /> 缺少必填字段。</span><span class="sxs-lookup"><span data-stu-id="6310f-267"><paramref name="parameters" /> is missing required fields.</span></span>

<span data-ttu-id="6310f-268">或</span><span class="sxs-lookup"><span data-stu-id="6310f-268">-or-</span></span>

<span data-ttu-id="6310f-269"><paramref name="parameters" /> 字段的有效密钥长度不一致。</span><span class="sxs-lookup"><span data-stu-id="6310f-269"><paramref name="parameters" /> has fields with inconsistent lengths for a valid key.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-270"><paramref name="parameters" /> 不表示有效的 DSA 密钥参数集。</span><span class="sxs-lookup"><span data-stu-id="6310f-270"><paramref name="parameters" /> does not represent a valid DSA key parameter set.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-271">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-271">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ImportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override void ImportPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportPkcs8PrivateKey (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportPkcs8PrivateKey (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6310f-272">ASN.1-BER 编码中 PKCS#8 PrivateKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-272">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="6310f-273">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-273">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="6310f-274">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-274">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-275">解密后，从 PKCS#8 PrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-275">Imports the public/private keypair from a PKCS#8 PrivateKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-276">此方法仅支持 PrivateKeyInfo 的 BER/CER/DER) 编码的二进制 (。</span><span class="sxs-lookup"><span data-stu-id="6310f-276">This method only supports the binary (BER/CER/DER) encoding of PrivateKeyInfo.</span></span>
<span data-ttu-id="6310f-277">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="6310f-277">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-278"><paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 PrivateKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="6310f-278">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</span></span>

<span data-ttu-id="6310f-279">或</span><span class="sxs-lookup"><span data-stu-id="6310f-279">-or-</span></span>

<span data-ttu-id="6310f-280"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-280">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="6310f-281">或</span><span class="sxs-lookup"><span data-stu-id="6310f-281">-or-</span></span>

<span data-ttu-id="6310f-282"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-282">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="6310f-283">或</span><span class="sxs-lookup"><span data-stu-id="6310f-283">-or-</span></span>

<span data-ttu-id="6310f-284">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-284">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override void ImportSubjectPublicKeyInfo (ReadOnlySpan&lt;byte&gt; source, out int bytesRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportSubjectPublicKeyInfo(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; bytesRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportSubjectPublicKeyInfo (source As ReadOnlySpan(Of Byte), ByRef bytesRead As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportSubjectPublicKeyInfo(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % bytesRead);" />
      <MemberSignature Language="F#" Value="override this.ImportSubjectPublicKeyInfo : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="dSA.ImportSubjectPublicKeyInfo (source, bytesRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6310f-285">ASN.1-DER 编码中的 X.509 SubjectPublicKeyInfo 结构的字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-285">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</span></span></param>
        <param name="bytesRead"><span data-ttu-id="6310f-286">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-286">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />.</span></span> <span data-ttu-id="6310f-287">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-287">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-288">解密后，从 X.509 SubjectPublicKeyInfo 结构中导入公钥，以替换此对象的密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-288">Imports the public key from an X.509 SubjectPublicKeyInfo structure after decryption, replacing the keys for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-289">此方法仅支持 SubjectPublicKeyInfo 的二进制 (DER) 编码。</span><span class="sxs-lookup"><span data-stu-id="6310f-289">This method only supports the binary (DER) encoding of SubjectPublicKeyInfo.</span></span>
<span data-ttu-id="6310f-290">如果值采用 Base64 编码或 PEM 文本格式，则调用方必须在调用此方法之前对内容进行 Base64 编码。</span><span class="sxs-lookup"><span data-stu-id="6310f-290">If the value is Base64-encoded or in the PEM text format, the caller must Base64-decode the contents before calling this method.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-291"><paramref name="source" /> 的内容不表示 ASN.1-DER 编码的 X.509 SubjectPublicKeyInfo 结构。</span><span class="sxs-lookup"><span data-stu-id="6310f-291">The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</span></span>

<span data-ttu-id="6310f-292">或</span><span class="sxs-lookup"><span data-stu-id="6310f-292">-or-</span></span>

<span data-ttu-id="6310f-293"><paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-293">The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</span></span>

<span data-ttu-id="6310f-294">或</span><span class="sxs-lookup"><span data-stu-id="6310f-294">-or-</span></span>

<span data-ttu-id="6310f-295"><paramref name="source" /> 的内容表示密钥采用的格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="6310f-295">The contents of <paramref name="source" /> represent the key in a format that is not supported.</span></span>

<span data-ttu-id="6310f-296">或</span><span class="sxs-lookup"><span data-stu-id="6310f-296">-or-</span></span>

<span data-ttu-id="6310f-297">特定于算法的密钥导入失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-297">The algorithm-specific key import failed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6310f-298">计算指定数据的哈希值，并对其进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-298">Computes the hash value of the specified data and signs it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-299">要为其计算哈希的输入数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-299">The input data for which to compute the hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-300">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-300">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="6310f-301">使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-301">Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="6310f-302">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-302">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-303"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-303"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-304"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="6310f-304"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="6310f-305">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-305">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-306">要为其计算哈希的输入流。</span><span class="sxs-lookup"><span data-stu-id="6310f-306">The input stream for which to compute the hash.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-307">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-307">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="6310f-308">使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-308">Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="6310f-309">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-309">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-310"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-310"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-311"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="6310f-311"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="6310f-312">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-312">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-313">要签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-313">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-314">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-314">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-315">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-315">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="6310f-316">计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-316">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="6310f-317">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-317">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-318"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-318"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-319"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-319"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-320"><paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-320"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-321">哈希处理或签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-321">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Stream, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignData (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-322">要签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-322">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-323">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-323">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-324">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-324">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="6310f-325">计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-325">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="6310f-326">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-326">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-327"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-327"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-328"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-328"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-329"><paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-329"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-330">哈希处理或签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-330">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]&#xA;override this.SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="dSA.SignData (data, offset, count, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-331">要为其计算哈希的输入数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-331">The input data for which to compute the hash.</span></span></param>
        <param name="offset"><span data-ttu-id="6310f-332">数组中自其开始使用数据的偏移量。</span><span class="sxs-lookup"><span data-stu-id="6310f-332">The offset into the array at which to begin using data.</span></span></param>
        <param name="count"><span data-ttu-id="6310f-333">数组中用作数据的字节数。</span><span class="sxs-lookup"><span data-stu-id="6310f-333">The number of bytes in the array to use as data.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-334">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-334">The hash algorithm to use to create the hash value.</span></span></param>
        <summary><span data-ttu-id="6310f-335">使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-335">Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span></span></summary>
        <returns><span data-ttu-id="6310f-336">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-336">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-337"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-337"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-338"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="6310f-338"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="6310f-339">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-339">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-340"><paramref name="offset" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-340"><paramref name="offset" /> is less than zero.</span></span>  
  
<span data-ttu-id="6310f-341">或</span><span class="sxs-lookup"><span data-stu-id="6310f-341">-or-</span></span> 
 <span data-ttu-id="6310f-342"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-342"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="6310f-343">或</span><span class="sxs-lookup"><span data-stu-id="6310f-343">-or-</span></span> 
 <span data-ttu-id="6310f-344"><paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</span><span class="sxs-lookup"><span data-stu-id="6310f-344"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * int * int * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignData (data, offset, count, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-345">要签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-345">The data to sign.</span></span></param>
        <param name="offset"><span data-ttu-id="6310f-346"><paramref name="data" /> 中自其开始使用哈希处理的偏移量。</span><span class="sxs-lookup"><span data-stu-id="6310f-346">The offset into <paramref name="data" /> at which to begin hashing.</span></span></param>
        <param name="count"><span data-ttu-id="6310f-347">要从 <paramref name="data" /> 中读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="6310f-347">The number of bytes to read from <paramref name="data" />.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-348">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-348">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-349">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-349">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="6310f-350">计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-350">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="6310f-351">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-351">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-352"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-352"><paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-353"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-353"><paramref name="signatureFormat" /> is not a known format.</span></span>
 
<span data-ttu-id="6310f-354">-或- <paramref name="offset" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-354">-or- <paramref name="offset" /> is less than zero.</span></span>
 
<span data-ttu-id="6310f-355">-或- <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-355">-or- <paramref name="count" /> is less than zero.</span></span>
 
<span data-ttu-id="6310f-356">-或- <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</span><span class="sxs-lookup"><span data-stu-id="6310f-356">-or- <paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-357"><paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-357"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-358">哈希处理或签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-358">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignDataCore">
      <MemberSignature Language="C#" Value="protected virtual byte[] SignDataCore (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] SignDataCore(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignDataCore (data As Stream, hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignDataCore(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member SignDataCore : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.SignDataCore : System.IO.Stream * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignDataCore (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-359">要签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-359">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-360">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-360">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-361">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-361">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="6310f-362">计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-362">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="6310f-363">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-363">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-364">哈希处理或签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-364">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignDataCore">
      <MemberSignature Language="C#" Value="protected virtual byte[]? SignDataCore (ReadOnlySpan&lt;byte&gt; data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] SignDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignDataCore (data As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignDataCore(ReadOnlySpan&lt;System::Byte&gt; data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member SignDataCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]&#xA;override this.SignDataCore : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; byte[]" Usage="dSA.SignDataCore (data, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-365">要签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-365">The data to sign.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-366">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-366">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-367">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-367">The encoding format to use for the signature.</span></span></param>
        <summary><span data-ttu-id="6310f-368">计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-368">Computes the hash value of the specified data and signs it using the specified signature format.</span></span></summary>
        <returns><span data-ttu-id="6310f-369">指定数据的 DSA 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-369">The DSA signature for the specified data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-370">哈希处理或签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-370">An error occurred in the hashing or signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ToXmlString : bool -&gt; string" Usage="dSA.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="6310f-371">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-371"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6310f-372">创建并返回当前 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6310f-372">Creates and returns an XML string representation of the current <see cref="T:System.Security.Cryptography.DSA" /> object.</span></span></summary>
        <returns><span data-ttu-id="6310f-373">当前 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串编码。</span><span class="sxs-lookup"><span data-stu-id="6310f-373">An XML string encoding of the current <see cref="T:System.Security.Cryptography.DSA" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-374">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-374">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryCreateSignature">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateSignature (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateSignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateSignature (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateSignature(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateSignature : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool&#xA;override this.TryCreateSignature : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryCreateSignature (hash, destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="6310f-375">要签名的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-375">The hash to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-376">接收签名的字节范围。</span><span class="sxs-lookup"><span data-stu-id="6310f-376">The byte span to receive the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-377">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-377">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="6310f-378">尝试将指定哈希的 DSA 签名创建到所提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="6310f-378">Attempts to create the DSA signature for the specified hash into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-379">如果 <paramref name="destination" /> 足够大可以接收结果，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-379"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the result; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-380">此方法的默认实现是调用 <xref:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])> ，并将结果复制到 `destination` 。</span><span class="sxs-lookup"><span data-stu-id="6310f-380">The default implementation of this method is to call <xref:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])> and copy the result to `destination`.</span></span>
<span data-ttu-id="6310f-381">派生类型应重写此方法，以避免中间数组创建。</span><span class="sxs-lookup"><span data-stu-id="6310f-381">Derived types should override this method to avoid the intermediate array creation.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-382">此实例仅表示一个公钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-382">This instance represents only a public key.</span></span>

<span data-ttu-id="6310f-383">或</span><span class="sxs-lookup"><span data-stu-id="6310f-383">-or-</span></span>

<span data-ttu-id="6310f-384">实现类型仅支持旧版 DSA (FIPS 186-2)，并且 <paramref name="hash" /> 不是 20 字节的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-384">The implementation type only supports legacy DSA (FIPS 186-2), and <paramref name="hash" /> is not a 20-byte value.</span></span>

<span data-ttu-id="6310f-385">或</span><span class="sxs-lookup"><span data-stu-id="6310f-385">-or-</span></span>

<span data-ttu-id="6310f-386">创建签名失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-386">Creating the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryCreateSignature">
      <MemberSignature Language="C#" Value="public bool TryCreateSignature (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCreateSignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateSignature (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCreateSignature(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryCreateSignature : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TryCreateSignature (hash, destination, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="6310f-387">要签名的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-387">The hash value to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-388">要接收签名的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-388">The buffer to receive the signature.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-389">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-389">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-390">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-390">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-391">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-391">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-392">尝试采用指定格式为指定的哈希值创建 DSA 签名并将其置于提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="6310f-392">Attempts to create the DSA signature for the specified hash value in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-393">如果 <paramref name="destination" /> 足够大可以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-393"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-394"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-394"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-395">签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-395">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryCreateSignatureCore">
      <MemberSignature Language="C#" Value="protected virtual bool TryCreateSignatureCore (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryCreateSignatureCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryCreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryCreateSignatureCore (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryCreateSignatureCore(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateSignatureCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool&#xA;override this.TryCreateSignatureCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TryCreateSignatureCore (hash, destination, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="6310f-396">要签名的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-396">The hash value to sign.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-397">要接收签名的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-397">The buffer to receive the signature.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-398">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-398">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-399">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-399">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-400">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-400">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-401">尝试采用指定格式为指定的哈希值创建 DSA 签名并将其置于提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="6310f-401">Attempts to create the DSA signature for the specified hash value in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-402">如果 <paramref name="destination" /> 足够大可以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-402"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-403">签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-403">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportEncryptedPkcs8PrivateKey (passwordBytes, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="passwordBytes"><span data-ttu-id="6310f-404">加密密钥材料时用作密码的字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-404">The bytes to use as a password when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="6310f-405">加密密钥材料时使用的基于密码加密 (PBE) 参数。</span><span class="sxs-lookup"><span data-stu-id="6310f-405">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-406">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="6310f-406">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-407">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-407">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-408">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-408">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-409">尝试使用基于字节的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-409">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</span></span></summary>
        <returns><span data-ttu-id="6310f-410">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-410"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-411">密码字节直接传递到密钥派生函数 (KDF) 使用的算法所使用的算法 `pbeParameters` 。</span><span class="sxs-lookup"><span data-stu-id="6310f-411">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span>
<span data-ttu-id="6310f-412">这样，在使用 PBKDF2 处理密码时，与使用 UTF-8 以外的文本编码的其他系统兼容， (基于密码的密钥派生函数 2) 。</span><span class="sxs-lookup"><span data-stu-id="6310f-412">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-413">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-413">The key could not be exported.</span></span>

<span data-ttu-id="6310f-414">或</span><span class="sxs-lookup"><span data-stu-id="6310f-414">-or-</span></span>

<span data-ttu-id="6310f-415"><paramref name="pbeParameters" /> 指示应使用需要基于 <see cref="T:System.Char" /> 密码的 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-415"><paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters? pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportEncryptedPkcs8PrivateKey (password, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C#" Value="public override bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="6310f-416">加密密钥材料时使用的密码。</span><span class="sxs-lookup"><span data-stu-id="6310f-416">The password to use when encrypting the key material.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="6310f-417">加密密钥材料时使用的基于密码加密 (PBE) 参数。</span><span class="sxs-lookup"><span data-stu-id="6310f-417">The password-based encryption (PBE) parameters to use when encrypting the key material.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-418">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="6310f-418">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-419">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-419">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-420">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-420">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-421">尝试使用基于字符的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导入所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-421">Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</span></span></summary>
        <returns><span data-ttu-id="6310f-422">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-422"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-423">当 `pbeParameters` 指示使用 PBKDF2 (基于密码的密钥派生函数 2) 的算法时，密码将通过 utf-8 编码转换为字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-423">When `pbeParameters` indicates an algorithm that uses PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-424">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-424">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public override bool TryExportPkcs8PrivateKey (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportPkcs8PrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportPkcs8PrivateKey (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportPkcs8PrivateKey(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportPkcs8PrivateKey : Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportPkcs8PrivateKey (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="6310f-425">接收 PKCS#8 PrivateKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="6310f-425">The byte span to receive the PKCS#8 PrivateKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-426">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-426">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-427">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-427">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-428">尝试以 PKCS#8 PrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-428">Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-429">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-429"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-430">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-430">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey" />
      </Docs>
    </Member>
    <Member MemberName="TryExportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public override bool TryExportSubjectPublicKeyInfo (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryExportSubjectPublicKeyInfo(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryExportSubjectPublicKeyInfo (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryExportSubjectPublicKeyInfo(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryExportSubjectPublicKeyInfo : Span&lt;byte&gt; * int -&gt; bool" Usage="dSA.TryExportSubjectPublicKeyInfo (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="6310f-431">接收 X.509 SubjectPublicKeyInfo 数据的字节范围。</span><span class="sxs-lookup"><span data-stu-id="6310f-431">The byte span to receive the X.509 SubjectPublicKeyInfo data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-432">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-432">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-433">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-433">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-434">尝试以 X.509 SubjectPublicKeyInfo 格式将当前密钥导出到所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-434">Attempts to export the current key in the X.509 SubjectPublicKeyInfo format into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-435">如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-435"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-436">未能导出密钥。</span><span class="sxs-lookup"><span data-stu-id="6310f-436">The key could not be exported.</span></span></exception>
        <altmember cref="Overload:System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryHashData">
      <MemberSignature Language="C#" Value="protected virtual bool TryHashData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryHashData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryHashData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryHashData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryHashData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool&#xA;override this.TryHashData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool" Usage="dSA.TryHashData (data, destination, hashAlgorithm, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-437">要进行哈希处理的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-437">The data to be hashed.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-438">接收哈希值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="6310f-438">The byte span to receive the hash value.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-439">要使用的哈希算法的名称。</span><span class="sxs-lookup"><span data-stu-id="6310f-439">The name of the hash algorithm to use.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-440">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-440">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="6310f-441">尝试将所提供数据的哈希值计算到所提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="6310f-441">Attempts to compute the hash value of the provided data into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-442">如果 <paramref name="destination" /> 足够大可以接收结果，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-442"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the result; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="6310f-443">此方法的默认实现是调用 <xref:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)> ，并将结果复制到 `destination` 。</span><span class="sxs-lookup"><span data-stu-id="6310f-443">The default implementation of this method is to call <xref:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)> and copy the result to `destination`.</span></span>

<span data-ttu-id="6310f-444">派生类型应重写此方法，以避免中间数组创建。</span><span class="sxs-lookup"><span data-stu-id="6310f-444">Derived types should override this method to avoid the intermediate array creation.</span></span>
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignData">
      <MemberSignature Language="C#" Value="public virtual bool TrySignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySignData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool&#xA;override this.TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; bool" Usage="dSA.TrySignData (data, destination, hashAlgorithm, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-445">要进行哈希处理和签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-445">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-446">接收签名的字节范围。</span><span class="sxs-lookup"><span data-stu-id="6310f-446">The byte span to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-447">要使用的哈希算法的名称。</span><span class="sxs-lookup"><span data-stu-id="6310f-447">The name of the hash algorithm to use.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-448">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-448">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="6310f-449">尝试将指定数据的 DSA 签名创建到所提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="6310f-449">Attempts to create the DSA signature for the specified data into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-450">如果 <paramref name="destination" /> 足够大可以接收结果，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-450"><see langword="true" /> if <paramref name="destination" /> is large enough to receive the result; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignData">
      <MemberSignature Language="C#" Value="public bool TrySignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySignData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TrySignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TrySignData (data, destination, hashAlgorithm, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-451">要进行哈希处理和签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-451">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-452">要接收签名的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-452">The buffer to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-453">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-453">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-454">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-454">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-455">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-455">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-456">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-456">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-457">尝试采用指定格式为指定的数据创建 DSA 签名并将其置于提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="6310f-457">Attempts to create the DSA signature for the specified data in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-458">如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-458"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-459"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-459"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-460"><paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-460"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-461">签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-461">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TrySignDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool TrySignDataCore (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TrySignDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TrySignDataCore (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TrySignDataCore(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TrySignDataCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool&#xA;override this.TrySignDataCore : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat * int -&gt; bool" Usage="dSA.TrySignDataCore (data, destination, hashAlgorithm, signatureFormat, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-462">要进行哈希处理和签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-462">The data to hash and sign.</span></span></param>
        <param name="destination"><span data-ttu-id="6310f-463">要接收签名的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="6310f-463">The buffer to receive the signature.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-464">要用于创建哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-464">The hash algorithm to use to create the hash value.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-465">要用于签名的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-465">The encoding format to use for the signature.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6310f-466">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</span><span class="sxs-lookup"><span data-stu-id="6310f-466">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="6310f-467">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="6310f-467">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="6310f-468">尝试采用指定格式为指定的数据创建 DSA 签名并将其置于提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="6310f-468">Attempts to create the DSA signature for the specified data in the indicated format and place it into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="6310f-469">如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-469"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the signature; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-470">签名时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-470">An error occurred in the signing operation.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VerifyData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6310f-471">验证数字签名有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-471">Verifies that a digital signature is valid.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-472">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-472">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-473">要验证的签名数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-473">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-474">要用于创建数据哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-474">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="6310f-475">通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-475">Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="6310f-476">如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-476"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-477"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-477"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6310f-478">或</span><span class="sxs-lookup"><span data-stu-id="6310f-478">-or-</span></span> 
 <span data-ttu-id="6310f-479"><paramref name="signature" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-479"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-480">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。</span><span class="sxs-lookup"><span data-stu-id="6310f-480">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="6310f-481">或</span><span class="sxs-lookup"><span data-stu-id="6310f-481">-or-</span></span>

<span data-ttu-id="6310f-482">验证签名失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-482">Verifying the signature otherwise failed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-483"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="6310f-483"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="6310f-484">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-484">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(class System.IO.Stream data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(System::IO::Stream ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-485">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-485">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-486">要验证的签名数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-486">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-487">要用于创建数据哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-487">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="6310f-488">通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-488">Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="6310f-489">如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-489"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-490"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-490"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6310f-491">或</span><span class="sxs-lookup"><span data-stu-id="6310f-491">-or-</span></span> 
 <span data-ttu-id="6310f-492"><paramref name="signature" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-492"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-493"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="6310f-493"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="6310f-494">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-494">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-495">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。</span><span class="sxs-lookup"><span data-stu-id="6310f-495">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="6310f-496">或</span><span class="sxs-lookup"><span data-stu-id="6310f-496">-or-</span></span>

<span data-ttu-id="6310f-497">验证签名失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-497">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-498">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-498">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-499">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-499">The signature to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-500">要用于创建数据哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-500">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="6310f-501">通过使用指定的哈希算法计算某字节范围内数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-501">Verifies that a digital signature is valid by calculating the hash value of the data in a byte span using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="6310f-502">如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-502"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-503"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="6310f-503"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="6310f-504">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-504">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-505">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。</span><span class="sxs-lookup"><span data-stu-id="6310f-505">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="6310f-506">或</span><span class="sxs-lookup"><span data-stu-id="6310f-506">-or-</span></span>

<span data-ttu-id="6310f-507">验证签名失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-507">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-508">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-508">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-509">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-509">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-510">用于对验证过程的数据进行哈希处理的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-510">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-511"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-511">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-512">验证数字签名对于所提供的数据是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-512">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="6310f-513">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-513"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-514"><paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-514"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-515"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-515"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-516"><paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-516"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-517">哈希处理或验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-517">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(class System.IO.Stream data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(System::IO::Stream ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : System.IO.Stream * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-518">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-518">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-519">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-519">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-520">用于对验证过程的数据进行哈希处理的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-520">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-521"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-521">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-522">验证数字签名对于所提供的数据是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-522">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="6310f-523">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-523"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-524"><paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-524"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-525"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-525"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-526"><paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-526"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-527">哈希处理或验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-527">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-528">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-528">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-529">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-529">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-530">用于对验证过程的数据进行哈希处理的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-530">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-531"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-531">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-532">验证数字签名对于所提供的数据是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-532">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="6310f-533">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-533"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-534"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-534"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-535">哈希处理或验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-535">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(unsigned int8[] data, int32 offset, int32 count, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="abstract member VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool&#xA;override this.VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="dSA.VerifyData (data, offset, count, signature, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-536">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-536">The signed data.</span></span></param>
        <param name="offset"><span data-ttu-id="6310f-537">开始计算哈希的起始索引。</span><span class="sxs-lookup"><span data-stu-id="6310f-537">The starting index at which to compute the hash.</span></span></param>
        <param name="count"><span data-ttu-id="6310f-538">要进行哈希处理的字节数。</span><span class="sxs-lookup"><span data-stu-id="6310f-538">The number of bytes to hash.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-539">要验证的签名数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-539">The signature data to be verified.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-540">要用于创建数据哈希值的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-540">The hash algorithm used to create the hash value of the data.</span></span></param>
        <summary><span data-ttu-id="6310f-541">通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-541">Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.</span></span></summary>
        <returns><span data-ttu-id="6310f-542">如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-542"><see langword="true" /> if the digital signature is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-543"><paramref name="data" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-543"><paramref name="data" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6310f-544">或</span><span class="sxs-lookup"><span data-stu-id="6310f-544">-or-</span></span> 
 <span data-ttu-id="6310f-545"><paramref name="signature" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-545"><paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-546"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="6310f-546"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="6310f-547">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-547">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-548"><paramref name="offset" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-548"><paramref name="offset" /> is less than zero.</span></span>  
  
<span data-ttu-id="6310f-549">或</span><span class="sxs-lookup"><span data-stu-id="6310f-549">-or-</span></span> 
 <span data-ttu-id="6310f-550"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-550"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="6310f-551">或</span><span class="sxs-lookup"><span data-stu-id="6310f-551">-or-</span></span> 
 <span data-ttu-id="6310f-552"><paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</span><span class="sxs-lookup"><span data-stu-id="6310f-552"><paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-553">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。</span><span class="sxs-lookup"><span data-stu-id="6310f-553">The implementation type only supports legacy DSA (FIPS 186-2), and the hash algorithm is not SHA-1.</span></span>

<span data-ttu-id="6310f-554">或</span><span class="sxs-lookup"><span data-stu-id="6310f-554">-or-</span></span>

<span data-ttu-id="6310f-555">验证签名失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-555">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, int32 offset, int32 count, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * int * int * byte[] * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyData (data, offset, count, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.Byte[]" Index="3" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="4" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="5" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-556">包含已签名数据的数组。</span><span class="sxs-lookup"><span data-stu-id="6310f-556">An array that contains the signed data.</span></span></param>
        <param name="offset"><span data-ttu-id="6310f-557"><paramref name="data" /> 的已签名部分的起始索引。</span><span class="sxs-lookup"><span data-stu-id="6310f-557">The starting index of the signed portion of <paramref name="data" />.</span></span></param>
        <param name="count"><span data-ttu-id="6310f-558">已签名的 <paramref name="data" /> 的字节数。</span><span class="sxs-lookup"><span data-stu-id="6310f-558">The number of bytes in <paramref name="data" /> that were signed.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-559">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-559">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-560">用于对验证过程的数据进行哈希处理的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-560">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-561"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-561">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-562">验证数字签名对于所提供的数据是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-562">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="6310f-563">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-563"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-564"><paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-564"><paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-565"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-565"><paramref name="signatureFormat" /> is not a known format.</span></span>
 
<span data-ttu-id="6310f-566">-或- <paramref name="offset" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-566">-or- <paramref name="offset" /> is less than zero.</span></span>
 
<span data-ttu-id="6310f-567">-或- <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="6310f-567">-or- <paramref name="count" /> is less than zero.</span></span>
 
<span data-ttu-id="6310f-568">-或- <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</span><span class="sxs-lookup"><span data-stu-id="6310f-568">-or- <paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6310f-569"><paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-569"><paramref name="hashAlgorithm" /> has a <see langword="null" /> or empty <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-570">哈希处理或验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-570">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyDataCore (System.IO.Stream? data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDataCore(class System.IO.Stream data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifyDataCore (data As Stream, signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifyDataCore(System::IO::Stream ^ data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifyDataCore : System.IO.Stream * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifyDataCore : System.IO.Stream * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyDataCore (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-571">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-571">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-572">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-572">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-573">用于对验证过程的数据进行哈希处理的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-573">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-574"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-574">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-575">验证数字签名对于所提供的数据是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-575">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="6310f-576">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-576"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-577">哈希处理或验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-577">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyDataCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifyDataCore (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifyDataCore (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifyDataCore(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifyDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifyDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifyDataCore (data, signature, hashAlgorithm, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="2" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="3" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6310f-578">已签名的数据。</span><span class="sxs-lookup"><span data-stu-id="6310f-578">The signed data.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-579">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-579">The signature to verify.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="6310f-580">用于对验证过程的数据进行哈希处理的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="6310f-580">The hash algorithm used to hash the data for the verification process.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-581"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-581">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-582">验证数字签名对于所提供的数据是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-582">Verifies that a digital signature is valid for the provided data.</span></span></summary>
        <returns><span data-ttu-id="6310f-583">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-583"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-584">哈希处理或验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-584">An error occurred in the hashing or verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifySignature(unsigned int8[] rgbHash, unsigned int8[] rgbSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function VerifySignature (rgbHash As Byte(), rgbSignature As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool VerifySignature(cli::array &lt;System::Byte&gt; ^ rgbHash, cli::array &lt;System::Byte&gt; ^ rgbSignature);" />
      <MemberSignature Language="F#" Value="abstract member VerifySignature : byte[] * byte[] -&gt; bool" Usage="dSA.VerifySignature (rgbHash, rgbSignature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" />
        <Parameter Name="rgbSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="6310f-585">用 <paramref name="rgbSignature" /> 签名的数据的哈希值。</span><span class="sxs-lookup"><span data-stu-id="6310f-585">The hash of the data signed with <paramref name="rgbSignature" />.</span></span></param>
        <param name="rgbSignature"><span data-ttu-id="6310f-586">要为 <c>rgbData</c> 验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-586">The signature to be verified for <c>rgbData</c>.</span></span></param>
        <summary><span data-ttu-id="6310f-587">当在派生类中重写时，验证指定数据的 <see cref="T:System.Security.Cryptography.DSA" /> 签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-587">When overridden in a derived class, verifies the <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified data.</span></span></summary>
        <returns><span data-ttu-id="6310f-588">如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-588"><see langword="true" /> if <paramref name="rgbSignature" /> matches the signature computed using the specified hash algorithm and key on <paramref name="rgbHash" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-589">实现类型仅支持旧版 DSA (FIPS 186-2)，并且哈希值的长度不是 20 字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-589">The implementation type only supports legacy DSA (FIPS 186-2), and the hash value is not 20 bytes long.</span></span>

<span data-ttu-id="6310f-590">或</span><span class="sxs-lookup"><span data-stu-id="6310f-590">-or-</span></span>

<span data-ttu-id="6310f-591">验证签名失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-591">Verifying the signature otherwise failed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="6310f-592">加密服务</span><span class="sxs-lookup"><span data-stu-id="6310f-592">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public virtual bool VerifySignature (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifySignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifySignature (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifySignature(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature);" />
      <MemberSignature Language="F#" Value="abstract member VerifySignature : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool&#xA;override this.VerifySignature : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="dSA.VerifySignature (hash, signature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="6310f-593">要验证的数据哈希。</span><span class="sxs-lookup"><span data-stu-id="6310f-593">The data hash to verify.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-594">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-594">The signature to be verify.</span></span></param>
        <summary><span data-ttu-id="6310f-595">验证数字签名对于所提供的数据哈希是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-595">Verifies that a digital signature is valid for a provided data hash.</span></span></summary>
        <returns><span data-ttu-id="6310f-596">如果数字签名对哈希值有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-596"><see langword="true" /> if the digital signature is valid for the hash; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6310f-597">此方法的默认实现在将 <xref:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])> 范围复制到数组后调用。</span><span class="sxs-lookup"><span data-stu-id="6310f-597">The default implementation of this method calls <xref:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])> after copying the spans to arrays.</span></span>
<span data-ttu-id="6310f-598">派生类型应重写此方法，以避免中间数组创建。</span><span class="sxs-lookup"><span data-stu-id="6310f-598">Derived types should override this method to avoid the intermediate array creation.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-599">实现类型仅支持旧版 DSA (FIPS 186-2)，并且哈希值的长度不是 20 字节。</span><span class="sxs-lookup"><span data-stu-id="6310f-599">The implementation type only supports legacy DSA (FIPS 186-2), and the hash value is not 20 bytes long.</span></span>

<span data-ttu-id="6310f-600">或</span><span class="sxs-lookup"><span data-stu-id="6310f-600">-or-</span></span>

<span data-ttu-id="6310f-601">验证签名失败。</span><span class="sxs-lookup"><span data-stu-id="6310f-601">Verifying the signature otherwise failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public bool VerifySignature (byte[] rgbHash, byte[] rgbSignature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignature(unsigned int8[] rgbHash, unsigned int8[] rgbSignature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignature (rgbHash As Byte(), rgbSignature As Byte(), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifySignature(cli::array &lt;System::Byte&gt; ^ rgbHash, cli::array &lt;System::Byte&gt; ^ rgbSignature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifySignature : byte[] * byte[] * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifySignature (rgbHash, rgbSignature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbHash" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="rgbSignature" Type="System.Byte[]" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="rgbHash"><span data-ttu-id="6310f-602">已签名的哈希。</span><span class="sxs-lookup"><span data-stu-id="6310f-602">The signed hash.</span></span></param>
        <param name="rgbSignature"><span data-ttu-id="6310f-603">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-603">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-604"><paramref name="rgbSignature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-604">The encoding format for <paramref name="rgbSignature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-605">验证数字签名对于所提供的哈希是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-605">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="6310f-606">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-606"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6310f-607"><paramref name="rgbHash" /> 或 <paramref name="rgbSignature" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-607"><paramref name="rgbHash" /> or <paramref name="rgbSignature" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-608"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-608"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-609">验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-609">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignature">
      <MemberSignature Language="C#" Value="public bool VerifySignature (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignature(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignature (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifySignature(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="member this.VerifySignature : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifySignature (hash, signature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="6310f-610">已签名的哈希。</span><span class="sxs-lookup"><span data-stu-id="6310f-610">The signed hash.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-611">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-611">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-612"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-612">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-613">验证数字签名对于所提供的哈希是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-613">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="6310f-614">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-614"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6310f-615"><paramref name="signatureFormat" /> 不是已知格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-615"><paramref name="signatureFormat" /> is not a known format.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-616">验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-616">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureCore">
      <MemberSignature Language="C#" Value="protected virtual bool VerifySignatureCore (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifySignatureCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.DSASignatureFormat signatureFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DSA.VerifySignatureCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VerifySignatureCore (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), signatureFormat As DSASignatureFormat) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool VerifySignatureCore(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::DSASignatureFormat signatureFormat);" />
      <MemberSignature Language="F#" Value="abstract member VerifySignatureCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool&#xA;override this.VerifySignatureCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.DSASignatureFormat -&gt; bool" Usage="dSA.VerifySignatureCore (hash, signature, signatureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="signatureFormat" Type="System.Security.Cryptography.DSASignatureFormat" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="6310f-617">已签名的哈希。</span><span class="sxs-lookup"><span data-stu-id="6310f-617">The signed hash.</span></span></param>
        <param name="signature"><span data-ttu-id="6310f-618">要验证的签名。</span><span class="sxs-lookup"><span data-stu-id="6310f-618">The signature to verify.</span></span></param>
        <param name="signatureFormat"><span data-ttu-id="6310f-619"><paramref name="signature" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="6310f-619">The encoding format for <paramref name="signature" />.</span></span></param>
        <summary><span data-ttu-id="6310f-620">验证数字签名对于所提供的哈希是否有效。</span><span class="sxs-lookup"><span data-stu-id="6310f-620">Verifies that a digital signature is valid for the provided hash.</span></span></summary>
        <returns><span data-ttu-id="6310f-621">如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6310f-621"><see langword="true" /> if the digital signature is valid for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="6310f-622">验证时出错。</span><span class="sxs-lookup"><span data-stu-id="6310f-622">An error occurred in the verification operation.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
