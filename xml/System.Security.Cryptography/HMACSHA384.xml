<Type Name="HMACSHA384" FullName="System.Security.Cryptography.HMACSHA384">
  <Metadata><Meta Name="ms.openlocfilehash" Value="87ff1c77db57c12b3c9502f61916d69b1966c9bc" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91904413" /></Metadata><TypeSignature Language="C#" Value="public class HMACSHA384 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACSHA384 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACSHA384" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACSHA384&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACSHA384 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACSHA384 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
    <AssemblyVersion>4.3.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Security.Cryptography.Algorithms" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Security.Cryptography.Algorithms" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f0a8c-101">使用 <see cref="T:System.Security.Cryptography.SHA384" /> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-101">Computes a Hash-based Message Authentication Code (HMAC) using the <see cref="T:System.Security.Cryptography.SHA384" /> hash function.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a8c-102"><xref:System.Security.Cryptography.HMACSHA384> 加密哈希算法的一种类型，它是从 SHA-384 哈希函数构建的，用作基于哈希的消息验证代码 (HMAC) 。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-102"><xref:System.Security.Cryptography.HMACSHA384> is a type of keyed hash algorithm that is constructed from the SHA-384 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="f0a8c-103">HMAC 进程将密钥与消息数据混合，并对结果进行哈希运算。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-103">The HMAC process mixes a secret key with the message data and hashes the result.</span></span> <span data-ttu-id="f0a8c-104">哈希值再次与密钥混合，然后再次进行哈希运算。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-104">The hash value is mixed with the secret key again, and then hashed a second time.</span></span> <span data-ttu-id="f0a8c-105">输出哈希为384位长。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-105">The output hash is 384 bits long.</span></span>  
  
 <span data-ttu-id="f0a8c-106">如果发送方和接收方共享机密密钥，则可以使用 HMAC 来确定不安全通道上发送的消息是否已被篡改。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-106">An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="f0a8c-107">发件人计算原始数据的哈希值，并以单个消息形式发送原始数据和哈希值。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-107">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="f0a8c-108">接收方重新计算收到的消息上的哈希值，并检查计算的 HMAC 是否与传输的 HMAC 匹配。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-108">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="f0a8c-109">如果原始和计算所得的哈希值匹配，则对消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-109">If the original and computed hash values match, the message is authenticated.</span></span> <span data-ttu-id="f0a8c-110">如果二者不匹配，则可能是数据或哈希值已更改。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-110">If they do not match, either the data or the hash value has been changed.</span></span> <span data-ttu-id="f0a8c-111">Hmac 提供安全防范篡改，因为更改消息和重现正确的哈希值需要知道机密密钥。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-111">HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span>  
  
 <span data-ttu-id="f0a8c-112"><xref:System.Security.Cryptography.HMACSHA384> 接受所有密钥大小，并产生长度为384位的哈希序列。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-112"><xref:System.Security.Cryptography.HMACSHA384> accepts all key sizes and produces a hash sequence that is 384 bits long.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f0a8c-113">下面的示例演示如何使用对象对文件进行签名 <xref:System.Security.Cryptography.HMACSHA384> ，以及如何验证该文件。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-113">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACSHA384> object, and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACSHA384#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACSHA384/CPP/hmacsha384.cpp#1)]
 [!code-csharp[HMACSHA384#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACSHA384/CS/hmacsha384.cs#1)]
 [!code-vb[HMACSHA384#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACSHA384/vb/hmacsha384.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="f0a8c-114">加密服务</span><span class="sxs-lookup"><span data-stu-id="f0a8c-114">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0a8c-115">初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-115">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA384" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACSHA384 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACSHA384();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0a8c-116">使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA384" /> class by using a randomly generated key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a8c-117">此构造函数使用一个随机生成的64字节的键。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-117">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="f0a8c-118">加密服务</span><span class="sxs-lookup"><span data-stu-id="f0a8c-118">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACSHA384 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACSHA384(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACSHA384 : byte[] -&gt; System.Security.Cryptography.HMACSHA384" Usage="new System.Security.Cryptography.HMACSHA384 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f0a8c-119"><see cref="T:System.Security.Cryptography.HMACSHA384" /> 加密的机密密钥。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-119">The secret key for <see cref="T:System.Security.Cryptography.HMACSHA384" /> encryption.</span></span> <span data-ttu-id="f0a8c-120">该密钥可以是任意长度。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-120">The key can be any length.</span></span> <span data-ttu-id="f0a8c-121">但是建议的大小为 128 个字节。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-121">However, the recommended size is 128 bytes.</span></span> <span data-ttu-id="f0a8c-122">如果密钥长度超过 128 个字节，将对其进行哈希运算（使用 SHA-384）以派生出一个 128 字节的密钥。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-122">If the key is more than 128 bytes long, it is hashed (using SHA-384) to derive a 128-byte key.</span></span> <span data-ttu-id="f0a8c-123">如果少于 128 个字节，就填充到 128 个字节。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-123">If it is less than 128 bytes long, it is padded to 128 bytes.</span></span></param>
        <summary><span data-ttu-id="f0a8c-124">使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-124">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA384" /> class by using the specified key data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f0a8c-125">有关如何使用此构造函数的示例，请参阅 <xref:System.Security.Cryptography.HMACSHA384> 类。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-125">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA384> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0a8c-126"><paramref name="key" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-126">The <paramref name="key" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="f0a8c-127">加密服务</span><span class="sxs-lookup"><span data-stu-id="f0a8c-127">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="hMACSHA384.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="f0a8c-128">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-128"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="f0a8c-129">释放由 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-129">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HMACSHA384" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected override void HashCore (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void HashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub HashCore (source As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void HashCore(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="override this.HashCore : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="hMACSHA384.HashCore source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f0a8c-130">要计算其 HMAC 的输入。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-130">The input to compute the HMAC for.</span></span></param>
        <summary><span data-ttu-id="f0a8c-131">将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-131">Routes data written to the object into the HMAC algorithm for computing the HMAC.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected override void HashCore (byte[] rgb, int ib, int cb);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void HashCore(unsigned int8[] rgb, int32 ib, int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub HashCore (rgb As Byte(), ib As Integer, cb As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void HashCore(cli::array &lt;System::Byte&gt; ^ rgb, int ib, int cb);" />
      <MemberSignature Language="F#" Value="override this.HashCore : byte[] * int * int -&gt; unit" Usage="hMACSHA384.HashCore (rgb, ib, cb)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgb" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="ib" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="cb" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="rgb"><span data-ttu-id="f0a8c-132">要计算其 HMAC 的输入。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-132">The input to compute the HMAC for.</span></span></param>
        <param name="ib"><span data-ttu-id="f0a8c-133">字节数组中的偏移量，从该位置开始使用数据。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-133">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="cb"><span data-ttu-id="f0a8c-134">字节数组中用作数据的字节数。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-134">The number of bytes in the byte array to use as data.</span></span></param>
        <summary><span data-ttu-id="f0a8c-135">将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-135">Routes data written to the object into the HMAC algorithm for computing the HMAC.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashFinal">
      <MemberSignature Language="C#" Value="protected override byte[] HashFinal ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance unsigned int8[] HashFinal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.HashFinal" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HashFinal () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::Byte&gt; ^ HashFinal();" />
      <MemberSignature Language="F#" Value="override this.HashFinal : unit -&gt; byte[]" Usage="hMACSHA384.HashFinal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0a8c-136">在算法处理最后一个数据后，结束 HMAC 计算。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-136">Finalizes the HMAC computation after the last data is processed by the algorithm.</span></span></summary>
        <returns><span data-ttu-id="f0a8c-137">字节数组中计算得到的 HMAC 值。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-137">The computed HMAC value in a byte array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashSize">
      <MemberSignature Language="C#" Value="public override int HashSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HashSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HMACSHA384.HashSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HashSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HashSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HashSize : int" Usage="System.Security.Cryptography.HMACSHA384.HashSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0a8c-138">获取计算得到的 HMAC 的大小（以位为单位）。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-138">Gets the size, in bits, of the computed HMAC.</span></span></summary>
        <value><span data-ttu-id="f0a8c-139">计算的 HMAC 的大小，以位为单位。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-139">The size, in bits, of the computed HMAC.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize();" />
      <MemberSignature Language="F#" Value="override this.Initialize : unit -&gt; unit" Usage="hMACSHA384.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0a8c-140">将哈希算法重置为其初始状态。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-140">Resets the hash algorithm to its initial state.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public override byte[] Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HMACSHA384.Key" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Key As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ Key { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Key : byte[] with get, set" Usage="System.Security.Cryptography.HMACSHA384.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0a8c-141">获取或设置要在 HMAC 计算中使用的密钥。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-141">Gets or sets the key to use in the HMAC calculation.</span></span></summary>
        <value><span data-ttu-id="f0a8c-142">要在 HMAC 计算中使用的密钥。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-142">The key to use in the HMAC calculation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceLegacyHmacValues">
      <MemberSignature Language="C#" Value="public bool ProduceLegacyHmacValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProduceLegacyHmacValues" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues" />
      <MemberSignature Language="VB.NET" Value="Public Property ProduceLegacyHmacValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProduceLegacyHmacValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProduceLegacyHmacValues : bool with get, set" Usage="System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0a8c-143">针对 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 算法的 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] 实现（与该算法的 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] 实现不一致），提供一种解决方法。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-143">Provides a workaround for the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] implementation of the <see cref="T:System.Security.Cryptography.HMACSHA384" /> algorithm, which is inconsistent with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] implementation of the algorithm.</span></span></summary>
        <value><span data-ttu-id="f0a8c-144">如果支持 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] 应用程序与 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 应用程序交互，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-144"><see langword="true" /> to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a8c-145"><xref:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues%2A>布尔值属性的目的是使 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] 应用程序能够与 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 应用程序进行交互。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-145">The purpose of the <xref:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues%2A> Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications.</span></span> <span data-ttu-id="f0a8c-146">当您将此属性设置为时 `true` ， <xref:System.Security.Cryptography.HMACSHA384> 对象将生成与生成的值匹配的值 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-146">When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA384> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)].</span></span> <span data-ttu-id="f0a8c-147">创建 HMAC 对象后，只应设置此属性一次。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-147">You should set this property only once after you create your HMAC object.</span></span> <span data-ttu-id="f0a8c-148">以后需要重置密钥，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-148">You will need to reset your key afterwards, as shown in the following example.</span></span>  
  
```csharp
public static void Test()
{
    var hmac = new HMACSHA384();  
    hmac.ProduceLegacyHmacValues = true;  
    hmac.Key = // ...Get the HMAC key.  
    // ...  
    // Use the HMAC algorithm.  
    // ...
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/security/cryptographic-services"><span data-ttu-id="f0a8c-149">加密服务</span><span class="sxs-lookup"><span data-stu-id="f0a8c-149">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryHashFinal">
      <MemberSignature Language="C#" Value="protected override bool TryHashFinal (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryHashFinal(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TryHashFinal (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool TryHashFinal(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="override this.TryHashFinal : Span&lt;byte&gt; * int -&gt; bool" Usage="hMACSHA384.TryHashFinal (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="f0a8c-150">要接收 HMAC 值的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-150">The buffer to receive the HMAC value.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="f0a8c-151">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-151">When this method returns, the total number of bytes written into <paramref name="destination" />.</span></span> <span data-ttu-id="f0a8c-152">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-152">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="f0a8c-153">在 HMAC 算法处理最后一个数据后，尝试结束 HMAC 计算。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-153">Attempts to finalize the HMAC computation after the last data is processed by the HMAC algorithm.</span></span></summary>
        <returns><span data-ttu-id="f0a8c-154"><paramref name="destination" /> 的长度不足以接收 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f0a8c-154"><see langword="true" /> if <paramref name="destination" /> is long enough to receive the HMAC value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
