<Type Name="HashAlgorithmName" FullName="System.Security.Cryptography.HashAlgorithmName">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b0ef8bdd4b63d2cc0060250bf7477d3e5d8d238c" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91904373" /></Metadata><TypeSignature Language="C#" Value="public struct HashAlgorithmName : IEquatable&lt;System.Security.Cryptography.HashAlgorithmName&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit HashAlgorithmName extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Security.Cryptography.HashAlgorithmName&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HashAlgorithmName" />
  <TypeSignature Language="VB.NET" Value="Public Structure HashAlgorithmName&#xA;Implements IEquatable(Of HashAlgorithmName)" />
  <TypeSignature Language="C++ CLI" Value="public value class HashAlgorithmName : IEquatable&lt;System::Security::Cryptography::HashAlgorithmName&gt;" />
  <TypeSignature Language="F#" Value="type HashAlgorithmName = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Security.Cryptography.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Security.Cryptography.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Security.Cryptography.HashAlgorithmName&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f6782-101">指定加密哈希算法的名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-101">Specifies the name of a cryptographic hash algorithm.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6782-102">此 <xref:System.Security.Cryptography.HashAlgorithmName> 结构包括一些静态属性，这些属性返回预定义的哈希算法名称，以及 <xref:System.Security.Cryptography.HashAlgorithmName.Name%2A> 可表示自定义哈希算法名称作为强类型字符串的属性。</span><span class="sxs-lookup"><span data-stu-id="f6782-102">The <xref:System.Security.Cryptography.HashAlgorithmName> structure includes some static properties that return predefined hash algorithm names, as well as a <xref:System.Security.Cryptography.HashAlgorithmName.Name%2A> property that can represent a custom hash algorithm name as a strongly-typed string.</span></span> <span data-ttu-id="f6782-103">哈希算法名称区分大小写。</span><span class="sxs-lookup"><span data-stu-id="f6782-103">Hash algorithm names are case-sensitive.</span></span>  
  
 <span data-ttu-id="f6782-104">使用 Microsoft 的 CNG (加密下一代) API 实现的非对称算法将基础字符串值解释为 [CNG 算法标识符](/windows/win32/seccng/cng-algorithm-identifiers)。</span><span class="sxs-lookup"><span data-stu-id="f6782-104">Asymmetric algorithms implemented using Microsoft's CNG (Cryptographic Next Generation) API interpret the underlying string value as a [CNG algorithm identifier](/windows/win32/seccng/cng-algorithm-identifiers).</span></span>  
  
 <span data-ttu-id="f6782-105">使用其他技术实现的非对称算法：</span><span class="sxs-lookup"><span data-stu-id="f6782-105">Asymmetric algorithms implemented using other technologies:</span></span>  
  
-   <span data-ttu-id="f6782-106">必须至少识别 "MD5"、"SHA1"、"SHA256"、"SHA384" 和 "SHA512"。</span><span class="sxs-lookup"><span data-stu-id="f6782-106">Must recognize at least "MD5", "SHA1", "SHA256", "SHA384", and "SHA512".</span></span>  
  
-   <span data-ttu-id="f6782-107">应识别它们支持的任何其他哈希算法的其他 CNG 标识符。</span><span class="sxs-lookup"><span data-stu-id="f6782-107">Should recognize additional CNG identifiers for any additional hash algorithms that they support.</span></span>  
  
<span data-ttu-id="f6782-108">由于 MD5 和 SHA1 出现冲突，Microsoft 建议使用基于 SHA256 或更好的安全模型。</span><span class="sxs-lookup"><span data-stu-id="f6782-108">Due to collision problems with MD5 and SHA1, Microsoft recommends a security model based on SHA256 or better.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HashAlgorithmName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HashAlgorithmName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HashAlgorithmName : string -&gt; System.Security.Cryptography.HashAlgorithmName" Usage="new System.Security.Cryptography.HashAlgorithmName name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f6782-109">自定义的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-109">The custom hash algorithm name.</span></span></param>
        <summary><span data-ttu-id="f6782-110">初始化具有自定义名称的 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="f6782-110">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> structure with a custom name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6782-111">构造函数不执行任何验证 `name` 。</span><span class="sxs-lookup"><span data-stu-id="f6782-111">The constructor performs no validation on `name`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f6782-112">返回一个值，该值指示两个 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6782-112">Returns a value that indicates whether two <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="hashAlgorithmName.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f6782-113">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="f6782-113">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="f6782-114">返回一个指示当前实例是否与指定对象相等的值。</span><span class="sxs-lookup"><span data-stu-id="f6782-114">Returns a value that indicates whether the current instance and a specified object are equal.</span></span></summary>
        <returns><span data-ttu-id="f6782-115">如果 <paramref name="obj" /> 是 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 对象且它的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性等于当前实例的属性，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="f6782-115"><see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> object and its <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property is equal to that of the current instance.</span></span> <span data-ttu-id="f6782-116">比较是有序的且区分大小写。</span><span class="sxs-lookup"><span data-stu-id="f6782-116">The comparison is ordinal and case-sensitive.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Security.Cryptography.HashAlgorithmName other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Security.Cryptography.HashAlgorithmName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Security::Cryptography::HashAlgorithmName other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="hashAlgorithmName.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="f6782-117">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="f6782-117">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="f6782-118">返回一个值，该值指示两个 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 实例是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6782-118">Returns a value that indicates whether two <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="f6782-119">如果 <paramref name="other" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性等于当前实例的属性，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="f6782-119"><see langword="true" /> if the <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="other" /> is equal to that of the current instance.</span></span> <span data-ttu-id="f6782-120">比较是有序的且区分大小写。</span><span class="sxs-lookup"><span data-stu-id="f6782-120">The comparison is ordinal and case-sensitive.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromOid">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithmName FromOid (string oidValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.HashAlgorithmName FromOid(string oidValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.FromOid(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOid (oidValue As String) As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::HashAlgorithmName FromOid(System::String ^ oidValue);" />
      <MemberSignature Language="F#" Value="static member FromOid : string -&gt; System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.HashAlgorithmName.FromOid oidValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oidValue" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="oidValue"><span data-ttu-id="f6782-121">哈希算法的 OID。</span><span class="sxs-lookup"><span data-stu-id="f6782-121">The OID of the hash algorithm.</span></span></param>
        <summary><span data-ttu-id="f6782-122">将指定的 OID 转换为哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-122">Converts the specified OID to a hash algorithm name.</span></span></summary>
        <returns><span data-ttu-id="f6782-123">由 OID 标识的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-123">The hash algorithm name identified by the OID.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6782-124"><paramref name="oidValue" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6782-124"><paramref name="oidValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="f6782-125"><paramref name="oidValue" /> 不表示已知的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="f6782-125"><paramref name="oidValue" /> does not represent a known hash algorithm.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="hashAlgorithmName.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f6782-126">返回当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f6782-126">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="f6782-127">为当前实例的哈希代码；如果未向 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 构造函数硅酮任何 <paramref name="name" /> 值，则为 0。</span><span class="sxs-lookup"><span data-stu-id="f6782-127">The hash code for the current instance, or 0 if no <paramref name="name" /> value was supplied to the <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> constructor.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MD5">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithmName MD5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Security.Cryptography.HashAlgorithmName MD5" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithmName.MD5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MD5 As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Cryptography::HashAlgorithmName MD5 { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.MD5 : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.HashAlgorithmName.MD5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6782-128">获取表示“MD5”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-128">Gets a hash algorithm name that represents "MD5".</span></span></summary>
        <value><span data-ttu-id="f6782-129">表示“MD5”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-129">A hash algorithm name that represents "MD5".</span></span></value>
        <remarks><span data-ttu-id="f6782-130">由于 MD5 出现冲突问题，Microsoft 建议使用基于 SHA256 或更高版本的安全模型。</span><span class="sxs-lookup"><span data-stu-id="f6782-130">Due to collision problems with MD5, Microsoft recommends a security model based on SHA256 or better.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithmName.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Security.Cryptography.HashAlgorithmName.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6782-131">获取算法名称的基础字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="f6782-131">Gets the underlying string representation of the algorithm name.</span></span></summary>
        <value><span data-ttu-id="f6782-132">算法名称的字符串表示形式; <see langword="default" /> 如果没有可用的哈希算法，则为。</span><span class="sxs-lookup"><span data-stu-id="f6782-132">The string representation of the algorithm name, or <see langword="default" /> if no hash algorithm is available.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f6782-133">可能为 `null` 或空，指示没有适用的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="f6782-133">May be `null` or empty to indicate that no hash algorithm is applicable.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Security.Cryptography.HashAlgorithmName left, valuetype System.Security.Cryptography.HashAlgorithmName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HashAlgorithmName, right As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Security::Cryptography::HashAlgorithmName left, System::Security::Cryptography::HashAlgorithmName right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="right" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f6782-134">要比较的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="f6782-134">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="f6782-135">要比较的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="f6782-135">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="f6782-136">确定两个指定的 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6782-136">Determines whether two specified <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="f6782-137">如果 <paramref name="left" /> 和 <paramref name="right" /> 具有相同的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f6782-137"><see langword="true" /> if both <paramref name="left" /> and <paramref name="right" /> have the same <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6782-138"><xref:System.Security.Cryptography.HashAlgorithmName.op_Equality%2A>方法定义了值的相等运算符的运算 <xref:System.Security.Cryptography.HashAlgorithmName> 。</span><span class="sxs-lookup"><span data-stu-id="f6782-138">The <xref:System.Security.Cryptography.HashAlgorithmName.op_Equality%2A> method defines the operation of the equality operator for <xref:System.Security.Cryptography.HashAlgorithmName> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Security.Cryptography.HashAlgorithmName left, valuetype System.Security.Cryptography.HashAlgorithmName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HashAlgorithmName, right As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Security::Cryptography::HashAlgorithmName left, System::Security::Cryptography::HashAlgorithmName right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.HashAlgorithmName -&gt; bool" Usage="System.Security.Cryptography.HashAlgorithmName.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="right" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f6782-139">要比较的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="f6782-139">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="f6782-140">要比较的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="f6782-140">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="f6782-141">确定两个指定的 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 对象是否不相等。</span><span class="sxs-lookup"><span data-stu-id="f6782-141">Determines whether two specified <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="f6782-142">如果 <paramref name="left" /> 和 <paramref name="right" /> 均不具有同一 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f6782-142"><see langword="true" /> if both <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6782-143"><xref:System.Security.Cryptography.HashAlgorithmName.op_Inequality%2A>方法为值定义不相等运算符的运算 <xref:System.Security.Cryptography.HashAlgorithmName> 。</span><span class="sxs-lookup"><span data-stu-id="f6782-143">The <xref:System.Security.Cryptography.HashAlgorithmName.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Security.Cryptography.HashAlgorithmName> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SHA1">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithmName SHA1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Security.Cryptography.HashAlgorithmName SHA1" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithmName.SHA1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SHA1 As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Cryptography::HashAlgorithmName SHA1 { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.SHA1 : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.HashAlgorithmName.SHA1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6782-144">获取表示“SHA1”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-144">Gets a hash algorithm name that represents "SHA1".</span></span></summary>
        <value><span data-ttu-id="f6782-145">表示“SHA1”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-145">A hash algorithm name that represents "SHA1".</span></span></value>
        <remarks><span data-ttu-id="f6782-146">由于 SHA1 出现冲突问题，Microsoft 建议使用基于 SHA256 或更好的安全模型。</span><span class="sxs-lookup"><span data-stu-id="f6782-146">Due to collision problems with SHA1, Microsoft recommends a security model based on SHA256 or better.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="SHA256">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithmName SHA256 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Security.Cryptography.HashAlgorithmName SHA256" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithmName.SHA256" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SHA256 As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Cryptography::HashAlgorithmName SHA256 { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.SHA256 : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.HashAlgorithmName.SHA256" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6782-147">获取表示“SHA256”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-147">Gets a hash algorithm name that represents "SHA256".</span></span></summary>
        <value><span data-ttu-id="f6782-148">表示“SHA256”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-148">A hash algorithm name that represents "SHA256".</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SHA384">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithmName SHA384 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Security.Cryptography.HashAlgorithmName SHA384" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithmName.SHA384" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SHA384 As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Cryptography::HashAlgorithmName SHA384 { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.SHA384 : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.HashAlgorithmName.SHA384" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6782-149">获取表示“SHA384”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-149">Gets a hash algorithm name that represents "SHA384".</span></span></summary>
        <value><span data-ttu-id="f6782-150">表示“SHA384”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-150">A hash algorithm name that represents "SHA384".</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SHA512">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithmName SHA512 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Security.Cryptography.HashAlgorithmName SHA512" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithmName.SHA512" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SHA512 As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Cryptography::HashAlgorithmName SHA512 { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.SHA512 : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.HashAlgorithmName.SHA512" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6782-151">获取表示“SHA512”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-151">Gets a hash algorithm name that represents "SHA512".</span></span></summary>
        <value><span data-ttu-id="f6782-152">表示“SHA512”的哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-152">A hash algorithm name that represents "SHA512".</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="hashAlgorithmName.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f6782-153">返回当前 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 实例的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="f6782-153">Returns the string representation of the current <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> instance.</span></span></summary>
        <returns><span data-ttu-id="f6782-154">当前 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 实例的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="f6782-154">The string representation of the current <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6782-155"><xref:System.Security.Cryptography.HashAlgorithmName.ToString%2A>如果已分配属性，则方法将返回该 <xref:System.Security.Cryptography.HashAlgorithmName.Name%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="f6782-155">The <xref:System.Security.Cryptography.HashAlgorithmName.ToString%2A> method returns the <xref:System.Security.Cryptography.HashAlgorithmName.Name%2A> property, if it has been assigned.</span></span> <span data-ttu-id="f6782-156">否则，它将返回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f6782-156">Otherwise, it returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFromOid">
      <MemberSignature Language="C#" Value="public static bool TryFromOid (string oidValue, out System.Security.Cryptography.HashAlgorithmName value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFromOid(string oidValue, [out] valuetype System.Security.Cryptography.HashAlgorithmName&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithmName.TryFromOid(System.String,System.Security.Cryptography.HashAlgorithmName@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFromOid (oidValue As String, ByRef value As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFromOid(System::String ^ oidValue, [Runtime::InteropServices::Out] System::Security::Cryptography::HashAlgorithmName % value);" />
      <MemberSignature Language="F#" Value="static member TryFromOid : string * HashAlgorithmName -&gt; bool" Usage="System.Security.Cryptography.HashAlgorithmName.TryFromOid (oidValue, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oidValue" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="value" Type="System.Security.Cryptography.HashAlgorithmName" RefType="out" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="oidValue"><span data-ttu-id="f6782-157">哈希算法的 OID。</span><span class="sxs-lookup"><span data-stu-id="f6782-157">The OID of the hash algorithm.</span></span></param>
        <param name="value"><span data-ttu-id="f6782-158">此方法返回 <see langword="true" /> 时，包含哈希算法。</span><span class="sxs-lookup"><span data-stu-id="f6782-158">When this method returns <see langword="true" />, the hash algorithm.</span></span> <span data-ttu-id="f6782-159">此方法返回 <see langword="false" /> 时，包含<c>默认值</c>。</span><span class="sxs-lookup"><span data-stu-id="f6782-159">When this method returns <see langword="false" />, contains <c>default</c>.</span></span></param>
        <summary><span data-ttu-id="f6782-160">尝试将指定的 OID 转换为哈希算法名称。</span><span class="sxs-lookup"><span data-stu-id="f6782-160">Tries to convert the specified OID to a hash algorithm name.</span></span></summary>
        <returns><span data-ttu-id="f6782-161">如果 OID 已成功映射到哈希算法，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f6782-161"><see langword="true" /> if the OID was successfully mapped to a hash algorithm; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6782-162"><paramref name="oidValue" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6782-162"><paramref name="oidValue" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
