<Type Name="PemEncoding" FullName="System.Security.Cryptography.PemEncoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="08ae1fc5427a8a2fb18e73b9eb70a3cd4a2aac9c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89982359" /></Metadata><TypeSignature Language="C#" Value="public static class PemEncoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PemEncoding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PemEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class PemEncoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class PemEncoding abstract sealed" />
  <TypeSignature Language="F#" Value="type PemEncoding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于读写 PEM（隐私增强邮件）文本编码的 IETF RFC 7468 子集的方法。
此类不能被继承。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.PemFields Find (ReadOnlySpan&lt;char&gt; pemData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.PemFields Find(valuetype System.ReadOnlySpan`1&lt;char&gt; pemData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.Find(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Find (pemData As ReadOnlySpan(Of Char)) As PemFields" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::PemFields Find(ReadOnlySpan&lt;char&gt; pemData);" />
      <MemberSignature Language="F#" Value="static member Find : ReadOnlySpan&lt;char&gt; -&gt; System.Security.Cryptography.PemFields" Usage="System.Security.Cryptography.PemEncoding.Find pemData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.PemFields</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="pemData">包含 PEM 编码数据的文本。</param>
        <summary>查找第一个 PEM 编码的数据。</summary>
        <returns>用于指定编码数据的位置、标签和数据位置的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

IETF RFC 7468 允许不同的解码规则。 此方法始终使用宽松规则。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="pemData" /> 不包含格式正确的 PEM 编码值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEncodedSize">
      <MemberSignature Language="C#" Value="public static int GetEncodedSize (int labelLength, int dataLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetEncodedSize(int32 labelLength, int32 dataLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.GetEncodedSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodedSize (labelLength As Integer, dataLength As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetEncodedSize(int labelLength, int dataLength);" />
      <MemberSignature Language="F#" Value="static member GetEncodedSize : int * int -&gt; int" Usage="System.Security.Cryptography.PemEncoding.GetEncodedSize (labelLength, dataLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelLength" Type="System.Int32" />
        <Parameter Name="dataLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="labelLength">标签的长度（以字符为单位）。</param>
        <param name="dataLength">数据的长度（以字节为单位）。</param>
        <summary>根据给定的标签和二进制数据的长度，确定 PEM 编码值的长度（以字符为单位）。</summary>
        <returns>编码的 PEM 中的字符数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="labelLength" /> 是负值。

- 或 -

<paramref name="dataLength" /> 是负值。

- 或 -

<paramref name="labelLength" /> 超出了可用的最大标签长度。

- 或 -

<paramref name="dataLength" /> 超出了可用的编码数据长度。</exception>
        <exception cref="T:System.ArgumentException">PEM 编码值的长度大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryFind">
      <MemberSignature Language="C#" Value="public static bool TryFind (ReadOnlySpan&lt;char&gt; pemData, out System.Security.Cryptography.PemFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFind(valuetype System.ReadOnlySpan`1&lt;char&gt; pemData, [out] valuetype System.Security.Cryptography.PemFields&amp; fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryFind(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PemFields@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFind (pemData As ReadOnlySpan(Of Char), ByRef fields As PemFields) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFind(ReadOnlySpan&lt;char&gt; pemData, [Runtime::InteropServices::Out] System::Security::Cryptography::PemFields % fields);" />
      <MemberSignature Language="F#" Value="static member TryFind : ReadOnlySpan&lt;char&gt; * PemFields -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryFind (pemData, fields)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="fields" Type="System.Security.Cryptography.PemFields" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pemData">包含 PEM 编码数据的文本。</param>
        <param name="fields">此方法返回时，包含一个指定已编码数据的位置、标签和数据位置的值；或者，如果找不到 PEM 编码的数据，则包含一个指定这些位置为空的值。

          该参数未经初始化即被处理。</param>
        <summary>尝试查找第一个 PEM 编码的数据。</summary>
        <returns>如果已找到 PEM 编码的数据，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

IETF RFC 7468 允许不同的解码规则。 此方法始终使用宽松规则。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWrite">
      <MemberSignature Language="C#" Value="public static bool TryWrite (ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;byte&gt; data, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite(valuetype System.ReadOnlySpan`1&lt;char&gt; label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryWrite(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite (label As ReadOnlySpan(Of Char), data As ReadOnlySpan(Of Byte), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWrite(ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryWrite : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryWrite (label, data, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="label">要写入的标签。</param>
        <param name="data">要写入的数据。</param>
        <param name="destination">用于接收 PEM 编码的文本的缓冲区。</param>
        <param name="charsWritten">此方法返回时，此参数包含写入到 <paramref name="destination" /> 中的字符数。 该参数未经初始化即被处理。</param>
        <summary>尝试将提供的数据和标签作为 PEM 编码的数据写入到所提供的缓冲区中。</summary>
        <returns>如果 <paramref name="destination" /> 大到足以包含 PEM 编码的文本，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此方法始终按建议的 IETF RFC 7468 包装将64编码文本封装为64个字符。 Unix 样式的行尾用于分行符。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="label" /> 超出了可用的最大标签长度。

- 或 -

<paramref name="data" /> 超出了可用的编码数据长度。</exception>
        <exception cref="T:System.ArgumentException">生成的 PEM 编码的文本大于 <see cref="F:System.Int32.MaxValue" />。

- 或 -

<paramref name="label" /> 包含无效字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static char[]? Write (ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] Write(valuetype System.ReadOnlySpan`1&lt;char&gt; label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.Write(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Write (label As ReadOnlySpan(Of Char), data As ReadOnlySpan(Of Byte)) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ Write(ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;System::Byte&gt; data);" />
      <MemberSignature Language="F#" Value="static member Write : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; char[]" Usage="System.Security.Cryptography.PemEncoding.Write (label, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="label">要编码的标签。</param>
        <param name="data">要编码的数据。</param>
        <summary>通过给定的标签和数据创建一个编码的 PEM。</summary>
        <returns>已编码 PEM 的字符数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此方法始终按建议的 RFC-7468 包装将64编码文本封装为64个字符。 Unix 样式的行尾用于分行符。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="label" /> 超出了可用的最大标签长度。

- 或 -

<paramref name="data" /> 超出了可用的编码数据长度。</exception>
        <exception cref="T:System.ArgumentException">生成的 PEM 编码的文本大于 <see cref="F:System.Int32.MaxValue" />。

- 或 -

<paramref name="label" /> 包含无效字符。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
