<Type Name="CryptographicOperations" FullName="System.Security.Cryptography.CryptographicOperations">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef262652bc54ab822d68c630c71d196107e89474" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89983998" /></Metadata><TypeSignature Language="C#" Value="public static class CryptographicOperations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CryptographicOperations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.CryptographicOperations" />
  <TypeSignature Language="VB.NET" Value="Public Class CryptographicOperations" />
  <TypeSignature Language="C++ CLI" Value="public ref class CryptographicOperations abstract sealed" />
  <TypeSignature Language="F#" Value="type CryptographicOperations = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Security.Cryptography.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4f45c-101">提供用于处理加密的方法，以降低侧通道信息泄露的风险。</span><span class="sxs-lookup"><span data-stu-id="4f45c-101">Provides methods for use in working with cryptography to reduce the risk of side-channel information leakage.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FixedTimeEquals">
      <MemberSignature Language="C#" Value="public static bool FixedTimeEquals (ReadOnlySpan&lt;byte&gt; left, ReadOnlySpan&lt;byte&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FixedTimeEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; left, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.CryptographicOperations.FixedTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FixedTimeEquals (left As ReadOnlySpan(Of Byte), right As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool FixedTimeEquals(ReadOnlySpan&lt;System::Byte&gt; left, ReadOnlySpan&lt;System::Byte&gt; right);" />
      <MemberSignature Language="F#" Value="static member FixedTimeEquals : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="System.Security.Cryptography.CryptographicOperations.FixedTimeEquals (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4f45c-102">要比较的第一个缓冲区。</span><span class="sxs-lookup"><span data-stu-id="4f45c-102">The first buffer to compare.</span></span></param>
        <param name="right"><span data-ttu-id="4f45c-103">要比较的第二个缓冲区。</span><span class="sxs-lookup"><span data-stu-id="4f45c-103">The second buffer to compare.</span></span></param>
        <summary><span data-ttu-id="4f45c-104">确定两个字节序列在一定时间内是否相等，该时间取决于序列的长度，而不取决于它们的值。</span><span class="sxs-lookup"><span data-stu-id="4f45c-104">Determines the equality of two byte sequences in an amount of time that depends on the length of the sequences, but not their values.</span></span></summary>
        <returns><span data-ttu-id="4f45c-105">如果 <paramref name="left" /> 和 <paramref name="right" /> 具有 <see cref="P:System.ReadOnlySpan`1.Length" /> 的相同值以及相同内容，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4f45c-105"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> have the same values for <see cref="P:System.ReadOnlySpan`1.Length" /> and the same contents; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="4f45c-106">此方法比较两个缓冲区中的内容是否相等，因为这种方式不会泄漏计时信息，因此它非常适合在加密例程中使用。</span><span class="sxs-lookup"><span data-stu-id="4f45c-106">This method compares the contents from two buffers for equality in a way that doesn't leak timing information, making it ideal for use within cryptographic routines.</span></span>

<span data-ttu-id="4f45c-107">此方法将短路并 `false` 仅当 `left` 和 `right` 具有不同长度时才返回。</span><span class="sxs-lookup"><span data-stu-id="4f45c-107">This method will short-circuit and return `false` only if `left` and `right` have different lengths.</span></span>

<span data-ttu-id="4f45c-108">在所有其他情况下均可保证固定时间行为，包括何时 `left` 和 `right` 引用相同的地址。</span><span class="sxs-lookup"><span data-stu-id="4f45c-108">Fixed-time behavior is guaranteed in all other cases, including when `left` and `right` reference the same address.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZeroMemory">
      <MemberSignature Language="C#" Value="public static void ZeroMemory (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroMemory(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.CryptographicOperations.ZeroMemory(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ZeroMemory (buffer As Span(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZeroMemory(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="static member ZeroMemory : Span&lt;byte&gt; -&gt; unit" Usage="System.Security.Cryptography.CryptographicOperations.ZeroMemory buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="4f45c-109">要以零填充的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="4f45c-109">The buffer to fill with zeros.</span></span></param>
        <summary><span data-ttu-id="4f45c-110">以零填充所提供的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="4f45c-110">Fills the provided buffer with zeros.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="4f45c-111">此方法可用于进一步应对 .NET 运行时中可能的优化，从而消除不会跟随内存读取的内存写入。</span><span class="sxs-lookup"><span data-stu-id="4f45c-111">This method exists to future-proof against potential optimizations in the .NET runtime that could eliminate memory writes that aren't followed by memory reads.</span></span>
<span data-ttu-id="4f45c-112">虽然 C 和 c + + 编译器具有相似的优化，但目前不会计划 .NET 这样的优化。</span><span class="sxs-lookup"><span data-stu-id="4f45c-112">While the C and C++ compilers have similar optimizations, no such optimizations are planned at this time for .NET.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
