<Type Name="IHash&lt;TKey,TValue&gt;" FullName="Microsoft.VisualC.StlClr.IHash&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="71f6c002a10df0303cc47bfd22f10e6db10428bf" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86631850" /></Metadata><TypeSignature Language="C#" Value="public interface IHash&lt;TKey,TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IHash`2&lt;TKey, TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.IHash`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHash(Of TKey, TValue)&#xA;Implements IBidirectionalContainer(Of TValue), ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IHash : ICloneable, Microsoft::VisualC::StlClr::Generic::IBidirectionalContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IHash&lt;'Key, 'Value&gt; = interface&#xA;    interface IBidirectionalContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1005")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1005")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">受控序列中元素的键组件的类型。</typeparam>
    <typeparam name="TValue">受控序列中元素的值组件的类型。</typeparam>
    <summary>定义 STL/CLR <c>hash_map</c>、<c>hash_multimap</c>、<c>hash_set</c> 和 <c>hash_multiset</c> 对象的接口。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 有关详细信息，请 [参阅 \_ STL/clr) 的哈希映射 (](/cpp/dotnet/hash-map-stl-clr)、 [哈希 \_ 多重映射 (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr)、 [哈希 \_ 集 (stl/clr) ](/cpp/dotnet/hash-set-stl-clr)和 [哈希集 (\_ stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void begin(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin : ContainerBidirectionalIterator -&gt; unit" Usage="iHash.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">一个双向迭代器，指定受控序列的第一个元素，或刚好在空序列的末尾之外。 用于获取一个迭代器，该迭代器指定受控序列的 <paramref name="current" /> 开头，但如果受控序列的长度发生更改，则该迭代器的状态也会发生更改。</param>
        <summary>指定受控序列的开头。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： BEGIN (STL/clr) ](/cpp/dotnet/hash-map-begin-stl-clr)， [hash \_ 多重映射：： begin (stl/clr) ](/cpp/dotnet/hash-multimap-begin-stl-clr)， [哈希 \_ 集：： begin (stl/clr) ](/cpp/dotnet/hash-set-begin-stl-clr)和 [哈希 \_ 多重集：： begin (stl/clr) ](/cpp/dotnet/hash-multiset-begin-stl-clr)。  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="bucket_count">
      <MemberSignature Language="C#" Value="public int bucket_count ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 bucket_count() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count" />
      <MemberSignature Language="VB.NET" Value="Public Function bucket_count () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int bucket_count();" />
      <MemberSignature Language="F#" Value="abstract member bucket_count : unit -&gt; int" Usage="iHash.bucket_count " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算哈希表中的存储桶数。</summary>
        <returns>哈希表中的当前存储桶数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： BUCKET_COUNT (STL/clr) ](/cpp/dotnet/hash-map-bucket-count-stl-clr)、 [hash \_ 多重映射：： bucket_count (stl/clr) ](/cpp/dotnet/hash-multimap-bucket-count-stl-clr)、 [哈希 \_ 集：： bucket_count (stl/clr) ](/cpp/dotnet/hash-set-bucket-count-stl-clr)和 [哈希 \_ 多重集：： bucket_count (stl/clr) ](/cpp/dotnet/hash-multiset-bucket-count-stl-clr)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iHash.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从容器中移除所有元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： CLEAR (STL/clr) ](/cpp/dotnet/hash-map-clear-stl-clr)， [hash \_ 多重映射：： clear (stl/clr) ](/cpp/dotnet/hash-multimap-clear-stl-clr)， [哈希 \_ 集：： clear (stl/clr) ](/cpp/dotnet/hash-set-clear-stl-clr)和 [哈希 \_ 多重集：： clear (stl/clr) ](/cpp/dotnet/hash-multiset-clear-stl-clr)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="count">
      <MemberSignature Language="C#" Value="public int count (TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 count(!TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function count (_Keyval As TKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int count(TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member count : 'Key -&gt; int" Usage="iHash.count _Keyval" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="_Keyval">要搜索的键值。</param>
        <summary>查找与指定键匹配的元素数。</summary>
        <returns>受控序列中具有与 <paramref name="_Keyval" /> 相同的键的元素数。 用于确定受控序列中当前与指定键匹配的元素数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请 [参阅 \_ hash map：： COUNT (STL/clr) ](/cpp/dotnet/hash-map-count-stl-clr)、 [hash \_ 多重映射：： count (stl/clr) ](/cpp/dotnet/hash-multimap-count-stl-clr)、 [hash \_ set：： count (stl/clr) ](/cpp/dotnet/hash-set-count-stl-clr)和 [hash \_ 多重集：： count (stl/clr) ](/cpp/dotnet/hash-multiset-count-stl-clr)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iHash.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>测试容器中是否不存在元素。</summary>
        <returns>如果容器中没有元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： EMPTY (STL/clr) ](/cpp/dotnet/hash-map-empty-stl-clr)、 [hash \_ 多重映射：： empty (stl/clr) ](/cpp/dotnet/hash-multimap-empty-stl-clr)、 [哈希 \_ 集：： empty (stl/clr) ](/cpp/dotnet/hash-set-empty-stl-clr)和 [哈希 \_ 多重集：： empty (stl/clr) ](/cpp/dotnet/hash-multiset-empty-stl-clr)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void end(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end : ContainerBidirectionalIterator -&gt; unit" Usage="iHash.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">一个双向迭代器，刚好指向受控序列的末尾之外。 用于获取指定受控序列末尾的迭代器。 当受控序列的长度发生更改时，该迭代器的状态不会更改。</param>
        <summary>指定受控序列的末尾。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： END (STL/clr) ](/cpp/dotnet/hash-map-end-stl-clr)， [hash \_ 多重映射：： end (stl/clr) ](/cpp/dotnet/hash-multimap-end-stl-clr)， [哈希 \_ 集：： end (stl/clr) ](/cpp/dotnet/hash-set-end-stl-clr)和 [哈希 \_ 多重集：： end (stl/clr) ](/cpp/dotnet/hash-multiset-end-stl-clr)。  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_range">
      <MemberSignature Language="C#" Value="public void equal_range (ref Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void equal_range(class Microsoft.VisualC.StlClr.GenericPair`2&lt;class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_range (ByRef  As GenericPair(Of ContainerBidirectionalIterator(Of TValue), ContainerBidirectionalIterator(Of TValue)), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ equal_range(Microsoft::VisualC::StlClr::GenericPair&lt;Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member equal_range : GenericPair * 'Key -&gt; unit" Usage="iHash.equal_range (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">一对迭代器，确定受控序列中当前与指定键匹配的元素的范围。</param>
        <param name="_Keyval">要搜索的键值。</param>
        <summary>查找与指定键匹配的范围。</summary>
        <returns>一对迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请参阅 [hash \_ map：： equal_range (stl/clr) [] \_ hash map：： equal_range (stl/clr) ](/cpp/dotnet/hash-map-stl-clr#equal_range)) 、 [hash \_ 多重映射： ](/cpp/dotnet/hash-multimap-stl-clr#equal_range)： equal_range (stl/clr) 、 [哈希 \_ 集：： equal_range (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#equal_range)和 [哈希 \_ 多重集：： equal_range (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#equal_range)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从容器中移除元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： ERASE (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#erase)、 [hash \_ 多重映射：： erase (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#erase)、 [哈希 \_ 集：： erase (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#erase)和 [哈希 \_ 多重集：： erase (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#erase)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public int erase (TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 erase(!TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (_Keyval As TKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int erase(TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member erase : 'Key -&gt; int" Usage="iHash.erase _Keyval" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="_Keyval">要清除的键值。</param>
        <summary>从容器中移除与指定键匹配的元素。</summary>
        <returns>移除的元素数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： ERASE (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#erase)、 [hash \_ 多重映射：： erase (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#erase)、 [哈希 \_ 集：： erase (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#erase)和 [哈希 \_ 多重集：： erase (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#erase)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase : ContainerBidirectionalIterator * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iHash.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">一个迭代器，指定已移除元素之外的第一个元素；如果不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
        <param name="_Where">一个迭代器，指向要清除的元素。</param>
        <summary>从容器中移除由给定迭代器指定的元素。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
有关详细信息，请参阅 [哈希 \_ 映射：： ERASE (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#erase)、 [hash \_ 多重映射：： erase (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#erase)、 [哈希 \_ 集：： erase (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#erase)和 [哈希 \_ 多重集：： erase (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#erase)。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _First_iter As ContainerBidirectionalIterator(Of TValue), _Last_iter As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase : ContainerBidirectionalIterator * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iHash.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">一个迭代器，指定已移除元素之外的第一个元素；如果不存在这样的元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
        <param name="_First_iter">一个迭代器，指向要清除的范围的开头。</param>
        <param name="_Last_iter">一个迭代器，指向紧跟在要清除的范围之后的位置。</param>
        <summary>从容器中移除指定迭代器之间的元素。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
有关详细信息，请参阅 [哈希 \_ 映射：： ERASE (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#erase)、 [hash \_ 多重映射：： erase (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#erase)、 [哈希 \_ 集：： erase (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#erase)和 [哈希 \_ 多重集：： erase (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#erase)。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="find">
      <MemberSignature Language="C#" Value="public void find (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void find(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function find (ByRef  As ContainerBidirectionalIterator(Of TValue), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ find(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member find : ContainerBidirectionalIterator * 'Key -&gt; unit" Usage="iHash.find (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">一个迭代器，指定找到的元素之一；如果找不到元素，则为 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
        <param name="_Keyval">要搜索的键值。</param>
        <summary>查找与指定键匹配的元素。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： FIND (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#find)， [hash \_ 多重映射：： find (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#find)， [哈希 \_ 集：： find (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#find)和 [hash \_ 多重集：： find (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#find)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="hash_delegate">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.UnaryDelegate&lt;TKey,int&gt; hash_delegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.VisualC.StlClr.UnaryDelegate`2&lt;!TKey, int32&gt; hash_delegate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate" />
      <MemberSignature Language="VB.NET" Value="Public Function hash_delegate () As UnaryDelegate(Of TKey, Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::UnaryDelegate&lt;TKey, int&gt; ^ hash_delegate();" />
      <MemberSignature Language="F#" Value="abstract member hash_delegate : unit -&gt; Microsoft.VisualC.StlClr.UnaryDelegate&lt;'Key, int&gt;" Usage="iHash.hash_delegate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.UnaryDelegate&lt;TKey,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回用于将键值转换为整数的委托。</summary>
        <returns>用于将键值转换为整数的委托。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： HASH_DELEGATE (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#hash_delegate)、 [hash \_ 多重映射：： hash_delegate (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#hash_delegate)、 [哈希 \_ 集：： hash_delegate (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#hash_delegate)和 [哈希 \_ 多重集：： hash_delegate (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#hash_delegate)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将元素添加到容器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： INSERT (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#insert)， [hash \_ 多重映射：： insert (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#insert)， [哈希 \_ 集：： insert (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#insert)和 [hash \_ 多重集：： insert (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#insert)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : System.Collections.IEnumerable -&gt; unit" Usage="iHash.insert _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Right">要插入到容器中的枚举。</param>
        <summary>将给定的枚举添加到容器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： INSERT (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#insert)， [hash \_ 多重映射：： insert (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#insert)， [哈希 \_ 集：： insert (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#insert)和 [hash \_ 多重集：： insert (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#insert)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iHash.insert (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First">一个迭代器，指向要插入的元素范围的开头。</param>
        <param name="_Last">一个迭代器，指向紧跟在要插入的元素范围之后的元素。</param>
        <summary>将给定迭代器指定的元素添加到容器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： INSERT (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#insert)， [hash \_ 多重映射：： insert (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#insert)， [哈希 \_ 集：： insert (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#insert)和 [hash \_ 多重集：： insert (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#insert)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,bool&gt; , TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.GenericPair`2&lt;class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;, bool&gt;&amp; , !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As GenericPair(Of ContainerBidirectionalIterator(Of TValue), Boolean), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::GenericPair&lt;Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^, bool&gt; ^ % , TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : GenericPair * 'Value -&gt; unit" Usage="iHash.insert (, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,System.Boolean&gt;" RefType="ref" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">一对 X 值。如果 X.second 为 <see langword="true" />，则 X.first 指定新插入的元素；否则 X.first 指定一个具有等效顺序的现有元素，不插入新元素。</param>
        <param name="_Val">要插入到容器中的键值。</param>
        <summary>将给定值添加到容器。</summary>
        <returns>一对迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： INSERT (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#insert)， [hash \_ 多重映射：： insert (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#insert)， [哈希 \_ 集：： insert (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#insert)和 [hash \_ 多重集：： insert (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#insert)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : ContainerBidirectionalIterator * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iHash.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">指定新插入元素的迭代器。</param>
        <param name="_Where">一个迭代器，指定要将元素插入到容器中的位置。 这仅是一种提示，用于提高性能。 元素可能并不插入在此位置。</param>
        <param name="_Val">要插入到容器中的键值。</param>
        <summary>将给定元素添加到容器中。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
有关详细信息，请参阅 [哈希 \_ 映射：： INSERT (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#insert)， [hash \_ 多重映射：： insert (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#insert)， [哈希 \_ 集：： insert (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#insert)和 [hash \_ 多重集：： insert (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#insert)。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="key_comp">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.BinaryDelegate&lt;TKey,TKey,bool&gt; key_comp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TKey, !TKey, bool&gt; key_comp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.key_comp" />
      <MemberSignature Language="VB.NET" Value="Public Function key_comp () As BinaryDelegate(Of TKey, TKey, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::BinaryDelegate&lt;TKey, TKey, bool&gt; ^ key_comp();" />
      <MemberSignature Language="F#" Value="abstract member key_comp : unit -&gt; Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Key, 'Key, bool&gt;" Usage="iHash.key_comp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.BinaryDelegate&lt;TKey,TKey,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回用于对受控序列进行排序的排序委托。 用于对两个键进行比较。</summary>
        <returns>用于对受控序列进行排序的排序委托。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： KEY_COMP (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#key_comp)、 [hash \_ 多重映射：： key_comp (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#key_comp)、 [哈希 \_ 集：： key_comp (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#key_comp)和 [哈希 \_ 多重集：： key_comp (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#key_comp)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="load_factor">
      <MemberSignature Language="C#" Value="public float load_factor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 load_factor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.load_factor" />
      <MemberSignature Language="VB.NET" Value="Public Function load_factor () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float load_factor();" />
      <MemberSignature Language="F#" Value="abstract member load_factor : unit -&gt; single" Usage="iHash.load_factor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算哈希表中每个存储桶的平均元素数。</summary>
        <returns>哈希表中每个存储桶的平均元素数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： LOAD_FACTOR (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#load_factor)、 [hash \_ 多重映射：： load_factor (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#load_factor)、 [哈希 \_ 集：： load_factor (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#load_factor)和 [哈希 \_ 多重集：： load_factor (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#load_factor)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="lower_bound">
      <MemberSignature Language="C#" Value="public void lower_bound (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void lower_bound(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function lower_bound (ByRef  As ContainerBidirectionalIterator(Of TValue), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ lower_bound(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member lower_bound : ContainerBidirectionalIterator * 'Key -&gt; unit" Usage="iHash.lower_bound (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">一个迭代器，指定受控序列中可散列为与 <paramref name="_Keyval" /> 相同的存储桶并具有与 <paramref name="_Keyval" /> 等效的顺序的第一个元素。 如果不存在这样的元素，则返回 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
        <param name="_Keyval">要搜索的键值。</param>
        <summary>查找与指定键匹配的元素范围的开始。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： LOWER_BOUND (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#lower_bound)、 [hash \_ 多重映射：： lower_bound (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#lower_bound)、 [哈希 \_ 集：： lower_bound (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#lower_bound)和 [哈希 \_ 多重集：： lower_bound (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#lower_bound)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="max_load_factor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置哈希表中每个存储桶的最大元素数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： MAX_LOAD_FACTOR (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#max_load_factor)、 [hash \_ 多重映射：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#max_load_factor)、 [哈希 \_ 集：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#load_factor)和 [哈希 \_ 多重集：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#max_load_factor)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="max_load_factor">
      <MemberSignature Language="C#" Value="public float max_load_factor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 max_load_factor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor" />
      <MemberSignature Language="VB.NET" Value="Public Function max_load_factor () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float max_load_factor();" />
      <MemberSignature Language="F#" Value="abstract member max_load_factor : unit -&gt; single" Usage="iHash.max_load_factor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取哈希表中每个存储桶的最大元素数。</summary>
        <returns>哈希表中每个存储桶的最大元素数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： MAX_LOAD_FACTOR (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#max_load_factor)、 [hash \_ 多重映射：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#max_load_factor)、 [哈希 \_ 集：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#load_factor)和 [哈希 \_ 多重集：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#max_load_factor)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="max_load_factor">
      <MemberSignature Language="C#" Value="public void max_load_factor (float _Newmax);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void max_load_factor(float32 _Newmax) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub max_load_factor (_Newmax As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void max_load_factor(float _Newmax);" />
      <MemberSignature Language="F#" Value="abstract member max_load_factor : single -&gt; unit" Usage="iHash.max_load_factor _Newmax" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newmax" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="_Newmax">哈希表中每个存储桶的最大元素数。</param>
        <summary>设置哈希表中每个存储桶的最大元素数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： MAX_LOAD_FACTOR (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#max_load_factor)、 [hash \_ 多重映射：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#max_load_factor)、 [哈希 \_ 集：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#load_factor)和 [哈希 \_ 多重集：： max_load_factor (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#max_load_factor)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin : ReverseBidirectionalIterator -&gt; unit" Usage="iHash.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">一个反向迭代器，指定受控序列的最后一个元素，或刚好在空序列的开头之外。 因此，它指定反向序列的 <paramref name="beginning" />。 用于获取一个迭代器，该迭代器指定反向顺序的受控序列的 <paramref name="current" /> 开头。 如果受控序列的长度发生更改，该迭代器的状态也会更改。</param>
        <summary>指定反向受控序列的开头。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请 [参阅 \_ hash map：： RBEGIN (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#rbegin)， [hash \_ 多重映射：： rbegin (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#rbegin)， [hash \_ set：： rbegin (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#rbegin)，以及 [哈希 \_ 多重集：： rbegin (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#rbegin)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rehash">
      <MemberSignature Language="C#" Value="public void rehash (int _Buckets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void rehash(int32 _Buckets) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub rehash (_Buckets As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void rehash(int _Buckets);" />
      <MemberSignature Language="F#" Value="abstract member rehash : int -&gt; unit" Usage="iHash.rehash _Buckets" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Buckets" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Buckets">哈希表的存储桶数。</param>
        <summary>重新生成哈希表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请 [参阅 \_ hash map：： REHASH (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#rehash)， [hash \_ 多重映射：： rehash (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#rehash)， [hash \_ set：： rehash (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#rehash)，以及 [哈希 \_ 多重集：： rehash (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#rehash)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void rend(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend : ReverseBidirectionalIterator -&gt; unit" Usage="iHash.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">一个反向迭代器，刚好指向受控序列的开头之外。 因此，它指定反向序列的 <paramref name="end" />。 用于获取一个迭代器，该迭代器指定反向顺序的受控序列的 <paramref name="current" /> 末尾。 如果受控序列的长度发生更改，该迭代器的状态也会更改。</param>
        <summary>指定反向受控序列的末尾。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请 [参阅 \_ hash map：： REND (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#rend)， [hash \_ 多重映射：： rend (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#rend)， [hash \_ set：： rend (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#rend)，以及 [哈希 \_ 多重集：： rend (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#rend)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iHash.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算容器中的元素数。</summary>
        <returns>受控序列的长度。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： SIZE (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#size)、 [hash \_ 多重映射：： size (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#size)、 [哈希 \_ 集：： size (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#size)和 [哈希 \_ 多重集：： size (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#size)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IHash&lt;TKey,TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IHash`2&lt;!TKey, !TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (_Right As IHash(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IHash&lt;TKey, TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IHash&lt;'Key, 'Value&gt; -&gt; unit" Usage="iHash.swap _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IHash&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">要与其交换内容的容器。</param>
        <summary>交换两个容器的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： SWAP (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#swap)， [hash \_ 多重映射：： swap (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#swap)， [哈希 \_ 集：： swap (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#swap)和 [哈希 \_ 多重集：： swap (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#swap)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="upper_bound">
      <MemberSignature Language="C#" Value="public void upper_bound (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void upper_bound(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function upper_bound (ByRef  As ContainerBidirectionalIterator(Of TValue), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ upper_bound(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member upper_bound : ContainerBidirectionalIterator * 'Key -&gt; unit" Usage="iHash.upper_bound (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">一个迭代器，指定受控序列中最后一个元素以外可散列为与 <paramref name="_Keyval" /> 相同的存储桶并具有与 <paramref name="_Keyval" /> 等效的顺序的第一个元素。 如果不存在这样的元素，则返回 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。</param>
        <param name="_Keyval">要搜索的键值。</param>
        <summary>查找与指定键匹配的元素范围的末尾。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： UPPER_BOUND (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#upper_bound)、 [hash \_ 多重映射：： upper_bound (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#upper_bound)、 [哈希 \_ 集：： upper_bound (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#upper_bound)和 [哈希 \_ 多重集：： upper_bound (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#upper_bound)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="value_comp">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; value_comp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; value_comp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IHash`2.value_comp" />
      <MemberSignature Language="VB.NET" Value="Public Function value_comp () As BinaryDelegate(Of TValue, TValue, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ value_comp();" />
      <MemberSignature Language="F#" Value="abstract member value_comp : unit -&gt; Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt;" Usage="iHash.value_comp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回用于对受控序列进行排序的排序委托。</summary>
        <returns>用于对受控序列进行排序的排序委托。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [哈希 \_ 映射：： VALUE_COMP (STL/clr) ](/cpp/dotnet/hash-map-stl-clr#value_comp)、 [hash \_ 多重映射：： value_comp (stl/clr) ](/cpp/dotnet/hash-multimap-stl-clr#value_comp)、 [哈希 \_ 集：： value_comp (stl/clr) ](/cpp/dotnet/hash-set-stl-clr#value_comp)和 [哈希 \_ 多重集：： value_comp (stl/clr) ](/cpp/dotnet/hash-multiset-stl-clr#value_comp)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
