<Type Name="ILogger" FullName="Microsoft.Extensions.Logging.ILogger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15d5967355d1c2f282a000ac8f8b0f232259e4e1" /><Meta Name="ms.sourcegitcommit" Value="3001e6bfbacb09c47be86e2ade5b0c2bd91bb0cb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/31/2020" /><Meta Name="ms.locfileid" Value="87465596" /></Metadata><TypeSignature Language="C#" Value="public interface ILogger" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.ILogger" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogger" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogger" />
  <TypeSignature Language="F#" Value="type ILogger = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.Abstractions</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="18d5c-101">表示用于执行日志记录的类型。</span><span class="sxs-lookup"><span data-stu-id="18d5c-101">Represents a type used to perform logging.</span></span></summary>
    <remarks><span data-ttu-id="18d5c-102">将大多数日志记录模式聚合成一个方法。</span><span class="sxs-lookup"><span data-stu-id="18d5c-102">Aggregates most logging patterns to a single method.</span></span></remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginScope&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public IDisposable BeginScope&lt;TState&gt; (TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable BeginScope&lt;TState&gt;(!!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginScope(Of TState) (state As TState) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; IDisposable ^ BeginScope(TState state);" />
      <MemberSignature Language="F#" Value="abstract member BeginScope : 'State -&gt; IDisposable" Usage="iLogger.BeginScope state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState"><span data-ttu-id="18d5c-103">要开始范围的状态的类型。</span><span class="sxs-lookup"><span data-stu-id="18d5c-103">The type of the state to begin scope for.</span></span></typeparam>
        <param name="state"><span data-ttu-id="18d5c-104">范围的标识符。</span><span class="sxs-lookup"><span data-stu-id="18d5c-104">The identifier for the scope.</span></span></param>
        <summary><span data-ttu-id="18d5c-105">开始逻辑操作范围。</span><span class="sxs-lookup"><span data-stu-id="18d5c-105">Begins a logical operation scope.</span></span></summary>
        <returns><span data-ttu-id="18d5c-106">一个可释放对象，它在释放时会结束逻辑操作范围。</span><span class="sxs-lookup"><span data-stu-id="18d5c-106">A disposable object that ends the logical operation scope on dispose.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled (Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled (logLevel As LogLevel) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEnabled(Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="iLogger.IsEnabled logLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="logLevel"><span data-ttu-id="18d5c-107">要检查的级别。</span><span class="sxs-lookup"><span data-stu-id="18d5c-107">level to be checked.</span></span></param>
        <summary><span data-ttu-id="18d5c-108">检查是否已启用给定 <paramref name="logLevel" />。</span><span class="sxs-lookup"><span data-stu-id="18d5c-108">Checks if the given <paramref name="logLevel" /> is enabled.</span></span></summary>
        <returns><span data-ttu-id="18d5c-109">如果已启用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d5c-109"><see langword="true" /> if enabled; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void Log&lt;TState&gt; (Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, Exception exception, Func&lt;TState,Exception,string&gt; formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;TState&gt;(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, valuetype Microsoft.Extensions.Logging.EventId eventId, !!TState state, class System.Exception exception, class System.Func`3&lt;!!TState, class System.Exception, string&gt; formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Log(Of TState) (logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; void Log(Microsoft::Extensions::Logging::LogLevel logLevel, Microsoft::Extensions::Logging::EventId eventId, TState state, Exception ^ exception, Func&lt;TState, Exception ^, System::String ^&gt; ^ formatter);" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit" Usage="iLogger.Log (logLevel, eventId, state, exception, formatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="formatter" Type="System.Func&lt;TState,System.Exception,System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState"><span data-ttu-id="18d5c-110">要写入的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="18d5c-110">The type of the object to be written.</span></span></typeparam>
        <param name="logLevel"><span data-ttu-id="18d5c-111">将在此级别上写入项。</span><span class="sxs-lookup"><span data-stu-id="18d5c-111">Entry will be written on this level.</span></span></param>
        <param name="eventId"><span data-ttu-id="18d5c-112">事件的 ID。</span><span class="sxs-lookup"><span data-stu-id="18d5c-112">Id of the event.</span></span></param>
        <param name="state"><span data-ttu-id="18d5c-113">要写入的项。</span><span class="sxs-lookup"><span data-stu-id="18d5c-113">The entry to be written.</span></span> <span data-ttu-id="18d5c-114">也可以是对象。</span><span class="sxs-lookup"><span data-stu-id="18d5c-114">Can be also an object.</span></span></param>
        <param name="exception"><span data-ttu-id="18d5c-115">与此项相关的异常。</span><span class="sxs-lookup"><span data-stu-id="18d5c-115">The exception related to this entry.</span></span></param>
        <param name="formatter"><span data-ttu-id="18d5c-116">函数，用于创建 <paramref name="state" /> 和 <paramref name="exception" /> 的 <see cref="T:System.String" /> 消息。</span><span class="sxs-lookup"><span data-stu-id="18d5c-116">Function to create a <see cref="T:System.String" /> message of the <paramref name="state" /> and <paramref name="exception" />.</span></span></param>
        <summary><span data-ttu-id="18d5c-117">写入日志项。</span><span class="sxs-lookup"><span data-stu-id="18d5c-117">Writes a log entry.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
