<Type Name="DefaultManagementInstaller" FullName="System.Management.Instrumentation.DefaultManagementInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9294ebec1bf13e20ef1ea858430d616342e9b700" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89874765" /></Metadata><TypeSignature Language="C#" Value="public class DefaultManagementInstaller : System.Configuration.Install.Installer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultManagementInstaller extends System.Configuration.Install.Installer" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.DefaultManagementInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultManagementInstaller&#xA;Inherits Installer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultManagementInstaller : System::Configuration::Install::Installer" />
  <TypeSignature Language="F#" Value="type DefaultManagementInstaller = class&#xA;    inherit Installer" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.Installer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="74254-101">安装已检测的程序集。</span><span class="sxs-lookup"><span data-stu-id="74254-101">Installs an instrumented assembly.</span></span> <span data-ttu-id="74254-102">若要使用此默认项目安装程序，只需在程序集中从 <see cref="T:System.Management.Instrumentation.DefaultManagementInstaller" /> 派生类。</span><span class="sxs-lookup"><span data-stu-id="74254-102">To use this default project installer, simply derive a class from <see cref="T:System.Management.Instrumentation.DefaultManagementInstaller" /> inside the assembly.</span></span> <span data-ttu-id="74254-103">不需要重写任何方法。</span><span class="sxs-lookup"><span data-stu-id="74254-103">No methods need to be overridden.</span></span>  
  
<span data-ttu-id="74254-104">注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。</span><span class="sxs-lookup"><span data-stu-id="74254-104">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="74254-105">[MI API](https://docs.microsoft.com/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure) 应用于所有新的开发。</span><span class="sxs-lookup"><span data-stu-id="74254-105">The [MI APIs](https://docs.microsoft.com/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74254-106">此类提供 .NET framework 中标准 Installutil.exe 安装程序的接口。</span><span class="sxs-lookup"><span data-stu-id="74254-106">This class provides an interface for the standard installUtil installer in the .NET framework.</span></span> <span data-ttu-id="74254-107">包含自动化类的任何程序集都应包含从此类型派生的类。</span><span class="sxs-lookup"><span data-stu-id="74254-107">Any assembly that contains Automation classes should include a class that is derived from this type.</span></span> <span data-ttu-id="74254-108">这将提供生成自动化对象的架构的代码，将其安装到 WMI 中，并创建所需的提供程序注册代码。</span><span class="sxs-lookup"><span data-stu-id="74254-108">This will provide code that generates the schema of the automation objects, installs it into WMI, and creates the necessary provider registration code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74254-109">下面的示例演示如何从类派生一个类 <xref:System.Management.Instrumentation.DefaultManagementInstaller> ，以安装 WMI 提供程序。</span><span class="sxs-lookup"><span data-stu-id="74254-109">The following example shows how to derive a class from the <xref:System.Management.Instrumentation.DefaultManagementInstaller> class to install a WMI provider.</span></span>  
  
```csharp  
// This is the installer class that installs an instrumented assembly.  
// To use the default project installer, simply derive a class from  
// DefaultManagementInstaller.  No methods need to be overridden.  
[System.ComponentModel.RunInstaller(true)]  
public class TheInstaller : DefaultManagementInstaller  
{ }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultManagementInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.DefaultManagementInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultManagementInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="74254-110">初始化 <see cref="T:System.Management.Instrumentation.DefaultManagementInstaller" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="74254-110">Initializes a new instance of the <see cref="T:System.Management.Instrumentation.DefaultManagementInstaller" /> class.</span></span> <span data-ttu-id="74254-111">这是无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="74254-111">This is the parameterless constructor.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
