<Type Name="XamlMemberInvoker" FullName="System.Xaml.Schema.XamlMemberInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36ea554d49653a5eec1ed15b36f4f1c56feba4ec" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86713685" /></Metadata><TypeSignature Language="C#" Value="public class XamlMemberInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMemberInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlMemberInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlMemberInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlMemberInvoker" />
  <TypeSignature Language="F#" Value="type XamlMemberInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个扩展点，该扩展点可通过除反射之外的其他技术来访问 XAML 成员的成员特征。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 的用途 <xref:System.Xaml.Schema.XamlMemberInvoker> 是启用可扩展 XAML 类型系统、架构和不完全依赖于 clr 功能（如 clr 特性、通过和的反射信息等）的工作运行时 <xref:System.Type> <xref:System.Reflection.MemberInfo> 。 的子类 <xref:System.Xaml.Schema.XamlMemberInvoker> 用作 XAML 架构类（如）的备用构造函数的输入参数 <xref:System.Xaml.XamlMember> 。 将从子类中 <xref:System.Xaml.XamlMember> 传递并将传递 <xref:System.Xaml.Schema.XamlMemberInvoker> 到基构造函数。 除了 <xref:System.Xaml.Schema.XamlMemberInvoker> 为构造函数定义外，还必须为至少部分方法提供重写 `Lookup` <xref:System.Xaml.XamlMember> 。  
  
 <xref:System.Xaml.Schema.XamlMemberInvoker> 具有默认实现。 默认实现遵循类似于 XAML 架构类型的默认实现的模型 <xref:System.Xaml.XamlType> ，以及 <xref:System.Xaml.XamlMember> ： clr 类型系统用于实例化、值和查找，包括使用 CLR 特性、 <xref:System.Type> 和等 <xref:System.Reflection.MemberInfo> 。  
  
 <xref:System.Xaml.Schema.XamlMemberInvoker> 提供)  (基本获取和设置操作的 <xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A> 方法 <xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A> 。 它还提供属性， <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> 但这些属性不是虚拟的。  
  
> [!NOTE]
>  可以获取一个 <xref:System.Xaml.Schema.XamlMemberInvoker> 值，该值表示 xaml 指令，该指令在 system.exception 实现中作为私有类实现。 如果尝试 <xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A> <xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A> 在此调用程序上调用或，则会引发异常。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlMemberInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlMemberInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现为空。  
  
 此构造函数在内部调用以提供的值 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A> 。 对于 <xref:System.Xaml.Schema.XamlMemberInvoker> 子类，应将 <xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29> 签名用作构造，或提供作为基调用的重写 <xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29> 。 提供 <xref:System.Xaml.XamlMember> 实现默认模式，其中 <xref:System.Xaml.Schema.XamlMemberInvoker> 是不可变的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMemberInvoker (System.Xaml.XamlMember member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlMember member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (member As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMemberInvoker(System::Xaml::XamlMember ^ member);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlMemberInvoker : System.Xaml.XamlMember -&gt; System.Xaml.Schema.XamlMemberInvoker" Usage="new System.Xaml.Schema.XamlMemberInvoker member" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="member">与此 <see cref="T:System.Xaml.XamlMember" /> 相关的特定 XAML 成员的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 值。</param>
        <summary>基于提供的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数基于用于构造的，在内部调用 <xref:System.Xaml.XamlMember> <xref:System.Xaml.Schema.XamlMemberInvoker> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="member" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (instance As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj -&gt; obj&#xA;override this.GetValue : obj -&gt; obj" Usage="xamlMemberInvoker.GetValue instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">成员的所有者类型的实例。</param>
        <summary>从实例中获取相关属性的值。</summary>
        <returns>请求的属性值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。  
  
 或  
  
在只写成员上调用此方法。  
  
 或  
  
 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。 如果基于未知，则此帮助程序始终引发 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> <see cref="T:System.Xaml.XamlMember" /> ，其中包含的为的情况 <see cref="P:System.Xaml.XamlMember.UnderlyingMember" /> <see cref="T:System.Xaml.XamlMember" /> <see langword="null" /> 。  
  
如果为，则基实现引发 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> <see langword="null" /> 。  
  
对于 (<see cref="P:System.Reflection.MethodBase.IsStatic" /> <see langword="true" /> 按 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />) 默认实现的静态属性 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> <see langword="null" /> ，作为第一个参数传递，并打包 <paramref name="instance" /> 在第二个参数中。 对于非静态属性，它会调用 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 并转发 <paramref name="instance" /> 作为第一个参数，并将空包作为第二个参数。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object instance, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object instance, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (instance As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ instance, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj -&gt; unit&#xA;override this.SetValue : obj * obj -&gt; unit" Usage="xamlMemberInvoker.SetValue (instance, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">成员的所有者类型的实例。</param>
        <param name="value">要设置的属性值。</param>
        <summary>对实例设置相关属性的值。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。  
  
 或  
  
在只读成员上调用此方法。  
  
 或  
  
 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。 如果基于未知，则此帮助程序始终引发 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> <see cref="T:System.Xaml.XamlMember" /> ，其中包含的为的情况 <see cref="P:System.Xaml.XamlMember.UnderlyingMember" /> <see cref="T:System.Xaml.XamlMember" /> <see langword="null" /> 。  
  
如果为，则基实现引发 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> <see langword="null" /> 。  
  
对于 (<see cref="P:System.Reflection.MethodBase.IsStatic" /> <see langword="true" /> 按) 默认实现的静态属性， <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 将 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> <see langword="null" /> 作为第一个参数进行传递，并将 <paramref name="instance" /> 作为第 <paramref name="value" /> 二个参数进行打包。 对于非静态属性，它将调用 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 并转发 <paramref name="instance" /> 为第一个参数，并将 <paramref name="value" /> 作为第二个参数。</para></block>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValue">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.Schema.ShouldSerializeResult ShouldSerializeValue (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xaml.Schema.ShouldSerializeResult ShouldSerializeValue(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSerializeValue (instance As Object) As ShouldSerializeResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::Schema::ShouldSerializeResult ShouldSerializeValue(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeValue : obj -&gt; System.Xaml.Schema.ShouldSerializeResult&#xA;override this.ShouldSerializeValue : obj -&gt; System.Xaml.Schema.ShouldSerializeResult" Usage="xamlMemberInvoker.ShouldSerializeValue instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.ShouldSerializeResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">具有要检查其持久性的属性的实例。</param>
        <summary>指示是否需要通过序列化过程保持值。</summary>
        <returns>枚举的一个值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.Schema.ShouldSerializeResult.Default>如果 XAML 成员本身是，则默认实现将返回 <xref:System.Xaml.XamlMember.IsUnknown%2A> ，如果未 `ShouldSerialize` 通过默认反射在基础成员上找到 CLR 反射相关方法，则返回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingGetter">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo UnderlyingGetter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo UnderlyingGetter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingGetter As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ UnderlyingGetter { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingGetter : System.Reflection.MethodInfo" Usage="System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性获取值。</summary>
        <value>为与此 <see cref="T:System.Reflection.MethodInfo" /> 相关的属性获取值的 CLR 方法的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，或者为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性依赖于在 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> 构造上调用 <xref:System.Xaml.XamlMember> 。 对于未知 <xref:System.Xaml.XamlMember> ，或返回的情况下 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> `null` ，此属性返回 `null` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSetter">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo UnderlyingSetter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo UnderlyingSetter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSetter As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ UnderlyingSetter { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSetter : System.Reflection.MethodInfo" Usage="System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性设置值。</summary>
        <value>为与此 <see cref="T:System.Reflection.MethodInfo" /> 相关的属性设置值的 CLR 方法的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，或者为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性依赖于在 <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> 构造上调用 <xref:System.Xaml.XamlMember> 。 对于未知 <xref:System.Xaml.XamlMember> ，或返回的情况下 <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> `null` ，此属性返回 `null` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlMemberInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlMemberInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlMemberInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlMemberInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlMemberInvoker" Usage="System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
        <value>一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为 system.exception <xref:System.Xaml.Schema.XamlMemberInvoker> 定义的 API 的参数提供此值通常会导致调用的代码引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
