<Type Name="Grid" FullName="System.Windows.Forms.DataVisualization.Charting.Grid">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f5c3670c6518c304fd41ee0d00634cbdb309bf3" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89816116" /></Metadata><TypeSignature Language="C#" Value="public class Grid" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grid extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.Grid" />
  <TypeSignature Language="VB.NET" Value="Public Class Grid" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grid" />
  <TypeSignature Language="F#" Value="type Grid = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("Enabled")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("Enabled")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用于管理 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象的主要和次要网格的方法和属性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类提供图表上网格的功能，并使用 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.MajorGrid%2A> <xref:System.Windows.Forms.DataVisualization.Charting.Axis.MinorGrid%2A> 每个对象的和属性公开 <xref:System.Windows.Forms.DataVisualization.Charting.Axis> 。  
  
 默认情况下，主要网格线不会 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.Interval%2A> 设置其、 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset%2A> 、 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A> 和 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType%2A> 属性。 当未设置主要网格线的这些属性时， <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 控件将自动确定网格线的相应值。  
  
 默认情况下，轴及其次要网格线的 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.Interval%2A> 、 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset%2A> 、 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A> 和属性都 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType%2A> 设置为 **Auto** (0) 。 如果启用了轴标签或次要网格线并且未修改这些属性，则 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 控件会自动确定绘制次要网格线的频率。  
  
 轴网格：  
  
-   可以启用或禁用。  
  
-   具有确定第一次绘制位置的起点。  
  
-   显示可为样式、宽度和颜色设置的行。  
  
-   可以具有自动间隔或手动设置的间隔。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Grid.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grid();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Grid" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个标志，该标志确定是否启用主要或次要网格线。</summary>
        <value>如果已启用，则为 <see langword="true" />；如果已禁用，则为 <see langword="false" />。 对于主要网格对象，默认值为 <see langword="true" />，对于次要网格对象，默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主要和次要网格在启用时可见，在禁用时不可见。  
  
 如果禁用，则不会显示刻度线。  
  
 您可以通过将属性设置为来禁用刻度线 <xref:System.Windows.Forms.DataVisualization.Charting.TickMark.TickMarkStyle%2A> <xref:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle.None> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置主要网格线或次要网格线之间的间隔。</summary>
        <value>一个 <see langword="double" /> 值，该值表示网格线之间的间隔。 默认情况下，不对主要网格线设置该值 (<see cref="F:System.Double.NaN" />)。 对于次要网格线，默认值为零 (0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，不会为轴标签、主要刻度线和主要网格线设置此属性。 如果未设置该属性，则默认情况下，通过 <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet> 在设计时显式使用，或 <xref:System.Double.NaN> 在运行时分配值来确定，此属性的实际值由 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.Interval%2A> <xref:System.Windows.Forms.DataVisualization.Charting.Axis> 图表元素（如网格线或刻度线）所属的对象的属性确定。  
  
 次要刻度线和网格线的间隔从不受属性值的影响 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.Interval%2A> 。  
  
 间隔以轴单位来度量，并确定适用的图表元素的绘制频率。 例如，假设柱形图的 X 轴步骤为 (1，即1、2、3、4等) ;如果将 <xref:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Interval%2A> X 轴的属性设置为2，则将为每个其他列显示一个轴标签。  
  
 对于所有适用的图表元素也是如此。 换句话说，如果在前面的示例中使用的是带 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffset%2A> 0.5 的行，并且其 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> 属性为2，则会在0.5、2.5、4.5 等中显示条带线。  
  
 如果将图表元素属性设置 `Interval` 为零，控件将自动确定间隔 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double IntervalOffset { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffset : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置网格线的偏移量。</summary>
        <value>一个 <see langword="double" /> 值，该值表示间隔偏移量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，不会为轴标签、主要刻度线和主要网格线设置此属性。 如果未设置，则默认情况下，在设计时显式指定 "未设置"，或在运行时为其赋值，则 <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet> 此属性的实际值由 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffset%2A> <xref:System.Windows.Forms.DataVisualization.Charting.Axis> 图表元素（如网格线或刻度线）所属的对象的属性确定。  
  
 次要刻度线和网格线的间隔偏移量从不受对象属性的值的影响 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffset%2A> <xref:System.Windows.Forms.DataVisualization.Charting.Axis> 。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType%2A>属性设置定义偏移量的度量单位。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset%2A>可以为负值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffsetType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalOffsetType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffsetType : System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置主要网格线和次要网格线的间隔偏移量类型。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 枚举值，该值指示间隔类型。 默认情况下，不对主要网格线设置该值。 次要网格线的默认值为 <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，不会为轴标签、主要刻度线和主要网格线设置此属性。 如果未设置该属性，则默认情况下，在设计时显式指定 "未设置"，或在运行时为其赋值，则 <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet> 此属性的实际值由 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffsetType%2A> <xref:System.Windows.Forms.DataVisualization.Charting.Axis> 图表元素-网格线或刻度线（例如）所属的对象的属性确定。  
  
 次要刻度线和网格线的间隔偏移量类型永远不会受 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffsetType%2A> 属性值的影响。  
  
 如果此 "间隔偏移量" 类型设置为 <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto> ，则 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A> 将使用属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalType : System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置主要网格线或次要网格线的间隔类型。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 枚举值，该值指示间隔类型。 默认情况下，不对轴标签、主要刻度线和主要网格线设置该值，而是使用 <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet" /> 枚举值。 对于次要刻度线和网格线，默认值为 <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，不会为轴标签、主要刻度线和主要网格线设置此属性。 如果未设置该属性，则默认情况下，在设计时显式使用 "未设置"，或者在运行时为其赋值，则 <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet> 此属性的实际值由 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffsetType%2A> <xref:System.Windows.Forms.DataVisualization.Charting.Axis> 图表元素-网格线或刻度线（例如）所属的对象的属性确定。  
  
 次要刻度线和网格线的间隔类型永远不会受属性值的影响 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalType%2A> 。  
  
 间隔类型可设置为 <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto> ; 间隔的类型取决于所绘制对象的 X 值或 Y 值 <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> ，具体取决于适用元素所属的轴。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A>如果数据点的值为或值，则设置值轴的属性仅会产生效果 <xref:System.DateTime> `double` 。 此外， <xref:System.Windows.Forms.DataVisualization.Charting.Series.XValueType%2A> <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValueType%2A> 绘制的或的属性 <xref:System.Windows.Forms.DataVisualization.Charting.Series> 必须设置为 <xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Auto> 或 <xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTime> 。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A>如果 <xref:System.Windows.Forms.DataVisualization.Charting.Series.XValueType%2A> 属性 (或 <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValueType%2A> 属性（具体取决于绘图对象的相关轴) 为或），则设置分类轴的属性仅会产生效果 <xref:System.Windows.Forms.DataVisualization.Charting.Series> <xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Auto> <xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTime> 。  
  
> [!NOTE]
>  星期日被视为一周的第一天。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LineColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LineColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LineColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LineColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LineColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.LineColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置网格线颜色。</summary>
        <value><see cref="T:System.Drawing.Color" /> 对象。 默认值是 <see cref="P:System.Drawing.Color.Black" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.LineColor%2A>属性用于指定主要刻度线和次要刻度线或网格的颜色。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineDashStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineDashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property LineDashStyle As ChartDashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartDashStyle LineDashStyle { System::Windows::Forms::DataVisualization::Charting::ChartDashStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartDashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.LineDashStyle : System.Windows.Forms.DataVisualization.Charting.ChartDashStyle with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.LineDashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置网格的线型。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> 枚举值。 默认值为 <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.LineDashStyle%2A>属性可用于指定主要和次要刻度线或网格的线条样式。 该行可以是纯色、点线等。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineWidth">
      <MemberSignature Language="C#" Value="public int LineWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property LineWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineWidth : int with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Grid.LineWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置主要网格线和次要网格线的线条宽度。</summary>
        <value>一个表示线条宽度（以像素为单位）的 <see langword="integer" />。 默认值为 1（一）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.LineWidth%2A>属性可用于指定主要和次要刻度线或网格的线条宽度（以像素为单位）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
