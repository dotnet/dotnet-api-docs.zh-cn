<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e2fb894d3e53374bdedb3f6bbc35142f13f811d2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83934637" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureString extends System.Object implements class System.IDisposable" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="5.0.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.0.0" To="System.Runtime.InteropServices" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.1.0" To="System.Runtime.InteropServices" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.2.0" To="System.Runtime.InteropServices" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示应保密的文本，例如在不再需要时将其从计算机内存中删除。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  建议不要将 `SecureString` 类用于新的开发。 有关详细信息，请参阅 GitHub 上的[SecureString 不应使用](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md)。

 <xref:System.Security.SecureString> 是一种提供安全度量的字符串类型。 它尝试避免以纯文本形式在进程内存中存储可能敏感的字符串。  （但是，若要了解限制，请参阅 "[安全设置 SecureString"](#HowSecure)部分。）初始化实例或修改值时，将使用基础平台支持的机制自动保护 <xref:System.Security.SecureString> 实例的值。 您的应用程序可以通过调用 <xref:System.Security.SecureString.MakeReadOnly%2A> 方法，使实例不可变，并阻止进一步的修改。  
  
 <xref:System.Security.SecureString> 实例的最大长度为65536个字符。  
  
> [!IMPORTANT]
>  此类型实现 <xref:System.IDisposable> 接口。 使用完该类型的实例后，应直接或间接释放该实例。 若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。  
  
 <xref:System.Security.SecureString> 类及其成员对 COM 不可见。 有关详细信息，请参阅 <xref:System.Runtime.InteropServices.ComVisibleAttribute>。  
  
 本节内容：  
  
 [String 与 SecureString](#vsString)   
 [SecureString 操作](#Ops)   
 [SecureString 和互操作](#interop)   
 [SecureString 的安全程度如何？](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>String 与 SecureString  
 <xref:System.String?displayProperty=nameWithType> 类的实例都是不可变的，并且不再需要时，无法以编程方式计划进行垃圾回收;也就是说，实例在创建后是只读的，并且不能预测将从计算机内存中删除该实例的时间。 由于 <xref:System.String?displayProperty=nameWithType> 实例是不可变的，因此修改现有实例的操作实际上会创建它要操作的副本。 因此，如果 <xref:System.String> 对象包含敏感信息（如密码、信用卡号或个人数据），则在使用该信息时可能会出现信息，因为您的应用程序无法从计算机内存中删除数据。  
  
 <xref:System.Security.SecureString> 对象类似于 <xref:System.String> 对象，因为它具有一个文本值。 但 <xref:System.Security.SecureString> 对象的值固定在内存中，则可以使用基础操作系统提供的保护机制（如加密），直到应用程序将其标记为只读，并可通过调用 <xref:System.Security.SecureString.Dispose%2A> 方法或 .NET Framework 垃圾回收器从计算机内存中删除。  
  
 有关 <xref:System.Security.SecureString> 类的限制的讨论，请参阅 how of [SecureString？](#HowSecure)部分。  
  
 [返回页首](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>SecureString 操作  
 <xref:System.Security.SecureString> 类包括允许你执行以下操作的成员：  
  
 实例化 <xref:System.Security.SecureString> 对象  
 可以通过调用其无参数的构造函数来实例化 <xref:System.Security.SecureString> 的对象。  
  
 向 <xref:System.Security.SecureString> 对象添加字符  
 可以通过调用 <xref:System.Security.SecureString.AppendChar%2A> 或 <xref:System.Security.SecureString.InsertAt%2A> 方法，一次将一个字符添加到 <xref:System.Security.SecureString> 的对象。  
  
> [!IMPORTANT]
>  永远不应从 <xref:System.String>构造 <xref:System.Security.SecureString> 对象，因为敏感数据已受到不可变 <xref:System.String> 类的内存持久性后果的影响。 构造 <xref:System.Security.SecureString> 对象的最佳方式是从非实时的非托管源（如 <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> 方法）。  
  
 删除 <xref:System.Security.SecureString> 对象中的字符  
 您可以通过调用 <xref:System.Security.SecureString.SetAt%2A> 方法来替换单个字符、通过调用 <xref:System.Security.SecureString.RemoveAt%2A> 方法删除单个字符或通过调用 <xref:System.Security.SecureString.Clear%2A> 方法删除 <xref:System.Security.SecureString> 实例中的所有字符。  
  
 将 <xref:System.Security.SecureString> 对象设为只读  
 定义 <xref:System.Security.SecureString> 对象表示的字符串后，可以调用其 <xref:System.Security.SecureString.MakeReadOnly%2A> 方法使字符串成为只读的。  
  
 获取有关 <xref:System.Security.SecureString> 对象的信息  
 <xref:System.Security.SecureString> 类只包含两个提供字符串相关信息的成员：其 <xref:System.Security.SecureString.Length%2A> 属性，指示字符串中 UTF16 编码的代码单元的数量;和 <xref:System.Security.SecureString.IsReadOnly%2A>方法，该方法指示实例是否为只读。  
  
 释放分配给 <xref:System.Security.SecureString> 实例的内存  
 由于 <xref:System.Security.SecureString> 实现 <xref:System.IDisposable> 接口，因此可以通过调用 <xref:System.Security.SecureString.Dispose%2A> 方法释放其内存。  
  
 <xref:System.Security.SecureString> 类没有用于检查、比较或转换 <xref:System.Security.SecureString>的值的成员。 由于缺少这类成员，因此有助于保护实例的值不被意外或恶意公开。 使用 <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> 类的适当成员（如 <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> 方法）操作 <xref:System.Security.SecureString> 对象的值。  
  
 .NET Framework 类库通常按以下方式使用 <xref:System.Security.SecureString> 实例：  
  
-   若要通过使用 <xref:System.Diagnostics.ProcessStartInfo> 结构或调用具有类型 <xref:System.Security.SecureString>的参数 <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> 方法的重载，为进程提供密码信息。  
  
-   通过调用 <xref:System.Net.NetworkCredential> 类构造函数，该构造函数 <xref:System.Security.SecureString> 类型的参数或通过使用 <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> 属性，来提供网络密码信息。  
  
-   若要通过调用 <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> 构造函数或检索 <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> 属性的值来提供 SQL Server 身份验证的密码信息。  
  
-   将字符串传递到非托管代码。 有关详细信息，请参阅[SecureString and 互操作](#interop)部分。  
  
 [返回页首](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString 和互操作  
 由于操作系统不直接支持 <xref:System.Security.SecureString>，因此必须先将 <xref:System.Security.SecureString> 对象的值转换为所需的字符串类型，然后才能将该字符串传递到本机方法。  <xref:System.Runtime.InteropServices.Marshal> 类具有五种执行此操作的方法：  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>，它将 <xref:System.Security.SecureString> 字符串值转换为 COM 识别的二进制字符串（BSTR）。  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> 和 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>，它将 <xref:System.Security.SecureString> 字符串值复制到非托管内存中的 ANSI 字符串。  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> 和 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>，它将 <xref:System.Security.SecureString> 字符串值复制到非托管内存中的 Unicode 字符串。  
  
 其中每种方法在非托管内存中创建一个明文字符串。 开发人员负责在不再需要该内存时将其从零开始，并将其释放。 每个字符串转换和内存分配方法都有一个对应的方法，以使分配的内存为零并释放已分配的内存：  
  
|分配和转换方法|零和免费方法|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [返回页首](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>SecureString 的安全程度如何？  
 正确创建后，<xref:System.Security.SecureString> 实例提供的数据保护比 <xref:System.String>更多。 当从一个字符的时间源创建字符串时，<xref:System.String> 将在内存中创建多个中间，而 <xref:System.Security.SecureString> 只创建一个实例。  <xref:System.String> 对象的垃圾回收是不确定的。 此外，由于未固定其内存，垃圾回收器将在移动和压缩内存时创建 <xref:System.String> 值的其他副本。 与此相反，分配给 <xref:System.Security.SecureString> 对象的内存将固定，并且可以通过调用 <xref:System.Security.SecureString.Dispose%2A> 方法来释放内存。  
  
 尽管 <xref:System.Security.SecureString> 实例中存储的数据比 <xref:System.String> 实例中存储的数据更安全，但对 <xref:System.Security.SecureString> 实例的安全有很大的限制。 其中包括：  
  
 平台  
 在 Windows 操作系统上，将对 <xref:System.Security.SecureString> 实例的内部字符数组的内容进行加密。 但是，无论是否缺少 Api 或密钥管理问题，加密在所有平台上都不可用。 由于此平台依赖项，<xref:System.Security.SecureString> 不会对非 Windows 平台上的内部存储进行加密。 在这些平台上使用其他技术来提供附加保护。
  
 持续时间  
 即使 <xref:System.Security.SecureString> 实现能够利用加密，但分配给 <xref:System.Security.SecureString> 实例的纯文本可能会在不同的时间公开：  
  
-   由于 Windows 不在操作系统级别提供安全字符串实现，因此 .NET Framework 仍必须将安全字符串值转换为纯文本表示形式才能使用。  
  
-   每当安全字符串的值由 <xref:System.Security.SecureString.AppendChar%2A> 或 <xref:System.Security.SecureString.RemoveAt%2A>这样的方法修改时，必须对其进行解密（即转换回纯文本），修改后再次加密。  
  
-   如果在互操作调用中使用安全字符串，则必须将其转换为 ANSI 字符串、Unicode 字符串或二进制字符串（BSTR）。 有关详细信息，请参阅[SecureString and 互操作](#interop)部分。  
  
 与 <xref:System.String> 类相比，只需缩短 <xref:System.Security.SecureString> 实例的值的显示时间间隔。  
  
 存储与使用情况  
 更常见的情况是，<xref:System.Security.SecureString> 类为应保护或保密的字符串值定义存储机制。 但是，在 .NET Framework 之外，任何使用机制都不支持 <xref:System.Security.SecureString>。 这意味着，必须将安全字符串转换为可由其目标识别的可用形式（通常为明文格式），并且必须在用户空间中进行解密和转换。  
  
 总体而言，<xref:System.Security.SecureString> 比 <xref:System.String> 更安全，因为它限制了敏感字符串数据的公开。 但是，这些字符串可能仍会公开给有权访问原始内存的任何进程或操作，例如，在主计算机上运行的恶意进程、进程转储或用户可查看的交换文件。 建议的替代方法是使用存储在进程外部的凭据，而不是使用 <xref:System.Security.SecureString> 来保护密码。  
  
 [返回页首](#top)  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Security.SecureString> 来保护用户密码，以将其用作凭据以启动新进程。  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例使用默认的（或无参数的）构造函数实例化一个新的 <xref:System.Security.SecureString> 对象。 然后，它调用 <xref:System.Security.SecureString.AppendChar%2A> 方法，向其中添加一个字符数组。  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 下面的示例从 <xref:System.String> 对象的值创建一个 <xref:System.Security.SecureString> 对象。  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此实例的值时出错。</exception>
        <exception cref="T:System.NotSupportedException">此平台上不支持此操作。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">指向 <see cref="T:System.Char" /> 对象的数组的指针。</param>
        <param name="length">要包括到新实例中的 <paramref name="value" /> 的元素数。</param>
        <summary>用 <see cref="T:System.Char" /> 对象的子数组初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。  
  
此构造函数不符合 CLS。 符合 CLS 的替代方法是 <see cref="M:System.Security.SecureString.#ctor" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将新的 <xref:System.Security.SecureString> 对象初始化为 `length`指定的 `value` 中的字符数;然后对实例的值进行加密。  
  
 在C#中，此构造函数仅在不安全代码的上下文中定义。  
  
   
  
## Examples  
 下面的示例通过将新 <xref:System.Security.SecureString> 对象的构造函数传递给字符数组来实例化该对象。  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> 小于零或大于 65,536。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
        <exception cref="T:System.NotSupportedException">此平台上不支持此操作。</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">要追加到此安全字符串的字符。</param>
        <summary>在当前安全字符串的末尾追加一个字符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果实现使用保护机制（如加密），则此安全字符串的值（如果有）不受保护;追加 `c`。然后，重新保护安全字符串的新值。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>和 <xref:System.Security.SecureString.Clear%2A> 方法如何影响 <xref:System.Security.SecureString> 对象的值。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 下面的示例演示如何使用 <xref:System.Security.SecureString.AppendChar%2A> 和 <xref:System.Security.SecureString.RemoveAt%2A> 方法来收集密码中的字符。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">执行此操作将使此安全字符串的长度超过 65,536 个字符。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除当前安全字符串的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包含此安全字符串的值的计算机内存为零，然后此安全字符串的值的长度将设置为零。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>和 <xref:System.Security.SecureString.Clear%2A> 方法如何影响 <xref:System.Security.SecureString> 对象的值。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建当前安全字符串的副本。</summary>
        <returns>此安全字符串的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Security.SecureString> 的实例被标记为只读，则该实例的副本将不是只读的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由当前 <see cref="T:System.Security.SecureString" /> 对象使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Dispose%2A> 方法将二进制零写入包含此 <xref:System.Security.SecureString> 对象的值的分配内存，然后释放已分配的内存。  
  
 有关详细信息，请参阅[垃圾回收](/dotnet/standard/garbage-collection/)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">插入参数 <paramref name="c" /> 的索引位置。</param>
        <param name="c">要插入的字符。</param>
        <summary>在此安全字符串中的指定索引位置插入一个字符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 索引从零开始;此安全字符串中的第一个字符的索引位置为零。  
  
 如果实现使用保护机制（如加密），则安全字符串的值（如果有）不受保护;在指定的索引位置插入 `c`;然后，重新保护新值。 <xref:System.Security.SecureString.InsertAt%2A> 方法将生成与 <xref:System.Security.SecureString.AppendChar%2A> 方法相同的结果，如果 <xref:System.Security.SecureString.InsertAt%2A> 的 `index` 参数设置为此实例的长度，则会在安全字符串的末尾插入一个字符。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>和 <xref:System.Security.SecureString.Clear%2A> 方法如何影响 <xref:System.Security.SecureString> 对象的值。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小于零，或大于此安全字符串的长度。  
  
- 或 - 
执行此操作将使此安全字符串的长度超过 65,536 个字符。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示此安全字符串是否标记为只读。</summary>
        <returns>如果此安全字符串标记为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Security.SecureString.MakeReadOnly%2A> 方法将 <xref:System.Security.SecureString> 的实例标记为只读后，任何修改该实例的值的尝试都将引发一个 <xref:System.InvalidOperationException>。 使用 <xref:System.Security.SecureString.IsReadOnly%2A> 方法来测试 <xref:System.Security.SecureString> 在尝试对其进行修改之前是否为只读。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前安全字符串中的字符数。</summary>
        <value>此安全字符串中 <see cref="T:System.Char" /> 对象的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Length%2A> 属性返回此实例中 <xref:System.Char> 对象的数目，而不是 Unicode 字符的数目。 一个 Unicode 字符可能由多个 <xref:System.Char> 对象表示。  
  
 <xref:System.Security.SecureString> 实例的最大长度为65536个字符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将此安全字符串的文本值设置为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Security.SecureString.%23ctor%2A> 构造函数初始化 <xref:System.Security.SecureString> 类的实例的文本值，并使用 <xref:System.Security.SecureString.Clear%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>、<xref:System.Security.SecureString.InsertAt%2A>和 <xref:System.Security.SecureString.AppendChar%2A> 方法修改值。  
  
 进行最终修改后，请使用 <xref:System.Security.SecureString.MakeReadOnly%2A> 方法使实例变得不可变（只读）。 将该值标记为只读后，对其进行修改的任何进一步尝试都将引发 <xref:System.InvalidOperationException>。  
  
 调用 <xref:System.Security.SecureString.MakeReadOnly%2A> 的效果是永久性的，因为 <xref:System.Security.SecureString> 类不提供任何方法来使安全字符串再次修改。 使用 <xref:System.Security.SecureString.IsReadOnly%2A> 方法来测试 <xref:System.Security.SecureString> 的实例是否为只读。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Security.SecureString.AppendChar%2A> 和 <xref:System.Security.SecureString.RemoveAt%2A> 方法来收集密码中的字符。 密码在收集后变为只读。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">此安全字符串中的字符的索引位置。</param>
        <summary>从此安全字符串中的指定索引位置移除字符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 索引从零开始;此实例中的第一个字符的索引位置为零。  
  
 如果实现使用保护机制（如加密），则此安全字符串的值（如果有）不受保护;移除指定索引位置处的字符;然后，重新保护新值。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>和 <xref:System.Security.SecureString.Clear%2A> 方法如何影响 <xref:System.Security.SecureString> 对象的值。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 下面的示例演示如何使用 <xref:System.Security.SecureString.AppendChar%2A> 和 <xref:System.Security.SecureString.RemoveAt%2A> 方法来收集密码中的字符。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">此安全字符串中的某个现有字符的索引位置。</param>
        <param name="c">替换现有字符的字符。</param>
        <summary>将指定索引位置上的现有字符替换为其他字符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 索引从零开始;此实例中的第一个字符的索引位置为零。  
  
 如果实现使用保护机制（如加密），则安全字符串的值（如果有）不受保护;`c` 分配给指定的索引位置;然后，重新保护新值。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>和 <xref:System.Security.SecureString.Clear%2A> 方法如何影响 <xref:System.Security.SecureString> 对象的值。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
        <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
