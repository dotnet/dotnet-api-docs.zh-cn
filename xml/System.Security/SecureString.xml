<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18f2ca68160cdad69027c4944d1134fae6b7a895" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94477583" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureString extends System.Object implements class System.IDisposable" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime.InteropServices" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="5.0.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.0.0" To="System.Runtime.InteropServices" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.1.0" To="System.Runtime.InteropServices" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Security.SecureString" FromVersion="4.1.2.0" To="System.Runtime.InteropServices" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d1081-101">表示应保密的文本，例如在不再需要时将其从计算机内存中删除。</span><span class="sxs-lookup"><span data-stu-id="d1081-101">Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</span></span> <span data-ttu-id="d1081-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="d1081-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  <span data-ttu-id="d1081-103">不建议使用 `SecureString` 类进行新的开发。</span><span class="sxs-lookup"><span data-stu-id="d1081-103">We don't recommend that you use the `SecureString` class for new development.</span></span> <span data-ttu-id="d1081-104">有关详细信息，请参阅 GitHub 上的 [SecureString 不应使用](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) 。</span><span class="sxs-lookup"><span data-stu-id="d1081-104">For more information, see [SecureString shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) on GitHub.</span></span>

 <span data-ttu-id="d1081-105"><xref:System.Security.SecureString> 是提供安全度量值的字符串类型。</span><span class="sxs-lookup"><span data-stu-id="d1081-105"><xref:System.Security.SecureString> is a string type that provides a measure of security.</span></span> <span data-ttu-id="d1081-106">它尝试避免以纯文本形式在进程内存中存储可能敏感的字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-106">It tries to avoid storing potentially sensitive strings in process memory as plain text.</span></span>  <span data-ttu-id="d1081-107"> (的限制，请参阅 " [安全设置的安全级别](#HowSecure) " 一节。 ) 实例的值是在 <xref:System.Security.SecureString> 初始化实例或修改该值时使用基础平台支持的机制自动保护的。</span><span class="sxs-lookup"><span data-stu-id="d1081-107">(For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</span></span> <span data-ttu-id="d1081-108">您的应用程序可以通过调用方法来使实例不可变，并防止进一步的修改 <xref:System.Security.SecureString.MakeReadOnly%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-108">Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method.</span></span>  
  
 <span data-ttu-id="d1081-109">实例的最大长度 <xref:System.Security.SecureString> 为65536个字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-109">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d1081-110">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="d1081-110">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="d1081-111">使用完该类型的实例后，应直接或间接释放该实例。</span><span class="sxs-lookup"><span data-stu-id="d1081-111">When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="d1081-112">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="d1081-112">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="d1081-113">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="d1081-113">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="d1081-114">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="d1081-114">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="d1081-115"><xref:System.Security.SecureString>类及其成员对 COM 不可见。</span><span class="sxs-lookup"><span data-stu-id="d1081-115">The <xref:System.Security.SecureString> class and its members are not visible to COM.</span></span> <span data-ttu-id="d1081-116">有关详细信息，请参阅 <xref:System.Runtime.InteropServices.ComVisibleAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d1081-116">For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</span></span>  
  
 <span data-ttu-id="d1081-117">本部分内容：</span><span class="sxs-lookup"><span data-stu-id="d1081-117">In this section:</span></span>  
  
 <span data-ttu-id="d1081-118">[String 与 SecureString](#vsString) </span><span class="sxs-lookup"><span data-stu-id="d1081-118">[String vs. SecureString](#vsString) </span></span>  
 <span data-ttu-id="d1081-119">[SecureString 操作](#Ops) </span><span class="sxs-lookup"><span data-stu-id="d1081-119">[SecureString operations](#Ops) </span></span>  
 <span data-ttu-id="d1081-120">[SecureString 和互操作](#interop) </span><span class="sxs-lookup"><span data-stu-id="d1081-120">[SecureString and interop](#interop) </span></span>  
 [<span data-ttu-id="d1081-121">SecureString 的安全程度如何？</span><span class="sxs-lookup"><span data-stu-id="d1081-121">How secure is  SecureString?</span></span>](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a><span data-ttu-id="d1081-122">String 与 SecureString</span><span class="sxs-lookup"><span data-stu-id="d1081-122">String versus SecureString</span></span>  
 <span data-ttu-id="d1081-123">类的实例 <xref:System.String?displayProperty=nameWithType> 是不可变的，并且在不再需要时不能以编程方式计划进行垃圾回收; 也就是说，实例在创建后是只读的，并且不能预测将从计算机内存中删除该实例的时间。</span><span class="sxs-lookup"><span data-stu-id="d1081-123">An instance of the <xref:System.String?displayProperty=nameWithType> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</span></span> <span data-ttu-id="d1081-124">因为 <xref:System.String?displayProperty=nameWithType> 实例是不可变的，所以看起来修改现有实例的操作实际上会创建它要操作的副本。</span><span class="sxs-lookup"><span data-stu-id="d1081-124">Because <xref:System.String?displayProperty=nameWithType> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</span></span> <span data-ttu-id="d1081-125">因此，如果 <xref:System.String> 对象包含敏感信息（如密码、信用卡号或个人数据），则在使用该信息时可能会出现一种风险，因为应用程序无法从计算机内存中删除数据。</span><span class="sxs-lookup"><span data-stu-id="d1081-125">Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</span></span>  
  
 <span data-ttu-id="d1081-126"><xref:System.Security.SecureString>对象类似于 <xref:System.String> 对象，因为它具有一个文本值。</span><span class="sxs-lookup"><span data-stu-id="d1081-126">A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value.</span></span> <span data-ttu-id="d1081-127">但是，对象的值 <xref:System.Security.SecureString> 固定在内存中，可能会使用基础操作系统提供的保护机制（如加密），直到应用程序将其标记为只读，并且可以通过调用方法的应用程序 <xref:System.Security.SecureString.Dispose%2A> 或 .NET Framework 垃圾回收器将其从计算机内存中删除。</span><span class="sxs-lookup"><span data-stu-id="d1081-127">However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.</span></span>  
  
 <span data-ttu-id="d1081-128">有关类的限制的讨论 <xref:System.Security.SecureString> ，请参阅 " [安全设置 SecureString"](#HowSecure) 部分。</span><span class="sxs-lookup"><span data-stu-id="d1081-128">For a discussion of the limitations of the <xref:System.Security.SecureString> class, see the [How secure is  SecureString?](#HowSecure) section.</span></span>  
  
 [<span data-ttu-id="d1081-129">返回页首</span><span class="sxs-lookup"><span data-stu-id="d1081-129">Back to top</span></span>](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a><span data-ttu-id="d1081-130">SecureString 操作</span><span class="sxs-lookup"><span data-stu-id="d1081-130">SecureString operations</span></span>  
 <span data-ttu-id="d1081-131"><xref:System.Security.SecureString>类包括允许你执行以下操作的成员：</span><span class="sxs-lookup"><span data-stu-id="d1081-131">The <xref:System.Security.SecureString> class includes members that allow you to do the following:</span></span>  
  
 <span data-ttu-id="d1081-132">实例化 <xref:System.Security.SecureString> 对象</span><span class="sxs-lookup"><span data-stu-id="d1081-132">Instantiate a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="d1081-133"><xref:System.Security.SecureString>通过调用对象的无参数构造函数来实例化对象。</span><span class="sxs-lookup"><span data-stu-id="d1081-133">You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor.</span></span>  
  
 <span data-ttu-id="d1081-134">向对象添加字符 <xref:System.Security.SecureString></span><span class="sxs-lookup"><span data-stu-id="d1081-134">Add characters to a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="d1081-135">可以 <xref:System.Security.SecureString> 通过调用对象的 <xref:System.Security.SecureString.AppendChar%2A> 或方法，一次将一个字符添加到对象 <xref:System.Security.SecureString.InsertAt%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-135">You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d1081-136"><xref:System.Security.SecureString>永远不应从构造对象 <xref:System.String> ，因为敏感数据已受到不可变类的内存持久性后果的限制 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-136">A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class.</span></span> <span data-ttu-id="d1081-137">构造对象的最佳方式 <xref:System.Security.SecureString> 是从非实时的非托管源（例如 <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> 方法）。</span><span class="sxs-lookup"><span data-stu-id="d1081-137">The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d1081-138">从对象中删除字符 <xref:System.Security.SecureString></span><span class="sxs-lookup"><span data-stu-id="d1081-138">Remove characters from a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="d1081-139">可以通过调用方法来替换单个字符 <xref:System.Security.SecureString.SetAt%2A> 、通过调用方法删除单个字符 <xref:System.Security.SecureString.RemoveAt%2A> 或 <xref:System.Security.SecureString> 通过调用方法从实例中移除所有字符  <xref:System.Security.SecureString.Clear%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-139">You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="d1081-140">使 <xref:System.Security.SecureString> 对象成为只读</span><span class="sxs-lookup"><span data-stu-id="d1081-140">Make the <xref:System.Security.SecureString> object read-only</span></span>  
 <span data-ttu-id="d1081-141">定义对象表示的字符串后 <xref:System.Security.SecureString> ，调用其  <xref:System.Security.SecureString.MakeReadOnly%2A> 方法，使字符串成为只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-141">Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only.</span></span>  
  
 <span data-ttu-id="d1081-142">获取有关对象的信息 <xref:System.Security.SecureString></span><span class="sxs-lookup"><span data-stu-id="d1081-142">Get information about the <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="d1081-143"><xref:System.Security.SecureString>类只包含两个提供有关字符串的信息的成员：其 <xref:System.Security.SecureString.Length%2A> 属性，指示字符串中 UTF16 编码的代码单元的数目; 以及 <xref:System.Security.SecureString.IsReadOnly%2A> 指示该实例是否为只读的方法。</span><span class="sxs-lookup"><span data-stu-id="d1081-143">The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only.</span></span>  
  
 <span data-ttu-id="d1081-144">释放分配给实例的内存 <xref:System.Security.SecureString></span><span class="sxs-lookup"><span data-stu-id="d1081-144">Release the memory allocated to the <xref:System.Security.SecureString> instance</span></span>  
 <span data-ttu-id="d1081-145">由于 <xref:System.Security.SecureString> 实现 <xref:System.IDisposable> 接口，因此可以通过调用方法释放其内存 <xref:System.Security.SecureString.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-145">Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="d1081-146"><xref:System.Security.SecureString>类没有任何成员用于检查、比较或转换的值 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-146">The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="d1081-147">由于缺少这类成员，因此有助于保护实例的值不被意外或恶意公开。</span><span class="sxs-lookup"><span data-stu-id="d1081-147">The absence of such members helps protect the value of the instance from accidental or malicious exposure.</span></span> <span data-ttu-id="d1081-148">使用类的适当成员（ <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> 如 <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> 方法）来操作对象的值 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-148">Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 <span data-ttu-id="d1081-149">.NET Framework 类库通常 <xref:System.Security.SecureString> 以下列方式使用实例：</span><span class="sxs-lookup"><span data-stu-id="d1081-149">The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:</span></span>  
  
-   <span data-ttu-id="d1081-150">使用 <xref:System.Diagnostics.ProcessStartInfo> 结构或通过调用 <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> 具有类型的参数的方法的重载，为进程提供密码信息 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-150">To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> method that has a parameter of type <xref:System.Security.SecureString>.</span></span>  
  
-   <span data-ttu-id="d1081-151">如果为，则通过调用 <xref:System.Net.NetworkCredential> 具有类型的参数 <xref:System.Security.SecureString> 或使用属性的类构造函数来提供网络密码信息 <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-151">To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="d1081-152">通过调用 <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> 构造函数或检索属性的值，为 SQL Server 身份验证提供密码信息 <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-152">To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="d1081-153">将字符串传递到非托管代码。</span><span class="sxs-lookup"><span data-stu-id="d1081-153">To pass a string to unmanaged code.</span></span> <span data-ttu-id="d1081-154">有关详细信息，请参阅 [SecureString and 互操作](#interop) 部分。</span><span class="sxs-lookup"><span data-stu-id="d1081-154">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 [<span data-ttu-id="d1081-155">返回页首</span><span class="sxs-lookup"><span data-stu-id="d1081-155">Back to top</span></span>](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a><span data-ttu-id="d1081-156">SecureString 和互操作</span><span class="sxs-lookup"><span data-stu-id="d1081-156">SecureString and interop</span></span>  
 <span data-ttu-id="d1081-157">由于操作系统不直接支持 <xref:System.Security.SecureString> ，因此必须先将对象的值转换 <xref:System.Security.SecureString> 为所需的字符串类型，然后才能将该字符串传递给本机方法。</span><span class="sxs-lookup"><span data-stu-id="d1081-157">Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.</span></span>  <span data-ttu-id="d1081-158"><xref:System.Runtime.InteropServices.Marshal>类具有五种执行此操作的方法：</span><span class="sxs-lookup"><span data-stu-id="d1081-158">The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:</span></span>  
  
-   <span data-ttu-id="d1081-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>，它将 <xref:System.Security.SecureString> 字符串值转换为二进制字符串 (BSTR) COM 识别。</span><span class="sxs-lookup"><span data-stu-id="d1081-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM.</span></span>  
  
-   <span data-ttu-id="d1081-160"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> 和 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType> ，它将 <xref:System.Security.SecureString> 字符串值复制到非托管内存中的 ANSI 字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-160"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory.</span></span>  
  
-   <span data-ttu-id="d1081-161"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> 和 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> ，它将 <xref:System.Security.SecureString> 字符串值复制到非托管内存中的 Unicode 字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-161"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory.</span></span>  
  
 <span data-ttu-id="d1081-162">其中每种方法在非托管内存中创建一个明文字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-162">Each of these methods creates a clear-text string in unmanaged memory.</span></span> <span data-ttu-id="d1081-163">开发人员负责在不再需要该内存时将其从零开始，并将其释放。</span><span class="sxs-lookup"><span data-stu-id="d1081-163">It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</span></span> <span data-ttu-id="d1081-164">每个字符串转换和内存分配方法都有一个对应的方法，以使分配的内存为零并释放已分配的内存：</span><span class="sxs-lookup"><span data-stu-id="d1081-164">Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:</span></span>  
  
|<span data-ttu-id="d1081-165">分配和转换方法</span><span class="sxs-lookup"><span data-stu-id="d1081-165">Allocation and conversion method</span></span>|<span data-ttu-id="d1081-166">零和免费方法</span><span class="sxs-lookup"><span data-stu-id="d1081-166">Zero and free method</span></span>|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [<span data-ttu-id="d1081-167">返回页首</span><span class="sxs-lookup"><span data-stu-id="d1081-167">Back to top</span></span>](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a><span data-ttu-id="d1081-168">SecureString 的安全程度如何？</span><span class="sxs-lookup"><span data-stu-id="d1081-168">How secure is SecureString?</span></span>  
 <span data-ttu-id="d1081-169">正确创建后， <xref:System.Security.SecureString> 实例提供的数据保护比更多 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-169">When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>.</span></span> <span data-ttu-id="d1081-170">当从一个字符的时间源创建字符串时，将 <xref:System.String> 在内存中创建多个中间，而  <xref:System.Security.SecureString> 只创建一个实例。</span><span class="sxs-lookup"><span data-stu-id="d1081-170">When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.</span></span>  <span data-ttu-id="d1081-171">对象的垃圾回收 <xref:System.String> 是不确定的。</span><span class="sxs-lookup"><span data-stu-id="d1081-171">Garbage collection of <xref:System.String> objects  is non-deterministic.</span></span> <span data-ttu-id="d1081-172">此外，由于未固定其内存，垃圾回收器将 <xref:System.String> 在移动和压缩内存时创建值的其他副本。</span><span class="sxs-lookup"><span data-stu-id="d1081-172">In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory.</span></span> <span data-ttu-id="d1081-173">相反，分配给对象的内存 <xref:System.Security.SecureString> 将固定，并且可以通过调用方法来释放内存 <xref:System.Security.SecureString.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-173">In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="d1081-174">虽然实例中存储的数据 <xref:System.Security.SecureString> 比实例中存储的数据更安全 <xref:System.String> ，但对实例的安全有很大的限制 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-174">Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is.</span></span> <span data-ttu-id="d1081-175">这些方法包括：</span><span class="sxs-lookup"><span data-stu-id="d1081-175">These include:</span></span>  
  
 <span data-ttu-id="d1081-176">平台</span><span class="sxs-lookup"><span data-stu-id="d1081-176">Platform</span></span>  
 <span data-ttu-id="d1081-177">在 Windows 操作系统上， <xref:System.Security.SecureString> 实例的内部字符数组的内容已加密。</span><span class="sxs-lookup"><span data-stu-id="d1081-177">On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array are encrypted.</span></span> <span data-ttu-id="d1081-178">但是，无论是否缺少 Api 或密钥管理问题，加密在所有平台上都不可用。</span><span class="sxs-lookup"><span data-stu-id="d1081-178">However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</span></span> <span data-ttu-id="d1081-179">由于此平台依赖项，不 <xref:System.Security.SecureString> 会对非 Windows 平台上的内部存储进行加密。</span><span class="sxs-lookup"><span data-stu-id="d1081-179">Because of this platform dependency, <xref:System.Security.SecureString> does not encrypt the internal storage on non-Windows platform.</span></span> <span data-ttu-id="d1081-180">在这些平台上使用其他技术来提供附加保护。</span><span class="sxs-lookup"><span data-stu-id="d1081-180">Other techniques are used on those platforms to provide additional protection.</span></span>
  
 <span data-ttu-id="d1081-181">持续时间</span><span class="sxs-lookup"><span data-stu-id="d1081-181">Duration</span></span>  
 <span data-ttu-id="d1081-182">即使 <xref:System.Security.SecureString> 实现能够利用加密，分配给实例的纯文本 <xref:System.Security.SecureString> 也可能会在不同的时间公开：</span><span class="sxs-lookup"><span data-stu-id="d1081-182">Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:</span></span>  
  
-   <span data-ttu-id="d1081-183">由于 Windows 不在操作系统级别提供安全字符串实现，因此 .NET Framework 仍必须将安全字符串值转换为纯文本表示形式才能使用。</span><span class="sxs-lookup"><span data-stu-id="d1081-183">Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</span></span>  
  
-   <span data-ttu-id="d1081-184">每当使用或等方法修改安全字符串的值时，都 <xref:System.Security.SecureString.AppendChar%2A> <xref:System.Security.SecureString.RemoveAt%2A> 必须将其解密 (也就是说，转换回纯文本) ，修改后再次加密。</span><span class="sxs-lookup"><span data-stu-id="d1081-184">Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (that is, converted back to plain text), modified, and then encrypted again.</span></span>  
  
-   <span data-ttu-id="d1081-185">如果在互操作调用中使用安全字符串，则必须将其转换为 ANSI 字符串、Unicode 字符串或 (BSTR) 的二进制字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-185">If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</span></span> <span data-ttu-id="d1081-186">有关详细信息，请参阅 [SecureString and 互操作](#interop) 部分。</span><span class="sxs-lookup"><span data-stu-id="d1081-186">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 <span data-ttu-id="d1081-187"><xref:System.Security.SecureString>与类相比，实例的值公开的时间间隔只需缩短 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-187">The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class.</span></span>  
  
 <span data-ttu-id="d1081-188">存储与使用情况</span><span class="sxs-lookup"><span data-stu-id="d1081-188">Storage versus usage</span></span>  
 <span data-ttu-id="d1081-189">更常见的情况是， <xref:System.Security.SecureString> 类为应受到保护或保密的字符串值定义存储机制。</span><span class="sxs-lookup"><span data-stu-id="d1081-189">More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential.</span></span> <span data-ttu-id="d1081-190">但是，在 .NET Framework 之外，不支持使用机制 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-190">However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="d1081-191">这意味着，必须将安全字符串转换为可用形式 (通常为明文形式) 可以被其目标识别，并且必须在用户空间中进行解密和转换。</span><span class="sxs-lookup"><span data-stu-id="d1081-191">This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</span></span>  
  
 <span data-ttu-id="d1081-192">总体而言， <xref:System.Security.SecureString> 比 <xref:System.String> 它限制敏感字符串数据的公开更安全。</span><span class="sxs-lookup"><span data-stu-id="d1081-192">Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data.</span></span> <span data-ttu-id="d1081-193">但是，这些字符串可能仍会公开给有权访问原始内存的任何进程或操作，例如，在主计算机上运行的恶意进程、进程转储或用户可查看的交换文件。</span><span class="sxs-lookup"><span data-stu-id="d1081-193">However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</span></span> <span data-ttu-id="d1081-194"><xref:System.Security.SecureString>建议的替代方法是对存储在进程外部的凭据使用不透明的句柄，而不是使用来保护密码。</span><span class="sxs-lookup"><span data-stu-id="d1081-194">Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</span></span>  
  
 [<span data-ttu-id="d1081-195">返回页首</span><span class="sxs-lookup"><span data-stu-id="d1081-195">Back to top</span></span>](#top)  
  
   
  
## Examples  
 <span data-ttu-id="d1081-196">下面的示例演示如何使用 <xref:System.Security.SecureString> 保护用户的密码，以将其用作凭据以启动新进程。</span><span class="sxs-lookup"><span data-stu-id="d1081-196">The following example demonstrates how to use a <xref:System.Security.SecureString> to secure a user's password for use as a credential to start a new process.</span></span>  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d1081-197">初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d1081-197">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1081-198">初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d1081-198">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d1081-199">下面的示例使用默认 (或无参数) 构造函数来实例化新的 <xref:System.Security.SecureString> 对象。</span><span class="sxs-lookup"><span data-stu-id="d1081-199">The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object.</span></span> <span data-ttu-id="d1081-200">然后，它调用 <xref:System.Security.SecureString.AppendChar%2A> 方法以向其添加字符数组。</span><span class="sxs-lookup"><span data-stu-id="d1081-200">It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 <span data-ttu-id="d1081-201">下面的示例 <xref:System.Security.SecureString> 从对象的值创建对象 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-201">The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="d1081-202">保护或取消保护此实例的值时出错。</span><span class="sxs-lookup"><span data-stu-id="d1081-202">An error occurred while protecting or unprotecting the value of this instance.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d1081-203">此平台上不支持此操作。</span><span class="sxs-lookup"><span data-stu-id="d1081-203">This operation is not supported on this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d1081-204">指向 <see cref="T:System.Char" /> 对象的数组的指针。</span><span class="sxs-lookup"><span data-stu-id="d1081-204">A pointer to an array of <see cref="T:System.Char" /> objects.</span></span></param>
        <param name="length"><span data-ttu-id="d1081-205">要包括到新实例中的 <paramref name="value" /> 的元素数。</span><span class="sxs-lookup"><span data-stu-id="d1081-205">The number of elements of <paramref name="value" /> to include in the new instance.</span></span></param>
        <summary><span data-ttu-id="d1081-206">用 <see cref="T:System.Char" /> 对象的子数组初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d1081-206">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class from a subarray of <see cref="T:System.Char" /> objects.</span></span>  
  
<span data-ttu-id="d1081-207">此构造函数不符合 CLS。</span><span class="sxs-lookup"><span data-stu-id="d1081-207">This constructor is not CLS-compliant.</span></span> <span data-ttu-id="d1081-208">符合 CLS 的替代方法是 <see cref="M:System.Security.SecureString.#ctor" />。</span><span class="sxs-lookup"><span data-stu-id="d1081-208">The CLS-compliant alternative is <see cref="M:System.Security.SecureString.#ctor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-209">此构造函数将新的 <xref:System.Security.SecureString> 对象初始化为指定的中的字符数 `value` `length` ; 然后对实例的值进行加密。</span><span class="sxs-lookup"><span data-stu-id="d1081-209">This constructor initializes the new <xref:System.Security.SecureString> object to the number of characters in `value` specified by `length`; the value of the instance is then encrypted.</span></span>  
  
 <span data-ttu-id="d1081-210">在 c # 中，此构造函数仅在不安全代码的上下文中定义。</span><span class="sxs-lookup"><span data-stu-id="d1081-210">In C#, this constructor is defined only in the context of unsafe code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1081-211">下面的示例通过将新 <xref:System.Security.SecureString> 对象的构造函数传递到字符数组来实例化该对象。</span><span class="sxs-lookup"><span data-stu-id="d1081-211">The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d1081-212"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d1081-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d1081-213"><paramref name="length" /> 小于零或大于 65,536。</span><span class="sxs-lookup"><span data-stu-id="d1081-213"><paramref name="length" /> is less than zero or greater than 65,536.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="d1081-214">保护或取消保护此安全字符串的值时出错。</span><span class="sxs-lookup"><span data-stu-id="d1081-214">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d1081-215">此平台上不支持此操作。</span><span class="sxs-lookup"><span data-stu-id="d1081-215">This operation is not supported on this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="d1081-216">要追加到此安全字符串的字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-216">A character to append to this secure string.</span></span></param>
        <summary><span data-ttu-id="d1081-217">在当前安全字符串的末尾追加一个字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-217">Appends a character to the end of the current secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-218">如果实现使用保护机制（如加密），则此安全字符串的值（如果有）不受保护;追加了，则 `c` 安全字符串的新值将被重新保护。</span><span class="sxs-lookup"><span data-stu-id="d1081-218">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; `c` is appended; then the new value of the secure string is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1081-219">下面的示例演示了 <xref:System.Security.SecureString.AppendChar%2A> 、 <xref:System.Security.SecureString.InsertAt%2A> 、 <xref:System.Security.SecureString.RemoveAt%2A> 、 <xref:System.Security.SecureString.SetAt%2A> 和方法如何 <xref:System.Security.SecureString.Clear%2A> 影响对象的值 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-219">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="d1081-220">下面的示例演示如何 <xref:System.Security.SecureString.AppendChar%2A> 使用和 <xref:System.Security.SecureString.RemoveAt%2A> 方法收集密码中的字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-220">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-221">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-221">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1081-222">此安全字符串是只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-222">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d1081-223">执行此操作将使此安全字符串的长度超过 65,536 个字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-223">Performing this operation would make the length of this secure string greater than 65,536 characters.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="d1081-224">保护或取消保护此安全字符串的值时出错。</span><span class="sxs-lookup"><span data-stu-id="d1081-224">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1081-225">删除当前安全字符串的值。</span><span class="sxs-lookup"><span data-stu-id="d1081-225">Deletes the value of the current secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-226">包含此安全字符串的值的计算机内存为零，然后此安全字符串的值的长度将设置为零。</span><span class="sxs-lookup"><span data-stu-id="d1081-226">The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1081-227">下面的示例演示了 <xref:System.Security.SecureString.AppendChar%2A> 、 <xref:System.Security.SecureString.InsertAt%2A> 、 <xref:System.Security.SecureString.RemoveAt%2A> 、 <xref:System.Security.SecureString.SetAt%2A> 和方法如何 <xref:System.Security.SecureString.Clear%2A> 影响对象的值 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-227">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-228">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-228">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1081-229">此安全字符串是只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-229">This secure string is read-only.</span></span></exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1081-230">创建当前安全字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="d1081-230">Creates a copy of the current secure string.</span></span></summary>
        <returns><span data-ttu-id="d1081-231">此安全字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="d1081-231">A duplicate of this secure string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-232">如果的实例 <xref:System.Security.SecureString> 被标记为只读，则该实例的副本将不是只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-232">If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-233">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-233">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="d1081-234">保护或取消保护此安全字符串的值时出错。</span><span class="sxs-lookup"><span data-stu-id="d1081-234">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1081-235">释放由当前 <see cref="T:System.Security.SecureString" /> 对象使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="d1081-235">Releases all resources used by the current <see cref="T:System.Security.SecureString" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-236"><xref:System.Security.SecureString.Dispose%2A>方法将二进制零写入到包含此对象的值的已分配内存 <xref:System.Security.SecureString> ，然后释放已分配的内存。</span><span class="sxs-lookup"><span data-stu-id="d1081-236">The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory.</span></span>  
  
 <span data-ttu-id="d1081-237">有关详细信息，请参阅 [垃圾回收](/dotnet/standard/garbage-collection/)。</span><span class="sxs-lookup"><span data-stu-id="d1081-237">For more information, see [Garbage Collection](/dotnet/standard/garbage-collection/).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="d1081-238">插入参数 <paramref name="c" /> 的索引位置。</span><span class="sxs-lookup"><span data-stu-id="d1081-238">The index position where parameter <paramref name="c" /> is inserted.</span></span></param>
        <param name="c"><span data-ttu-id="d1081-239">要插入的字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-239">The character to insert.</span></span></param>
        <summary><span data-ttu-id="d1081-240">在此安全字符串中的指定索引位置插入一个字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-240">Inserts a character in this secure string at the specified index position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-241">索引从零开始;此安全字符串中的第一个字符的索引位置为零。</span><span class="sxs-lookup"><span data-stu-id="d1081-241">The index is zero-based; the first character in this secure string is at index position zero.</span></span>  
  
 <span data-ttu-id="d1081-242">如果实现使用保护机制（如加密），则安全字符串的值（如果有）不受保护; `c` 插入到指定的索引位置，然后重新保护新值。</span><span class="sxs-lookup"><span data-stu-id="d1081-242">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected.</span></span> <span data-ttu-id="d1081-243"><xref:System.Security.SecureString.InsertAt%2A> <xref:System.Security.SecureString.AppendChar%2A> 如果的 `index` 参数 <xref:System.Security.SecureString.InsertAt%2A> 设置为此实例的长度，则方法将生成与方法相同的结果，这会在安全字符串的末尾插入一个字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-243">The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1081-244">下面的示例演示了 <xref:System.Security.SecureString.AppendChar%2A> 、 <xref:System.Security.SecureString.InsertAt%2A> 、 <xref:System.Security.SecureString.RemoveAt%2A> 、 <xref:System.Security.SecureString.SetAt%2A> 和方法如何 <xref:System.Security.SecureString.Clear%2A> 影响对象的值 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-244">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-245">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-245">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1081-246">此安全字符串是只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-246">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d1081-247"><paramref name="index" /> 小于零，或大于此安全字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="d1081-247"><paramref name="index" /> is less than zero, or greater than the length of this secure string.</span></span>  
  
<span data-ttu-id="d1081-248">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d1081-248">-or-</span></span> 
<span data-ttu-id="d1081-249">执行此操作将使此安全字符串的长度超过 65,536 个字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-249">Performing this operation would make the length of this secure string greater than 65,536 characters.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="d1081-250">保护或取消保护此安全字符串的值时出错。</span><span class="sxs-lookup"><span data-stu-id="d1081-250">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1081-251">指示此安全字符串是否标记为只读。</span><span class="sxs-lookup"><span data-stu-id="d1081-251">Indicates whether this secure string is marked read-only.</span></span></summary>
        <returns><span data-ttu-id="d1081-252">如果此安全字符串标记为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d1081-252"><see langword="true" /> if this secure string is marked read-only; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-253">在 <xref:System.Security.SecureString> 方法将实例标记为只读后 <xref:System.Security.SecureString.MakeReadOnly%2A> ，任何修改实例值的尝试都将引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-253">After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="d1081-254">使用 <xref:System.Security.SecureString.IsReadOnly%2A> 方法来测试是否 <xref:System.Security.SecureString> 为只读，然后再尝试修改。</span><span class="sxs-lookup"><span data-stu-id="d1081-254">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-255">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-255">This secure string has already been disposed.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d1081-256">获取当前安全字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="d1081-256">Gets the number of characters in the current secure string.</span></span></summary>
        <value><span data-ttu-id="d1081-257">此安全字符串中 <see cref="T:System.Char" /> 对象的数目。</span><span class="sxs-lookup"><span data-stu-id="d1081-257">The number of <see cref="T:System.Char" /> objects in this secure string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-258"><xref:System.Security.SecureString.Length%2A>属性返回 <xref:System.Char> 此实例中的对象数，而不是 Unicode 字符数。</span><span class="sxs-lookup"><span data-stu-id="d1081-258">The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="d1081-259">Unicode 字符可能由多个 <xref:System.Char> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="d1081-259">A Unicode character might be represented by more than one <xref:System.Char> object.</span></span>  
  
 <span data-ttu-id="d1081-260">实例的最大长度 <xref:System.Security.SecureString> 为65536个字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-260">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-261">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-261">This secure string has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1081-262">将此安全字符串的文本值设置为只读。</span><span class="sxs-lookup"><span data-stu-id="d1081-262">Makes the text value of this secure string read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-263">使用构造函数初始化类的实例的文本值 <xref:System.Security.SecureString> <xref:System.Security.SecureString.%23ctor%2A> ，并使用 <xref:System.Security.SecureString.Clear%2A> 、 <xref:System.Security.SecureString.RemoveAt%2A> 、、 <xref:System.Security.SecureString.SetAt%2A> <xref:System.Security.SecureString.InsertAt%2A> 和 <xref:System.Security.SecureString.AppendChar%2A> 方法修改该值。</span><span class="sxs-lookup"><span data-stu-id="d1081-263">Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods.</span></span>  
  
 <span data-ttu-id="d1081-264">进行最终修改后，使用方法将实例的 <xref:System.Security.SecureString.MakeReadOnly%2A> 值变为不可变 (只读) 。</span><span class="sxs-lookup"><span data-stu-id="d1081-264">After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only).</span></span> <span data-ttu-id="d1081-265">将该值标记为只读后，对其进行修改的任何进一步尝试都将引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-265">After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="d1081-266">调用的效果 <xref:System.Security.SecureString.MakeReadOnly%2A> 是永久性的，因为 <xref:System.Security.SecureString> 类不提供任何方法来使安全字符串再次被修改。</span><span class="sxs-lookup"><span data-stu-id="d1081-266">The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again.</span></span> <span data-ttu-id="d1081-267">使用 <xref:System.Security.SecureString.IsReadOnly%2A> 方法来测试实例是否 <xref:System.Security.SecureString> 为只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-267">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1081-268">下面的示例演示如何 <xref:System.Security.SecureString.AppendChar%2A> 使用和 <xref:System.Security.SecureString.RemoveAt%2A> 方法收集密码中的字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-268">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span> <span data-ttu-id="d1081-269">密码在收集后变为只读。</span><span class="sxs-lookup"><span data-stu-id="d1081-269">After the password is collected, it is made read-only.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-270">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-270">This secure string has already been disposed.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="d1081-271">此安全字符串中的字符的索引位置。</span><span class="sxs-lookup"><span data-stu-id="d1081-271">The index position of a character in this secure string.</span></span></param>
        <summary><span data-ttu-id="d1081-272">从此安全字符串中的指定索引位置移除字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-272">Removes the character at the specified index position from this secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-273">索引从零开始;此实例中的第一个字符的索引位置为零。</span><span class="sxs-lookup"><span data-stu-id="d1081-273">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="d1081-274">如果实现使用保护机制（如加密），则此安全字符串的值（如果有）不受保护;移除指定索引位置处的字符;然后，重新保护新值。</span><span class="sxs-lookup"><span data-stu-id="d1081-274">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1081-275">下面的示例演示了 <xref:System.Security.SecureString.AppendChar%2A> 、 <xref:System.Security.SecureString.InsertAt%2A> 、 <xref:System.Security.SecureString.RemoveAt%2A> 、 <xref:System.Security.SecureString.SetAt%2A> 和方法如何 <xref:System.Security.SecureString.Clear%2A> 影响对象的值 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-275">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="d1081-276">下面的示例演示如何 <xref:System.Security.SecureString.AppendChar%2A> 使用和 <xref:System.Security.SecureString.RemoveAt%2A> 方法收集密码中的字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-276">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-277">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-277">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1081-278">此安全字符串是只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-278">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d1081-279"><paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="d1081-279"><paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="d1081-280">保护或取消保护此安全字符串的值时出错。</span><span class="sxs-lookup"><span data-stu-id="d1081-280">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="d1081-281">此安全字符串中的某个现有字符的索引位置。</span><span class="sxs-lookup"><span data-stu-id="d1081-281">The index position of an existing character in this secure string</span></span></param>
        <param name="c"><span data-ttu-id="d1081-282">替换现有字符的字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-282">A character that replaces the existing character.</span></span></param>
        <summary><span data-ttu-id="d1081-283">将指定索引位置上的现有字符替换为其他字符。</span><span class="sxs-lookup"><span data-stu-id="d1081-283">Replaces the existing character at the specified index position with another character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1081-284">索引从零开始;此实例中的第一个字符的索引位置为零。</span><span class="sxs-lookup"><span data-stu-id="d1081-284">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="d1081-285">如果实现使用保护机制（如加密），则安全字符串的值（如果有）不受保护; `c` 将分配给指定的索引位置，然后重新保护新的值。</span><span class="sxs-lookup"><span data-stu-id="d1081-285">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is assigned to the specified index position; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1081-286">下面的示例演示了 <xref:System.Security.SecureString.AppendChar%2A> 、 <xref:System.Security.SecureString.InsertAt%2A> 、 <xref:System.Security.SecureString.RemoveAt%2A> 、 <xref:System.Security.SecureString.SetAt%2A> 和方法如何 <xref:System.Security.SecureString.Clear%2A> 影响对象的值 <xref:System.Security.SecureString> 。</span><span class="sxs-lookup"><span data-stu-id="d1081-286">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1081-287">已处置此安全字符串。</span><span class="sxs-lookup"><span data-stu-id="d1081-287">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1081-288">此安全字符串是只读的。</span><span class="sxs-lookup"><span data-stu-id="d1081-288">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d1081-289"><paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="d1081-289"><paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="d1081-290">保护或取消保护此安全字符串的值时出错。</span><span class="sxs-lookup"><span data-stu-id="d1081-290">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
