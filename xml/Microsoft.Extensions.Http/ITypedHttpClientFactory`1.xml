<Type Name="ITypedHttpClientFactory&lt;TClient&gt;" FullName="Microsoft.Extensions.Http.ITypedHttpClientFactory&lt;TClient&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21b36d1fd81cd1eacbd28f85ede023fcab5d86a8" /><Meta Name="ms.sourcegitcommit" Value="3001e6bfbacb09c47be86e2ade5b0c2bd91bb0cb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/31/2020" /><Meta Name="ms.locfileid" Value="87467754" /></Metadata><TypeSignature Language="C#" Value="public interface ITypedHttpClientFactory&lt;TClient&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypedHttpClientFactory`1&lt;TClient&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypedHttpClientFactory(Of TClient)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TClient&gt;&#xA;public interface class ITypedHttpClientFactory" />
  <TypeSignature Language="F#" Value="type ITypedHttpClientFactory&lt;'Client&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TClient" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TClient">要创建的类型化客户端的类型。</typeparam>
    <summary>组件的工厂抽象，它可使用自定义配置为给定逻辑名称创建类型化客户端实例。</summary>
    <remarks><para>
<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />是支持和功能的基础 <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)" /> 结构 <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" /> 。 不应直接在应用程序代码中使用此类型， <see cref="M:System.IServiceProvider.GetService(System.Type)" /> 而应改用来检索类型化客户端。
             </para>
      <para>
<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />可以通过调用在中注册默认值 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> 。
默认情况下， <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> 将在服务集合中将其注册为单独的开放通用服务。
             </para>
      <para>
默认 <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> 使用类型激活来创建类型化客户端实例。 不会直接从中检索类型化客户端类型 <see cref="T:System.IServiceProvider" /> 。 有关详细信息，请参阅<see cref="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])" />。
             </para></remarks>
    <example>此示例演示用于定义类型化客户端类的基本模式。
             <code>
             class ExampleClient
             {
                 private readonly HttpClient _httpClient;
                 private readonly ILogger _logger;
            
                 // typed clients can use constructor injection to access additional services
                 public ExampleClient(HttpClient httpClient, ILogger&lt;ExampleClient&gt; logger)
                 {
                     _httpClient = httpClient;
                     _logger = logger;     
                 }
            
                 // typed clients can expose the HttpClient for application code to call directly
                 public HttpClient HttpClient =&gt; _httpClient;
            
                 // typed clients can also define methods that abstract usage of the HttpClient
                 public async Task SendHelloRequest()
                 {
                     var response = await _httpClient.GetAsync("/helloworld");
                     response.EnsureSuccessStatusCode();
                 }
             }
             </code></example>
    <example>此示例演示如何从 ASP.NET Core 中间件使用类型化客户端。
             <code>
             // in Startup.cs
             public void Configure(IApplicationBuilder app, ExampleClient exampleClient)
             {
                 app.Run(async (context) =&gt;
                 {
                     var response = await _exampleClient.GetAsync("/helloworld");
                     await context.Response.WriteAsync("Remote server said: ");
                     await response.Content.CopyToAsync(context.Response.Body);
                 });
             }
             </code></example>
    <example>此示例演示如何从 ASP.NET Core MVC 控制器使用类型化客户端。
             <code>
             // in Controllers/HomeController.cs
             public class HomeController : ControllerBase(IApplicationBuilder app, ExampleClient exampleClient)
             {
                 private readonly ExampleClient _exampleClient;
            
                 public HomeController(ExampleClient exampleClient)
                 {
                     _exampleClient = exampleClient;
                 }
            
                 public async Task&lt;IActionResult&gt; Index()
                 {
                     var response = await _exampleClient.GetAsync("/helloworld");
                     var text = await response.Content.ReadAsStringAsync();
                     return Content("Remote server said: " + text, "text/plain");
                 };
             }
             </code></example>
  </Docs>
  <Members>
    <Member MemberName="CreateClient">
      <MemberSignature Language="C#" Value="public TClient CreateClient (System.Net.Http.HttpClient httpClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TClient CreateClient(class System.Net.Http.HttpClient httpClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.ITypedHttpClientFactory`1.CreateClient(System.Net.Http.HttpClient)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateClient (httpClient As HttpClient) As TClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TClient CreateClient(System::Net::Http::HttpClient ^ httpClient);" />
      <MemberSignature Language="F#" Value="abstract member CreateClient : System.Net.Http.HttpClient -&gt; 'Client" Usage="iTypedHttpClientFactory.CreateClient httpClient" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpClient" Type="System.Net.Http.HttpClient" />
      </Parameters>
      <Docs>
        <param name="httpClient"><see cref="T:System.Net.Http.IHttpClientFactory" /> 为与 <typeparamref name="TClient" /> 关联的已命名的客户端创建的 <see cref="T:System.Net.Http.HttpClient" />。</param>
        <summary>对于关联的 <see cref="T:System.Net.Http.HttpClient" />，创建类型化客户端。</summary>
        <returns><typeparamref name="TClient" /> 的一个实例。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
