<Type Name="ListDictionary" FullName="System.Collections.Specialized.ListDictionary">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed5aeae1ce7a48bce46f7b7bedb097a4e44215f2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83918112" /></Metadata><TypeSignature Language="C#" Value="public class ListDictionary : System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListDictionary extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.ListDictionary" />
  <TypeSignature Language="VB.NET" Value="Public Class ListDictionary&#xA;Implements IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListDictionary : System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type ListDictionary = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IDictionary" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ListDictionary extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type ListDictionary = class&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections.Specialized" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4f7f0-101">使用单向链接列表实现 <see langword="IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-101">Implements <see langword="IDictionary" /> using a singly linked list.</span></span> <span data-ttu-id="4f7f0-102">对于通常包含少于 10 项的集合，建议使用该实现方法。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-102">Recommended for collections that typically include fewer than 10 items.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-103">这是使用单向链接列表 <xref:System.Collections.IDictionary> 的简单实现。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-103">This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list.</span></span> <span data-ttu-id="4f7f0-104">如果元素数小于或等于10，则它比 <xref:System.Collections.Hashtable> 更小且速度更快。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-104">It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less.</span></span> <span data-ttu-id="4f7f0-105">如果性能对大量元素很重要，则不应使用此值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-105">This should not be used if performance is important for large numbers of elements.</span></span>  
  
 <span data-ttu-id="4f7f0-106"><xref:System.Collections.Specialized.ListDictionary> 中的项不具有任何保证顺序;代码不应依赖于当前顺序。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-106">Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order.</span></span> <span data-ttu-id="4f7f0-107">实现该 <xref:System.Collections.Specialized.ListDictionary> 以实现快速键控检索;项目的实际内部顺序是依赖实现的，并且可能会在未来版本的产品中发生变化。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-107">The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.</span></span>  
  
 <span data-ttu-id="4f7f0-108">成员（例如 <xref:System.Collections.Specialized.ListDictionary.Item%2A>、<xref:System.Collections.Specialized.ListDictionary.Add%2A>、<xref:System.Collections.Specialized.ListDictionary.Remove%2A>和 <xref:System.Collections.Specialized.ListDictionary.Contains%2A>）是 O （`n`）运算，其中 `n` <xref:System.Collections.Specialized.ListDictionary.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-108">Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="4f7f0-109">不能 `null`键，但值可以为。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-109">A key cannot be `null`, but a value can.</span></span>  
  
 <span data-ttu-id="4f7f0-110">C#语言的 `foreach` 语句（Visual Basic 中`for each`）返回集合中元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-110">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="4f7f0-111">由于 <xref:System.Collections.Specialized.ListDictionary> 的每个元素都是一个键/值对，因此元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-111">Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="4f7f0-112">而是 <xref:System.Collections.DictionaryEntry>元素类型。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-112">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="4f7f0-113">例如：</span><span class="sxs-lookup"><span data-stu-id="4f7f0-113">For example:</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)]  
  
 <span data-ttu-id="4f7f0-114">`foreach` 语句是枚举器周围的包装器，它仅允许从集合读取，而不允许写入。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-115">下面的代码示例演示了 <xref:System.Collections.Specialized.ListDictionary>的几个属性和方法。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-115">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="4f7f0-116">此类型的公共静态（<see langword="Shared" /> Visual Basic）成员是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-116">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="4f7f0-117">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-117">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="4f7f0-118">此实现不提供 <see cref="T:System.Collections.Specialized.ListDictionary" />的同步（线程安全）包装器，但派生类可以使用 <see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" /> 属性来创建其自己的 <see cref="T:System.Collections.Specialized.ListDictionary" /> 同步版本。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-118">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.Specialized.ListDictionary" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.Specialized.ListDictionary" /> using the <see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" /> property.</span></span>  
  
<span data-ttu-id="4f7f0-119">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-119">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4f7f0-120">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-120">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="4f7f0-121">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-121">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
    <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="4f7f0-122">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="4f7f0-122">Performing Culture-Insensitive String Operations</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f7f0-123">初始化 <see cref="T:System.Collections.Specialized.ListDictionary" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-123">Initializes a new instance of the <see cref="T:System.Collections.Specialized.ListDictionary" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f7f0-124">使用默认比较器创建空白 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-124">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the default comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-125">比较器确定两个键是否相等。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-125">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="4f7f0-126"><xref:System.Collections.Specialized.ListDictionary> 中的每个键都必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-126">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="4f7f0-127">默认比较器是 <xref:System.Object.Equals%2A?displayProperty=nameWithType>的键实现。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-127">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4f7f0-128">此构造函数的运算复杂度为 O （1）。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-128">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-129">下面的代码示例演示了 <xref:System.Collections.Specialized.ListDictionary>的几个属性和方法。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-129">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="4f7f0-130">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="4f7f0-130">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Specialized.ListDictionary : System.Collections.IComparer -&gt; System.Collections.Specialized.ListDictionary" Usage="new System.Collections.Specialized.ListDictionary comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="4f7f0-131"><see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-131">The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="4f7f0-132">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4f7f0-132">-or-</span></span> 
 <span data-ttu-id="4f7f0-133"><see langword="null" />，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-133"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="4f7f0-134">使用指定比较器创建空白 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-134">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the specified comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-135">比较器确定两个键是否相等。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-135">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="4f7f0-136"><xref:System.Collections.Specialized.ListDictionary> 中的每个键都必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-136">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="4f7f0-137">默认比较器是 <xref:System.Object.Equals%2A?displayProperty=nameWithType>的键实现。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-137">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4f7f0-138">自定义比较器可以实现这样的方案：查找时不区分大小写的字符串。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-138">The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="4f7f0-139">此构造函数的运算复杂度为 O （1）。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-139">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="4f7f0-140">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="4f7f0-140">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="listDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4f7f0-141">要添加的条目的键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-141">The key of the entry to add.</span></span></param>
        <param name="value"><span data-ttu-id="4f7f0-142">要添加的条目的值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-142">The value of the entry to add.</span></span> <span data-ttu-id="4f7f0-143">该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-143">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4f7f0-144">将带有指定键和值的条目添加到 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-144">Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-145">通常不应将其状态与其哈希代码值之间的关联的对象用作键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-145">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="4f7f0-146">例如，字符串对象比用于键的 StringBuilder 对象更好。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-146">For example, String objects are better than StringBuilder objects for use as keys.</span></span>  
  
 <span data-ttu-id="4f7f0-147">你还可以使用 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 属性来添加新元素，方法是设置 <xref:System.Collections.Specialized.ListDictionary>中不存在的键的值;例如，`myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-147">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="4f7f0-148">但是，如果 <xref:System.Collections.Specialized.ListDictionary>中已经存在指定的键，则设置 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 属性将覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-148">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="4f7f0-149">与此相反，<xref:System.Collections.Specialized.ListDictionary.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-149">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="4f7f0-150">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Specialized.ListDictionary.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-150">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-151">下面的代码示例在 <xref:System.Collections.Specialized.ListDictionary>中添加和移除元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-151">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f7f0-152"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-152"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f7f0-153">带有相同键的项已经存在于 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-153">An entry with the same key already exists in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="listDictionary.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f7f0-154">从 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中移除所有项。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-154">Removes all entries from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-155"><xref:System.Collections.Specialized.ListDictionary.Count%2A> 设置为零，还会释放对集合的元素的其他对象的引用。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-155"><xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="4f7f0-156">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-156">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-157">下面的代码示例在 <xref:System.Collections.Specialized.ListDictionary>中添加和移除元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-157">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IDictionary.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="listDictionary.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4f7f0-158">要在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-158">The key to locate in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></param>
        <summary><span data-ttu-id="4f7f0-159">确定 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否包含特定键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-159">Determines whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="4f7f0-160">如果 <see cref="T:System.Collections.Specialized.ListDictionary" /> 包含具有指定键的项，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-160"><see langword="true" /> if the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-161">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Specialized.ListDictionary.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-161">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="4f7f0-162">从 .NET Framework 2.0 开始，此方法使用集合的对象的 <xref:System.Object.Equals%2A> 并在 `key` 上 <xref:System.IComparable.CompareTo%2A> 方法来确定 `item` 是否存在。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-162">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists.</span></span> <span data-ttu-id="4f7f0-163">在 .NET Framework 的早期版本中，此决定是使用集合中对象上的 `item` 参数的 <xref:System.Object.Equals%2A> 和 <xref:System.IComparable.CompareTo%2A> 方法进行的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-163">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-164">下面的代码示例在 <xref:System.Collections.Specialized.ListDictionary>中搜索元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-164">The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CPP/listdictionary_contains.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CS/listdictionary_contains.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/VB/listdictionary_contains.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f7f0-165"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-165"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="4f7f0-166">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="4f7f0-166">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="listDictionary.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="4f7f0-167">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.DictionaryEntry" /> 复制的 <see cref="T:System.Collections.Specialized.ListDictionary" /> 对象的目标位置。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-167">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span> <span data-ttu-id="4f7f0-168"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-168">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="4f7f0-169">
          <paramref name="array" /> 中要从其开始复制的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-169">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="4f7f0-170">将 <see cref="T:System.Collections.Specialized.ListDictionary" /> 项复制到位于指定索引处的一维 <see cref="T:System.Array" /> 实例中。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-170">Copies the <see cref="T:System.Collections.Specialized.ListDictionary" /> entries to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-171">元素按枚举器循环访问 <xref:System.Collections.Specialized.ListDictionary>的相同顺序复制到 <xref:System.Array>。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-171">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 <span data-ttu-id="4f7f0-172">若要仅复制 <xref:System.Collections.Specialized.ListDictionary>中的密钥，请使用 `ListDictionary.Keys.CopyTo`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-172">To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="4f7f0-173">若要仅复制 <xref:System.Collections.Specialized.ListDictionary>中的值，请使用 `ListDictionary.Values.CopyTo`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-173">To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="4f7f0-174">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Specialized.ListDictionary.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-174">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-175">下面的代码示例将 <xref:System.Collections.Specialized.ListDictionary> 的元素复制到一个数组中。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-175">The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CPP/listdictionary_copyto.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CS/listdictionary_copyto.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/VB/listdictionary_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f7f0-176"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-176"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4f7f0-177"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-177"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f7f0-178"><paramref name="array" /> 是多维数组。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-178"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="4f7f0-179">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4f7f0-179">-or-</span></span> 
<span data-ttu-id="4f7f0-180">源 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-180">The number of elements in the source <see cref="T:System.Collections.Specialized.ListDictionary" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4f7f0-181">源 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-181">The type of the source <see cref="T:System.Collections.Specialized.ListDictionary" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Specialized.ListDictionary.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f7f0-182">获取包含在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键/值对的数目。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-182">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="4f7f0-183">包含在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键/值对的数目。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-183">The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-184">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-184">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-185">下面的代码示例枚举 <xref:System.Collections.Specialized.ListDictionary>的元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-185">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="listDictionary.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f7f0-186">返回循环访问 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-186">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="4f7f0-187">
          <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-187">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-188">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-188">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="4f7f0-189">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-189">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4f7f0-190">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-190">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4f7f0-191">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-191">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4f7f0-192"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-192"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="4f7f0-193">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-193">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="4f7f0-194">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-194">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="4f7f0-195">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-195"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="4f7f0-196"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-196"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4f7f0-197">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-197">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4f7f0-198">当枚举器位于此位置时，对 <xref:System.Collections.IEnumerator.MoveNext%2A> 的后续调用也将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-198">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4f7f0-199">如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Collections.IEnumerator.Current%2A> 未定义。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-199">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="4f7f0-200">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-200">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="4f7f0-201">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-201">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4f7f0-202">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-202">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="4f7f0-203">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-203">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="4f7f0-204">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-204">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="4f7f0-205">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-205">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="4f7f0-206">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-206">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-207">下面的代码示例枚举 <xref:System.Collections.Specialized.ListDictionary>的元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-207">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.Specialized.ListDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f7f0-208">获取一个值，该值指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-208">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="4f7f0-209">此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-209">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-210"><xref:System.Collections.Specialized.ListDictionary> 实现 <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> 属性，因为 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口需要此属性。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-210"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="4f7f0-211">具有固定大小的集合在创建之后不能再添加或移除元素，但是允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-211">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="4f7f0-212">具有固定大小的集合就是一个集合，其中包含阻止添加和移除元素的包装;因此，如果对基础集合进行了更改，包括添加或删除元素，则固定大小的集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-212">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="4f7f0-213">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-213">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.Specialized.ListDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f7f0-214">获取一个值，用于指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否为只读。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-214">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="4f7f0-215">此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-215">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-216"><xref:System.Collections.Specialized.ListDictionary> 实现 <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> 属性，因为 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口需要此属性。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-216"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="4f7f0-217">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-217">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="4f7f0-218">只读集合就是一个集合，其中包含阻止修改集合的包装器;因此，如果对基础集合进行了更改，只读集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-218">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="4f7f0-219">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-219">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Specialized.ListDictionary.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f7f0-220">获取一个值，该值指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否是同步的（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-220">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="4f7f0-221">此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-221">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-222"><xref:System.Collections.Specialized.ListDictionary> 实现 <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> 属性，因为 <xref:System.Collections.ICollection?displayProperty=nameWithType> 接口需要此属性。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-222"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="4f7f0-223">派生类可以使用 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 属性提供 <xref:System.Collections.Specialized.ListDictionary> 的同步版本。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-223">Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="4f7f0-224">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-224">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4f7f0-225">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-225">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="4f7f0-226">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-226">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-227">下面的代码示例演示如何使用 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-227">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="4f7f0-228">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-228">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.Specialized.ListDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4f7f0-229">要获取或设置其值的键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-229">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="4f7f0-230">获取或设置与指定的键关联的值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-230">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="4f7f0-231">与指定键关联的值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-231">The value associated with the specified key.</span></span> <span data-ttu-id="4f7f0-232">如果未找到指定的键，尝试获取它将返回 <see langword="null" />，尝试设置它将使用指定的键创建新项。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-232">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new entry using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-233">通过此属性，可以使用以下语法来访问集合中的特定元素：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-233">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="4f7f0-234">你还可以使用 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 属性来添加新元素，方法是设置 <xref:System.Collections.Specialized.ListDictionary>中不存在的键的值;例如，`myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-234">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="4f7f0-235">但是，如果 <xref:System.Collections.Specialized.ListDictionary>中已经存在指定的键，则设置 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 属性将覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-235">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="4f7f0-236">与此相反，<xref:System.Collections.Specialized.ListDictionary.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-236">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="4f7f0-237">不能 `null`键，但值可以为。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-237">A key cannot be `null`, but a value can.</span></span> <span data-ttu-id="4f7f0-238">若要区分由于找不到指定的键而返回的 `null`，以及由于指定键的值 `null`而返回 `null`，请使用 <xref:System.Collections.Specialized.ListDictionary.Contains%2A> 方法来确定列表中是否存在该键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-238">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="4f7f0-239">该C#语言使用[this](/dotnet/csharp/language-reference/keywords/this)关键字来定义索引器，而不是实现 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-239">The C# language uses the [this](/dotnet/csharp/language-reference/keywords/this) keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property.</span></span> <span data-ttu-id="4f7f0-240">Visual Basic 将 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-240">Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="4f7f0-241">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Specialized.ListDictionary.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-241">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-242">下面的代码示例枚举 <xref:System.Collections.Specialized.ListDictionary>的元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-242">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f7f0-243"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-243"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="4f7f0-244">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="4f7f0-244">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.Specialized.ListDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f7f0-245">获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-245">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="4f7f0-246">包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-246">An <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-247"><xref:System.Collections.ICollection> 中的值的顺序未指定，但其顺序与 <xref:System.Collections.Specialized.ListDictionary.Values%2A> 方法返回的 <xref:System.Collections.ICollection> 中的关联值的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-247">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.</span></span>  
  
 <span data-ttu-id="4f7f0-248">返回的 <xref:System.Collections.ICollection> 不是静态副本;相反，<xref:System.Collections.ICollection> 引用原始 <xref:System.Collections.Specialized.ListDictionary>中的键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-248">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="4f7f0-249">因此，对 <xref:System.Collections.Specialized.ListDictionary> 所做的更改将继续在 <xref:System.Collections.ICollection>中反映出来。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-249">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="4f7f0-250">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-250">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-251">下面的代码示例枚举 <xref:System.Collections.Specialized.ListDictionary>的元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-251">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Values" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="listDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4f7f0-252">要移除的条目的键。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-252">The key of the entry to remove.</span></span></param>
        <summary><span data-ttu-id="4f7f0-253">从 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中移除带有指定键的项。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-253">Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-254">如果 <xref:System.Collections.Specialized.ListDictionary> 不包含具有指定键的元素，则 <xref:System.Collections.Specialized.ListDictionary> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-254">If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged.</span></span> <span data-ttu-id="4f7f0-255">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-255">No exception is thrown.</span></span>  
  
 <span data-ttu-id="4f7f0-256">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Specialized.ListDictionary.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-256">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-257">下面的代码示例在 <xref:System.Collections.Specialized.ListDictionary>中添加和移除元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-257">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f7f0-258"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-258"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="4f7f0-259">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="4f7f0-259">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Specialized.ListDictionary.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f7f0-260">获取用于同步对 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-260">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="4f7f0-261">用于同步对 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-261">An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-262">派生类可以使用 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 属性提供自己的 <xref:System.Collections.Specialized.ListDictionary> 的同步版本。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-262">Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span> <span data-ttu-id="4f7f0-263">同步代码必须对 <xref:System.Collections.Specialized.ListDictionary>的 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 执行操作，而不是直接在 <xref:System.Collections.Specialized.ListDictionary>上执行操作。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-263">The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="4f7f0-264">这样可确保对从其他对象派生的集合正确地执行操作。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-264">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="4f7f0-265">具体而言，它与可能同时修改 <xref:System.Collections.Specialized.ListDictionary> 对象的其他线程保持正确的同步。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-265">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.</span></span>  
  
 <span data-ttu-id="4f7f0-266">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-266">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4f7f0-267">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-267">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="4f7f0-268">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-268">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-269">下面的代码示例演示如何使用 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-269">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="4f7f0-270">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-270">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="listDictionary.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f7f0-271">返回循环访问 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-271">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="4f7f0-272">
          <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-272">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-273">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-273">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="4f7f0-274">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-274">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4f7f0-275">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-275">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4f7f0-276">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-276">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4f7f0-277"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-277"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="4f7f0-278">在此位置，调用 <xref:System.Collections.IEnumerator.Current%2A> 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-278">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="4f7f0-279">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-279">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="4f7f0-280">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-280"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="4f7f0-281"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-281"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4f7f0-282">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-282">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4f7f0-283">当枚举器位于此位置时，对 <xref:System.Collections.IEnumerator.MoveNext%2A> 的后续调用也将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-283">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4f7f0-284">如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则调用 <xref:System.Collections.IEnumerator.Current%2A> 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-284">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="4f7f0-285">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-285">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="4f7f0-286">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-286">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4f7f0-287">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-287">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="4f7f0-288">如果在 <xref:System.Collections.IEnumerator.MoveNext%2A> 和 <xref:System.Collections.IEnumerator.Current%2A>之间修改集合，<xref:System.Collections.IEnumerator.Current%2A> 将返回其设置为的元素，即使枚举器已失效。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-288">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="4f7f0-289">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-289">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4f7f0-290">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-290">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="4f7f0-291">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-291">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="4f7f0-292">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-292">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-293">下面的代码示例枚举 <xref:System.Collections.Specialized.ListDictionary>的元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-293">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.Specialized.ListDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f7f0-294">获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-294">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="4f7f0-295">一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-295">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f7f0-296"><xref:System.Collections.ICollection> 中的值的顺序未指定，但其顺序与 <xref:System.Collections.Specialized.ListDictionary.Keys%2A> 方法返回的 <xref:System.Collections.ICollection> 中的关联键的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-296">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.</span></span>  
  
 <span data-ttu-id="4f7f0-297">返回的 <xref:System.Collections.ICollection> 不是静态副本;相反，<xref:System.Collections.ICollection> 引用原始 <xref:System.Collections.Specialized.ListDictionary>中的值。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-297">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="4f7f0-298">因此，对 <xref:System.Collections.Specialized.ListDictionary> 所做的更改将继续在 <xref:System.Collections.ICollection>中反映出来。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-298">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="4f7f0-299">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-299">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f7f0-300">下面的代码示例枚举 <xref:System.Collections.Specialized.ListDictionary>的元素。</span><span class="sxs-lookup"><span data-stu-id="4f7f0-300">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>
