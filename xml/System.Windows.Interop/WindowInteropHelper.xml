<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a98e7405214e67e1749e141e35befa2336c63155" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89688439" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>协助在 Windows Presentation Foundation (WPF) 和 Win32 代码之间进行互操作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类的成员允许调用方对的 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND 和父 hwnd 进行内部访问 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> 。  适当的安全检查由这些成员执行。  
  
 每当需要基于其 HWND 的更具体对象时，请使用此类。  
  
 例如，如果需要 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 在应用程序中承载一个对话框，则会出现示例方案 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 。 <xref:System.Windows.Interop.WindowInteropHelper>使用 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 对话框的窗口对象初始化。 然后，可以 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 从属性获取窗口的句柄 (HWND) <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> ，并 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 通过属性指定窗口的所有者 <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> 。 下面的代码示例演示如何在 <xref:System.Windows.Interop.WindowInteropHelper> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 应用程序中承载对话框时使用 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 。  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 此类支持的另一种方案是 <xref:System.Windows.Interop.HwndSource> 从对象获取对象 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> 。 <xref:System.Windows.Interop.HwndSource>允许通过方法直接处理 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 消息 <xref:System.Windows.Interop.HwndSource.AddHook%2A> 。 通过使用 <xref:System.Windows.Interop.HwndSource> 和 <xref:System.Windows.Interop.HwndSource.AddHook%2A> 取代， <xref:System.Windows.Window> 你仍可在中处理无等效或处理的消息 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 。 <xref:System.Windows.Interop.WindowInteropHelper>使用 <xref:System.Windows.Window> 源创建，然后 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 在上调用 <xref:System.Windows.Interop.WindowInteropHelper> 以从 HWND 转到 <xref:System.Windows.Interop.HwndSource> 。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (window As Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">一个 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 窗口对象。</param>
        <summary>为指定的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口初始化 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 窗口可以是对话框，也可以是不适合在应用程序边界内承载的窗口 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果尚未创建窗口的 HWND，则创建 HWND。</summary>
        <returns>表示 HWND 的 <see cref="T:System.IntPtr" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>如果要将窗口句柄 (HWND) 从托管的实际显示中创建，请使用方法 <xref:System.Windows.Window> 。 如果你的自动化客户端无需显示窗口即可完成其任务，则这非常有用。  
  
 如果尚未创建本机窗口，此方法将创建本机窗口，设置 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 属性，然后返回 HWND。 如果已创建本机窗口，则返回现有本机窗口的句柄。  
  
 如果由于调用此方法而创建了本机窗口，则 <xref:System.Windows.Window.SourceInitialized> 会引发事件。  
  
 在 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 调用方法后查询属性 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 返回现有的窗口句柄。 在调用方法之前，不会将可视化树附加到窗口中 <xref:System.Windows.Window.Show%2A> 。  
  
 多次调用 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 方法不会创建新的窗口句柄。 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>如果已通过调用方法创建了句柄，则调用方法不 <xref:System.Windows.Window.Show%2A> 会创建新的窗口句柄。 仅当调用方法时没有句柄存在时，才会创建本机窗口 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 。  
  
 通过使用本机窗口 Api 通过 p/invoke 设置的窗口属性可能不会出现在托管窗口 Api 中。 例如，如果在调用方法后使用本机 MS_EX_TOPMOST 标志将窗口设置为最顶端，则 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> <xref:System.Windows.Window.Topmost%2A> 不保证该属性反映本机设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建此 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口的窗口句柄。</summary>
        <value>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口句柄 (HWND)。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 所有者窗口的句柄。</summary>
        <value>所有者窗口句柄 (HWND)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以通过设置此属性来重设窗口的父级。 对于常规 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 编程，请不要对已在使用中的窗口进行重设父级。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>
