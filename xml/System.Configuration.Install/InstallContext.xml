<Type Name="InstallContext" FullName="System.Configuration.Install.InstallContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e86e397330369eb3a5530552e7a9dfacf1fb2e47" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89876156" /></Metadata><TypeSignature Language="C#" Value="public class InstallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstallContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Install.InstallContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InstallContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstallContext" />
  <TypeSignature Language="F#" Value="type InstallContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含关于当前安装的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，可 <xref:System.Configuration.Install.InstallContext> 执行安装程序集的可执行文件（如 InstallUtil.exe）创建。 安装程序调用 <xref:System.Configuration.Install.InstallContext> 构造函数，并向其传递默认的日志文件路径和命令行参数。  
  
 在调用它的 <xref:System.Configuration.Install.Installer.Install%2A> 、 <xref:System.Configuration.Install.Installer.Commit%2A> 、 <xref:System.Configuration.Install.Installer.Rollback%2A> 或 <xref:System.Configuration.Install.Installer.Uninstall%2A> 方法之前，安装程序会将的 <xref:System.Configuration.Install.Installer.Context%2A> 属性设置为的 <xref:System.Configuration.Install.Installer> 实例 <xref:System.Configuration.Install.InstallContext> 。 在调用这些方法之前， <xref:System.Configuration.Install.Installer> 在属性中包含安装程序集合的将 <xref:System.Configuration.Install.Installer.Installers%2A> 设置 <xref:System.Configuration.Install.Installer.Context%2A> 每个包含的安装程序的属性。  
  
 <xref:System.Configuration.Install.InstallContext.Parameters%2A>属性包含为运行安装可执行文件而输入的命令行的分析版本。 属性包含诸如日志文件的路径、是否在控制台上显示日志信息的信息，以及是否在安装过程中显示用户界面。 调用 <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> 方法以确定命令行参数是否为 `true` 。  
  
 使用 <xref:System.Configuration.Install.InstallContext.LogMessage%2A> 方法将状态消息写入到安装日志文件和控制台。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Configuration.Install.InstallContext.%23ctor%2A> 构造函数、 <xref:System.Configuration.Install.InstallContext.Parameters%2A> 属性和类的 <xref:System.Configuration.Install.InstallContext.LogMessage%2A> 和 <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> 方法 <xref:System.Configuration.Install.InstallContext> 。  
  
 当 <xref:System.Configuration.Install.Installer.Install%2A> 调用安装程序的方法时，它会检查命令行中的参数。 根据这种情况，它会在控制台上显示进度消息，并将其保存到指定的日志文件。  
  
 如果调用不带任何参数的程序，将创建一个空的 <xref:System.Configuration.Install.InstallContext> 。 当指定了 "/LogFile" 和 "/LogtoConsole" 时，将 <xref:System.Configuration.Install.InstallContext> 通过将各自的参数传递给来创建 <xref:System.Configuration.Install.InstallContext.%23ctor%2A> 。  
  
 [!code-cpp[InstallContext_InstallContext#1](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#1)]
 [!code-csharp[InstallContext_InstallContext#1](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#1)]
 [!code-vb[InstallContext_InstallContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.Install.Installer" />
    <altmember cref="T:System.Configuration.Install.TransactedInstaller" />
    <altmember cref="T:System.Configuration.Install.AssemblyInstaller" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Configuration.Install.InstallContext" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Configuration.Install.InstallContext" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载不会创建用于安装的日志文件。  
  
   
  
## Examples  
  
> [!NOTE]
>  此示例演示如何使用构造函数的重载版本之一 <xref:System.Configuration.Install.InstallContext> 。 有关可能可用的其他示例，请参阅各个重载主题。  
  
 如果调用不带任何参数的程序，将创建一个空的 <xref:System.Configuration.Install.InstallContext> 。  
  
 [!code-cpp[InstallContext_InstallContext#2](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#2)]
 [!code-csharp[InstallContext_InstallContext#2](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#2)]
 [!code-vb[InstallContext_InstallContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext (string logFilePath, string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logFilePath, string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logFilePath As String, commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext(System::String ^ logFilePath, cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="new System.Configuration.Install.InstallContext : string * string[] -&gt; System.Configuration.Install.InstallContext" Usage="new System.Configuration.Install.InstallContext (logFilePath, commandLine)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logFilePath" Type="System.String" />
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="logFilePath">此安装的日志文件的路径，或者如果无须创建日志文件，则为 <see langword="null" />。</param>
        <param name="commandLine">运行安装程序时输入的命令行参数，或者如果未输入任何内容，则为 <see langword="null" />。</param>
        <summary>初始化 <see cref="T:System.Configuration.Install.InstallContext" /> 类的新实例，并创建安装的日志文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果安装使用 [Installutil.exe (安装程序工具) ](/dotnet/framework/tools/installutil-exe-installer-tool)，则此构造函数在指定的路径中创建一个日志文件，并将命令行参数的数组分析为 <xref:System.Configuration.Install.InstallContext.Parameters%2A> 属性。 如果在命令行参数中指定了日志文件路径，则将使用该路径来创建文件。 如果未在命令行中指定日志文件参数，则 `logFilePath` 使用参数的值。 若要禁止创建日志文件，请传递 "/logfile =" 命令行参数。  
  
   
  
## Examples  
 此示例摘自类的类概述中的示例 <xref:System.Configuration.Install.InstallContext> 。  
  
 当指定了 "/LogFile" 和 "/LogtoConsole" 时，将 <xref:System.Configuration.Install.InstallContext> 通过将各自的参数传递给来创建 <xref:System.Configuration.Install.InstallContext.%23ctor%2A> 。  
  
 [!code-cpp[InstallContext_InstallContext#3](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#3)]
 [!code-csharp[InstallContext_InstallContext#3](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#3)]
 [!code-vb[InstallContext_InstallContext#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>调用此构造函数时，在参数中传递默认的日志文件路径 <paramref name="logFilePath" /> 。 这是创建日志文件的位置，除非在运行安装可执行文件时使用了/logfile 命令行参数。</para></block>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsParameterTrue">
      <MemberSignature Language="C#" Value="public bool IsParameterTrue (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsParameterTrue(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsParameterTrue (paramName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsParameterTrue(System::String ^ paramName);" />
      <MemberSignature Language="F#" Value="member this.IsParameterTrue : string -&gt; bool" Usage="installContext.IsParameterTrue paramName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">要检查的命令行参数的名称。</param>
        <summary>确定指定的命令行参数是否为 <see langword="true" />。</summary>
        <returns>如果指定的参数设置为“是”、“真”、“1”或空字符串 ("")，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法访问 <xref:System.Configuration.Install.InstallContext.Parameters%2A> 包含分析版本的命令行参数的属性，以确定指定的参数是否为 `true` 。  
  
   
  
## Examples  
 此示例摘自类的类概述中的示例 <xref:System.Configuration.Install.InstallContext> 。  
  
 它使用 <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> 方法来找出参数是否已 `LogtoConsole` 设置。 如果 `yes` 为，则它将使用 <xref:System.Configuration.Install.InstallContext.LogMessage%2A> 方法将状态消息写入到安装日志文件和控制台。  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="LogMessage">
      <MemberSignature Language="C#" Value="public void LogMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogMessage(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.LogMessage : string -&gt; unit" Usage="installContext.LogMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入的消息。</param>
        <summary>将消息写入控制台和安装的日志文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安装程序可以调用此方法将进度或其他状态信息写入日志文件。 如果命令行参数指定应显示用户界面，则除了调用方法外，安装程序还应显示消息框或进行查询 <xref:System.Configuration.Install.InstallContext.LogMessage%2A> 。 如果 InstallUtil.exe 用于运行安装，并且命令行中指定了 "/LogToConsole = true"，则用户将不会查看写入到日志文件的文本。  
  
   
  
## Examples  
 此示例摘自类的类概述中的示例 <xref:System.Configuration.Install.InstallContext> 。  
  
 它使用 <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> 方法来找出参数是否已 `LogtoConsole` 设置。 如果 `yes` 为，则它将使用 <xref:System.Configuration.Install.InstallContext.LogMessage%2A> 方法将状态消息写入到安装日志文件和控制台。  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Install.InstallContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Parameters { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在运行 InstallUtil.exe 时输入的命令行参数。</summary>
        <value>一个 <see cref="T:System.Collections.Specialized.StringDictionary" />，它代表运行可执行安装文件时输入的命令行参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建新的时 <xref:System.Configuration.Install.InstallContext> ，命令行参数将解析为 <xref:System.Configuration.Install.InstallContext.Parameters%2A> 属性。 参数的键和值都是字符串。  
  
   
  
## Examples  
 此示例摘自类的类概述中的示例 <xref:System.Configuration.Install.InstallContext> 。  
  
 该示例检索 <xref:System.Configuration.Install.InstallContext.Parameters%2A> 属性，以查看用户是否输入了任何命令行参数。 它还使用 <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> 方法来找出参数是否已 `LogtoConsole` 设置。 如果 `yes` 为，则它将使用 <xref:System.Configuration.Install.InstallContext.LogMessage%2A> 方法将状态消息写入到安装日志文件和控制台。  
  
 [!code-cpp[InstallContext_InstallContext#6](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#6)]
 [!code-csharp[InstallContext_InstallContext#6](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#6)]
 [!code-vb[InstallContext_InstallContext#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ParseCommandLine">
      <MemberSignature Language="C#" Value="protected static System.Collections.Specialized.StringDictionary ParseCommandLine (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Specialized.StringDictionary ParseCommandLine(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ParseCommandLine (args As String()) As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Collections::Specialized::StringDictionary ^ ParseCommandLine(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member ParseCommandLine : string[] -&gt; System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.ParseCommandLine args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">包含命令行参数的数组。</param>
        <summary>将命令行参数分析到字符串字典中。</summary>
        <returns>包含已分析的命令行参数的 <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
