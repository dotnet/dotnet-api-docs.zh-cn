<Type Name="Binding" FullName="System.Windows.Data.Binding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="732080388a7f7bd9f6affec144ab20589b0f8c1e" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86786386" /></Metadata><TypeSignature Language="C#" Value="public class Binding : System.Windows.Data.BindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Windows.Data.BindingBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding&#xA;Inherits BindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding : System::Windows::Data::BindingBase" />
  <TypeSignature Language="F#" Value="type Binding = class&#xA;    inherit BindingBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.BindingBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供对绑定定义的高级访问，该绑定连接绑定目标对象（通常为 WPF 元素）的属性和任何数据源（例如数据库、XML 文件，或包含数据的任何对象）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 数据绑定为应用程序呈现数据并与数据交互提供了一种简单且一致的方式。 数据绑定使您可以同步两个不同对象的属性值。  
  
 若要建立绑定，请使用 <xref:System.Windows.Data.Binding> 类或继承的其他类之一 <xref:System.Windows.Data.BindingBase> 。 不管要绑定的对象和数据源的性质如何，每个绑定都遵循下图所示的模型。  
  
 ![基本数据绑定示意图](~/add/media/databindingmostbasic.png "基本数据绑定示意图")  
  
 下图演示了下面的基本 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 数据绑定概念。  
  
-   每个绑定通常具有以下四个组件：绑定目标对象、目标属性、绑定源和 <xref:System.Windows.Data.Binding.Path%2A> 绑定源中要使用的值。 例如，如果想要将的内容绑定 <xref:System.Windows.Controls.TextBox> 到 Employee 对象的 Name 属性，则目标对象是 <xref:System.Windows.Controls.TextBox> ，目标属性是 <xref:System.Windows.Controls.TextBox.Text%2A> 属性，要使用的值是名称，而源对象是 Employee 对象。  
  
-   目标属性必须为依赖属性。 这也意味着无法绑定字段。 对象的大多数属性 <xref:System.Windows.UIElement> 都是依赖属性，大多数依赖属性（只读属性除外）默认支持数据绑定。 仅 (<xref:System.Windows.DependencyObject> 类型可以定义依赖属性，所有 <xref:System.Windows.UIElement> 对象都派生自 <xref:System.Windows.DependencyObject> 。 )   
  
-   尽管图中并未指出，但请注意，绑定源对象并不限于自定义 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 对象。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 数据绑定支持 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 对象和 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 形式的数据。 若要提供一些示例，绑定源可以是 <xref:System.Windows.UIElement> 、任何列表对象、 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 与 [!INCLUDE[TLA#tla_adonet](~/includes/tlasharptla-adonet-md.md)] 数据或 Web 服务相关联的对象，或者是包含数据的 XmlNode [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 。  
  
 使用 " <xref:System.Windows.Data.Binding.Mode%2A> 属性" 指定数据流的方向。 若要检测单向或双向绑定中的源更改，源必须实现适当的属性更改通知机制，例如 <xref:System.ComponentModel.INotifyPropertyChanged> 。 有关示例，请参阅 [如何：实现属性更改通知](/dotnet/framework/wpf/data/how-to-implement-property-change-notification)。 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>属性指定源更新的时间。 有关详细信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)中的 "基本数据绑定概念"。  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>XAML 值  
 *声明*  
 零个或多个由逗号分隔的属性赋值子句 (，) 。 有关详细信息，请参阅 [绑定标记扩展](/dotnet/framework/wpf/advanced/binding-markup-extension) 或 [绑定声明概述](/dotnet/framework/wpf/data/binding-declarations-overview)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.MultiBinding" />
    <altmember cref="T:System.Windows.Data.PriorityBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Data.Binding" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Data.Binding" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.Binding : string -&gt; System.Windows.Data.Binding" Usage="new System.Windows.Data.Binding path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">绑定的初始 <see cref="P:System.Windows.Data.Binding.Path" />。</param>
        <summary>使用初始路径初始化 <see cref="T:System.Windows.Data.Binding" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">侦听事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">要添加的处理程序。</param>
        <summary>为 <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 附加事件添加处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法支持中的附加事件使用 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">侦听事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">要添加的处理程序。</param>
        <summary>为 <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 附加事件添加处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法支持中的附加事件使用 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj with get, set" Usage="System.Windows.Data.Binding.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置传递给异步数据调度程序的不透明数据。</summary>
        <value>传递给异步数据调度程序的数据。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Data.Binding.IsAsync" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
      </Docs>
    </Member>
    <Member MemberName="BindsDirectlyToSource">
      <MemberSignature Language="C#" Value="public bool BindsDirectlyToSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsDirectlyToSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsDirectlyToSource As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsDirectlyToSource { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsDirectlyToSource : bool with get, set" Usage="System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是相对于数据项还是 <see cref="T:System.Windows.Data.DataSourceProvider" /> 对象计算 <see cref="P:System.Windows.Data.Binding.Path" />。</summary>
        <value>若要相对于数据项自身计算路径，则为 <see langword="false" />；否则为 <see langword="true" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ) 此属性时 (的正常行为 `false` 包括对象的特殊处理 <xref:System.Windows.Data.DataSourceProvider> 。 在这种情况下，绑定引擎会 <xref:System.Windows.Data.Binding.Path%2A> 相对于从属性获取的对象进行计算 <xref:System.Windows.Data.DataSourceProvider.Data%2A> 。 此外，绑定还会侦听 <xref:System.Windows.Data.DataSourceProvider.DataChanged> 事件，并做出相应的响应。 将此属性设置为将 `true` 重写此行为，并提供对对象本身的属性的绑定访问 <xref:System.Windows.Data.DataSourceProvider> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.ObjectDataProvider" />
        <altmember cref="T:System.Windows.Data.XmlDataProvider" />
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.IValueConverter Converter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.IValueConverter Converter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Converter" />
      <MemberSignature Language="VB.NET" Value="Public Property Converter As IValueConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::IValueConverter ^ Converter { System::Windows::Data::IValueConverter ^ get(); void set(System::Windows::Data::IValueConverter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Converter : System.Windows.Data.IValueConverter with get, set" Usage="System.Windows.Data.Binding.Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要使用的转换器。</summary>
        <value>一个 <see cref="T:System.Windows.Data.IValueConverter" /> 类型的值。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 绑定隐式使用默认转换器，该转换器尝试在源值和目标值之间执行类型转换。 如果不能进行转换，默认转换器会返回 `null`。  
  
 如果要将自定义值转换器与绑定相关联，则应创建一个实现接口的类， <xref:System.Windows.Data.IValueConverter> 并提供和方法的实现 <xref:System.Windows.Data.IValueConverter.Convert%2A> <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> 。 值转换器可将数据从一种类型更改为另一种类型，在区域性详细信息（如字符集）之间进行转换，或修改其演示的其他方面。 有关典型转换方案的示例，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)中的 "数据转换"。  
  
<a name="xamlAttributeUsage_Converter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object Converter="myConverter"/>  
```  
  
<a name="xamlValues_Converter"></a>   
## <a name="xaml-values"></a>XAML 值  
 *myConverter*  
 对实现接口的类的资源引用 <xref:System.Windows.Data.IValueConverter> ，其中包括 <xref:System.Windows.Data.IValueConverter.Convert%2A> 和方法的实现 <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> 。 若要引用值转换器，请使用 [StaticResource 标记扩展](/dotnet/framework/wpf/advanced/staticresource-markup-extension)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConverterCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConverterCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConverterCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterCulture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Data.Binding.ConverterCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置计算转换器要使用的区域性。</summary>
        <value>默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未设置此属性，则绑定引擎将使用 `Language` 绑定目标对象的属性。 在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 默认情况下为 "en-us"，或者从根元素 (或页面的任何元素) 继承值（如果已显式设置了一个）。  
  
 有关数据转换的信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)中的 "数据转换" 部分。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterParameter">
      <MemberSignature Language="C#" Value="public object ConverterParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConverterParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ConverterParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterParameter : obj with get, set" Usage="System.Windows.Data.Binding.ConverterParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要传递给 <see cref="P:System.Windows.Data.Binding.Converter" /> 的参数。</summary>
        <value>要传递给 <see cref="P:System.Windows.Data.Binding.Converter" /> 的参数。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.Windows.Data.Binding.ConverterParameter%2A> 属性来指定如何转换对象。  此属性将附加信息传递给你对绑定使用的转换器。  指定时 <xref:System.Windows.Data.Binding.ConverterParameter%2A> ，值将 <xref:System.Windows.Data.IValueConverter.Convert%2A> 作为参数传递给和 <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> 方法 `parameter` 。  
  
 有关示例，请参阅 [如何：根据绑定项列表生成值](/dotnet/framework/wpf/data/how-to-produce-a-value-based-on-a-list-of-bound-items)。 该示例演示的实现， <xref:System.Windows.Data.IMultiValueConverter> 但使用仍适用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNothing">
      <MemberSignature Language="C#" Value="public static readonly object DoNothing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DoNothing" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.DoNothing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DoNothing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DoNothing;" />
      <MemberSignature Language="F#" Value=" staticval mutable DoNothing : obj" Usage="System.Windows.Data.Binding.DoNothing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用作返回值以指示绑定引擎不执行任何操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 绑定源属性或转换器可以返回 <xref:System.Windows.Data.Binding.DoNothing?displayProperty=nameWithType> 以指示绑定引擎不执行任何操作。 例如，若要指示绑定引擎不将值传输到绑定目标，则不会移动到中的下一个 <xref:System.Windows.Data.Binding> <xref:System.Windows.Data.PriorityBinding> ，或者不使用 `FallBackValue` 或默认值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Windows.Data.Binding.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用作绑定源对象的元素的名称。</summary>
        <value>相关元素的 <see langword="Name" /> 属性或 [x:Name Directive](/dotnet/framework/xaml-services/x-name-directive) 的值。 只有通过 <see langword="RegisterName" /> 将元素注册到适当的 <see cref="T:System.Windows.NameScope" /> 后，才能在代码中引用这些元素。 有关详细信息，请参阅 [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes)。  
  
默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要绑定到应用程序中的另一个元素的属性，则此属性很有用。 例如，如果想要使用 <xref:System.Windows.Controls.Slider> 控制应用程序中另一个控件的高度，或者要将控件的绑定到控件的属性，则为 <xref:System.Windows.Controls.ContentControl.Content%2A> <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> <xref:System.Windows.Controls.ListBox> 。  
  
 默认情况下，绑定继承属性指定的数据上下文 `DataContext` （如果已设置）。 但是， <xref:System.Windows.Data.Binding.ElementName%2A> 属性是您显式设置的源 <xref:System.Windows.Data.Binding> 和替代继承的数据上下文的方法之一。 有关详细信息，请参阅 [如何：指定绑定源](/dotnet/framework/wpf/data/how-to-specify-the-binding-source)。  
  
 使用 <xref:System.Windows.Data.Binding.Source%2A> 类的和 <xref:System.Windows.Data.Binding.RelativeSource%2A> 属性， <xref:System.Windows.Data.Binding> 还可以显式设置绑定的源。 但是，只 <xref:System.Windows.Data.Binding.ElementName%2A> <xref:System.Windows.Data.Binding.Source%2A> 应为每个绑定设置三个属性、、和中的一个， <xref:System.Windows.Data.Binding.RelativeSource%2A> 否则可能会发生冲突。 如果存在绑定源冲突，则此属性将引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlNamespaceManager GetXmlNamespaceManager(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXmlNamespaceManager (target As DependencyObject) As XmlNamespaceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlNamespaceManager ^ GetXmlNamespaceManager(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member GetXmlNamespaceManager : System.Windows.DependencyObject -&gt; System.Xml.XmlNamespaceManager" Usage="System.Windows.Data.Binding.GetXmlNamespaceManager target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">要从中获取命名空间信息的对象。</param>
        <summary>返回附加到指定对象的绑定所使用的 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 命名空间管理器对象。</summary>
        <returns>一个返回的对象，用于查看与传递的对象元素上的绑定有关的 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 命名空间。 此对象应转换为 <see cref="T:System.Xml.XmlNamespaceManager" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法支持附加属性的附加属性用法 <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> 。  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 仅当绑定中的数据来自 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 绑定源 (对象) 时，命名空间管理器才相关 <xref:System.Windows.Data.XmlDataProvider> 。  
  
 如果命名空间管理器不是专门应用于原始数据源创建或随后 <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A> 对绑定调用，则此方法将返回 `null` 。  
  
 `null`如果绑定后的数据不是，则此方法将始终返回 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 参数不能为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexerName">
      <MemberSignature Language="C#" Value="public const string IndexerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IndexerName" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.IndexerName" />
      <MemberSignature Language="VB.NET" Value="Public Const IndexerName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ IndexerName;" />
      <MemberSignature Language="F#" Value="val mutable IndexerName : string" Usage="System.Windows.Data.Binding.IndexerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用作 <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName" /> 的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 以指示索引器属性已更改。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAsync { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool with get, set" Usage="System.Windows.Data.Binding.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示 <see cref="T:System.Windows.Data.Binding" /> 是否应异步获取和设置值。</summary>
        <value>默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.Binding.IsAsync%2A>当 `get` 绑定源属性的访问器可能需要很长时间时，请使用属性。 一个示例是具有 `get` 从 Web 下载的访问器的图像属性。 <xref:System.Windows.Data.Binding.IsAsync%2A> `true` 当下载发生时，设置以避免阻止 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 。  
  
 在等待值到达时，绑定将报告 <xref:System.Windows.Data.BindingBase.FallbackValue%2A> （如果有）或绑定目标属性的默认值。  
  
 但是，在某些情况下，需要使用 <xref:System.Windows.Data.Binding.IsAsync%2A> 属性。 [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)]指导原则是要定义的属性比字段集更慢的顺序。 创建类时，请考虑在访问器外部处理速度非常慢的操作 `get` 并缓存结果。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.AsyncState" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.BindingMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As BindingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingMode Mode { System::Windows::Data::BindingMode get(); void set(System::Windows::Data::BindingMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Data.BindingMode with get, set" Usage="System.Windows.Data.Binding.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示绑定的数据流方向。</summary>
        <value><see cref="T:System.Windows.Data.BindingMode" /> 值之一。 默认值为 <see cref="F:System.Windows.Data.BindingMode.Default" />，它返回目标依赖属性的默认绑定模式值。 但是，每个依赖属性的默认值都不同。 通常，用户可编辑的控件属性（如文本框和复选框的控件属性）默认为双向绑定，而其他大多数属性默认为单向绑定。  
  
确定依赖属性绑定在默认情况下是单向还是双向的编程方法是：使用 <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> 获取属性的属性元数据，然后检查 <see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" /> 属性的布尔值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要支持 <xref:System.Windows.Data.BindingMode.OneWay> 和 <xref:System.Windows.Data.BindingMode.TwoWay> 绑定，基础数据必须实现 <xref:System.ComponentModel.INotifyPropertyChanged> 。 有关详细信息，请参阅 [如何：实现属性更改通知](/dotnet/framework/wpf/data/how-to-implement-property-change-notification)。  
  
 对于 <xref:System.Windows.Data.BindingMode.TwoWay> 或 <xref:System.Windows.Data.BindingMode.OneWayToSource> 绑定，可以通过设置属性来控制目标到源更新 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 。 有关详细信息，请参阅 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>。  
  
 有关不同绑定模式的详细信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnSourceUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnSourceUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnSourceUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnSourceUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnSourceUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnSourceUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当值从绑定目标传输到绑定源时是否引发 <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 事件。</summary>
        <value>如果绑定源值更新时应引发 <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnTargetUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnTargetUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnTargetUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当值从绑定源传输到绑定目标时是否引发 <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 事件。</summary>
        <value>如果绑定目标值更新时应当引发 <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnValidationError : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对绑定对象引发 <see cref="E:System.Windows.Controls.Validation.Error" /> 附加事件。</summary>
        <value>如果在源更新过程中出现验证错误时应对绑定对象引发<see langword="true" /> 附加事件，则为 <see cref="E:System.Windows.Controls.Validation.Error" /> ；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果绑定 <xref:System.Windows.Data.Binding.ValidationRules%2A> 与它相关联，则每次将目标属性值传输到 source 属性时，绑定引擎都会检查每个规则。 如果规则使某个值失效，则绑定引擎将创建一个 <xref:System.Windows.Controls.ValidationError> 对象并将其添加到中 <xref:System.Windows.Controls.Validation> 。<xref:System.Windows.Controls.Validation.Errors%2A> 绑定对象的集合。 如果该 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 属性不为空，则 <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType> 对象的附加属性将设置为 `true` 。 如果将 <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A> 的属性 <xref:System.Windows.Data.Binding> 设置为 `true` ，则绑定引擎将 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> 在对象上引发附加事件。  
  
 有关验证过程的详细讨论，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)中的 "数据验证" 一节。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyPath Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyPath Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As PropertyPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyPath ^ Path { System::Windows::PropertyPath ^ get(); void set(System::Windows::PropertyPath ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : System.Windows.PropertyPath with get, set" Usage="System.Windows.Data.Binding.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置绑定源属性的路径。</summary>
        <value>绑定源的路径。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个绑定通常具有以下四个组件：绑定目标对象、目标属性、绑定源和绑定源中要使用的值的路径。 有关这些数据绑定概念的详细信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)。  
  
 使用 <xref:System.Windows.Data.Binding.Path%2A> 属性指定要绑定到的源值：  
  
-   在最简单的情况下， <xref:System.Windows.Data.Binding.Path%2A> 属性值是要用于绑定的源对象的属性的名称，例如 `Path=PropertyName` 。  
  
-   可以通过类似于 c # 中使用的语法来指定属性的子属性。 例如，子句 `Path=ShoppingCart.Order` 设置与对象或属性 `ShoppingCart` 的子属性 `Order` 的绑定。  
  
-   若要绑定到附加属性，请将附加属性置于括号中。 例如，若要绑定到附加属性 <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> ，语法为 `Path=(DockPanel.Dock)` 。  
  
-   可以在已应用索引器的属性名后面的方括号内指定属性的索引器。 例如，子句 `Path=ShoppingCart[0]` 将绑定设置为与属性的内部索引处理文本字符串“0”的方式对应的索引。 还支持多个索引器。  
  
-   可以在 `Path` 子句中混用索引器和子属性，例如 `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`  
  
-   可以在索引器内使用多个由逗号 (,) 分隔的索引器参数。 可以使用括号指定每个参数的类型。 例如，可以使用 `Path="[(sys:Int32)42,(sys:Int32)24]"`，其中 `sys` 将映射到 `System` 命名空间。  
  
-   如果源是集合视图，则可以使用斜杠 (/) 指定当前项。 例如，子句 `Path=/` 设置与视图中当前项的绑定。 如果源是集合，则此语法指定默认集合视图的当前项。  
  
-   可以组合使用属性名和斜杠，以遍历作为集合的属性。 例如，`Path=/Offices/ManagerName` 指定源集合的当前项，源集合中包含的 `Offices` 属性也是一个集合。 它的当前项是一个包含 `ManagerName` 属性的对象。  
  
-   句点 (.) 路径也可以用于绑定到当前源。 例如，`Text="{Binding}"` 等效于 `Text="{Binding Path=.}"`。  
  
 有关路径语法的信息，请参阅 [绑定声明概述](/dotnet/framework/wpf/data/binding-declarations-overview) 或 [PropertyPath XAML 语法](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax)。  
  
 对于 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 绑定，请参见 <xref:System.Windows.Data.Binding.XPath%2A> 属性。  
  
 若要绑定到整个对象，无需指定 <xref:System.Windows.Data.Binding.Path%2A> 属性。 有关详细信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)中的 "指定值的路径"。  
  
   
  
## Examples  
 下面的示例演示了一个创建的、 <xref:System.Windows.Controls.ToolTip> 用于报告验证错误消息的样式触发器。 Setter 的值使用 <xref:System.Windows.Controls.TextBox> 属性) 的样式绑定到当前 (的错误内容 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Data.Binding.RelativeSource%2A> 。 有关此示例的详细信息，请参阅 [如何：实现绑定验证](/dotnet/framework/wpf/data/how-to-implement-binding-validation)。  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.RelativeSource RelativeSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.RelativeSource RelativeSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.RelativeSource" />
      <MemberSignature Language="VB.NET" Value="Public Property RelativeSource As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::RelativeSource ^ RelativeSource { System::Windows::Data::RelativeSource ^ get(); void set(System::Windows::Data::RelativeSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RelativeSource : System.Windows.Data.RelativeSource with get, set" Usage="System.Windows.Data.Binding.RelativeSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通过指定绑定源相对于绑定目标位置的位置，获取或设置此绑定源。</summary>
        <value>一个 <see cref="T:System.Windows.Data.RelativeSource" /> 对象，它指定要使用的绑定源的相对位置。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性通常用于将对象的一个属性绑定到同一对象的另一个属性，或在样式或模板中定义绑定。  
  
 默认情况下，绑定继承属性指定的数据上下文 `DataContext` （如果已设置）。 但是， <xref:System.Windows.Data.Binding.RelativeSource%2A> 属性是您显式设置的源 <xref:System.Windows.Data.Binding> 和替代继承的数据上下文的方法之一。 有关详细信息，请参阅 [如何：指定绑定源](/dotnet/framework/wpf/data/how-to-specify-the-binding-source)。  
  
 使用 <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Data.Binding.Source%2A?displayProperty=nameWithType> 属性，还可以显式设置绑定的源。 但是，只 <xref:System.Windows.Data.Binding.ElementName%2A> <xref:System.Windows.Data.Binding.Source%2A> 应为每个绑定设置三个属性、、和中的一个， <xref:System.Windows.Data.Binding.RelativeSource%2A> 否则可能会发生冲突。 如果存在绑定源冲突，则此属性将引发异常。  
  
 有关 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
    
## Examples  
 下面的示例演示了一个创建的、 <xref:System.Windows.Controls.ToolTip> 用于报告验证错误消息的样式触发器。 Setter 的值使用 <xref:System.Windows.Controls.TextBox> 属性) 的样式绑定到当前 (的错误内容 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Data.Binding.RelativeSource%2A> 。 有关此示例的详细信息，请参阅 [如何：实现绑定验证](/dotnet/framework/wpf/data/how-to-implement-binding-validation)。  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 若要查看完整的示例，请参阅 [绑定验证示例](https://go.microsoft.com/fwlink/?LinkID=159972)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Source" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">侦听事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">要删除的处理程序。</param>
        <summary>移除 <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 附加事件的处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法支持中的附加事件使用 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">侦听事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">要删除的处理程序。</param>
        <summary>移除 <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 附加事件的处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法支持中的附加事件使用 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetXmlNamespaceManager(class System.Windows.DependencyObject target, class System.Xml.XmlNamespaceManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetXmlNamespaceManager (target As DependencyObject, value As XmlNamespaceManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetXmlNamespaceManager(System::Windows::DependencyObject ^ target, System::Xml::XmlNamespaceManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetXmlNamespaceManager : System.Windows.DependencyObject * System.Xml.XmlNamespaceManager -&gt; unit" Usage="System.Windows.Data.Binding.SetXmlNamespaceManager (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="target">要从中获取命名空间信息的对象。</param>
        <param name="value">要用于计算传递的元素中的命名空间的 <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
        <summary>设置被附加到提供的元素的绑定所使用的命名空间管理器对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法支持附加属性的附加属性用法 <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePath">
      <MemberSignature Language="C#" Value="public bool ShouldSerializePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializePath" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializePath () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializePath();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializePath : unit -&gt; bool" Usage="binding.ShouldSerializePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示是否应使 <see cref="P:System.Windows.Data.Binding.Path" /> 属性持久化。</summary>
        <returns>如果属性值已更改，不再是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ShouldSerialize`提供此方法是因为 <xref:System.Windows.Data.Binding.Path%2A> 属性没有简单的默认值。 此方法指示属性是否已更改为其默认值。 如果要开发的设计器 <xref:System.Windows.Data.Binding> 或开发自己的包含的控件，通常需要调用此方法 <xref:System.Windows.Data.Binding> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSource">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeSource" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSource () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSource();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSource : unit -&gt; bool" Usage="binding.ShouldSerializeSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示是否应使 <see cref="P:System.Windows.Data.Binding.Source" /> 属性持久化。</summary>
        <returns>如果属性值已更改，不再是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ShouldSerialize`提供此方法是因为 <xref:System.Windows.Data.Binding.Source%2A> 属性没有简单的默认值。 此方法指示属性是否已更改为其默认值。 如果要开发的设计器 <xref:System.Windows.Data.Binding> 或开发自己的包含的控件，通常需要调用此方法 <xref:System.Windows.Data.Binding> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValidationRules">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeValidationRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeValidationRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeValidationRules () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeValidationRules();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeValidationRules : unit -&gt; bool" Usage="binding.ShouldSerializeValidationRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示是否应使 <see cref="P:System.Windows.Data.Binding.ValidationRules" /> 属性持久化。</summary>
        <returns>如果属性值已更改，不再是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ShouldSerialize`提供此方法是因为 <xref:System.Windows.Data.Binding.ValidationRules%2A> 属性没有简单的默认值。 此方法指示属性是否已更改为其默认值。 如果要开发的设计器 <xref:System.Windows.Data.Binding> 或开发自己的包含的控件，通常需要调用此方法 <xref:System.Windows.Data.Binding> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Source { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : obj with get, set" Usage="System.Windows.Data.Binding.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用作绑定源的对象。</summary>
        <value>要用作绑定源的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，绑定继承属性指定的数据上下文 `DataContext` （如果已设置）。 但是， <xref:System.Windows.Data.Binding.Source%2A> 属性是您显式设置的源 <xref:System.Windows.Data.Binding> 和替代继承的数据上下文的方法之一。 如果不需要建立作用域的功能，其中有多个属性继承相同的数据上下文，则可以使用属性， <xref:System.Windows.Data.Binding.Source%2A> 而不是 `DataContext` 属性。  
  
 使用 <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=nameWithType> 属性，还可以显式设置绑定的源。 但是，只 <xref:System.Windows.Data.Binding.ElementName%2A> <xref:System.Windows.Data.Binding.Source%2A> 应为每个绑定设置三个属性、、和中的一个， <xref:System.Windows.Data.Binding.RelativeSource%2A> 否则可能会发生冲突。 如果存在绑定源冲突，则此属性将引发异常。  
  
 若要清除此属性，请将其设置为 <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType> 。  
  
<a name="xamlAttributeUsage_Source"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object Source="object"/>  
```  
  
<a name="xamlValues_Source"></a>   
## <a name="xaml-values"></a>XAML 值  
 对象  
 现有的对象。 若要引用现有对象，请使用 [StaticResource 标记扩展](/dotnet/framework/wpf/advanced/staticresource-markup-extension)  
  
   
  
## Examples  
 下面的示例使用一个 `Person` 对象，该对象具有 `PersonName` 命名空间中定义的名为的字符串属性 `SDKSample` ，因为第一个突出显示的行所示。 在包含元素的突出显示行中 `<src>` ，它将 `Person` 对象的 `PersonName` 属性值实例化 `Joe` 。 此操作在节中完成 `Resources` ，并分配了 `x:Key` 。  
  
 [!code-xaml[BindingInstantiation](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml?highlight=4,9,37)]  
  
 包含元素的突出显示的行 `<TextBlock>` 演示如何绑定到 `PersonName` 属性。 因此， <xref:System.Windows.Controls.TextBlock> 控件将显示值 "Joe"。  
  
 在下面的示例中， <xref:System.Windows.Data.Binding.Source%2A> 对象的值 <xref:System.Windows.Data.Binding> 设置为 `static` 属性 <xref:System.Windows.Application.Current%2A?displayProperty=nameWithType> ：  
  
 [!code-xaml[DataBindingLab#ComboBoxMultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/AddProductWindow.xaml#comboboxmultibinding)]  
  
 有关完整示例，请参阅 [数据绑定演示](https://go.microsoft.com/fwlink/?LinkID=163703)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" Usage="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>当一个值从绑定目标传输到绑定源时发生，但仅限于其 <see cref="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" /> 值设置为 <see langword="true" /> 的绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_SourceUpdatedEvent"></a>   
## <a name="routed-event-information"></a>路由事件信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Data.Binding.SourceUpdatedEvent>|  
|路由策略|冒泡|  
|委托|<xref:System.EventHandler%601>，约束为 <xref:System.Windows.Data.DataTransferEventArgs> 。|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="SourceUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SourceUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SourceUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SourceUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SourceUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 附加事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" Usage="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>当一个值从绑定源传输到绑定目标时发生，但仅限于其 <see cref="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" /> 值设置为 <see langword="true" /> 的绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TargetUpdatedEvent"></a>   
## <a name="routed-event-information"></a>路由事件信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Data.Binding.TargetUpdatedEvent>|  
|路由策略|冒泡|  
|委托|<xref:System.EventHandler%601>，约束为 <xref:System.Windows.Data.DataTransferEventArgs> 。|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TargetUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TargetUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TargetUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 附加事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceExceptionFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceExceptionFilter As UpdateSourceExceptionFilterCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceExceptionFilterCallback ^ UpdateSourceExceptionFilter { System::Windows::Data::UpdateSourceExceptionFilterCallback ^ get(); void set(System::Windows::Data::UpdateSourceExceptionFilterCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceExceptionFilter : System.Windows.Data.UpdateSourceExceptionFilterCallback with get, set" Usage="System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceExceptionFilterCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个处理程序，可使用该程序提供自定义逻辑，旨在在更新绑定源值期间处理绑定引擎遇到的异常。 这仅适用于你已将 <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> 与绑定相关联的情况。</summary>
        <value>一个提供自定义逻辑以在绑定源值更新过程中处理绑定引擎遇到的异常的方法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ExceptionValidationRule>是一个内置的验证规则，它检查在绑定源属性更新过程中引发的异常。 如果已将 <xref:System.Windows.Controls.ExceptionValidationRule> 与 <xref:System.Windows.Data.Binding> 对象关联，则可以使用此属性来设置处理程序，以提供用于处理这些异常的自定义逻辑。 如果未在 <xref:System.Windows.Data.Binding> 上指定 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>，则绑定引擎会创建具有异常的 <xref:System.Windows.Controls.ValidationError> 并将其添加到绑定元素的 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 集合中。  
  
   
  
## Examples  
 <xref:System.Windows.Controls.TextBox.Text%2A>以下的属性 <xref:System.Windows.Controls.TextBox> 被数据绑定到 `Age3` 类型为的源属性 `int` 。 <xref:System.Windows.Controls.ExceptionValidationRule>检查在源属性更新过程中引发的异常，例如，当用户输入的值无法转换为整数) 时 (。  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 可以提供自定义逻辑来处理这些异常。 下面的示例演示如何使用 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> 属性来设置 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> 。  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 下面是的示例实现 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> 。  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>还可以返回 `null` 、异常本身或 <xref:System.Windows.Controls.ValidationError> 。 有关详细信息，请参阅 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>。  
  
 有关完整示例，请参阅 [绑定验证示例](https://go.microsoft.com/fwlink/?LinkID=159972)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger UpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，它可确定绑定源更新的计时。</summary>
        <value><see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 值之一。 默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />，即返回目标依赖属性的默认 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 值。 但是，大多数依赖项属性的默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" />，而 <see cref="P:System.Windows.Controls.TextBox.Text" /> 属性的默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" />。  
  
一种确定依赖属性的默认 <see cref="P:System.Windows.Data.Binding.UpdateSourceTrigger" /> 值的编程方法是使用 <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> 获取属性的属性元数据，然后检查 <see cref="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" /> 属性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作为 <xref:System.Windows.Data.BindingMode.TwoWay> 或 <xref:System.Windows.Data.BindingMode.OneWayToSource> 侦听目标属性中的更改并将其传播回源的绑定。 这称为更新源。 通常，只要目标属性发生更改，就会发生这些更新。 这对于复选框和其他简单控件都很好，但它通常不适合用于文本字段。 每次击键后更新可能会降低性能，并使用户在提交到新值之前，不会有机会退退并修复键入错误。 因此，属性的默认 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 值 <xref:System.Windows.Controls.TextBox.Text%2A> 为 <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> ，而不是 <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged> 。  
  
 如果将值设置 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 为 <xref:System.Windows.Data.UpdateSourceTrigger.Explicit> ，则必须调用方法， <xref:System.Windows.Data.BindingExpression.UpdateSource%2A> 否则更改不会传播回源。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Mode" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.DataErrorValidationRule" />。</summary>
        <value>如果包含 <see cref="T:System.Windows.Controls.DataErrorValidationRule" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置此属性可提供显式使用元素的替代方法 <xref:System.Windows.Controls.DataErrorValidationRule> 。 <xref:System.Windows.Controls.DataErrorValidationRule>是一个内置的验证规则，用于检查由源对象的实现所引发的错误 <xref:System.ComponentModel.IDataErrorInfo> 。 如果引发错误，则绑定引擎将创建一个 <xref:System.Windows.Controls.ValidationError> 具有错误的，并将其添加到 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 绑定元素的集合中。 缺少错误会清除此验证反馈，除非其他规则引发验证问题。  
  
 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> .NET Framework 版本3.5 中引入。  有关详细信息，请参见 [.NET Framework 版本和依赖关系](/dotnet/framework/migration-guide/versions-and-dependencies)。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.ComponentModel.IDataErrorInfo> 和 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> 来验证中的用户输入 <xref:System.Windows.Controls.TextBox> 。 第一个示例创建一个实现的数据类型 <xref:System.ComponentModel.IDataErrorInfo> 以报告验证错误。  
  
 [!code-csharp[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#idataerrorinfodata)]
 [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#idataerrorinfodata)]  
  
 下面的示例将 `Age` 属性绑定到， <xref:System.Windows.Controls.TextBox> 并将设置 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> 为 `true` <xref:System.Windows.Data.Binding> 。  当用户输入无效值时，将在中显示一个红色边框， <xref:System.Windows.Controls.TextBox> 并 <xref:System.Windows.Controls.ToolTip> 报告错误消息。  
  
 [!code-xaml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#idataerrorinfoxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnExceptions">
      <MemberSignature Language="C#" Value="public bool ValidatesOnExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnExceptions : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />。</summary>
        <value>如果包含 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置此属性可提供显式使用元素的替代方法 <xref:System.Windows.Controls.ExceptionValidationRule> 。 <xref:System.Windows.Controls.ExceptionValidationRule>是一个内置的验证规则，它检查在源属性更新过程中引发的异常。 如果引发异常，则绑定引擎将创建一个 <xref:System.Windows.Controls.ValidationError> 具有异常的，并将其添加到 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 绑定元素的集合中。 缺少错误会清除此验证反馈，除非其他规则引发验证问题。  
  
 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> .NET Framework 版本3.5 中引入。  有关详细信息，请参见 [.NET Framework 版本和依赖关系](/dotnet/framework/migration-guide/versions-and-dependencies)。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> 验证中的用户输入 <xref:System.Windows.Controls.TextBox> 。 第一个示例创建一个数据类型，该数据类型在 `Age` 属性设置为无效属性时引发异常。  
  
 [!code-csharp[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#throwexceptiondata)]
 [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#throwexceptiondata)]  
  
 下面的示例将 `Age` 属性绑定到， <xref:System.Windows.Controls.TextBox> 并将设置 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> 为 `true` <xref:System.Windows.Data.Binding> 。 当用户输入无效值时，将在中显示一个红色边框， <xref:System.Windows.Controls.TextBox> 并 <xref:System.Windows.Controls.ToolTip> 报告错误消息。  
  
 [!code-xaml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#throwexceptionxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnNotifyDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />。</summary>
        <value>如果包含 <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors%2A> 为时 `true` ，绑定将检查并报告实现的数据源引发的错误 <xref:System.ComponentModel.INotifyDataErrorInfo> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationRules : System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;" Usage="System.Windows.Data.Binding.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于检查用户输入有效性的规则的集合。</summary>
        <value><see cref="T:System.Windows.Controls.ValidationRule" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]数据绑定模型使您可以 <xref:System.Windows.Data.Binding.ValidationRules%2A> 与 <xref:System.Windows.Data.Binding> 或 <xref:System.Windows.Data.MultiBinding> 对象关联。 您可以通过从类派生并实现方法来创建自定义规则 <xref:System.Windows.Controls.ValidationRule> <xref:System.Windows.Controls.ValidationRule.Validate%2A> ，也可以使用内置的 <xref:System.Windows.Controls.ExceptionValidationRule> ，如果在源更新过程中出现异常，则它将使值失效。  
  
 每当 <xref:System.Windows.Controls.ValidationRule> 输入值 (绑定目标属性值) 传输到绑定源属性时，绑定引擎都会检查每个关联的绑定。 有关验证过程的详细讨论，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)中的 "数据验证" 一节。  
  
> [!NOTE]
>  此属性只能 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 通过使用所示的集合语法来设置，或者通过访问集合对象并使用其各种方法（如）来设置 `Add` 。 用于访问集合对象的属性是只读的，而集合本身是可读写的。  
  
<a name="xamlPropertyElementUsage_ValidationRules"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.ValidationRules>  
    oneOrMoreValidationRules  
  </object.ValidationRules>  
</object>  
  
```  
  
<a name="xamlValues_ValidationRules"></a>   
## <a name="xaml-values"></a>XAML 值  
 *oneOrMoreValidationRules*  
 一个或多个 <xref:System.Windows.Controls.ValidationRule> 对象。 可以使用类， <xref:System.Windows.Controls.ExceptionValidationRule> 也可以通过为类创建自定义规则 <xref:System.Windows.Controls.ValidationRule> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Validation" />
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManager">
      <MemberSignature Language="C#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="ILAsm" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XmlNamespaceManager" />
      <MemberSignature Language="VB.NET" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="F#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" Usage="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置用于在 XML 绑定中执行可以识别命名空间的 <see langword="XPath" /> 查询的 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此附加属性使用属性值继承，这会重现中存在的命名空间继承的行为 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 。 有关详细信息，请参阅[属性值继承](/dotnet/framework/wpf/advanced/property-value-inheritance)。  
  
<a name="dependencyPropertyInfo_XmlNamespaceManager"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Data.Binding.XmlNamespaceManagerProperty>|  
|元数据属性设置为 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty XmlNamespaceManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly XmlNamespaceManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ XmlNamespaceManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable XmlNamespaceManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Data.Binding.XmlNamespaceManager" /> 附加属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Windows.Data.Binding.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see langword="XPath" /> 查询，该查询返回要使用的 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 绑定源上的值。</summary>
        <value><see langword="XPath" /> 查询。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当绑定源为 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 数据而不是 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 对象时，将 <xref:System.Windows.Data.Binding.XPath%2A> 使用属性，而不是 <xref:System.Windows.Data.Binding.Path%2A> 属性来指示要使用的绑定源上的值的路径。  
  
 通过设置 <xref:System.Windows.Data.Binding.XPath%2A> 属性，您将创建一个 `XPath` 查询来选择节点或节点集合 (<xref:System.Xml.XmlElement?displayProperty=nameWithType> 并 <xref:System.Xml.XmlAttribute?displayProperty=nameWithType> 从 <xref:System.Xml.XmlNode?displayProperty=nameWithType>) 派生。 <xref:System.Xml.XmlNode?displayProperty=nameWithType> 是一个 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 对象，这意味着你可以使用属性绑定到其属性 <xref:System.Windows.Data.Binding.Path%2A> 。  
  
 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType>方法处理 `XPath` 属性中的表达式 <xref:System.Windows.Data.Binding.XPath%2A> 。 `XPath` 不支持函数。 有关 `XPath` 表达式信息，请参阅 " <xref:System.Xml.XmlNode.SelectNodes%2A> 示例" 部分中提供的文档和一些示例。  
  
 LINQ to XML 对象 <xref:System.Xml.Linq.XDocument> ，不 <xref:System.Xml.Linq.XElement> 使用 `XPath` 。 有关详细信息，请参阅 [如何：绑定到 XDocument、system.xml.linq.xelement> 或 LINQ FOR XML 查询结果](/dotnet/framework/wpf/data/how-to-bind-to-xdocument-xelement-or-linq-for-xml-query-results)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
