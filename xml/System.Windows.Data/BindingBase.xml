<Type Name="BindingBase" FullName="System.Windows.Data.BindingBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1507c2e63aefccace93535e7c70e215ed65c0eb" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83522528" /></Metadata><TypeSignature Language="C#" Value="public abstract class BindingBase : System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BindingBase extends System.Windows.Markup.MarkupExtension" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BindingBase&#xA;Inherits MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingBase abstract : System::Windows::Markup::MarkupExtension" />
  <TypeSignature Language="F#" Value="type BindingBase = class&#xA;    inherit MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract BindingBase extends System.Windows.Markup.MarkupExtension" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Markup.MarkupExtension</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Object))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义 <see cref="T:System.Windows.Data.Binding" />、<see cref="T:System.Windows.Data.PriorityBinding" /> 和 <see cref="T:System.Windows.Data.MultiBinding" /> 类的公共特性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于 <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType> 方法是密封的，因此从 <xref:System.Windows.Data.BindingBase> 派生的自定义绑定类将无法作为 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 标记扩展正常运行。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BindingGroupName">
      <MemberSignature Language="C#" Value="public string BindingGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BindingGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.BindingGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BindingGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroupName : string with get, set" Usage="System.Windows.Data.BindingBase.BindingGroupName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此绑定所属的 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。</summary>
        <value>此绑定所属的 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未设置 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A>，则只有在绑定的源和具有 <xref:System.Windows.Data.BindingGroup> 的父元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 为同一对象时，绑定才属于 <xref:System.Windows.Data.BindingGroup>。  
  
 如果 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 设置为一个值，则在满足以下条件时，该绑定属于 <xref:System.Windows.Data.BindingGroup>：  
  
-   <xref:System.Windows.Data.BindingGroup> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 和 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 相等。  
  
-   <xref:System.Windows.Data.BindingGroup> 属于绑定的目标元素的父元素。  
  
 如果 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 设置为 `null`，则绑定永远不会是 <xref:System.Windows.Data.BindingGroup>的一部分。  
  
 可以通过将 <xref:System.Windows.Data.BindingGroup> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 和绑定的 "<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>" 属性设置为相同的值，将具有不同于父元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 的绑定包括 <xref:System.Windows.Data.BindingGroup>。  您可以通过将 <xref:System.Windows.Data.BindingGroup> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 和绑定的 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 属性设置为不同的值，排除与具有 <xref:System.Windows.Data.BindingGroup> 的父元素 <xref:System.Windows.FrameworkElement.DataContext%2A> 具有相同源的绑定。  
  
   
  
## Examples  
 以下示例是应用程序的一部分，用于检查用户是否已将两个对象的属性设置为相等值。 第一个示例创建两个 <xref:System.Windows.Controls.TextBox> 控件，其中每个控件都绑定到不同的数据源：第一个 <xref:System.Windows.Controls.TextBox> 的绑定是 <xref:System.Windows.Data.BindingGroup> 的一部分，因为 <xref:System.Windows.Controls.TextBox> 从其父 <xref:System.Windows.FrameworkElement.DataContext%2A> 继承 <xref:System.Windows.Data.BindingGroup> 和 <xref:System.Windows.Controls.StackPanel>  
  
 第二个 <xref:System.Windows.Controls.TextBox> 上的绑定是 <xref:System.Windows.Data.BindingGroup> 的一部分，因为 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 的 <xref:System.Windows.Data.BindingGroup> 和 <xref:System.Windows.Data.Binding> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 都设置为 `bindingGroup`。  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 下面的示例演示上一示例使用的 <xref:System.Windows.Controls.ValidationRule>。  在 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法中，该示例从 <xref:System.Windows.Data.BindingGroup> 中获取每个源对象，并检查对象的属性是否相等。  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public int Delay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delay" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.Delay" />
      <MemberSignature Language="VB.NET" Value="Public Property Delay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Delay : int with get, set" Usage="System.Windows.Data.BindingBase.Delay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置更新位于目标更改上的值之后的绑定源前要等待的时间（毫秒）。</summary>
        <value>在更新绑定资源之前要等待的时间（以毫秒为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在目标上属性的值发生更改时使用绑定来更新绑定源，请将 <xref:System.Windows.Data.Binding.Mode%2A> 属性设置为 <xref:System.Windows.Data.BindingMode.TwoWay> 并将 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 为 <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>。  在这种情况下，您可以使用 <xref:System.Windows.Data.BindingBase.Delay%2A> 属性来指定是否应在更改目标和更新源之间进行时间延迟。  当你希望允许用户更改源对象上的属性，但不希望将每个更改立即提交到源时，此方法非常有用。  例如，假设您有一个文本框，该文本框的数据双向绑定到数据对象的属性。  当用户更改文本框中的值时，源会更新。  若要启用此方案，请将 <xref:System.Windows.Data.Binding> 上的 <xref:System.Windows.Data.Binding.Mode%2A> 属性设置为 <xref:System.Windows.Data.BindingMode.TwoWay>，并将 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 设置为 <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>。  若要避免每次击键时更新源对象，请将 <xref:System.Windows.Data.BindingBase.Delay%2A> 属性设置为一个合理的值，以使绑定仅在用户停止键入之后经过一段时间后才进行更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FallbackValue">
      <MemberSignature Language="C#" Value="public object FallbackValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FallbackValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.FallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Property FallbackValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FallbackValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FallbackValue : obj with get, set" Usage="System.Windows.Data.BindingBase.FallbackValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当绑定无法返回值时要使用的值。</summary>
        <value>默认值是 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果以下情况，绑定将成功返回值：  
  
1.  绑定源的路径解析成功。  
  
2.  值转换器（如果有）能够转换结果值。  
  
3.  生成的值对绑定目标（目标）属性有效。  
  
 如果1和2返回 <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>，则目标属性设置为 <xref:System.Windows.Data.BindingBase.FallbackValue%2A>的值（如果有）。 如果没有 <xref:System.Windows.Data.BindingBase.FallbackValue%2A>，则使用目标属性的默认值。  
  
 值 <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType> 不被视为成功的返回值。  
  
<a name="xamlTextUsage_FallbackValue"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
  
```  
<object FallbackValue="fallbackValue" />  
```  
  
 **或**  
  
```  
<object>  
  <object.FallbackValue>  
    fallbackValue  
    </object.FallbackValue>  
</object>  
```  
  
<a name="xamlValues_FallbackValue"></a>   
## <a name="xaml-values"></a>XAML 值  
 *fallbackValue*  
 与目标属性具有相同类型的属性或对象元素值。 有关 XAML 用法信息，请参阅该类型的文档。 该类型可能支持或不支持其值的特性语法，也可能支持或不支持对象元素语法（这需要对该类型具有无参数的构造函数）。 因此，目标属性类型将影响 <xref:System.Windows.Data.BindingBase.FallbackValue%2A> 属性的值所使用的语法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public override sealed object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="override this.ProvideValue : IServiceProvider -&gt; obj" Usage="bindingBase.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">可为标记扩展提供服务的对象。 可以为 <see langword="null" />；</param>
        <summary>返回一个应在应用了此绑定和扩展的属性上设置的对象。</summary>
        <returns>要在绑定目标属性上设置的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此实现为所有提供的实用派生类（<xref:System.Windows.Data.Binding>、<xref:System.Windows.Data.PriorityBinding>和 <xref:System.Windows.Data.MultiBinding>）提供通过 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 进行绑定的基本语法支持。  
  
 此方法的 <xref:System.Windows.Data.BindingBase> 类实现应返回作为绑定结果的表达式对象。 绑定属性的工作方式是在给定 <xref:System.Windows.DependencyObject>上以给定 <xref:System.Windows.DependencyProperty> 为目标。 这两部分信息通过在 `serviceProvider`上查询 <xref:System.Windows.Markup.IProvideValueTarget> 实现进行传输，[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 读取器在分析绑定期间可用。 此基类实现负责检查有效的 <xref:System.Windows.DependencyProperty> 和 <xref:System.Windows.DependencyObject>。 如果找到这些值，则返回绑定表达式的实际实现属于各种派生类，这是通过使基类调用内部抽象方法实现的。 否则，该扩展将返回绑定对象本身。 返回绑定本身会导致类型不匹配错误，但在正常情况下不会发生这种情况。  
  
> [!IMPORTANT]
>  由于在此方法中实现的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 的绑定语法依赖于实现内部重写，并且因为 <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType> 本身是密封的，因此从 <xref:System.Windows.Data.BindingBase> 派生的自定义绑定类将不能作为 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 标记扩展运行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeFallbackValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeFallbackValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeFallbackValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeFallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeFallbackValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeFallbackValue();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeFallbackValue : unit -&gt; bool" Usage="bindingBase.ShouldSerializeFallbackValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个值，该值指示序列化进程是否应当对此类的实例的 <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> 有效属性值进行序列化。</summary>
        <returns>如果应当序列化 <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTargetNullValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTargetNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTargetNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTargetNullValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTargetNullValue();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTargetNullValue : unit -&gt; bool" Usage="bindingBase.ShouldSerializeTargetNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个值，该值指示是否应序列化 <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> 属性。</summary>
        <returns>如果 <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> 属性应被序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringFormat">
      <MemberSignature Language="C#" Value="public string StringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.StringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property StringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StringFormat : string with get, set" Usage="System.Windows.Data.BindingBase.StringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个字符串，该字符串指定如果绑定值显示为字符串，应如何设置该绑定的格式。</summary>
        <value>一个字符串，该字符串指定如果绑定值显示为字符串，应如何设置该绑定的格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 可以是预定义的复合字符串格式。 有关字符串格式的详细信息，请参阅[格式设置类型](~/docs/standard/base-types/formatting-types.md)。  
  
 如果设置了 "<xref:System.Windows.Data.Binding.Converter%2A>" 和 "<xref:System.Windows.Data.BindingBase.StringFormat%2A>" 属性，转换器将首先应用于数据值，然后应用 <xref:System.Windows.Data.BindingBase.StringFormat%2A>。  
  
 将 <xref:System.Windows.Data.Binding> 上的 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 设置为复合字符串格式时，只能指定一个参数。  
  
 使用 <xref:System.Windows.Data.MultiBinding>时，<xref:System.Windows.Data.BindingBase.StringFormat%2A> 属性仅在 <xref:System.Windows.Data.MultiBinding>上设置时才适用。  将忽略在任何子 <xref:System.Windows.Data.Binding> 对象上设置 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 的值。  复合字符串格式中的参数数量不能超过 <xref:System.Windows.Data.MultiBinding>中子 <xref:System.Windows.Data.Binding> 对象的数量。  
  
 当你使用 <xref:System.Windows.Data.PriorityBinding>时，你可以在 <xref:System.Windows.Data.PriorityBinding>上、对子绑定对象上或同时为两者设置 <xref:System.Windows.Data.BindingBase.StringFormat%2A>。  如果 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 在应用的子绑定上设置，则使用该值。  如果 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 未在应用的子绑定上设置，则将应用 <xref:System.Windows.Data.PriorityBinding> 的 <xref:System.Windows.Data.BindingBase.StringFormat%2A> （如果已设置）。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 属性将 `Price`（<xref:System.Double>）转换为表示货币的字符串。  
  
 [!code-xaml[ContentStringSnippets#Binding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#binding)]  
  
 下面的示例使用 <xref:System.Windows.Data.MultiBinding> 上的 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 属性生成一个字符串，该字符串包含 <xref:System.Windows.Controls.ListBox>中每个项的 `Description` 和 `Price`。  
  
 [!code-xaml[ContentStringSnippets#MultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#multibinding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNullValue">
      <MemberSignature Language="C#" Value="public object TargetNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.TargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetNullValue : obj with get, set" Usage="System.Windows.Data.BindingBase.TargetNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当源的值为 <see langword="null" /> 时在目标中使用的值。</summary>
        <value>当源的值为 <see langword="null" /> 时在目标中使用的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_TargetNullValue"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
  
```  
<object TargetNullValue="nullValue" />  
```  
  
 **或**  
  
```  
<object>  
  <object.TargetNullValue>  
    nullValue  
    </object.TargetNullValue>  
</object>  
```  
  
<a name="xamlValues_TargetNullValue"></a>   
## <a name="xaml-values"></a>XAML 值  
 *nullValue*  
 与目标属性具有相同类型的属性或对象元素值。 有关 XAML 用法信息，请参阅该类型的文档。 该类型可能支持或不支持其值的特性语法，也可能支持或不支持对象元素语法（这需要对该类型具有无参数的构造函数）。  
  
   
  
## Examples  
 下面的示例将 <xref:System.Windows.Controls.TextBox> 绑定到对象的属性。  如果该属性 `null`，则 <xref:System.Windows.Controls.TextBox> 显示 "请输入字符串"。  
  
 [!code-xaml[BindingGroupSnippets#TargetNullValue](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#targetnullvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
