<Type Name="RelativeSource" FullName="System.Windows.Data.RelativeSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7c4fd13beca5c4cb18b1db80ace46879fb820c24" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102069396" /></Metadata><TypeSignature Language="C#" Value="public class RelativeSource : System.Windows.Markup.MarkupExtension, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RelativeSource extends System.Windows.Markup.MarkupExtension implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.RelativeSource" />
  <TypeSignature Language="VB.NET" Value="Public Class RelativeSource&#xA;Inherits MarkupExtension&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class RelativeSource : System::Windows::Markup::MarkupExtension, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type RelativeSource = class&#xA;    inherit MarkupExtension&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Markup.MarkupExtension</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Windows.Data.RelativeSource))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Windows.Data.RelativeSource))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>实现一个标记扩展，该扩展描述相对于绑定目标位置的绑定源位置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定绑定源的一种方法是使用 <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=nameWithType> 属性。 这是该属性的属性类型。 <xref:System.Windows.Data.RelativeSource> 同时为标记扩展实现和数据对象。 当扩展返回自身 (参阅 <xref:System.Windows.Data.RelativeSource.ProvideValue%2A>) 时，数据中包含相关信息。 标记扩展的主要目的是允许特性形式的可变参数构造函数语法，以便 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor> 可以使用其他模式不需要的上级类型和级别的两个额外参数以内联方式定义模式。  
  
 有关 XAML 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
  
## Examples  
 下面的示例演示了一个创建的、 <xref:System.Windows.Controls.ToolTip> 用于报告验证错误消息的样式触发器。 使用 <xref:System.Windows.Data.Binding.RelativeSource%2A> 属性，setter 的值将绑定到当前 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.TextBox> 使用样式)  (的错误内容。 有关此示例的详细信息，请参阅 [如何：实现绑定验证](/dotnet/framework/wpf/data/how-to-implement-binding-validation)。  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 下面的示例演示 <xref:System.Windows.Style> 一个名为的自定义控件的定义 `NumericUpDown` 。 <xref:System.Windows.Controls.TextBlock.Text%2A>的属性绑定到作为的对象的，这是 <xref:System.Windows.Controls.TextBlock> `Value` `TemplatedParent` `NumericUpDown` <xref:System.Windows.Style> 在这种情况下应用此的控件。  
  
 [!code-xaml[CustomControlNumericUpDown#RelativeSource](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/themes/generic.xaml#relativesource)]  
  
 有关完整示例，请参阅 [NumericUpDown 自定义控件和主题和 UI 自动化支持示例](https://go.microsoft.com/fwlink/?LinkID=160025)。  
  
 下面的 <xref:System.Windows.Controls.ItemsControl> 从绑定的目标元素开始，返回上个路径中遇到的第二个。  
  
 [!code-csharp[BindConversion#RelativeSource](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#relativesource)]
 [!code-vb[BindConversion#RelativeSource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#relativesource)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.RelativeSource" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Data.RelativeSource" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelativeSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RelativeSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Data.RelativeSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelativeSource (System.Windows.Data.RelativeSourceMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Data.RelativeSourceMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.#ctor(System.Windows.Data.RelativeSourceMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As RelativeSourceMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RelativeSource(System::Windows::Data::RelativeSourceMode mode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.RelativeSource : System.Windows.Data.RelativeSourceMode -&gt; System.Windows.Data.RelativeSource" Usage="new System.Windows.Data.RelativeSource mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Data.RelativeSourceMode" />
      </Parameters>
      <Docs>
        <param name="mode"><see cref="T:System.Windows.Data.RelativeSourceMode" /> 值之一。</param>
        <summary>用初始模式初始化 <see cref="T:System.Windows.Data.RelativeSource" /> 类的一个新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelativeSource (System.Windows.Data.RelativeSourceMode mode, Type ancestorType, int ancestorLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Data.RelativeSourceMode mode, class System.Type ancestorType, int32 ancestorLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.#ctor(System.Windows.Data.RelativeSourceMode,System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As RelativeSourceMode, ancestorType As Type, ancestorLevel As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RelativeSource(System::Windows::Data::RelativeSourceMode mode, Type ^ ancestorType, int ancestorLevel);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.RelativeSource : System.Windows.Data.RelativeSourceMode * Type * int -&gt; System.Windows.Data.RelativeSource" Usage="new System.Windows.Data.RelativeSource (mode, ancestorType, ancestorLevel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Data.RelativeSourceMode" />
        <Parameter Name="ancestorType" Type="System.Type" />
        <Parameter Name="ancestorLevel" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mode"><see cref="T:System.Windows.Data.RelativeSourceMode" /> 值之一。 对于这一相关的签名，该值应当为 <see cref="F:System.Windows.Data.RelativeSourceMode.FindAncestor" />。</param>
        <param name="ancestorType">要查找的上级节点的 <see cref="T:System.Type" />。</param>
        <param name="ancestorLevel">所有给定类型的上级节点中所需的上级节点的序号位置。</param>
        <summary>用初始模式以及其他用于查找所需相对源的树遍历限定符初始化 <see cref="T:System.Windows.Data.RelativeSource" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ancestorType``ancestorLevel`如果给出了除以外的参数，则和没有关联 `mode` <xref:System.Windows.Data.RelativeSourceMode.FindAncestor> 。 不要将此签名用于其他 <xref:System.Windows.Data.RelativeSourceMode> 值。  
  
   
  
## Examples  
 下面的 <xref:System.Windows.Controls.ItemsControl> 从绑定的目标元素开始，返回上个路径中遇到的第二个。  
  
 [!code-csharp[BindConversion#RelativeSource](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#relativesource)]
 [!code-vb[BindConversion#RelativeSource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#relativesource)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AncestorLevel">
      <MemberSignature Language="C#" Value="public int AncestorLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AncestorLevel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.RelativeSource.AncestorLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property AncestorLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AncestorLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AncestorLevel : int with get, set" Usage="System.Windows.Data.RelativeSource.AncestorLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以 <see cref="F:System.Windows.Data.RelativeSourceMode.FindAncestor" /> 模式获取或设置要查找的上级级别。 使用 1 指示最靠近绑定目标元素的项。</summary>
        <value>上级级别。 使用 1 指示最靠近绑定目标元素的项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Data.RelativeSource.Mode%2A> 未显式设置属性，则设置 <xref:System.Windows.Data.RelativeSource.AncestorType%2A> 或 <xref:System.Windows.Data.RelativeSource.AncestorLevel%2A> 属性会将属性值隐式锁定 <xref:System.Windows.Data.RelativeSource.Mode%2A> 为 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor> 。  
  
<a name="xamlTextUsage_AncestorLevel"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 有关 XAML 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
  
   
  
## Examples  
 下面的 <xref:System.Windows.Controls.ItemsControl> 从绑定的目标元素开始，返回上个路径中遇到的第二个。  
  
 [!code-csharp[BindConversion#RelativeSource](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#relativesource)]
 [!code-vb[BindConversion#RelativeSource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#relativesource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.RelativeSourceMode" />
        <altmember cref="T:System.Windows.Data.RelativeSource" />
      </Docs>
    </Member>
    <Member MemberName="AncestorType">
      <MemberSignature Language="C#" Value="public Type AncestorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AncestorType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.RelativeSource.AncestorType" />
      <MemberSignature Language="VB.NET" Value="Public Property AncestorType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ AncestorType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AncestorType : Type with get, set" Usage="System.Windows.Data.RelativeSource.AncestorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要查找的上级节点的类型。</summary>
        <value>上级节点的类型。 默认值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Data.RelativeSource.Mode%2A> 未显式设置属性，则设置 <xref:System.Windows.Data.RelativeSource.AncestorType%2A> 或 <xref:System.Windows.Data.RelativeSource.AncestorLevel%2A> 属性会将属性值隐式锁定 <xref:System.Windows.Data.RelativeSource.Mode%2A> 为 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor> 。  
  
<a name="xamlTextUsage_AncestorType"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 有关 XAML 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
  
   
  
## Examples  
 下面的 <xref:System.Windows.Controls.ItemsControl> 从绑定的目标元素开始，返回上个路径中遇到的第二个。  
  
 [!code-csharp[BindConversion#RelativeSource](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#relativesource)]
 [!code-vb[BindConversion#RelativeSource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#relativesource)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Data.RelativeSource" /> 未处于 <see cref="F:System.Windows.Data.RelativeSourceMode.FindAncestor" /> 模式中。</exception>
        <altmember cref="T:System.Windows.Data.RelativeSourceMode" />
        <altmember cref="P:System.Windows.Data.RelativeSource.AncestorLevel" />
        <altmember cref="F:System.Windows.Data.RelativeSourceMode.FindAncestor" />
        <altmember cref="T:System.Windows.Data.RelativeSource" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Data.RelativeSourceMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.RelativeSourceMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.RelativeSource.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As RelativeSourceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::RelativeSourceMode Mode { System::Windows::Data::RelativeSourceMode get(); void set(System::Windows::Data::RelativeSourceMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Data.RelativeSourceMode with get, set" Usage="System.Windows.Data.RelativeSource.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Markup.ConstructorArgument("mode")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Markup.ConstructorArgument("mode")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Data.RelativeSourceMode" /> 值，该值描述相对于绑定目标的位置的绑定源的位置。</summary>
        <value><see cref="T:System.Windows.Data.RelativeSourceMode" /> 值之一。 默认值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性在初始化后为只读。 如果未显式设置此属性，则设置 <xref:System.Windows.Data.RelativeSource.AncestorType%2A> 或， <xref:System.Windows.Data.RelativeSource.AncestorType%2A> 并且 <xref:System.Windows.Data.RelativeSource.AncestorLevel%2A> 属性将隐式锁定此属性值 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor> 。  
  
<a name="xamlTextUsage_Mode"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 有关 XAML 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此属性在初始化后不可变。 不更改此实例上的 <see cref="P:System.Windows.Data.RelativeSource.Mode" />，而是创建新 <see cref="T:System.Windows.Data.RelativeSource" /> 或使用其他静态实例。</exception>
        <altmember cref="T:System.Windows.Data.RelativeSourceMode" />
        <altmember cref="T:System.Windows.Data.RelativeSource" />
      </Docs>
    </Member>
    <Member MemberName="PreviousData">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.RelativeSource PreviousData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Data.RelativeSource PreviousData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.RelativeSource.PreviousData" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PreviousData As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Data::RelativeSource ^ PreviousData { System::Windows::Data::RelativeSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreviousData : System.Windows.Data.RelativeSource" Usage="System.Windows.Data.RelativeSource.PreviousData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个静态值，该值用于返回为 <see cref="T:System.Windows.Data.RelativeSource" /> 模式构造的 <see cref="F:System.Windows.Data.RelativeSourceMode.PreviousData" />。</summary>
        <value>静态 <see cref="T:System.Windows.Data.RelativeSource" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这四个 <xref:System.Windows.Data.RelativeSourceMode> 值（、 <xref:System.Windows.Data.RelativeSourceMode.PreviousData> <xref:System.Windows.Data.RelativeSourceMode.Self> 或） <xref:System.Windows.Data.RelativeSourceMode.TemplatedParent> 可生成 <xref:System.Windows.Data.RelativeSource> 完全静态的，不包含任何唯一的私有值。 静态属性的所有使用都可以共享同一个对象，从而无需为每个用途分配单独的对象。 因此，使用静态属性可减少内存使用量。  
  
<a name="xamlTextUsage_PreviousData"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 有关 XAML 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.RelativeSourceMode" />
        <altmember cref="T:System.Windows.Data.RelativeSource" />
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public override object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="override this.ProvideValue : IServiceProvider -&gt; obj" Usage="relativeSource.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">可为标记扩展提供服务的对象。 在此实现中，此参数可以为 <see langword="null" />。</param>
        <summary>返回一个应设置为此标记扩展的目标对象属性上的值的对象。 对于 <see cref="T:System.Windows.Data.RelativeSource" />，这是另一个 <see cref="T:System.Windows.Data.RelativeSource" />，它使用指定模式的适当的源。</summary>
        <returns>另一个 <see cref="T:System.Windows.Data.RelativeSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.RelativeSource> 同时为标记扩展实现和数据对象。 当扩展返回时，相关信息将包含在数据中。 标记扩展的主要目的是允许特性形式的可变参数构造函数语法 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor> ，以便可以以内联方式定义模式，对于其他模式不需要的上级类型和级别，还可以使用两个额外的参数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Self">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.RelativeSource Self { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Data.RelativeSource Self" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.RelativeSource.Self" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Self As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Data::RelativeSource ^ Self { System::Windows::Data::RelativeSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Self : System.Windows.Data.RelativeSource" Usage="System.Windows.Data.RelativeSource.Self" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个静态值，该值用于返回为 <see cref="T:System.Windows.Data.RelativeSource" /> 模式构造的 <see cref="F:System.Windows.Data.RelativeSourceMode.Self" />。</summary>
        <value>静态 <see cref="T:System.Windows.Data.RelativeSource" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这四个 <xref:System.Windows.Data.RelativeSourceMode> 值（、 <xref:System.Windows.Data.RelativeSourceMode.PreviousData> <xref:System.Windows.Data.RelativeSourceMode.Self> 或） <xref:System.Windows.Data.RelativeSourceMode.TemplatedParent> 可生成 <xref:System.Windows.Data.RelativeSource> 完全静态的，不包含任何唯一的私有值。 静态属性的所有使用都可以共享同一个对象，从而无需为每个用途分配单独的对象。 因此，使用静态属性可减少内存使用量。  
  
<a name="xamlTextUsage_Self"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 有关 XAML 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
  
   
  
## Examples  
 下面的示例演示了一个创建的、 <xref:System.Windows.Controls.ToolTip> 用于报告验证错误消息的样式触发器。 Setter 的值使用 <xref:System.Windows.Controls.TextBox> 属性) 的样式绑定到当前 (的错误内容 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Data.Binding.RelativeSource%2A> 。 有关此示例的详细信息，请参阅 [如何：实现绑定验证](/dotnet/framework/wpf/data/how-to-implement-binding-validation) 。  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.RelativeSourceMode" />
        <altmember cref="T:System.Windows.Data.RelativeSource" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeAncestorLevel">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeAncestorLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeAncestorLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.ShouldSerializeAncestorLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeAncestorLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeAncestorLevel();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeAncestorLevel : unit -&gt; bool" Usage="relativeSource.ShouldSerializeAncestorLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示是否应使 <see cref="P:System.Windows.Data.RelativeSource.AncestorLevel" /> 属性持久化。</summary>
        <returns>如果属性值已更改，不再是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ShouldSerialize`提供此方法是因为 <xref:System.Windows.Data.RelativeSource.AncestorLevel%2A> 属性没有简单的默认值。 此方法指示属性是否已更改为其默认值。 如果要开发的设计器 <xref:System.Windows.Data.RelativeSource> 或开发自己的包含的控件，通常需要调用此方法 <xref:System.Windows.Data.RelativeSource> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeAncestorType">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeAncestorType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeAncestorType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.ShouldSerializeAncestorType" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeAncestorType () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeAncestorType();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeAncestorType : unit -&gt; bool" Usage="relativeSource.ShouldSerializeAncestorType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示是否应使 <see cref="P:System.Windows.Data.RelativeSource.AncestorType" /> 属性持久化。</summary>
        <returns>如果属性值已更改，不再是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ShouldSerialize`提供此方法是因为 <xref:System.Windows.Data.RelativeSource.AncestorType%2A> 属性没有简单的默认值。 此方法指示属性是否已更改为其默认值。 如果要开发的设计器 <xref:System.Windows.Data.RelativeSource> 或开发自己的包含的控件，通常需要调用此方法 <xref:System.Windows.Data.RelativeSource> 。  
  
 有关详细信息，请参阅 [用 ShouldSerialize 和 Reset 方法定义默认值](/dotnet/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.ISupportInitialize.BeginInit : unit -&gt; unit&#xA;override this.System.ComponentModel.ISupportInitialize.BeginInit : unit -&gt; unit" Usage="relativeSource.System.ComponentModel.ISupportInitialize.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.RelativeSource.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.ISupportInitialize.EndInit : unit -&gt; unit&#xA;override this.System.ComponentModel.ISupportInitialize.EndInit : unit -&gt; unit" Usage="relativeSource.System.ComponentModel.ISupportInitialize.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.RelativeSource TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Data.RelativeSource TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.RelativeSource.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TemplatedParent As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Data::RelativeSource ^ TemplatedParent { System::Windows::Data::RelativeSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.Data.RelativeSource" Usage="System.Windows.Data.RelativeSource.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个静态值，该值用于返回为 <see cref="T:System.Windows.Data.RelativeSource" /> 模式构造的 <see cref="F:System.Windows.Data.RelativeSourceMode.TemplatedParent" />。</summary>
        <value>静态 <see cref="T:System.Windows.Data.RelativeSource" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这四个 <xref:System.Windows.Data.RelativeSourceMode> 值（、 <xref:System.Windows.Data.RelativeSourceMode.PreviousData> <xref:System.Windows.Data.RelativeSourceMode.Self> 或） <xref:System.Windows.Data.RelativeSourceMode.TemplatedParent> 可生成 <xref:System.Windows.Data.RelativeSource> 完全静态的，不包含任何唯一的私有值。 静态属性的所有使用都可以共享同一个对象，从而无需为每个用途分配单独的对象。 因此，使用静态属性可减少内存使用量。  
  
<a name="xamlTextUsage_TemplatedParent"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 有关 XAML 信息，请参阅 [RelativeSource MarkupExtension](/dotnet/framework/wpf/advanced/relativesource-markupextension)。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Windows.Style> 一个名为的自定义控件的定义 `NumericUpDown` 。 <xref:System.Windows.Controls.TextBlock.Text%2A>的属性绑定到作为的对象的，这是 <xref:System.Windows.Controls.TextBlock> `Value` `TemplatedParent` `NumericUpDown` <xref:System.Windows.Style> 在这种情况下应用此的控件。  
  
 [!code-xaml[CustomControlNumericUpDown#RelativeSource](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/themes/generic.xaml#relativesource)]  
  
 有关完整示例，请参阅 [NumericUpDown 自定义控件和主题和 UI 自动化支持示例](https://go.microsoft.com/fwlink/?LinkID=160025)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.RelativeSourceMode" />
        <altmember cref="T:System.Windows.Data.RelativeSource" />
      </Docs>
    </Member>
  </Members>
</Type>
