<Type Name="ElapsedEventHandler" FullName="System.Timers.ElapsedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3130ff3ee7d3bb1b17d91e7fd8428c3228a38917" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83978909" /></Metadata><TypeSignature Language="C#" Value="public delegate void ElapsedEventHandler(object sender, ElapsedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ElapsedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Timers.ElapsedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ElapsedEventHandler(sender As Object, e As ElapsedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ElapsedEventHandler(System::Object ^ sender, ElapsedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ElapsedEventHandler = delegate of obj * ElapsedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Timers.ElapsedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="10ce3-101">事件源。</span><span class="sxs-lookup"><span data-stu-id="10ce3-101">The source of the event.</span></span></param>
    <param name="e"><span data-ttu-id="10ce3-102">包含事件数据的 <see cref="T:System.Timers.ElapsedEventArgs" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="10ce3-102">An <see cref="T:System.Timers.ElapsedEventArgs" /> object that contains the event data.</span></span></param>
    <summary><span data-ttu-id="10ce3-103">表示将用来处理 <see cref="E:System.Timers.Timer.Elapsed" /> 的 <see cref="T:System.Timers.Timer" /> 事件的方法。</span><span class="sxs-lookup"><span data-stu-id="10ce3-103">Represents the method that will handle the <see cref="E:System.Timers.Timer.Elapsed" /> event of a <see cref="T:System.Timers.Timer" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10ce3-104">创建 <xref:System.Timers.ElapsedEventHandler> 委托时，需要标识将处理该事件的方法 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="10ce3-104">When you create an <xref:System.Timers.ElapsedEventHandler> delegate, you identify the method that will handle the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="10ce3-105">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="10ce3-105">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="10ce3-106">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="10ce3-106">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="10ce3-107">有关事件处理程序委托的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="10ce3-107">For more information about event handler delegates, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10ce3-108">下面的代码示例设置事件的事件处理程序 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> ，创建计时器并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="10ce3-108">The following code example sets up an event handler for the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event, creates a timer, and starts the timer.</span></span> <span data-ttu-id="10ce3-109">事件处理程序与委托具有相同的签名 <xref:System.Timers.ElapsedEventHandler> 。</span><span class="sxs-lookup"><span data-stu-id="10ce3-109">The event handler has the same signature as the <xref:System.Timers.ElapsedEventHandler> delegate.</span></span> <span data-ttu-id="10ce3-110"><xref:System.Timers.ElapsedEventArgs.SignalTime%2A>每次引发属性时，事件处理程序都显示该属性。</span><span class="sxs-lookup"><span data-stu-id="10ce3-110">The event handler displays the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> property each time it is raised.</span></span>  
  
 [!code-cpp[Classic Timer Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer Example/CS/source.cs#1)]
 [!code-vb[Classic Timer Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="T:System.Timers.ElapsedEventArgs" />
  </Docs>
</Type>
