<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df3f299ae8f19cc6399ce7c60a24fc1264c5af28" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83978894" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>在设定的间隔之后生成事件，带有生成重复事件的选项。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer> 组件是基于服务器的计时器，在 <xref:System.Timers.Timer.Interval%2A> 属性中的毫秒数后，在应用程序中引发 <xref:System.Timers.Timer.Elapsed> 事件。 您可以将 <xref:System.Timers.Timer> 对象配置为只引发一次事件，或反复使用 <xref:System.Timers.Timer.AutoReset%2A> 属性引发事件。 通常，在类级别声明 <xref:System.Timers.Timer> 对象，使其在需要时保持在范围内。 然后，可以处理其 <xref:System.Timers.Timer.Elapsed> 事件以提供常规处理。 例如，假设你有一个关键服务器，该服务器必须每周7天、每天24小时保持运行。 你可以创建一个服务，该服务使用 <xref:System.Timers.Timer> 对象定期检查服务器，并确保系统启动并运行。 如果系统未响应，则服务可能会尝试重新启动服务器或通知管理员。  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer> 类并非适用于所有 .NET 实现和版本，如 .NET Standard 1.6 和更低版本。
> 在这些情况下，可以改用 <xref:System.Threading.Timer?displayProperty=nameWithType> 类。
  
 此类型实现 <xref:System.IDisposable> 接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。  
  
 基于服务器的 <xref:System.Timers.Timer?displayProperty=nameWithType> 类设计用于多线程环境中的工作线程。 服务器计时器可以在线程间移动以处理引发的 <xref:System.Timers.Timer.Elapsed> 事件，从而比引发事件时的 Windows 计时器更为精确。  
  
 <xref:System.Timers.Timer?displayProperty=nameWithType> 组件根据 <xref:System.Timers.Timer.Interval%2A> 属性的值（以毫秒为单位）引发 <xref:System.Timers.Timer.Elapsed> 事件。 可以处理此事件以执行所需的处理。 例如，假设您有一个联机销售应用程序，该应用程序持续将销售订单发送到数据库。 用于对装运的说明进行编译的服务在一批订单上操作，而不是单独处理每个订单。 您可以使用 <xref:System.Timers.Timer> 每30分钟启动一次批处理。  
  
> [!IMPORTANT]
>  系统定时器类的分辨率与系统时钟相同。 这意味着，如果 <xref:System.Timers.Timer.Interval%2A> 属性小于系统时钟的分辨率，则 <xref:System.Timers.Timer.Elapsed> 事件将以系统时钟解析定义的间隔触发。 有关详细信息，请参阅 <xref:System.Timers.Timer.Interval%2A> 属性。  
  
 当 <xref:System.Timers.Timer.AutoReset%2A> 设置为 `false`时，<xref:System.Timers.Timer?displayProperty=nameWithType> 对象在第一个 <xref:System.Timers.Timer.Interval%2A> 结束后仅引发一次 <xref:System.Timers.Timer.Elapsed> 事件。 若要按 <xref:System.Timers.Timer.Interval%2A>定义的间隔定期持续引发 <xref:System.Timers.Timer.Elapsed> 事件，请将 "<xref:System.Timers.Timer.AutoReset%2A> 设置为" `true`"，这是默认值。  
  
 <xref:System.Timers.Timer> 组件捕获并取消了 <xref:System.Timers.Timer.Elapsed> 事件的事件处理程序引发的所有异常。 在未来版本的 .NET Framework 中，此行为可能会发生更改。 但请注意，对于异步执行并包括 `await` 运算符（在中C#）或 `Await` 运算符（在 Visual Basic 中）的事件处理程序而言，这并不适用。 这些事件处理程序中引发的异常将传播回调用线程，如下面的示例所示。 有关异步方法中引发的异常的详细信息，请参阅[异常处理](/dotnet/standard/parallel-programming/exception-handling-task-parallel-library)。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 如果 `null`<xref:System.Timers.Timer.SynchronizingObject%2A> 属性，则在 <xref:System.Threading.ThreadPool> 线程上引发 <xref:System.Timers.Timer.Elapsed> 事件。 如果 <xref:System.Timers.Timer.Elapsed> 事件的处理持续时间超过 <xref:System.Timers.Timer.Interval%2A>，则可能会在其他 <xref:System.Threading.ThreadPool> 线程上再次引发该事件。 在这种情况下，事件处理程序应该是可重入的。  
  
> [!NOTE]
>  事件处理方法可能在一个线程上运行，同时另一个线程调用 <xref:System.Timers.Timer.Stop%2A> 方法或将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false`。 这可能导致计时器停止后引发 <xref:System.Timers.Timer.Elapsed> 事件。 <xref:System.Timers.Timer.Stop%2A> 方法的代码示例演示了一种避免此争用条件的方法。  
  
 即使未 `null`<xref:System.Timers.Timer.SynchronizingObject%2A>，在调用 <xref:System.Timers.Timer.Dispose%2A> 或 <xref:System.Timers.Timer.Stop%2A> 方法之后或将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false`后，<xref:System.Timers.Timer.Elapsed> 事件也可能发生，因为引发 <xref:System.Timers.Timer.Elapsed> 事件的信号将始终排队等候在线程池线程上执行。 解决此争用情况的一种方法是设置一个标志，该标志告知 <xref:System.Timers.Timer.Elapsed> 事件的事件处理程序忽略后续事件。  
  
 如果将 <xref:System.Timers.Timer?displayProperty=nameWithType> 类与用户界面元素（如窗体或控件）结合使用，而不将计时器放在该用户界面元素上，请将包含 <xref:System.Timers.Timer> 的窗体或控件分配给 <xref:System.Timers.Timer.SynchronizingObject%2A> 属性，以便将该事件封送到用户界面线程。  
  
 有关 <xref:System.Timers.Timer>实例的默认属性值的列表，请参阅 <xref:System.Timers.Timer.%23ctor%2A> 构造函数。  
  
> [!TIP]
>  请注意，.NET 包含四个名为 `Timer`的类，每个类都提供不同的功能：  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> （本主题）：按固定间隔触发事件。 类旨在用作多线程环境中基于服务器的组件或服务组件;它没有用户界面，在运行时不可见。  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>：按固定间隔在线程池线程上执行单个回调方法。 回调方法是在实例化计时器时定义的，无法更改。 与 <xref:System.Timers.Timer?displayProperty=nameWithType> 类一样，此类用作多线程环境中基于服务器的或服务组件;它没有用户界面，在运行时不可见。  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> （仅 .NET Framework）：定期触发事件的 Windows 窗体组件。 该组件没有用户界面，专门用于单线程环境。  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> （仅 .NET Framework）：在固定时间间隔内执行异步或同步网页回发的 ASP.NET 组件。  

## Examples  
 下面的示例实例化一个 `System.Timers.Timer` 对象，该对象每隔两秒（2000毫秒）就会激发其 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 事件，并为事件设置事件处理程序并启动计时器。 每次引发时，事件处理程序都将显示 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 属性的值。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型的任何公共 <see langword="static" /> 成员都是线程安全的。 但不保证所有实例成员都是线程安全的。</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.Timers.Timer>实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 毫秒|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|空引用（在 Visual Basic 中为 `Nothing`）。|  
  
   
  
## Examples  
 下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象每隔两秒（2000毫秒）就会激发其 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 事件，并为事件设置事件处理程序并启动计时器。 每次引发时，事件处理程序都将显示 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 属性的值。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">事件之间经过的时间（以毫秒为单位）。 该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。</param>
        <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置新计时器实例的 <xref:System.Timers.Timer.Interval%2A> 属性，但不启用计时器。  
  
   
  
## Examples  
 下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象每隔两秒（2000毫秒）就会激发其 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 事件，并为事件设置事件处理程序并启动计时器。 每次引发时，事件处理程序都将显示 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 属性的值。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="interval" /> 参数的值小于或等于零，或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(<see langword="false" />) 或重复 (<see langword="true" />)）。</summary>
        <value>如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="false" />。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调用 <xref:System.Timers.Timer.Start%2A> 方法时已启用 <xref:System.Timers.Timer>，则重置间隔。 如果 `false`<xref:System.Timers.Timer.AutoReset%2A>，则必须调用 <xref:System.Timers.Timer.Start%2A> 方法才能重新开始计数。  
  
 重置间隔会影响引发 <xref:System.Timers.Timer.Elapsed> 事件的时间。 例如，如果将间隔设置为5秒，然后将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `true`，则在设置 <xref:System.Timers.Timer.Enabled%2A> 时将开始计数。 如果在计数为3秒时将间隔重置为10秒，则在 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `true`的第一次 <xref:System.Timers.Timer.Elapsed> 事件将在13秒后引发。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Timers.Timer>，其 <xref:System.Timers.Timer.Elapsed> 事件在1.5 秒后激发。 然后，它的事件处理程序显示 "Hello World！" 在控制台上。  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 设计环境使用此方法开始初始化在窗体上使用或由另一个组件使用的组件。 <xref:System.Timers.Timer.EndInit%2A> 方法结束初始化。 使用 <xref:System.Timers.Timer.BeginInit%2A> 和 <xref:System.Timers.Timer.EndInit%2A> 方法可防止控件在完全初始化之前被使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.Timers.Timer" /> 使用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Close%2A> 方法又调用 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">如果为 <see langword="true" />，则托管及非托管资源都释放；如果为 <see langword="false" />，则仅释放非托管资源。</param>
        <summary>释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>达到间隔时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Timers.Timer.Enabled%2A> 属性 `true` 并且 <xref:System.Timers.Timer.Interval%2A> 属性定义的时间间隔（以毫秒为单位），则会引发 <xref:System.Timers.Timer.Elapsed> 事件。 如果 `true`<xref:System.Timers.Timer.AutoReset%2A> 属性，则会按 <xref:System.Timers.Timer.Interval%2A> 属性定义的时间间隔重复引发事件;否则，在第一次 <xref:System.Timers.Timer.Interval%2A> 值结束时，仅引发一次事件。  
  
 如果 <xref:System.Timers.Timer.Interval%2A> 是在 <xref:System.Timers.Timer> 启动之后设置的，则会重置计数。 例如，如果将间隔设置为5秒，然后将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true`，则在设置 <xref:System.Timers.Timer.Enabled%2A> 时将开始计数。 如果在计数为3秒时将间隔重置为10秒，则在将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true`之前，第一次将引发 <xref:System.Timers.Timer.Elapsed> 事件。  
  
 如果 `null`<xref:System.Timers.Timer.SynchronizingObject%2A> 属性，则在 <xref:System.Threading.ThreadPool> 线程上引发 <xref:System.Timers.Timer.Elapsed> 事件。 如果对 <xref:System.Timers.Timer.Elapsed> 事件的处理持续时间超过 <xref:System.Timers.Timer.Interval%2A>，则可能会在另一个 <xref:System.Threading.ThreadPool> 线程上再次引发该事件。 在这种情况下，事件处理程序应该是可重入的。  
  
> [!NOTE]
>  事件处理方法可能在一个线程上运行，同时另一个线程调用 <xref:System.Timers.Timer.Stop%2A> 方法或将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false`。 这可能导致计时器停止后引发 <xref:System.Timers.Timer.Elapsed> 事件。 <xref:System.Timers.Timer.Stop%2A> 方法的代码示例演示了一种避免此争用条件的方法。  
  
 即使未 `null`<xref:System.Timers.Timer.SynchronizingObject%2A>，在调用 <xref:System.Timers.Timer.Dispose%2A> 或 <xref:System.Timers.Timer.Stop%2A> 方法之后或将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false`后，<xref:System.Timers.Timer.Elapsed> 事件也可能发生，因为引发 <xref:System.Timers.Timer.Elapsed> 事件的信号将始终排队等候在线程池线程上执行。 解决此争用情况的一种方法是设置一个标志，该标志告知 <xref:System.Timers.Timer.Elapsed> 事件的事件处理程序忽略后续事件。  
  
 <xref:System.Timers.Timer> 组件捕获并取消了 <xref:System.Timers.Timer.Elapsed> 事件的事件处理程序引发的所有异常。 在未来版本的 .NET Framework 中，此行为可能会发生更改。  
  
   
  
## Examples  
 下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象每隔两秒（2000毫秒）就会激发其 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 事件，并为事件设置事件处理程序并启动计时器。 每次引发时，事件处理程序都将显示 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 属性的值。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
        <value>如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true` 与调用 <xref:System.Timers.Timer.Start%2A>相同，而将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `false` 与调用 <xref:System.Timers.Timer.Stop%2A>是相同的。  
  
> [!NOTE]
>  引发 <xref:System.Timers.Timer.Elapsed> 事件的信号总是排队等候在 <xref:System.Threading.ThreadPool> 线程上执行。 这可能导致在将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false`后引发 <xref:System.Timers.Timer.Elapsed> 事件。 <xref:System.Timers.Timer.Stop%2A> 方法的代码示例演示了一种解决此争用条件的方法。  
  
 如果 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true` 并将 <xref:System.Timers.Timer.AutoReset%2A> 设置为 `false`，则 <xref:System.Timers.Timer> 仅在时间间隔结束时引发一次 <xref:System.Timers.Timer.Elapsed> 事件。  
  
 如果在 <xref:System.Timers.Timer> 开始后设置间隔，则重置计数。 例如，如果将间隔设置为5秒，然后将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `true`，则在设置 <xref:System.Timers.Timer.Enabled%2A> 时将开始计数。 如果在计数为3秒时将间隔重置为10秒，则在将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true`之前，第一次将引发 <xref:System.Timers.Timer.Elapsed> 事件。  
  
> [!NOTE]
>  某些可视化设计器（如 Microsoft Visual Studio 中的设计器）将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为插入新 <xref:System.Timers.Timer>时 `true`。  
  
   
  
## Examples  
 下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象每隔两秒（2000毫秒）就会激发其 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 事件，并为事件设置事件处理程序并启动计时器。 每次引发时，事件处理程序都将显示 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 属性的值。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">计时器已释放，无法设置此属性。</exception>
        <exception cref="T:System.ArgumentException">在定时器启用之前，<see cref="P:System.Timers.Timer.Interval" /> 属性设置为大于 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 设计环境使用此方法来结束在窗体上使用或由另一个组件使用的组件的初始化。 <xref:System.Timers.Timer.BeginInit%2A> 方法开始初始化。 使用 <xref:System.Timers.Timer.BeginInit%2A> 和 <xref:System.Timers.Timer.EndInit%2A> 方法可防止控件在完全初始化之前被使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。</summary>
        <value><see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。 该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。 默认值为 100 毫秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Timers.Timer.Interval%2A> 属性来确定激发 <xref:System.Timers.Timer.Elapsed> 事件的频率。 由于 <xref:System.Timers.Timer> 类依赖于系统时钟，因此它具有与系统时钟相同的分辨率。 这意味着，如果 <xref:System.Timers.Timer.Interval%2A> 属性小于系统时钟的分辨率，则 <xref:System.Timers.Timer.Elapsed> 事件将以系统时钟解析定义的间隔触发。 下面的示例将 <xref:System.Timers.Timer.Interval%2A> 属性设置为5毫秒。 当在其系统时钟分辨率约为15毫秒的 [!INCLUDE[win7](~/includes/win7-md.md)] 系统上运行时，事件大约每15毫秒激发一次，而不是每5毫秒触发一次。  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 你可以使用以下代码来确定当前系统上系统时钟的分辨率：  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 如果你的应用程序所需的分辨率比 <xref:System.Timers.Timer> 类或系统时钟提供的分辨率大，请使用高分辨率多媒体计时器;请参阅[如何：使用高分辨率计时器](https://msdn.microsoft.com/library/aa964692.aspx)。  
  
 如果在 <xref:System.Timers.Timer> 开始后设置间隔，则重置计数。 例如，如果将间隔设置为5秒，然后将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `true`，则在设置 <xref:System.Timers.Timer.Enabled%2A> 时将开始计数。 如果在计数为3秒时将间隔重置为10秒，则在将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true`之前，第一次将引发 <xref:System.Timers.Timer.Elapsed> 事件。  
  
 如果 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true` 并将 <xref:System.Timers.Timer.AutoReset%2A> 设置为 `false`，则 <xref:System.Timers.Timer> 仅在时间间隔结束时引发一次 <xref:System.Timers.Timer.Elapsed> 事件。 然后，将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `false`。  
  
> [!NOTE]
>  如果 <xref:System.Timers.Timer.Enabled%2A> 和 <xref:System.Timers.Timer.AutoReset%2A> 均设置为 `false`，并且之前已启用计时器，则设置 <xref:System.Timers.Timer.Interval%2A> 属性会导致 <xref:System.Timers.Timer.Elapsed> 事件引发一次，就像 <xref:System.Timers.Timer.Enabled%2A> 属性已设置为 `true`一样。 若要设置间隔而不引发事件，可以暂时将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `true`，将 <xref:System.Timers.Timer.Interval%2A> 属性设置为所需的时间间隔，然后立即将 <xref:System.Timers.Timer.Enabled%2A> 属性设置回 `false`。  
  
   
  
## Examples  
 下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象每隔两秒（2000毫秒）就会激发其 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 事件，并为事件设置事件处理程序并启动计时器。 每次引发时，事件处理程序都将显示 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 属性的值。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">间隔小于或等于零。  
  
- 或 - 
间隔大于 <see cref="F:System.Int32.MaxValue" />，计时器当前已启用。 （如果当前未启用计时器，则在启用它之前不会引发异常。）</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。</summary>
        <value><see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 站点将 <xref:System.ComponentModel.Component> 绑定到 <xref:System.ComponentModel.Container> 并启用它们之间的通信，并为容器提供一种方式来管理其组件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="true" /> 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调用 <xref:System.Timers.Timer.Start%2A> 并将 <xref:System.Timers.Timer.AutoReset%2A> 设置为 `false`，则 <xref:System.Timers.Timer> 第一次时间间隔内只引发一次 <xref:System.Timers.Timer.Elapsed> 事件。 如果调用 <xref:System.Timers.Timer.Start%2A> 并且 <xref:System.Timers.Timer.AutoReset%2A> `true`，则在第一次时间间隔结束时，<xref:System.Timers.Timer> 将引发 <xref:System.Timers.Timer.Elapsed> 事件，并继续按指定间隔引发事件。  
  
 还可以通过将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true`来开始计时。  
  
> [!NOTE]
>  如果 `false`<xref:System.Timers.Timer.AutoReset%2A>，则必须调用 <xref:System.Timers.Timer.Start%2A> 方法才能重新开始计数。  
  
 启用计时器时对 <xref:System.Timers.Timer.Start%2A> 方法的调用不起作用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="false" /> 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 还可以通过将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `false`来停止计时。  
  
> [!NOTE]
>  引发 <xref:System.Timers.Timer.Elapsed> 事件的信号始终排入队列以便在 <xref:System.Threading.ThreadPool> 线程上执行，因此，事件处理方法可能会在一个线程上运行，同时，对 <xref:System.Timers.Timer.Stop%2A> 方法的调用在另一个线程上运行。 这可能会导致在调用 <xref:System.Timers.Timer.Stop%2A> 方法后引发 <xref:System.Timers.Timer.Elapsed> 事件。 "[示例](#examples)" 部分中的第二个代码示例演示了解决此争用情况的一种方法。  
  
   
  
## Examples  
 下面的示例实例化一个 `System.Timers.Timer` 对象，该对象每隔两秒（2000毫秒）就会激发其 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 事件，并为事件设置事件处理程序并启动计时器。 每次引发时，事件处理程序都将显示 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 属性的值。 当用户按 Enter 键时，应用程序将在终止应用程序之前调用 <xref:System.Timers.Timer.Stop%2A> 方法。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 下面的代码示例演示了一种方法，用于阻止调用 <xref:System.Timers.Timer.Stop%2A> 方法的线程继续运行，直到当前正在执行的 <xref:System.Timers.Timer.Elapsed> 事件结束，同时防止两个 <xref:System.Timers.Timer.Elapsed> 事件同时执行事件处理程序（通常称为 "可重入"）。  
  
 该示例执行100个测试运行。 每次运行测试时，将以150毫秒为间隔启动计时器。 事件处理程序使用 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 方法来模拟随机变化时间长度介于50到200毫秒之间的任务。 测试方法还启动一个控制线程，该线程等待另一个线程，然后停止计时器。 如果在控制线程停止计时器时处理某个事件，则控制线程必须等待事件完成，然后再继续。  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 方法重载用于避免重新进入，并防止控制线程继续运行，直到执行事件结束。 事件处理程序使用 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> 方法将控制变量设置为1，但仅当该值当前为零时。 这是一个原子操作。 如果返回值为零，则控制变量已设置为1，事件处理程序将继续。 如果返回值不为零，则只会丢弃事件以避免重新进入。 （如果有必要执行每个事件，<xref:System.Threading.Monitor> 类将是同步事件的更好方法。）当事件处理程序结束时，它会将控制变量设置回零。 该示例记录由于重新进入而放弃的事件总数，以及在调用 <xref:System.Timers.Timer.Stop%2A> 方法之后发生的事件的总数。  
  
 控制线程使用 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> 方法将控制变量设置为-1 （减一），但仅当该值当前为零时。 如果原子操作返回非零值，则当前正在执行事件。 控制线程将等待并再次尝试。 该示例记录控制线程等待事件完成的次数。  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。</summary>
        <value><see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。 默认为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `null`<xref:System.Timers.Timer.SynchronizingObject%2A> 时，处理 <xref:System.Timers.Timer.Elapsed> 事件的方法将在系统线程池中的线程上调用。 有关系统线程池的详细信息，请参阅 <xref:System.Threading.ThreadPool>。  
  
 当 <xref:System.Timers.Timer.Elapsed> 事件由视觉对象 Windows 窗体组件（如按钮）处理时，通过系统线程池访问组件可能会导致异常或可能不起作用。 通过将 <xref:System.Timers.Timer.SynchronizingObject%2A> 设置为 Windows 窗体组件来避免这种影响，这会导致处理 <xref:System.Timers.Timer.Elapsed> 事件的方法在创建该组件的同一线程上调用。  
  
> [!NOTE]
>  即使未 `null`<xref:System.Timers.Timer.SynchronizingObject%2A> 属性，<xref:System.Timers.Timer.Elapsed> 事件也可能在调用了 <xref:System.Timers.Timer.Dispose%2A> 或 <xref:System.Timers.Timer.Stop%2A> 方法之后或将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false`之后发生，因为引发 <xref:System.Timers.Timer.Elapsed> 事件的信号将始终排队等候在线程池线程上执行。 解决此争用情况的一种方法是设置一个标志，该标志告知 <xref:System.Timers.Timer.Elapsed> 事件的事件处理程序忽略后续事件。  
  
 如果 <xref:System.Timers.Timer> 用于 Windows 窗体设计器中的 Visual Studio 内部，<xref:System.Timers.Timer.SynchronizingObject%2A> 将自动设置为包含 <xref:System.Timers.Timer>的控件。 例如，如果你将 <xref:System.Timers.Timer> 放置在 `Form1` 的设计器（从 <xref:System.Windows.Forms.Form>继承），则 <xref:System.Timers.Timer> 的 <xref:System.Timers.Timer.SynchronizingObject%2A> 属性将设置为 `Form1`的实例。  
  
   
  
## Examples  
 下面的示例是一个充当非常简单的文本文件编辑器的 Windows 窗体应用程序。 如果尚未保存文本框中的文本，应用程序会在一分钟的时间间隔内询问用户是否要保存文本框的内容。  为此，<xref:System.Timers.Timer.Interval%2A> 属性设置为一分钟（60000毫秒），<xref:System.Timers.Timer.SynchronizingObject%2A> 属性设置为 <xref:System.Windows.Forms.Form> 对象。  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 该示例要求你将以下控件添加到窗体中：  
  
-   名为 `TextBox1` 的 <xref:System.Windows.Forms.TextBox> 控件（其默认名称）。  
  
-   名为 `Button1` 的 <xref:System.Windows.Forms.Button> 控件（其默认名称）。  
  
-   名为 `SaveSaveFileDialog1` 的 <xref:System.Windows.Forms.SaveFileDialog> 控件（其默认名称）。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>
