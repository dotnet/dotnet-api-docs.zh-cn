<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3299c1020be232ae78acaa6add0e2ecc7569f9e8" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100284586" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.DefaultEvent("Elapsed")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultEvent("Elapsed")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("Interval")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("Interval")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9151f-101">在设定的间隔之后生成事件，带有生成重复事件的选项。</span><span class="sxs-lookup"><span data-stu-id="9151f-101">Generates an event after a set interval, with an option to generate recurring events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-102"><xref:System.Timers.Timer>组件是一个基于服务器的计时器，在 <xref:System.Timers.Timer.Elapsed> 属性中的毫秒数后，在应用程序中引发事件 <xref:System.Timers.Timer.Interval%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="9151f-103">您可以将 <xref:System.Timers.Timer> 对象配置为只引发一次事件，或使用属性重复一次 <xref:System.Timers.Timer.AutoReset%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="9151f-104">通常，在 <xref:System.Timers.Timer> 类级别声明对象，使其在需要时保持在范围内。</span><span class="sxs-lookup"><span data-stu-id="9151f-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="9151f-105">然后，可以处理其 <xref:System.Timers.Timer.Elapsed> 事件以提供常规处理。</span><span class="sxs-lookup"><span data-stu-id="9151f-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="9151f-106">例如，假设你有一个关键服务器，该服务器必须每周7天、每天24小时保持运行。</span><span class="sxs-lookup"><span data-stu-id="9151f-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="9151f-107">你可以创建一个服务，该服务使用 <xref:System.Timers.Timer> 对象来定期检查服务器，并确保系统正常运行。</span><span class="sxs-lookup"><span data-stu-id="9151f-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="9151f-108">如果系统未响应，则服务可能会尝试重新启动服务器或通知管理员。</span><span class="sxs-lookup"><span data-stu-id="9151f-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="9151f-109"><xref:System.Timers.Timer>该类并非适用于所有 .net 实现和版本，如 .NET Standard 1.6 和更低版本。</span><span class="sxs-lookup"><span data-stu-id="9151f-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="9151f-110">在这些情况下，可以改用 <xref:System.Threading.Timer?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="9151f-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="9151f-111">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="9151f-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="9151f-112">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="9151f-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="9151f-113">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="9151f-114">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="9151f-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="9151f-115">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="9151f-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="9151f-116">基于服务器的 <xref:System.Timers.Timer?displayProperty=nameWithType> 类用于多线程环境中的工作线程。</span><span class="sxs-lookup"><span data-stu-id="9151f-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="9151f-117">服务器计时器可以在线程之间移动以处理引发的 <xref:System.Timers.Timer.Elapsed> 事件，从而比引发事件时的 Windows 计时器更为精确。</span><span class="sxs-lookup"><span data-stu-id="9151f-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="9151f-118">组件将根据 <xref:System.Timers.Timer?displayProperty=nameWithType> <xref:System.Timers.Timer.Elapsed> 属性的值 (以毫秒) 来引发事件 <xref:System.Timers.Timer.Interval%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="9151f-119">可以处理此事件以执行所需的处理。</span><span class="sxs-lookup"><span data-stu-id="9151f-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="9151f-120">例如，假设您有一个联机销售应用程序，该应用程序持续将销售订单发送到数据库。</span><span class="sxs-lookup"><span data-stu-id="9151f-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="9151f-121">用于对装运的说明进行编译的服务在一批订单上操作，而不是单独处理每个订单。</span><span class="sxs-lookup"><span data-stu-id="9151f-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="9151f-122">您可以使用 <xref:System.Timers.Timer> 来每30分钟启动一次批处理。</span><span class="sxs-lookup"><span data-stu-id="9151f-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9151f-123">系统定时器类的分辨率与系统时钟相同。</span><span class="sxs-lookup"><span data-stu-id="9151f-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="9151f-124">这意味着， <xref:System.Timers.Timer.Elapsed> 如果 <xref:System.Timers.Timer.Interval%2A> 属性小于系统时钟的分辨率，则将以系统时钟解析定义的间隔触发事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="9151f-125">有关更多信息，请参见 <xref:System.Timers.Timer.Interval%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9151f-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="9151f-126">当 <xref:System.Timers.Timer.AutoReset%2A> 设置为时 `false` ， <xref:System.Timers.Timer?displayProperty=nameWithType> 对象在 <xref:System.Timers.Timer.Elapsed> 第一次运行后仅引发一次事件 <xref:System.Timers.Timer.Interval%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="9151f-127">若要按定义的间隔持续引发 <xref:System.Timers.Timer.Elapsed> 事件 <xref:System.Timers.Timer.Interval%2A> ，请将设置 <xref:System.Timers.Timer.AutoReset%2A> 为 `true` ，这是默认值。</span><span class="sxs-lookup"><span data-stu-id="9151f-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="9151f-128"><xref:System.Timers.Timer>组件捕获并取消事件的事件处理程序引发的所有异常 <xref:System.Timers.Timer.Elapsed> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="9151f-129">在未来版本的 .NET Framework 中，此行为可能会发生更改。</span><span class="sxs-lookup"><span data-stu-id="9151f-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="9151f-130">但请注意，这对于异步执行的事件处理程序来说并不是这样，而是 `await` 在 c # 中包含运算符 () 或 `Await` Visual Basic) 中的 operator (。</span><span class="sxs-lookup"><span data-stu-id="9151f-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="9151f-131">这些事件处理程序中引发的异常将传播回调用线程，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9151f-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="9151f-132">有关异步方法中引发的异常的详细信息，请参阅   [异常处理](/dotnet/standard/parallel-programming/exception-handling-task-parallel-library)。</span><span class="sxs-lookup"><span data-stu-id="9151f-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](/dotnet/standard/parallel-programming/exception-handling-task-parallel-library).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="9151f-133">如果 <xref:System.Timers.Timer.SynchronizingObject%2A> 属性为 `null` ，则在 <xref:System.Timers.Timer.Elapsed> 线程上引发事件 <xref:System.Threading.ThreadPool> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="9151f-134">如果事件的处理 <xref:System.Timers.Timer.Elapsed> 持续时间超过 <xref:System.Timers.Timer.Interval%2A> ，则可能会在另一个线程上再次引发该事件 <xref:System.Threading.ThreadPool> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="9151f-135">在这种情况下，事件处理程序应该是可重入的。</span><span class="sxs-lookup"><span data-stu-id="9151f-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9151f-136">事件处理方法可能在一个线程上运行，同时另一个线程调用 <xref:System.Timers.Timer.Stop%2A> 方法或将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="9151f-137">这可能会导致在 <xref:System.Timers.Timer.Elapsed> 计时器停止后引发事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="9151f-138">方法的代码示例 <xref:System.Timers.Timer.Stop%2A> 演示了一种避免此争用条件的方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="9151f-139">即使不 <xref:System.Timers.Timer.SynchronizingObject%2A> 是 `null` ，在 <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Dispose%2A> 调用或方法之后或属性设置为之后，也可能会发生事件 <xref:System.Timers.Timer.Stop%2A> <xref:System.Timers.Timer.Enabled%2A> `false` ，因为引发事件的信号 <xref:System.Timers.Timer.Elapsed> 总是排队等候在线程池线程上执行。</span><span class="sxs-lookup"><span data-stu-id="9151f-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="9151f-140">解决此争用情况的一种方法是设置一个标志，该标志通知事件的事件处理程序 <xref:System.Timers.Timer.Elapsed> 忽略后续事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="9151f-141">如果将类用于 <xref:System.Timers.Timer?displayProperty=nameWithType> 用户界面元素（如窗体或控件），而不将计时器放置在该用户界面元素上，请将包含的窗体或控件分配给该 <xref:System.Timers.Timer> <xref:System.Timers.Timer.SynchronizingObject%2A> 属性，以便将该事件封送到用户界面线程。</span><span class="sxs-lookup"><span data-stu-id="9151f-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="9151f-142">有关实例的默认属性值的列表 <xref:System.Timers.Timer> ，请参见 <xref:System.Timers.Timer.%23ctor%2A> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="9151f-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9151f-143">请注意，.NET 包含四个名为的类 `Timer` ，每个类都提供不同的功能：</span><span class="sxs-lookup"><span data-stu-id="9151f-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="9151f-144"><xref:System.Timers.Timer?displayProperty=nameWithType> 本主题 () ：定期触发事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="9151f-145">类旨在用作多线程环境中基于服务器的组件或服务组件;它没有用户界面，在运行时不可见。</span><span class="sxs-lookup"><span data-stu-id="9151f-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="9151f-146"><xref:System.Threading.Timer?displayProperty=nameWithType>：按固定间隔对线程池线程执行单个回调方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="9151f-147">回调方法是在实例化计时器时定义的，无法更改。</span><span class="sxs-lookup"><span data-stu-id="9151f-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="9151f-148">与 <xref:System.Timers.Timer?displayProperty=nameWithType> 类一样，此类应在多线程环境中用作基于服务器的或服务组件; 它没有用户界面，在运行时不可见。</span><span class="sxs-lookup"><span data-stu-id="9151f-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="9151f-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 仅)  ( .NET Framework：定期触发事件的 Windows 窗体组件。</span><span class="sxs-lookup"><span data-stu-id="9151f-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="9151f-150">该组件没有用户界面，专门用于单线程环境。</span><span class="sxs-lookup"><span data-stu-id="9151f-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="9151f-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> 仅)  ( .NET Framework：按固定间隔执行异步或同步网页回发的 ASP.NET 组件。</span><span class="sxs-lookup"><span data-stu-id="9151f-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="9151f-152">下面的示例实例化一个 `System.Timers.Timer` 对象，该对象 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 每两秒引发一次事件 (2000 毫秒) ，为事件设置事件处理程序，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="9151f-153">每次引发属性时，事件处理程序都将显示该属性的值 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9151f-154"><see langword="static" />此类型的任何公共成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="9151f-154">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="9151f-155">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="9151f-155">Any instance members are not guaranteed to be thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9151f-156">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9151f-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9151f-157">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。</span><span class="sxs-lookup"><span data-stu-id="9151f-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-158">下表显示了实例的初始属性值 <xref:System.Timers.Timer> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="9151f-159">属性</span><span class="sxs-lookup"><span data-stu-id="9151f-159">Property</span></span>|<span data-ttu-id="9151f-160">初始值</span><span class="sxs-lookup"><span data-stu-id="9151f-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="9151f-161">100 毫秒</span><span class="sxs-lookup"><span data-stu-id="9151f-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="9151f-162">空引用（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="9151f-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9151f-163">下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 每两秒引发一次事件 (2000 毫秒) ，为事件设置事件处理程序，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="9151f-164">每次引发属性时，事件处理程序都将显示该属性的值 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="9151f-165">事件之间经过的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="9151f-165">The time, in milliseconds, between events.</span></span> <span data-ttu-id="9151f-166">该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="9151f-167">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="9151f-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-168">此构造函数设置 <xref:System.Timers.Timer.Interval%2A> 新计时器实例的属性，但不启用计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9151f-169">下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 每两秒引发一次事件 (2000 毫秒) ，为事件设置事件处理程序，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="9151f-170">每次引发属性时，事件处理程序都将显示该属性的值 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9151f-171"><paramref name="interval" /> 参数的值小于或等于零，或大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
          <AttributeName Language="C#">[System.Timers.TimersDescription("TimerAutoReset")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("TimerAutoReset")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9151f-172">获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(<see langword="false" />) 或重复 (<see langword="true" />)）。</span><span class="sxs-lookup"><span data-stu-id="9151f-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span></span></summary>
        <value><span data-ttu-id="9151f-173">如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-173"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span></span> <span data-ttu-id="9151f-174">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-174">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-175">如果在 <xref:System.Timers.Timer> 调用方法时已启用 <xref:System.Timers.Timer.Start%2A> ，则重置间隔。</span><span class="sxs-lookup"><span data-stu-id="9151f-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="9151f-176">如果 <xref:System.Timers.Timer.AutoReset%2A> 为 `false` ，则 <xref:System.Timers.Timer.Start%2A> 必须调用方法才能重新开始计数。</span><span class="sxs-lookup"><span data-stu-id="9151f-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="9151f-177">重置间隔会影响 <xref:System.Timers.Timer.Elapsed> 引发事件的时间。</span><span class="sxs-lookup"><span data-stu-id="9151f-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="9151f-178">例如，如果将间隔设置为5秒，然后将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为，则 `true` 会在设置时开始计数 <xref:System.Timers.Timer.Enabled%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="9151f-179">如果在计数为3秒时将间隔重置为10秒，则该事件将在 <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Enabled%2A> 属性设置为13秒后首次引发 `true` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9151f-180">下面的示例创建一个， <xref:System.Timers.Timer> 其 <xref:System.Timers.Timer.Elapsed> 事件在1.5 秒后激发。</span><span class="sxs-lookup"><span data-stu-id="9151f-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="9151f-181">然后，它的事件处理程序显示 "Hello World！"</span><span class="sxs-lookup"><span data-stu-id="9151f-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="9151f-182">在控制台上。</span><span class="sxs-lookup"><span data-stu-id="9151f-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9151f-183">开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</span><span class="sxs-lookup"><span data-stu-id="9151f-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-184">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法开始初始化在窗体上使用或由另一个组件使用的组件。</span><span class="sxs-lookup"><span data-stu-id="9151f-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="9151f-185"><xref:System.Timers.Timer.EndInit%2A>方法结束初始化。</span><span class="sxs-lookup"><span data-stu-id="9151f-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="9151f-186">使用 <xref:System.Timers.Timer.BeginInit%2A> 和 <xref:System.Timers.Timer.EndInit%2A> 方法可防止控件在完全初始化之前被使用。</span><span class="sxs-lookup"><span data-stu-id="9151f-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9151f-187">释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。</span><span class="sxs-lookup"><span data-stu-id="9151f-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-188"><xref:System.Timers.Timer.Close%2A>方法又调用 `Dispose` 方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="9151f-189">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-189"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="9151f-190">释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="9151f-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
          <AttributeName Language="C#">[System.Timers.TimersDescription("TimerIntervalElapsed")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("TimerIntervalElapsed")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Timers.TimersDescription("Occurs when the Interval has elapsed.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("Occurs when the Interval has elapsed.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9151f-191">达到间隔时发生。</span><span class="sxs-lookup"><span data-stu-id="9151f-191">Occurs when the interval elapses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-192"><xref:System.Timers.Timer.Elapsed>如果 <xref:System.Timers.Timer.Enabled%2A> 属性为 `true` ，并且该属性定义的时间间隔 (以毫秒为单位) ，则会引发事件 <xref:System.Timers.Timer.Interval%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="9151f-193">如果 <xref:System.Timers.Timer.AutoReset%2A> 属性为 `true` ，则该事件将按属性定义的时间间隔重复引发 <xref:System.Timers.Timer.Interval%2A> ; 否则，该事件只引发一次，即值的第一次 <xref:System.Timers.Timer.Interval%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="9151f-194">如果 <xref:System.Timers.Timer.Interval%2A> 是在启动后设置的，则会 <xref:System.Timers.Timer> 重置计数。</span><span class="sxs-lookup"><span data-stu-id="9151f-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="9151f-195">例如，如果将间隔设置为5秒，然后将设置 <xref:System.Timers.Timer.Enabled%2A> 为，则在 `true` 设置时，将开始计数 <xref:System.Timers.Timer.Enabled%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="9151f-196">如果在计数为3秒时将间隔重置为10秒，则在 <xref:System.Timers.Timer.Elapsed> 将设置为第13秒后第一次引发事件 <xref:System.Timers.Timer.Enabled%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="9151f-197">如果 <xref:System.Timers.Timer.SynchronizingObject%2A> 属性为 `null` ，则在 <xref:System.Timers.Timer.Elapsed> 线程上引发事件 <xref:System.Threading.ThreadPool> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="9151f-198">如果事件的处理 <xref:System.Timers.Timer.Elapsed> 持续时间超过 <xref:System.Timers.Timer.Interval%2A> ，则可能会在另一个线程上再次引发该事件 <xref:System.Threading.ThreadPool> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="9151f-199">在这种情况下，事件处理程序应该是可重入的。</span><span class="sxs-lookup"><span data-stu-id="9151f-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9151f-200">事件处理方法可能在一个线程上运行，同时另一个线程调用 <xref:System.Timers.Timer.Stop%2A> 方法或将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="9151f-201">这可能会导致在 <xref:System.Timers.Timer.Elapsed> 计时器停止后引发事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="9151f-202">方法的代码示例 <xref:System.Timers.Timer.Stop%2A> 演示了一种避免此争用条件的方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="9151f-203">即使不 <xref:System.Timers.Timer.SynchronizingObject%2A> 是 `null` ，在 <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Dispose%2A> 调用或方法之后或属性设置为之后，也可能会发生事件 <xref:System.Timers.Timer.Stop%2A> <xref:System.Timers.Timer.Enabled%2A> `false` ，因为引发事件的信号 <xref:System.Timers.Timer.Elapsed> 总是排队等候在线程池线程上执行。</span><span class="sxs-lookup"><span data-stu-id="9151f-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="9151f-204">解决此争用情况的一种方法是设置一个标志，该标志通知事件的事件处理程序 <xref:System.Timers.Timer.Elapsed> 忽略后续事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="9151f-205"><xref:System.Timers.Timer>组件捕获并取消事件的事件处理程序引发的所有异常 <xref:System.Timers.Timer.Elapsed> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="9151f-206">此行为在 .NET Framework 的将来版本中可能会发生更改。</span><span class="sxs-lookup"><span data-stu-id="9151f-206">This behavior is subject to change in future releases of .NET Framework.</span></span>
  
## Examples  
 <span data-ttu-id="9151f-207">下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 每两秒引发一次事件 (2000 毫秒) ，为事件设置事件处理程序，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="9151f-208">每次引发属性时，事件处理程序都将显示该属性的值 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
          <AttributeName Language="C#">[System.Timers.TimersDescription("TimerEnabled")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("TimerEnabled")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9151f-209">获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="9151f-210">如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-210"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9151f-211">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-211">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-212">将设置 <xref:System.Timers.Timer.Enabled%2A> 为与 `true` 调用相同 <xref:System.Timers.Timer.Start%2A> ，而将设置 <xref:System.Timers.Timer.Enabled%2A> 为与 `false` 调用相同 <xref:System.Timers.Timer.Stop%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9151f-213">引发事件的信号 <xref:System.Timers.Timer.Elapsed> 总是排队等候在线程上执行 <xref:System.Threading.ThreadPool> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="9151f-214">这可能导致在 <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Enabled%2A> 将属性设置为之后引发事件 `false` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="9151f-215">方法的代码示例 <xref:System.Timers.Timer.Stop%2A> 演示了一种解决此争用条件的方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="9151f-216">如果将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true` 并 <xref:System.Timers.Timer.AutoReset%2A> 将设置为 `false` ，则在 <xref:System.Timers.Timer> <xref:System.Timers.Timer.Elapsed> 第一次时间间隔结束时，只引发一次事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="9151f-217">如果在开始后设置间隔 <xref:System.Timers.Timer> ，则重置计数。</span><span class="sxs-lookup"><span data-stu-id="9151f-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="9151f-218">例如，如果将间隔设置为5秒，然后将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为，则 `true` 会在设置时开始计数 <xref:System.Timers.Timer.Enabled%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="9151f-219">如果在计数为3秒时将间隔重置为10秒，则在 <xref:System.Timers.Timer.Elapsed> 将设置为第13秒后第一次引发事件 <xref:System.Timers.Timer.Enabled%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9151f-220">某些可视化设计器（如 Microsoft Visual Studio 中的设计器） <xref:System.Timers.Timer.Enabled%2A> 在插入新的时将属性设置为 `true` <xref:System.Timers.Timer> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>
  
## Examples  
 <span data-ttu-id="9151f-221">下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 每两秒引发一次事件 (2000 毫秒) ，为事件设置事件处理程序，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="9151f-222">每次引发属性时，事件处理程序都将显示该属性的值 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9151f-223">计时器已释放，无法设置此属性。</span><span class="sxs-lookup"><span data-stu-id="9151f-223">This property cannot be set because the timer has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9151f-224">在定时器启用之前，<see cref="P:System.Timers.Timer.Interval" /> 属性设置为大于 <see cref="F:System.Int32.MaxValue" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="9151f-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9151f-225">结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</span><span class="sxs-lookup"><span data-stu-id="9151f-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-226">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法来结束在窗体上使用或由另一个组件使用的组件的初始化。</span><span class="sxs-lookup"><span data-stu-id="9151f-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="9151f-227"><xref:System.Timers.Timer.BeginInit%2A>方法启动初始化。</span><span class="sxs-lookup"><span data-stu-id="9151f-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="9151f-228">使用 <xref:System.Timers.Timer.BeginInit%2A> 和 <xref:System.Timers.Timer.EndInit%2A> 方法可防止控件在完全初始化之前被使用。</span><span class="sxs-lookup"><span data-stu-id="9151f-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(100)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(100)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.RecommendedAsConfigurable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RecommendedAsConfigurable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
          <AttributeName Language="C#">[System.Timers.TimersDescription("TimerInterval")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("TimerInterval")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.SettingsBindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.SettingsBindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Timers.TimersDescription("The number of milliseconds between timer events.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("The number of milliseconds between timer events.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9151f-229">获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="9151f-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="9151f-230"><see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="9151f-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span></span> <span data-ttu-id="9151f-231">该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="9151f-232">默认值为 100 毫秒。</span><span class="sxs-lookup"><span data-stu-id="9151f-232">The default is 100 milliseconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-233">使用 <xref:System.Timers.Timer.Interval%2A> 属性来确定 <xref:System.Timers.Timer.Elapsed> 触发事件的频率。</span><span class="sxs-lookup"><span data-stu-id="9151f-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="9151f-234">因为 <xref:System.Timers.Timer> 类依赖于系统时钟，所以它具有与系统时钟相同的分辨率。</span><span class="sxs-lookup"><span data-stu-id="9151f-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="9151f-235">这意味着， <xref:System.Timers.Timer.Elapsed> 如果 <xref:System.Timers.Timer.Interval%2A> 属性小于系统时钟的分辨率，则将以系统时钟解析定义的间隔触发事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="9151f-236">下面的示例将 <xref:System.Timers.Timer.Interval%2A> 属性设置为5毫秒。</span><span class="sxs-lookup"><span data-stu-id="9151f-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="9151f-237">当在系统 [!INCLUDE[win7](~/includes/win7-md.md)] 时钟的分辨率约为15毫秒的系统上运行时，事件大约每15毫秒激发一次，而不是每5毫秒触发一次。</span><span class="sxs-lookup"><span data-stu-id="9151f-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="9151f-238">你可以使用以下代码来确定当前系统上系统时钟的分辨率：</span><span class="sxs-lookup"><span data-stu-id="9151f-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="9151f-239">如果你的应用程序所需的分辨率比 <xref:System.Timers.Timer> 类或系统时钟提供的分辨率大，请使用高分辨率多媒体计时器，请参阅 [如何：使用 High-Resolution 计时器](https://msdn.microsoft.com/library/aa964692.aspx)。</span><span class="sxs-lookup"><span data-stu-id="9151f-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](https://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="9151f-240">如果在开始后设置间隔 <xref:System.Timers.Timer> ，则重置计数。</span><span class="sxs-lookup"><span data-stu-id="9151f-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="9151f-241">例如，如果将间隔设置为5秒，然后将 <xref:System.Timers.Timer.Enabled%2A> 属性设置为，则 `true` 会在设置时开始计数 <xref:System.Timers.Timer.Enabled%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="9151f-242">如果在计数为3秒时将间隔重置为10秒，则在 <xref:System.Timers.Timer.Elapsed> 将设置为第13秒后第一次引发事件 <xref:System.Timers.Timer.Enabled%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="9151f-243">如果将 <xref:System.Timers.Timer.Enabled%2A> 设置为 `true` 并 <xref:System.Timers.Timer.AutoReset%2A> 将设置为 `false` ，则在 <xref:System.Timers.Timer> <xref:System.Timers.Timer.Elapsed> 第一次时间间隔结束时，只引发一次事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="9151f-244"><xref:System.Timers.Timer.Enabled%2A> 然后，将设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9151f-245">如果 <xref:System.Timers.Timer.Enabled%2A> 和均 <xref:System.Timers.Timer.AutoReset%2A> 设置为 `false` ，并且之前已启用计时器，则设置 <xref:System.Timers.Timer.Interval%2A> 属性将导致 <xref:System.Timers.Timer.Elapsed> 引发一次事件，就像 <xref:System.Timers.Timer.Enabled%2A> 属性已设置为一样 `true` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="9151f-246">若要设置间隔而不引发事件，可以暂时将属性设置 <xref:System.Timers.Timer.Enabled%2A> 为 `true` ，将属性设置 <xref:System.Timers.Timer.Interval%2A> 为所需的时间间隔，然后立即将 <xref:System.Timers.Timer.Enabled%2A> 属性重新设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9151f-247">下面的示例实例化一个 <xref:System.Timers.Timer> 对象，该对象 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 每两秒引发一次事件 (2000 毫秒) ，为事件设置事件处理程序，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="9151f-248">每次引发属性时，事件处理程序都将显示该属性的值 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9151f-249">间隔小于或等于零。</span><span class="sxs-lookup"><span data-stu-id="9151f-249">The interval is less than or equal to zero.</span></span>  
  
<span data-ttu-id="9151f-250">- 或 -</span><span class="sxs-lookup"><span data-stu-id="9151f-250">-or-</span></span> 
<span data-ttu-id="9151f-251">间隔大于 <see cref="F:System.Int32.MaxValue" />，计时器当前已启用。</span><span class="sxs-lookup"><span data-stu-id="9151f-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span></span> <span data-ttu-id="9151f-252">（如果当前未启用计时器，则在启用它之前不会引发异常。）</span><span class="sxs-lookup"><span data-stu-id="9151f-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span></span></exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9151f-253">获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。</span><span class="sxs-lookup"><span data-stu-id="9151f-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span></span></summary>
        <value><span data-ttu-id="9151f-254"><see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。</span><span class="sxs-lookup"><span data-stu-id="9151f-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-255">站点将绑定 <xref:System.ComponentModel.Component> 到， <xref:System.ComponentModel.Container> 并启用它们之间的通信，并为容器提供管理其组件的方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9151f-256">通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="true" /> 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-257">如果 <xref:System.Timers.Timer.Start%2A> 调用了并且 <xref:System.Timers.Timer.AutoReset%2A> 将设置为 `false` ，则在 <xref:System.Timers.Timer> <xref:System.Timers.Timer.Elapsed> 第一次时间间隔结束时，仅引发一次事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="9151f-258">如果 <xref:System.Timers.Timer.Start%2A> 调用并 <xref:System.Timers.Timer.AutoReset%2A> 为，则会在每 `true` <xref:System.Timers.Timer> <xref:System.Timers.Timer.Elapsed> 次间隔结束时引发事件，并继续在指定间隔内引发事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="9151f-259">还可以通过将设置 <xref:System.Timers.Timer.Enabled%2A> 为来开始计时 `true` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9151f-260">如果 <xref:System.Timers.Timer.AutoReset%2A> 为 `false` ，则 <xref:System.Timers.Timer.Start%2A> 必须调用方法才能重新开始计数。</span><span class="sxs-lookup"><span data-stu-id="9151f-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="9151f-261"><xref:System.Timers.Timer.Start%2A>当启用计时器时，对方法的调用不起作用。</span><span class="sxs-lookup"><span data-stu-id="9151f-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9151f-262">创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。</span><span class="sxs-lookup"><span data-stu-id="9151f-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9151f-263">通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="false" /> 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-264">还可以通过将设置 <xref:System.Timers.Timer.Enabled%2A> 为来停止计时 `false` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="9151f-265">引发事件的信号 <xref:System.Timers.Timer.Elapsed> 始终排入队列以便在线程上执行 <xref:System.Threading.ThreadPool> ，因此，事件处理方法可能会在一个线程上运行，同时在 <xref:System.Timers.Timer.Stop%2A> 另一个线程上运行对该方法的调用。</span><span class="sxs-lookup"><span data-stu-id="9151f-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="9151f-266">这可能会导致在 <xref:System.Timers.Timer.Elapsed> 调用方法后引发事件 <xref:System.Timers.Timer.Stop%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="9151f-267">"示例" 部分中的第二个代码示例演示了解决此争用情况的一种方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-267">The second code example in the Examples section shows one way to work around this race condition.</span></span>
  
## Examples  
 <span data-ttu-id="9151f-268">下面的示例实例化一个 `System.Timers.Timer` 对象，该对象 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 每两秒引发一次事件 (2000 毫秒) ，为事件设置事件处理程序，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="9151f-269">每次引发属性时，事件处理程序都将显示该属性的值 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="9151f-270">当用户按 Enter 键时，应用程序将在  <xref:System.Timers.Timer.Stop%2A> 终止应用程序之前调用方法。</span><span class="sxs-lookup"><span data-stu-id="9151f-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="9151f-271">下面的代码示例演示了一种方法，用于阻止调用方法的线程 <xref:System.Timers.Timer.Stop%2A> 继续运行，直到当前正在执行的 <xref:System.Timers.Timer.Elapsed> 事件结束，同时防止两个 <xref:System.Timers.Timer.Elapsed> 事件同时执行事件处理程序 (通常称为 "重入") 。</span><span class="sxs-lookup"><span data-stu-id="9151f-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="9151f-272">该示例执行100个测试运行。</span><span class="sxs-lookup"><span data-stu-id="9151f-272">The example executes 100 test runs.</span></span> <span data-ttu-id="9151f-273">每次运行测试时，将以150毫秒为间隔启动计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="9151f-274">事件处理程序使用 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 方法来模拟随机变化的任务，长度从50到200毫秒。</span><span class="sxs-lookup"><span data-stu-id="9151f-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="9151f-275">测试方法还启动一个控制线程，该线程等待另一个线程，然后停止计时器。</span><span class="sxs-lookup"><span data-stu-id="9151f-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="9151f-276">如果在控制线程停止计时器时处理某个事件，则控制线程必须等待事件完成，然后再继续。</span><span class="sxs-lookup"><span data-stu-id="9151f-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="9151f-277"><xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法重载用于避免重新进入，并防止控制线程继续运行，直到执行事件结束。</span><span class="sxs-lookup"><span data-stu-id="9151f-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="9151f-278">事件处理程序使用 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> 方法将控制变量设置为1，但仅当该值当前为零时。</span><span class="sxs-lookup"><span data-stu-id="9151f-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="9151f-279">这是一个原子操作。</span><span class="sxs-lookup"><span data-stu-id="9151f-279">This is an atomic operation.</span></span> <span data-ttu-id="9151f-280">如果返回值为零，则控制变量已设置为1，事件处理程序将继续。</span><span class="sxs-lookup"><span data-stu-id="9151f-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="9151f-281">如果返回值不为零，则只会丢弃事件以避免重新进入。</span><span class="sxs-lookup"><span data-stu-id="9151f-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="9151f-282"> (如果需要执行每个事件，则类将 <xref:System.Threading.Monitor> 是同步事件的更好方法。 ) 事件处理程序结束时，它会将控制变量设置回零。</span><span class="sxs-lookup"><span data-stu-id="9151f-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="9151f-283">该示例记录由于重新进入而放弃并在调用方法后发生的事件的总数 <xref:System.Timers.Timer.Stop%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="9151f-284">控制线程使用 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> 方法将控制变量 (减一) 设置为-1，但仅当该值当前为零时。</span><span class="sxs-lookup"><span data-stu-id="9151f-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="9151f-285">如果原子操作返回非零值，则当前正在执行事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="9151f-286">控制线程将等待并再次尝试。</span><span class="sxs-lookup"><span data-stu-id="9151f-286">The control thread waits and tries again.</span></span> <span data-ttu-id="9151f-287">该示例记录控制线程等待事件完成的次数。</span><span class="sxs-lookup"><span data-stu-id="9151f-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
          <AttributeName Language="C#">[System.Timers.TimersDescription("TimerSynchronizingObject")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("TimerSynchronizingObject")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9151f-288">获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。</span><span class="sxs-lookup"><span data-stu-id="9151f-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span></span></summary>
        <value><span data-ttu-id="9151f-289"><see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。</span><span class="sxs-lookup"><span data-stu-id="9151f-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span></span> <span data-ttu-id="9151f-290">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9151f-290">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9151f-291">当 <xref:System.Timers.Timer.SynchronizingObject%2A> 为时 `null` ，处理事件的方法 <xref:System.Timers.Timer.Elapsed> 将在系统线程池中的线程上调用。</span><span class="sxs-lookup"><span data-stu-id="9151f-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="9151f-292">有关系统线程池的详细信息，请参阅 <xref:System.Threading.ThreadPool> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="9151f-293">当 <xref:System.Timers.Timer.Elapsed> 事件由视觉对象 Windows 窗体组件（如按钮）处理时，通过系统线程池访问该组件可能会导致异常或可能不起作用。</span><span class="sxs-lookup"><span data-stu-id="9151f-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="9151f-294">通过将设置 <xref:System.Timers.Timer.SynchronizingObject%2A> 为 Windows 窗体组件来避免这种影响，这会使处理事件的方法 <xref:System.Timers.Timer.Elapsed> 在创建该组件的同一线程上进行调用。</span><span class="sxs-lookup"><span data-stu-id="9151f-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9151f-295">即使 <xref:System.Timers.Timer.SynchronizingObject%2A> 属性不是，在 `null` <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Dispose%2A> 调用或方法之后或属性设置为之后，事件也可能发生， <xref:System.Timers.Timer.Stop%2A> <xref:System.Timers.Timer.Enabled%2A> `false` 因为引发事件的信号 <xref:System.Timers.Timer.Elapsed> 总是排队等候在线程池线程上执行。</span><span class="sxs-lookup"><span data-stu-id="9151f-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="9151f-296">解决此争用情况的一种方法是设置一个标志，该标志通知事件的事件处理程序 <xref:System.Timers.Timer.Elapsed> 忽略后续事件。</span><span class="sxs-lookup"><span data-stu-id="9151f-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="9151f-297">如果在 <xref:System.Timers.Timer> Windows 窗体设计器中的 Visual Studio 内使用， <xref:System.Timers.Timer.SynchronizingObject%2A> 则将自动设置为包含的控件 <xref:System.Timers.Timer> 。</span><span class="sxs-lookup"><span data-stu-id="9151f-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="9151f-298">例如，如果您 <xref:System.Timers.Timer> 在的设计器上放置 `Form1` 从) 继承的 (<xref:System.Windows.Forms.Form> ，则的 <xref:System.Timers.Timer.SynchronizingObject%2A> 属性将 <xref:System.Timers.Timer> 设置为的实例 `Form1` 。</span><span class="sxs-lookup"><span data-stu-id="9151f-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9151f-299">下面的示例是一个充当非常简单的文本文件编辑器的 Windows 窗体应用程序。</span><span class="sxs-lookup"><span data-stu-id="9151f-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="9151f-300">如果尚未保存文本框中的文本，应用程序会在一分钟的时间间隔内询问用户是否要保存文本框的内容。</span><span class="sxs-lookup"><span data-stu-id="9151f-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="9151f-301">为此， <xref:System.Timers.Timer.Interval%2A> 属性设置为一分钟 (60000 毫秒) ， <xref:System.Timers.Timer.SynchronizingObject%2A> 属性设置为 <xref:System.Windows.Forms.Form> 对象。</span><span class="sxs-lookup"><span data-stu-id="9151f-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="9151f-302">该示例要求你将以下控件添加到窗体中：</span><span class="sxs-lookup"><span data-stu-id="9151f-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="9151f-303"><xref:System.Windows.Forms.TextBox>名为 `TextBox1` (其默认名称) 的控件。</span><span class="sxs-lookup"><span data-stu-id="9151f-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="9151f-304"><xref:System.Windows.Forms.Button>名为 `Button1` (其默认名称) 的控件。</span><span class="sxs-lookup"><span data-stu-id="9151f-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="9151f-305"><xref:System.Windows.Forms.SaveFileDialog>名为 `SaveSaveFileDialog1` (其默认名称) 的控件。</span><span class="sxs-lookup"><span data-stu-id="9151f-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>
