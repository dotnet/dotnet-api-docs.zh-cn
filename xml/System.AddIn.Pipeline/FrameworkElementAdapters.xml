<Type Name="FrameworkElementAdapters" FullName="System.AddIn.Pipeline.FrameworkElementAdapters">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f682e5b9b868ae7d89892f6f6ad50d88ab6eedca" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83928340" /></Metadata><TypeSignature Language="C#" Value="public static class FrameworkElementAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FrameworkElementAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.FrameworkElementAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElementAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElementAdapters abstract sealed" />
  <TypeSignature Language="F#" Value="type FrameworkElementAdapters = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Presentation</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Windows Presentation Foundation (WPF) 加载项使用 <see cref="T:System.AddIn.Pipeline.FrameworkElementAdapters" />，在 <see cref="T:System.Windows.FrameworkElement" /> 和 <see cref="T:System.AddIn.Contract.INativeHandleContract" /> 之间进行转换。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
Windows Presentation Foundation （WPF）扩展了 .NET Framework 外接程序模型，以允许在宿主应用程序和外接程序之间传递 WPF Ui。 WPF 要求直接或间接从 <xref:System.Windows.FrameworkElement>中派生的 WPF Ui。 不过，外接程序和主机应用程序通常在单独的应用程序域中运行，因此由隔离边界分隔。 出于此原因，.NET Framework 外接程序模型要求跨隔离边界传递的类型可进行远程处理。 可远程处理的类型符合以下其中一项：  
  
-   实现 <xref:System.Runtime.Serialization.ISerializable> 接口。  
  
-   应用了 <xref:System.SerializableAttribute> 特性。  
  
-   派生自 <xref:System.MarshalByRefObject> 类。  
  
 在外接程序和主机应用程序之间的隔离边界之间传递时，<xref:System.Windows.FrameworkElement> 不可远程处理，并且必须转换为可远程处理的类型。 为此，需要调用静态 <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A> 方法，将 <xref:System.Windows.FrameworkElement> 转换为可远程处理 <xref:System.AddIn.Contract.INativeHandleContract>的实例。  
  
 将 <xref:System.AddIn.Contract.INativeHandleContract> 传递到隔离边界后，必须将其转换为可由主机应用程序或外接程序显示的类型。 在这种情况下，将调用静态 <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A> 方法将 <xref:System.AddIn.Contract.INativeHandleContract> 转换为 <xref:System.Windows.FrameworkElement>。  
  
 有关 WPF 外接程序的更多详细处于阐释，请参阅[Wpf 外接程序概述](/dotnet/framework/wpf/app-development/wpf-add-ins-overview)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ContractToViewAdapter">
      <MemberSignature Language="C#" Value="public static System.Windows.FrameworkElement ContractToViewAdapter (System.AddIn.Contract.INativeHandleContract nativeHandleContract);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.FrameworkElement ContractToViewAdapter(class System.AddIn.Contract.INativeHandleContract nativeHandleContract) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter(System.AddIn.Contract.INativeHandleContract)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContractToViewAdapter (nativeHandleContract As INativeHandleContract) As FrameworkElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FrameworkElement ^ ContractToViewAdapter(System::AddIn::Contract::INativeHandleContract ^ nativeHandleContract);" />
      <MemberSignature Language="F#" Value="static member ContractToViewAdapter : System.AddIn.Contract.INativeHandleContract -&gt; System.Windows.FrameworkElement" Usage="System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter nativeHandleContract" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Presentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FrameworkElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nativeHandleContract" Type="System.AddIn.Contract.INativeHandleContract" />
      </Parameters>
      <Docs>
        <param name="nativeHandleContract">跨主机应用程序和外接程序之间的隔离边界进行传递的 <see cref="T:System.AddIn.Contract.INativeHandleContract" />。</param>
        <summary>返回已从 <see cref="T:System.Windows.FrameworkElement" /> 进行转换的 <see cref="T:System.AddIn.Contract.INativeHandleContract" />。</summary>
        <returns>将在主机应用程序或外接程序中显示的 <see cref="T:System.Windows.FrameworkElement" />，具体取决于 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 在二者之间的传递方向。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="ViewToContractAdapter">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.INativeHandleContract ViewToContractAdapter (System.Windows.FrameworkElement root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.INativeHandleContract ViewToContractAdapter(class System.Windows.FrameworkElement root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ViewToContractAdapter (root As FrameworkElement) As INativeHandleContract" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::AddIn::Contract::INativeHandleContract ^ ViewToContractAdapter(System::Windows::FrameworkElement ^ root);" />
      <MemberSignature Language="F#" Value="static member ViewToContractAdapter : System.Windows.FrameworkElement -&gt; System.AddIn.Contract.INativeHandleContract" Usage="System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Presentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.INativeHandleContract</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="root">要跨主机应用程序和外接程序之间的隔离边界进行传递的 <see cref="T:System.Windows.FrameworkElement" />。</param>
        <summary>返回已从 <see cref="T:System.AddIn.Contract.INativeHandleContract" /> 进行转换的 <see cref="T:System.Windows.FrameworkElement" />。</summary>
        <returns>从主机应用程序或外接程序进行传递的 <see cref="T:System.AddIn.Contract.INativeHandleContract" />，具体取决于 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 在二者之间的传递方向。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="root" /> 不是元素树的根元素。</exception>
        <altmember cref="M:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter(System.AddIn.Contract.INativeHandleContract)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/bb913905(v=vs.90)">WPF 外接程序具有多个 Ui 示例</related>
      </Docs>
    </Member>
  </Members>
</Type>
