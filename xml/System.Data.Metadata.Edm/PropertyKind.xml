<Type Name="PropertyKind" FullName="System.Data.Metadata.Edm.PropertyKind">
  <Metadata><Meta Name="ms.openlocfilehash" Value="de85d6e783401e3e40f5fcb69a61c0833841d714" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70650319" /></Metadata><TypeSignature Language="C#" Value="public enum PropertyKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PropertyKind extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.Metadata.Edm.PropertyKind" />
  <TypeSignature Language="VB.NET" Value="Public Enum PropertyKind" />
  <TypeSignature Language="C++ CLI" Value="public enum class PropertyKind" />
  <TypeSignature Language="F#" Value="type PropertyKind = " />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="a6b63-101">指定概念模型中项特性的类型。</span><span class="sxs-lookup"><span data-stu-id="a6b63-101">Specifies the kinds of item attributes in the conceptual model.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6b63-102">有关详细信息，请参阅 [ (CSDL) 的扩展属性 ](https://msdn.microsoft.com/library/697e2fb1-8977-4aa6-a1ef-236950e91fd1)。</span><span class="sxs-lookup"><span data-stu-id="a6b63-102">For more information, see [Extended Property (CSDL)](https://msdn.microsoft.com/library/697e2fb1-8977-4aa6-a1ef-236950e91fd1).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6b63-103">下面的代码示例演示如何利用连接获取元数据工作区，然后使用该元数据工作区在指定的数据模型中检索有关扩展属性的信息。</span><span class="sxs-lookup"><span data-stu-id="a6b63-103">The following code sample demonstrates how to get a metadata workspace from the connection and then use that metadata workspace to retrieve information about the extended properties in the specified data model.</span></span> <span data-ttu-id="a6b63-104">请注意，元数据工作区是一个为检索元数据提供支持的运行时服务组件。</span><span class="sxs-lookup"><span data-stu-id="a6b63-104">Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.</span></span>  
  
 <span data-ttu-id="a6b63-105">该代码示例使用 <xref:System.Data.Metadata.Edm.DataSpace.CSpace> 指定模型。</span><span class="sxs-lookup"><span data-stu-id="a6b63-105">The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace.CSpace> to specify the model.</span></span> <span data-ttu-id="a6b63-106"><xref:System.Data.Metadata.Edm.DataSpace.CSpace> 表示概念性模型的默认名称。</span><span class="sxs-lookup"><span data-stu-id="a6b63-106">The <xref:System.Data.Metadata.Edm.DataSpace.CSpace> represents the default name for the conceptual model.</span></span> <span data-ttu-id="a6b63-107">此代码示例使用 [Adventureworks 模型 (EDM) ](https://msdn.microsoft.com/library/da87d29e-8c89-4310-bbac-5cbd062930a7) 主题中提供的 adventureworks 模型。</span><span class="sxs-lookup"><span data-stu-id="a6b63-107">The code sample uses the AdventureWorks Model that is provided in the [AdventureWorks Model (EDM)](https://msdn.microsoft.com/library/da87d29e-8c89-4310-bbac-5cbd062930a7) topic.</span></span> <span data-ttu-id="a6b63-108">有关应用程序配置文件的示例，请参阅 [应用程序中的 AdventureWorks 对象模型 (EDM) ](https://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45)。</span><span class="sxs-lookup"><span data-stu-id="a6b63-108">For an example of the application config file, see [AdventureWorks Object Model in Applications (EDM)](https://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45).</span></span>  
  
```csharp  
using System;  
using System.Data;  
using System.Data.EntityClient;  
using System.Collections.ObjectModel;  
using System.Data.Metadata.Edm;  
  
class UsePropertyKindExample  
{  
   static void Main(string[] args)  
   {  
     try  
     {  
       // Establish a connection to the underlying data provider by   
       // using the connection string specified in the config file.  
       using (EntityConnection connection =  
           new EntityConnection("Name=AdventureworksContext"))  
       {  
          // Open the connection.  
          connection.Open();  
  
          // Access the metadata workspace.  
          MetadataWorkspace workspace =   
             connection.GetMetadataWorkspace();  
  
          // Display the extended properties in the conceptual model.  
          DisplayProperties(workspace, DataSpace.CSpace);  
       }  
     }  
     catch (MetadataException exceptionMetadata)  
     {  
         Console.WriteLine("MetadataException: {0}",  
                         exceptionMetadata.Message);  
     }  
     catch (System.Data.MappingException exceptionMapping)  
     {  
         Console.WriteLine("MappingException: {0}",  
                          exceptionMapping.Message);  
     }  
   }  
  
   public static void DisplayProperties(  
        MetadataWorkspace workspace, DataSpace model)  
   {  
      // Get a collection of the entity containers.  
      ReadOnlyCollection<EntityContainer> containers =  
          workspace.GetItems<EntityContainer>(model);  
  
      // Iterate through the collection to get each entity container.  
      foreach (EntityContainer container in containers)  
      {  
          // Display the extended properties for the entity container.  
          DisplayExtendedProperties(container);  
  
          // Iterate through the collection to get each entity set.  
          foreach (EntitySetBase baseSet in container.BaseEntitySets)  
          {  
              // Check whether this instance is an EntitySet.  
              if (baseSet is EntitySet)  
              {  
                 // Display the extended properties for the entity set.  
                 DisplayExtendedProperties(baseSet);  
              }  
          }  
      }  
  
      // Get a collection of the entity types.  
      ReadOnlyCollection<EntityType> entities =   
             workspace.GetItems<EntityType>(model);  
  
      // Iterate through the collection to get each entity type.  
      foreach (EntityType entity in entities)  
      {  
         // Display the extended properties for the entity type.  
         DisplayExtendedProperties(entity);  
      }  
   }  
  
   private static void DisplayExtendedProperties(MetadataItem item)  
   {  
     foreach (MetadataProperty property in item.MetadataProperties)  
     {  
         if (property.PropertyKind == PropertyKind.Extended)  
           Console.WriteLine(string.Format("\t{0}\t{1}\t{2}",   
             item.GetType().Name, property.Name, property.Value));  
     }  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Extended">
      <MemberSignature Language="C#" Value="Extended" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Metadata.Edm.PropertyKind Extended = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Metadata.Edm.PropertyKind.Extended" />
      <MemberSignature Language="VB.NET" Value="Extended" />
      <MemberSignature Language="C++ CLI" Value="Extended" />
      <MemberSignature Language="F#" Value="Extended = 1" Usage="System.Data.Metadata.Edm.PropertyKind.Extended" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.PropertyKind</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6b63-109">一个指示项属性为 <c>Extended</c> 的枚举成员。</span><span class="sxs-lookup"><span data-stu-id="a6b63-109">An enumeration member indicating that an item attribute is <c>Extended</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="System">
      <MemberSignature Language="C#" Value="System" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Metadata.Edm.PropertyKind System = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Metadata.Edm.PropertyKind.System" />
      <MemberSignature Language="VB.NET" Value="System" />
      <MemberSignature Language="C++ CLI" Value="System" />
      <MemberSignature Language="F#" Value="System = 0" Usage="System.Data.Metadata.Edm.PropertyKind.System" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.PropertyKind</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="a6b63-110">一个指示项属性为 <c>System</c> 的枚举成员。</span><span class="sxs-lookup"><span data-stu-id="a6b63-110">An enumeration member indicating that an item attribute is <c>System</c>.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
