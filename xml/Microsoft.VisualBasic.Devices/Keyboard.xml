<Type Name="Keyboard" FullName="Microsoft.VisualBasic.Devices.Keyboard">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bf3d1b8a1e7a2114a6ea6440b161bc0a3843a31a" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89792665" /></Metadata><TypeSignature Language="C#" Value="public class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供了用于访问键盘当前状态（如当前按下了哪些键）的属性，并提供了用于将击键发送到活动窗口的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard`对象为计算机键盘提供接口。 的属性 `My.Computer.Keyboard` 提供有关多个特殊键的状态的信息。 `My.Computer.Keyboard.SendKeys`方法可让你将密钥发送到活动窗口，就好像它们是在键盘上键入一样。  
  
## <a name="tasks"></a>任务  
 下表列出了涉及对象的任务的示例 `My.Computer.Keyboard` 。  
  
|功能|查看|  
|-|-|  
|向应用程序发送键击|[如何：启动应用程序并向其发送击键 (Visual Basic)](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Computer.Keyboard.CtrlKeyDown` 属性来确定是否按下了计算机的 CTRL 键。  
  
 [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Keyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Keyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Devices.Keyboard" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AltKeyDown">
      <MemberSignature Language="C#" Value="public bool AltKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AltKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AltKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AltKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AltKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已按下 Alt。</summary>
        <value><see langword="True" /> 如果 ALT 键关闭，则为; 否则为。否则为 <see langword="False" /> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.AltKeyDown`属性提供类似于属性的功能 <xref:System.Windows.Forms.Control.ModifierKeys%2A> 。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Computer.Keyboard.AltKeyDown` 属性来确定计算机的 ALT 键是否已关闭。  
  
 [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已打开 Caps Lock。</summary>
        <value>一个 <see langword="Boolean" /> 值： <see langword="True" /> 如果打开 Caps Lock，则为; 否则为 <see langword="False" /> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅返回 Caps Lock 的状态。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Computer.Keyboard.CapsLock` 属性来确定计算机的 Caps Lock 是否已打开。  
  
 [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CtrlKeyDown">
      <MemberSignature Language="C#" Value="public bool CtrlKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtrlKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtrlKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtrlKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CtrlKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已按下 Ctrl。</summary>
        <value><see langword="True" /> 如果按下了 CTRL 键，则为;否则为 <see langword="False" /> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.CtrlKeyDown`属性提供类似于属性的功能 <xref:System.Windows.Forms.Control.ModifierKeys%2A> 。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Computer.Keyboard.CtrlKeyDown` 属性来确定计算机的 CTRL 键是否已关闭。  
  
 [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="NumLock">
      <MemberSignature Language="C#" Value="public bool NumLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NumLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NumLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已打开 Num Lock。</summary>
        <value><see langword="True" /> 如果 NUM LOCK 已打开，则为;否则为 <see langword="False" /> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅返回 NUM LOCK 键的状态。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Computer.Keyboard.NumLock` 属性来确定计算机的 NUM lock 键是否已打开。  
  
 [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollLock">
      <MemberSignature Language="C#" Value="public bool ScrollLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see langword="Boolean" />，该值指示 Scroll Lock 键是否已打开。</summary>
        <value><see langword="True" /> 如果滚动锁已打开，则为;否则为 <see langword="False" /> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅返回 SCROLL LOCK 键的状态。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Computer.Keyboard.ScrollLock` 属性来确定计算机的 SCROLL LOCK 键是否已打开。  
  
 [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendKeys">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向活动窗口发送一个或多个键击，就像在键盘键入一样。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string -&gt; unit" Usage="keyboard.SendKeys keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">一个 <see langword="String" />，定义要发送的键。</param>
        <summary>向活动窗口发送一个或多个键击，就像在键盘键入一样。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys`方法提供的功能与 <xref:System.Windows.Forms.SendKeys.Send%2A> 和方法类似 <xref:System.Windows.Forms.SendKeys.SendWait%2A> 。  
  
 `wait`如果其他应用程序必须先完成，然后您的应用程序可以继续运行，则参数非常有用。  
  
> [!NOTE]
>  由于没有用于激活其他应用程序的托管方法，你可以在当前应用程序中使用此类，手动选择要将密钥发送到的窗口，或者使用 Windows API 方法（如 `FindWindow` 和 `SetForegroundWindow` ）强制将焦点放在其他应用程序上。 有关详细信息，请参阅 [演练：调用 Windows api](/dotnet/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis)。  
  
 `keys`参数可以指定任何单个键或与 ALT、CTRL 或 SHIFT 组合 (或这些键的任意组合) 的键。 每个键由一个或多个字符表示，例如 `a` 字符 "a" 或 `{ENTER}` ENTER 键。  
  
 若要将某个键与 SHIFT 组合在一起，请在键代码前面加上 `+` (加号) 。 若要将某个键与 CTRL 组合，请在键代码前面加上 `^` (插入符号) 。 若要将某个键与 ALT 组合在一起，请在键代码前面加上 `%` (百分号) 。 若要指定重复键，请使用窗体 `{` *密钥号* `}` 。 必须在 *键* 和 *数字*之间添加一个空格。 例如， `{LEFT 42}` 表示 "按左箭头键42次"; `{h 10}` 表示 "按" h "10 次"。  
  
 下表列出了可用于指定在按相应的键 (如 ENTER 或 TAB) 时未显示的字符的代码。  
  
|键|代码|  
|-|-|  
|Backspace|{BACKSPACE} 或 {BS.1770}|  
|BREAK|分|  
|Caps Lock|{CAPSLOCK}|  
|CLEAR|清除|  
|DELETE|{DELETE} 或 {DEL}|  
|向下键|分解|  
|End|{END}|  
|输入 (数字键盘) |回车|  
|Enter|~|  
|ESC|{ESCAPE} 或 {ESC}|  
|HELP|{HELP}|  
|Home|{HOME}|  
|Ins|&|  
|向左键|{LEFT}|  
|Num Lock|{NUMLOCK}|  
|Page Down|{PGDN}|  
|Page Up|PGUP|  
|RETURN|返回|  
|向右键|{RIGHT}|  
|Scroll Lock|{SCROLLLOCK}|  
|Tab|{TAB}|  
|向上键|UP|  
|F1 到 F15|{F1} 到 {F15}|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  

## Examples  

此示例使用 `My.Computer.Keyboard.SendKeys` 方法将击键发送到由方法启动的外部应用程序（记事本应用程序） <xref:Microsoft.VisualBasic.Interaction.Shell%2A> 。
  
[!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]

如果找不到具有请求的进程标识符的应用程序，则会引发 <xref:System.ArgumentException> 异常。
  
调用 <xref:Microsoft.VisualBasic.Interaction.Shell%2A> 方法需要完全信任 (<xref:System.Security.SecurityException> 类) 。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">存在部分信任的情况，此时用户缺少足够的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis">演练：调用 Windows API</related>
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String, wait As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys, bool wait);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string * bool -&gt; unit" Usage="keyboard.SendKeys (keys, wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keys">一个 <see langword="String" />，定义要发送的键。</param>
        <param name="wait">可选。 一个 <see langword="Boolean" /> 值，指定在应用程序继续之前是否等待键击处理完成。 默认值为 <see langword="True" />。</param>
        <summary>向活动窗口发送一个或多个键击，就像在键盘键入一样。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys`方法提供的功能与 <xref:System.Windows.Forms.SendKeys.Send%2A> 和方法类似 <xref:System.Windows.Forms.SendKeys.SendWait%2A> 。  
  
 `wait`如果其他应用程序必须先完成，然后您的应用程序可以继续运行，则参数非常有用。  
  
> [!NOTE]
>  由于没有用于激活其他应用程序的托管方法，你可以在当前应用程序中使用此类，手动选择要将密钥发送到的窗口，或者使用 Windows API 方法（如 `FindWindow` 和 `SetForegroundWindow` ）强制将焦点放在其他应用程序上。 有关详细信息，请参阅 [演练：调用 Windows api](/dotnet/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis)。  
  
 `keys`参数可以指定任何单个键或与 ALT、CTRL 或 SHIFT 组合 (或这些键的任意组合) 的键。 每个键由一个或多个字符表示，例如 `a` 字符 "a" 或 `{ENTER}` ENTER 键。  
  
 若要将某个键与 SHIFT 组合在一起，请在键代码前面加上 `+` (加号) 。 若要将某个键与 CTRL 组合，请在键代码前面加上 `^` (插入符号) 。 若要将某个键与 ALT 组合在一起，请在键代码前面加上 `%` (百分号) 。 若要指定重复键，请使用窗体 `{` *密钥号* `}` 。 必须在 *键* 和 *数字*之间添加一个空格。 例如， `{LEFT 42}` 表示 "按左箭头键42次"; `{h 10}` 表示 "按" h "10 次"。  
  
 下表列出了可用于指定在按相应的键 (如 ENTER 或 TAB) 时未显示的字符的代码。  
  
|键|代码|  
|-|-|  
|Backspace|{BACKSPACE} 或 {BS.1770}|  
|BREAK|分|  
|Caps Lock|{CAPSLOCK}|  
|CLEAR|清除|  
|DELETE|{DELETE} 或 {DEL}|  
|向下键|分解|  
|End|{END}|  
|输入 (数字键盘) |回车|  
|Enter|~|  
|ESC|{ESCAPE} 或 {ESC}|  
|HELP|{HELP}|  
|Home|{HOME}|  
|Ins|&|  
|向左键|{LEFT}|  
|Num Lock|{NUMLOCK}|  
|Page Down|{PGDN}|  
|Page Up|PGUP|  
|RETURN|返回|  
|向右键|{RIGHT}|  
|Scroll Lock|{SCROLLLOCK}|  
|Tab|{TAB}|  
|向上键|UP|  
|F1 到 F15|{F1} 到 {F15}|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  

## Examples

此示例使用 `My.Computer.Keyboard.SendKeys` 方法将击键发送到由方法启动的外部应用程序（记事本应用程序） <xref:Microsoft.VisualBasic.Interaction.Shell%2A> 。
  
[!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]

如果找不到具有请求的进程标识符的应用程序，则会引发 <xref:System.ArgumentException> 异常。
  
调用 <xref:Microsoft.VisualBasic.Interaction.Shell%2A> 方法需要完全信任 (<xref:System.Security.SecurityException> 类) 。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">存在部分信任的情况，此时用户缺少足够的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis">演练：调用 Windows API</related>
      </Docs>
    </Member>
    <Member MemberName="ShiftKeyDown">
      <MemberSignature Language="C#" Value="public bool ShiftKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShiftKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShiftKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShiftKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShiftKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已按下 Shift。</summary>
        <value><see langword="True" /> 如果 SHIFT 键关闭，则为; 否则为。否则为 <see langword="False" /> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.ShiftKeyDown`属性提供类似于属性的功能 <xref:System.Windows.Forms.Control.ModifierKeys%2A> 。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Computer.Keyboard.ShiftKeyDown` 属性来确定计算机的 SHIFT 键是否已关闭。  
  
 [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard">访问键盘 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
