<Type Name="Ports" FullName="Microsoft.VisualBasic.Devices.Ports">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5fc38a212981c894a9726302d6ace00717d7abbf" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83898836" /></Metadata><TypeSignature Language="C#" Value="public class Ports" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ports extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Ports" />
  <TypeSignature Language="VB.NET" Value="Public Class Ports" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ports" />
  <TypeSignature Language="F#" Value="type Ports = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供了用于访问计算机的串行端口的属性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Ports` 对象提供了一个简单的入口点，用于访问 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 串行端口类，<xref:System.IO.Ports.SerialPort>。  
  
 下表列出了涉及 `My.Computer.Ports` 对象的任务示例。  
  
|至|请参阅|  
|-|-|  
|使用连接到串行端口的调制解调器拨号|[如何：使用连接到串行端口的调制解调器拨号](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports)|  
|将字符串发送到串行端口|[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)|  
|从串行端口接收字符串|[如何：从串行端口接收字符串](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports)|  
|显示可用的串行端口|[如何：显示可用的串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-show-available-serial-ports)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|是|  
|Windows 服务|**是**|  
|网站|是|  
  
   
  
## Examples  
 此示例介绍如何将字符串发送到计算机的 `COM1` 串行端口。  
  
 `Using` 块允许应用程序在即使会生成异常的情况下也关闭串行端口。 操作串行端口的所有代码都应出现在此块或 `Try...Catch...Finally` 块中，调用以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法。  
  
 <xref:System.IO.Ports.SerialPort.WriteLine%2A> 方法将数据发送到串行端口。  
  
 [!code-vb[VbVbalrMyComputer#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#33)]  
  
 有关详细信息，请参阅[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports">如何：在 Visual Basic 中使用连接到串行端口的调制解调器拨号</related>
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports">如何：在 Visual Basic 中将字符串发送到串行端口</related>
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports">如何：在 Visual Basic 中从串行端口接收字符串</related>
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-show-available-serial-ports">如何：在 Visual Basic 中显示可用的串行端口</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ports ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Ports.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ports();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Devices.Ports" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenSerialPort">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建并打开一个 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenSerialPort">
      <MemberSignature Language="C#" Value="public System.IO.Ports.SerialPort OpenSerialPort (string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.Ports.SerialPort OpenSerialPort(string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Ports.OpenSerialPort(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenSerialPort (portName As String) As SerialPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Ports::SerialPort ^ OpenSerialPort(System::String ^ portName);" />
      <MemberSignature Language="F#" Value="member this.OpenSerialPort : string -&gt; System.IO.Ports.SerialPort" Usage="ports.OpenSerialPort portName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialPort</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="portName"><see langword="String" /> 列中的一个值匹配。 必需。 要打开的端口的名称。</param>
        <summary>创建并打开一个 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
        <returns>一个打开的 <see cref="T:System.IO.Ports.SerialPort" /> 对象，用提供的参数配置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Ports.OpenSerialPort` 方法创建并打开一个 <xref:System.IO.Ports.SerialPort> 对象。 `OpenSerialPort` 方法的参数确定 <xref:System.IO.Ports.SerialPort> 对象的设置。  
  
 使用对象完成后，你的代码应关闭 <xref:System.IO.Ports.SerialPort> 的对象。 您可以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法显式关闭该对象，或者 `Using` 语句隐式关闭它。 有关详细信息，请参阅本主题中的示例。  
  
 下表列出了涉及 `My.Computer.Ports.OpenSerialPort` 方法的任务示例。  
  
|至|请参阅|  
|-|-|  
|使用连接到串行端口的调制解调器拨号|[如何：使用连接到串行端口的调制解调器拨号](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports)|  
|将字符串发送到串行端口|[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)|  
|从串行端口接收字符串|[如何：从串行端口接收字符串](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|是|  
|Windows 服务|**是**|  
|网站|是|  
  
   
  
## Examples  
 此示例介绍如何将字符串发送到计算机的 `COM1` 串行端口。  
  
 `Using` 块允许应用程序在即使会生成异常的情况下也关闭串行端口。 操作串行端口的所有代码都应出现在此块或 `Try...Catch...Finally` 块中，调用以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法。  
  
 <xref:System.IO.Ports.SerialPort.WriteLine%2A> 方法将数据发送到串行端口。  
  
 [!code-vb[VbVbalrMyComputer#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#33)]  
  
 有关详细信息，请参阅[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="portName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Devices.Ports.SerialPortNames" />
        <altmember cref="T:System.IO.Ports.Parity" />
        <altmember cref="T:System.IO.Ports.StopBits" />
        <altmember cref="T:System.IO.Ports.SerialPort" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports">如何：在 Visual Basic 中使用连接到串行端口的调制解调器拨号</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports">如何：在 Visual Basic 中将字符串发送到串行端口</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports">如何：在 Visual Basic 中从串行端口接收字符串</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/using-statement">Using 语句 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OpenSerialPort">
      <MemberSignature Language="C#" Value="public System.IO.Ports.SerialPort OpenSerialPort (string portName, int baudRate);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.Ports.SerialPort OpenSerialPort(string portName, int32 baudRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Ports.OpenSerialPort(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenSerialPort (portName As String, baudRate As Integer) As SerialPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Ports::SerialPort ^ OpenSerialPort(System::String ^ portName, int baudRate);" />
      <MemberSignature Language="F#" Value="member this.OpenSerialPort : string * int -&gt; System.IO.Ports.SerialPort" Usage="ports.OpenSerialPort (portName, baudRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialPort</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="portName"><see langword="String" /> 列中的一个值匹配。 必需。 要打开的端口的名称。</param>
        <param name="baudRate"><see langword="Integer" /> 列中的一个值匹配。 端口的波特率。</param>
        <summary>创建并打开一个 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
        <returns>一个打开的 <see cref="T:System.IO.Ports.SerialPort" /> 对象，用提供的参数配置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Ports.OpenSerialPort` 方法创建并打开一个 <xref:System.IO.Ports.SerialPort> 对象。 `OpenSerialPort` 方法的参数确定 <xref:System.IO.Ports.SerialPort> 对象的设置。  
  
 使用对象完成后，你的代码应关闭 <xref:System.IO.Ports.SerialPort> 的对象。 您可以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法显式关闭该对象，或者 `Using` 语句隐式关闭它。 有关详细信息，请参阅本主题中的示例。  
  
 下表列出了涉及 `My.Computer.Ports.OpenSerialPort` 方法的任务示例。  
  
|至|请参阅|  
|-|-|  
|使用连接到串行端口的调制解调器拨号|[如何：使用连接到串行端口的调制解调器拨号](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports)|  
|将字符串发送到串行端口|[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)|  
|从串行端口接收字符串|[如何：从串行端口接收字符串](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|是|  
|Windows 服务|**是**|  
|网站|是|  
  
   
  
## Examples  
 此示例介绍如何将字符串发送到计算机的 `COM1` 串行端口。  
  
 `Using` 块允许应用程序在即使会生成异常的情况下也关闭串行端口。 操作串行端口的所有代码都应出现在此块或 `Try...Catch...Finally` 块中，调用以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法。  
  
 <xref:System.IO.Ports.SerialPort.WriteLine%2A> 方法将数据发送到串行端口。  
  
 [!code-vb[VbVbalrMyComputer#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#33)]  
  
 有关详细信息，请参阅[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="portName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="baudRate" /> 小于或等于零。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Devices.Ports.SerialPortNames" />
        <altmember cref="T:System.IO.Ports.Parity" />
        <altmember cref="T:System.IO.Ports.StopBits" />
        <altmember cref="T:System.IO.Ports.SerialPort" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports">如何：在 Visual Basic 中使用连接到串行端口的调制解调器拨号</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports">如何：在 Visual Basic 中将字符串发送到串行端口</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports">如何：在 Visual Basic 中从串行端口接收字符串</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/using-statement">Using 语句 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OpenSerialPort">
      <MemberSignature Language="C#" Value="public System.IO.Ports.SerialPort OpenSerialPort (string portName, int baudRate, System.IO.Ports.Parity parity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.Ports.SerialPort OpenSerialPort(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Ports.OpenSerialPort(System.String,System.Int32,System.IO.Ports.Parity)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenSerialPort (portName As String, baudRate As Integer, parity As Parity) As SerialPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Ports::SerialPort ^ OpenSerialPort(System::String ^ portName, int baudRate, System::IO::Ports::Parity parity);" />
      <MemberSignature Language="F#" Value="member this.OpenSerialPort : string * int * System.IO.Ports.Parity -&gt; System.IO.Ports.SerialPort" Usage="ports.OpenSerialPort (portName, baudRate, parity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialPort</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
      </Parameters>
      <Docs>
        <param name="portName"><see langword="String" /> 列中的一个值匹配。 必需。 要打开的端口的名称。</param>
        <param name="baudRate"><see langword="Integer" /> 列中的一个值匹配。 端口的波特率。</param>
        <param name="parity"><see cref="T:System.IO.Ports.Parity" /> 列中的一个值匹配。 端口的奇偶校验。</param>
        <summary>创建并打开一个 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
        <returns>一个打开的 <see cref="T:System.IO.Ports.SerialPort" /> 对象，用提供的参数配置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Ports.OpenSerialPort` 方法创建并打开一个 <xref:System.IO.Ports.SerialPort> 对象。 `OpenSerialPort` 方法的参数确定 <xref:System.IO.Ports.SerialPort> 对象的设置。  
  
 使用对象完成后，你的代码应关闭 <xref:System.IO.Ports.SerialPort> 的对象。 您可以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法显式关闭该对象，或者 `Using` 语句隐式关闭它。 有关详细信息，请参阅本主题中的示例。  
  
 下表列出了涉及 `My.Computer.Ports.OpenSerialPort` 方法的任务示例。  
  
|至|请参阅|  
|-|-|  
|使用连接到串行端口的调制解调器拨号|[如何：使用连接到串行端口的调制解调器拨号](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports)|  
|将字符串发送到串行端口|[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)|  
|从串行端口接收字符串|[如何：从串行端口接收字符串](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|是|  
|Windows 服务|**是**|  
|网站|是|  
  
   
  
## Examples  
 此示例介绍如何将字符串发送到计算机的 `COM1` 串行端口。  
  
 `Using` 块允许应用程序在即使会生成异常的情况下也关闭串行端口。 操作串行端口的所有代码都应出现在此块或 `Try...Catch...Finally` 块中，调用以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法。  
  
 <xref:System.IO.Ports.SerialPort.WriteLine%2A> 方法将数据发送到串行端口。  
  
 [!code-vb[VbVbalrMyComputer#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#33)]  
  
 有关详细信息，请参阅[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="portName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="baudRate" /> 小于或等于零。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="parity" /> 不是 <see cref="T:System.IO.Ports.Parity" /> 枚举值之一。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Devices.Ports.SerialPortNames" />
        <altmember cref="T:System.IO.Ports.Parity" />
        <altmember cref="T:System.IO.Ports.StopBits" />
        <altmember cref="T:System.IO.Ports.SerialPort" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports">如何：在 Visual Basic 中使用连接到串行端口的调制解调器拨号</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports">如何：在 Visual Basic 中将字符串发送到串行端口</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports">如何：在 Visual Basic 中从串行端口接收字符串</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/using-statement">Using 语句 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OpenSerialPort">
      <MemberSignature Language="C#" Value="public System.IO.Ports.SerialPort OpenSerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.Ports.SerialPort OpenSerialPort(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity, int32 dataBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Ports.OpenSerialPort(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenSerialPort (portName As String, baudRate As Integer, parity As Parity, dataBits As Integer) As SerialPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Ports::SerialPort ^ OpenSerialPort(System::String ^ portName, int baudRate, System::IO::Ports::Parity parity, int dataBits);" />
      <MemberSignature Language="F#" Value="member this.OpenSerialPort : string * int * System.IO.Ports.Parity * int -&gt; System.IO.Ports.SerialPort" Usage="ports.OpenSerialPort (portName, baudRate, parity, dataBits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialPort</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
        <Parameter Name="dataBits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="portName"><see langword="String" /> 列中的一个值匹配。 必需。 要打开的端口的名称。</param>
        <param name="baudRate"><see langword="Integer" /> 列中的一个值匹配。 端口的波特率。</param>
        <param name="parity"><see cref="T:System.IO.Ports.Parity" /> 列中的一个值匹配。 端口的奇偶校验。</param>
        <param name="dataBits"><see langword="Integer" /> 列中的一个值匹配。 端口的数据位设置。</param>
        <summary>创建并打开一个 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
        <returns>一个打开的 <see cref="T:System.IO.Ports.SerialPort" /> 对象，用提供的参数配置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Ports.OpenSerialPort` 方法创建并打开一个 <xref:System.IO.Ports.SerialPort> 对象。 `OpenSerialPort` 方法的参数确定 <xref:System.IO.Ports.SerialPort> 对象的设置。  
  
 使用对象完成后，你的代码应关闭 <xref:System.IO.Ports.SerialPort> 的对象。 您可以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法显式关闭该对象，或者 `Using` 语句隐式关闭它。 有关详细信息，请参阅本主题中的示例。  
  
 下表列出了涉及 `My.Computer.Ports.OpenSerialPort` 方法的任务示例。  
  
|至|请参阅|  
|-|-|  
|使用连接到串行端口的调制解调器拨号|[如何：使用连接到串行端口的调制解调器拨号](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports)|  
|将字符串发送到串行端口|[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)|  
|从串行端口接收字符串|[如何：从串行端口接收字符串](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|是|  
|Windows 服务|**是**|  
|网站|是|  
  
   
  
## Examples  
 此示例介绍如何将字符串发送到计算机的 `COM1` 串行端口。  
  
 `Using` 块允许应用程序在即使会生成异常的情况下也关闭串行端口。 操作串行端口的所有代码都应出现在此块或 `Try...Catch...Finally` 块中，调用以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法。  
  
 <xref:System.IO.Ports.SerialPort.WriteLine%2A> 方法将数据发送到串行端口。  
  
 [!code-vb[VbVbalrMyComputer#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#33)]  
  
 有关详细信息，请参阅[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="portName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="dataBits" /> 小于或等于零。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="parity" /> 不是 <see cref="T:System.IO.Ports.Parity" /> 枚举值之一。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Devices.Ports.SerialPortNames" />
        <altmember cref="T:System.IO.Ports.Parity" />
        <altmember cref="T:System.IO.Ports.StopBits" />
        <altmember cref="T:System.IO.Ports.SerialPort" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports">如何：在 Visual Basic 中使用连接到串行端口的调制解调器拨号</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports">如何：在 Visual Basic 中将字符串发送到串行端口</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports">如何：在 Visual Basic 中从串行端口接收字符串</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/using-statement">Using 语句 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OpenSerialPort">
      <MemberSignature Language="C#" Value="public System.IO.Ports.SerialPort OpenSerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits, System.IO.Ports.StopBits stopBits);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.Ports.SerialPort OpenSerialPort(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity, int32 dataBits, valuetype System.IO.Ports.StopBits stopBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Ports.OpenSerialPort(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenSerialPort (portName As String, baudRate As Integer, parity As Parity, dataBits As Integer, stopBits As StopBits) As SerialPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Ports::SerialPort ^ OpenSerialPort(System::String ^ portName, int baudRate, System::IO::Ports::Parity parity, int dataBits, System::IO::Ports::StopBits stopBits);" />
      <MemberSignature Language="F#" Value="member this.OpenSerialPort : string * int * System.IO.Ports.Parity * int * System.IO.Ports.StopBits -&gt; System.IO.Ports.SerialPort" Usage="ports.OpenSerialPort (portName, baudRate, parity, dataBits, stopBits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialPort</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
        <Parameter Name="dataBits" Type="System.Int32" />
        <Parameter Name="stopBits" Type="System.IO.Ports.StopBits" />
      </Parameters>
      <Docs>
        <param name="portName"><see langword="String" /> 列中的一个值匹配。 必需。 要打开的端口的名称。</param>
        <param name="baudRate"><see langword="Integer" /> 列中的一个值匹配。 端口的波特率。</param>
        <param name="parity"><see cref="T:System.IO.Ports.Parity" /> 列中的一个值匹配。 端口的奇偶校验。</param>
        <param name="dataBits"><see langword="Integer" /> 列中的一个值匹配。 端口的数据位设置。</param>
        <param name="stopBits"><see cref="T:System.IO.Ports.StopBits" /> 列中的一个值匹配。 端口的停止位设置。</param>
        <summary>创建并打开一个 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
        <returns>一个打开的 <see cref="T:System.IO.Ports.SerialPort" /> 对象，用提供的参数配置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Ports.OpenSerialPort` 方法创建并打开一个 <xref:System.IO.Ports.SerialPort> 对象。 `OpenSerialPort` 方法的参数确定 <xref:System.IO.Ports.SerialPort> 对象的设置。  
  
 使用对象完成后，你的代码应关闭 <xref:System.IO.Ports.SerialPort> 的对象。 您可以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法显式关闭该对象，或者 `Using` 语句隐式关闭它。 有关详细信息，请参阅本主题中的示例。  
  
 下表列出了涉及 `My.Computer.Ports.OpenSerialPort` 方法的任务示例。  
  
|至|请参阅|  
|-|-|  
|使用连接到串行端口的调制解调器拨号|[如何：使用连接到串行端口的调制解调器拨号](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports)|  
|将字符串发送到串行端口|[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)|  
|从串行端口接收字符串|[如何：从串行端口接收字符串](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|是|  
|Windows 服务|**是**|  
|网站|是|  
  
   
  
## Examples  
 此示例介绍如何将字符串发送到计算机的 `COM1` 串行端口。  
  
 `Using` 块允许应用程序在即使会生成异常的情况下也关闭串行端口。 操作串行端口的所有代码都应出现在此块或 `Try...Catch...Finally` 块中，调用以使用 <xref:System.IO.Ports.SerialPort.Close%2A> 方法。  
  
 <xref:System.IO.Ports.SerialPort.WriteLine%2A> 方法将数据发送到串行端口。  
  
 [!code-vb[VbVbalrMyComputer#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#33)]  
  
 有关详细信息，请参阅[如何：将字符串发送到串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="portName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="dataBits" /> 小于或等于零。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="stopBits" /> 不是 <see cref="T:System.IO.Ports.StopBits" /> 枚举值之一。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Devices.Ports.SerialPortNames" />
        <altmember cref="T:System.IO.Ports.Parity" />
        <altmember cref="T:System.IO.Ports.StopBits" />
        <altmember cref="T:System.IO.Ports.SerialPort" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-dial-modems-attached-to-serial-ports">如何：在 Visual Basic 中使用连接到串行端口的调制解调器拨号</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-send-strings-to-serial-ports">如何：在 Visual Basic 中将字符串发送到串行端口</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-receive-strings-from-serial-ports">如何：在 Visual Basic 中从串行端口接收字符串</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/using-statement">Using 语句 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="SerialPortNames">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; SerialPortNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; SerialPortNames" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Ports.SerialPortNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerialPortNames As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ SerialPortNames { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SerialPortNames : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.Devices.Ports.SerialPortNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取计算机上的串行端口名称的集合。</summary>
        <value>计算机上串行端口的名称的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Ports.SerialPortNames` 属性获取计算机上串行端口名称的集合。  
  
> [!NOTE]
>  在 Windows 98 上运行时，`My.Computer.Ports.SerialPortNames` 返回的端口名称可能不正确。 若要防止应用程序错误，请在使用端口名称打开端口时使用异常处理（如 `Try...Catch...Finally` 语句或 `Using` 语句）。  
  
 下表列出了涉及 `My.Computer.Ports.SerialPortNames` 属性的任务的示例。  
  
|至|请参阅|  
|-|-|  
|显示可用的串行端口|[如何：显示可用的串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-show-available-serial-ports)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|是|  
|Windows 服务|**是**|  
|网站|是|  
  
   
  
## Examples  
 此示例循环访问 `My.Computer.Ports.SerialPortNames` 属性返回的所有字符串。 这些字符串是计算机上的可用串行端口的名称。  
  
 通常，用户从可用端口列表中选择应用程序应使用的串行端口。 在此示例中，串行端口名称存储在 <xref:System.Windows.Forms.ListBox> 控件中。 有关详细信息，请参阅 [ListBox 控件](/dotnet/framework/winforms/controls/listbox-control-windows-forms)。  
  
 [!code-vb[VbVbalrMyComputer#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#45)]  
  
 此示例需要：  
  
-   对 <xref:System?displayProperty=nameWithType> 命名空间的引用。  
  
-   窗体具有名为 `ListBox1` 的 <xref:System.Windows.Forms.ListBox> 控件。  
  
 有关详细信息，请参阅[如何：显示可用的串行端口](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-show-available-serial-ports)。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Devices.Ports.OpenSerialPort" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-show-available-serial-ports">如何：在 Visual Basic 中显示可用的串行端口</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement">Try...Catch...Finally 语句 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/using-statement">Using 语句 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
