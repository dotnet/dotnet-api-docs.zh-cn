<Type Name="DynamicDependencyAttribute" FullName="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea615615241f8d31525b17807282219d0521e20f" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89862543" /></Metadata><TypeSignature Language="C#" Value="public sealed class DynamicDependencyAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DynamicDependencyAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicDependencyAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicDependencyAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DynamicDependencyAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Field | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Field | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>说明一个成员对另一个成员的依赖关系。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

此特性可用于通知依赖项的工具，该依赖项不是纯粹从元数据和 IL 中看到的，例如，一个成员依赖于反射。

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (string memberSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberSignature As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::String ^ memberSignature);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : string -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute memberSignature" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberSignature" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberSignature">受依赖成员的签名。</param>
        <summary>使用与使用者所在类型相同的成员的指定签名初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberTypes As DynamicallyAccessedMemberTypes, type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes memberTypes, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes * Type -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberTypes, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberTypes" Type="System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberTypes">受依赖成员的类型。</param>
        <param name="type">包含指定成员的类型。</param>
        <summary>使用 <see cref="T:System.Type" /> 上指定的成员类型初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (string memberSignature, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberSignature, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberSignature As String, type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::String ^ memberSignature, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : string * Type -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberSignature, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberSignature" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberSignature">受依赖成员的签名。</param>
        <param name="type">包含 <paramref name="memberSignature" /> 的类型。</param>
        <summary>使用 <see cref="T:System.Type" /> 上成员指定签名初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberTypes As DynamicallyAccessedMemberTypes, typeName As String, assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes memberTypes, System::String ^ typeName, System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes * string * string -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberTypes, typeName, assemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberTypes" Type="System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberTypes">受依赖成员的类型。</param>
        <param name="typeName">包含指定成员的类型的完整名称。</param>
        <param name="assemblyName">包含指定成员的类型的程序集名称。</param>
        <summary>使用程序集中某一类型上指定成员类型初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (string memberSignature, string typeName, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberSignature, string typeName, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberSignature As String, typeName As String, assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::String ^ memberSignature, System::String ^ typeName, System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : string * string * string -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberSignature, typeName, assemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberSignature" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberSignature">受依赖成员的签名。</param>
        <param name="typeName">包含指定成员的类型的完整名称。</param>
        <param name="assemblyName">包含指定成员的类型的程序集名称。</param>
        <summary>使用程序集中某一类型上成员指定签名初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指定类型的程序集名称。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName> 仅在指定时有效 <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> 。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public string Condition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Condition" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition" />
      <MemberSignature Language="VB.NET" Value="Public Property Condition As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Condition { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Condition : string with get, set" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置依赖关系适用的条件，例如“调试”。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberSignature">
      <MemberSignature Language="C#" Value="public string MemberSignature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MemberSignature" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberSignature As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MemberSignature { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberSignature : string" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受依赖成员的签名。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature>必须是有效的字符串，或不得 <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes> 等于 <xref:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None> ，但不能同时为两者。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberTypes">
      <MemberSignature Language="C#" Value="public System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes MemberTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes MemberTypes" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberTypes As DynamicallyAccessedMemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes MemberTypes { System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberTypes : System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受依赖成员的类型，例如字段和属性。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature>必须是有效的字符串，或不得 <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes> 等于 <xref:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None> ，但不能同时为两者。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含指定成员的 <see cref="T:System.Type" />。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

如果 <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type> <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> 未指定，则假定使用者的类型。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含指定成员的类型的完整名称。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

如果 <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type> <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> 未指定，则假定使用者的类型。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
