<Type Name="Rfc3161TimestampRequest" FullName="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28dd763ccb100ef7ce7069e71e0a4f788ee2fa7d" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89858209" /></Metadata><TypeSignature Language="C#" Value="public sealed class Rfc3161TimestampRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Rfc3161TimestampRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Rfc3161TimestampRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc3161TimestampRequest sealed" />
  <TypeSignature Language="F#" Value="type Rfc3161TimestampRequest = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.1</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="90499-101">表示来自 IETF RFC 3161 的时间戳请求。</span><span class="sxs-lookup"><span data-stu-id="90499-101">Represents a time-stamping request from IETF RFC 3161.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="90499-102">此类允许创建和检查 `TimeStampReq` IETF RFC 3161： Internet X.509 公有密钥基础结构时间戳协议 (TSP) 的定义值。</span><span class="sxs-lookup"><span data-stu-id="90499-102">This class allows for the creation and inspection of `TimeStampReq` values as defined by IETF RFC 3161: Internet X.509 Public Key Infrastructure Time-Stamp Protocol (TSP).</span></span>
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFromData">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromData (ReadOnlySpan&lt;byte&gt; data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, ReadOnlyMemory&lt;byte&gt;? nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromData (data As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, Optional requestedPolicyId As Oid = Nothing, Optional nonce As Nullable(Of ReadOnlyMemory(Of Byte)) = Nothing, Optional requestSignerCertificates As Boolean = false, Optional extensions As X509ExtensionCollection = Nothing) As Rfc3161TimestampRequest" />
      <MemberSignature Language="F#" Value="static member CreateFromData : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData (data, hashAlgorithm, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromData (ReadOnlySpan&lt;byte&gt;? data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, ReadOnlyMemory&lt;byte&gt;? nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="90499-103">数据到时间戳，将通过此方法进行哈希处理。</span><span class="sxs-lookup"><span data-stu-id="90499-103">The data to timestamp, which will be hashed by this method.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="90499-104">要与此时间戳请求一起使用的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="90499-104">The hash algorithm to use with this timestamp request.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="90499-105">时间戳颁发机构 (TSA) 应使用的时间戳策略的对象标识符 (OID)，或用来表示无首选项的 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-105">The Object Identifier (OID) for a timestamp policy the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="90499-106">一个可选的 nonce（使用一次的数字），用于唯一标识此请求以将其与响应配对。</span><span class="sxs-lookup"><span data-stu-id="90499-106">An optional nonce (number used once) to uniquely identify this request to pair it with the response.</span></span> <span data-ttu-id="90499-107">该值被解释为无符号大端的整数，并且可以规范化为编码格式。</span><span class="sxs-lookup"><span data-stu-id="90499-107">The value is interpreted as an unsigned big-endian integer and may be normalized to the encoding format.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="90499-108">指示时间戳颁发机构 (TSA) 的 <see langword="true" /> 必须在已颁发的时间戳令牌中包含签名证书；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90499-108"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="90499-109">要包含在请求中的可选扩展集合。</span><span class="sxs-lookup"><span data-stu-id="90499-109">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="90499-110">通过使用指定的算法对提供的数据进行哈希处理，创建时间戳请求。</span><span class="sxs-lookup"><span data-stu-id="90499-110">Creates a timestamp request by hashing the provided data with a specified algorithm.</span></span></summary>
        <returns><span data-ttu-id="90499-111">一个 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" />，它表示所选值。</span><span class="sxs-lookup"><span data-stu-id="90499-111">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="90499-112">加密时间戳始终应用于数据哈希的组合和用于对数据进行哈希处理的哈希算法的算法标识符。</span><span class="sxs-lookup"><span data-stu-id="90499-112">Cryptographic timestamps are always applied to a combination of the hash of data and the algorithm identifier for the hash algorithm used to hash the data.</span></span>
<span data-ttu-id="90499-113">当数据尚未进行哈希处理时，此方法是一种方便的替代方法 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> 。</span><span class="sxs-lookup"><span data-stu-id="90499-113">This method is a convenient alternative to <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> when the data has not already been hashed.</span></span>

<span data-ttu-id="90499-114">此方法中的 nonce 值被视为无符号、大字节序整数。</span><span class="sxs-lookup"><span data-stu-id="90499-114">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="90499-115">此方法将输入规范化为 BER 整数编码，然后再分配 nonce 值。</span><span class="sxs-lookup"><span data-stu-id="90499-115">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="90499-116">规范化的值由 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> 方法返回。</span><span class="sxs-lookup"><span data-stu-id="90499-116">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90499-117"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="90499-117"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="90499-118">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="90499-118">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="90499-119"><paramref name="hashAlgorithm" /> 不是已知的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="90499-119"><paramref name="hashAlgorithm" /> is not a known hash algorithm.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromHash">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash (ReadOnlyMemory&lt;byte&gt; hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, ReadOnlyMemory&lt;byte&gt;? nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromHash (hash As ReadOnlyMemory(Of Byte), hashAlgorithm As HashAlgorithmName, Optional requestedPolicyId As Oid = Nothing, Optional nonce As Nullable(Of ReadOnlyMemory(Of Byte)) = Nothing, Optional requestSignerCertificates As Boolean = false, Optional extensions As X509ExtensionCollection = Nothing) As Rfc3161TimestampRequest" />
      <MemberSignature Language="F#" Value="static member CreateFromHash : ReadOnlyMemory&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash (hash, hashAlgorithm, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash (ReadOnlyMemory&lt;byte&gt;? hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, ReadOnlyMemory&lt;byte&gt;? nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="90499-120">要加盖时间戳的预先计算的哈希值。</span><span class="sxs-lookup"><span data-stu-id="90499-120">The pre-computed hash value to be timestamped.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="90499-121">用于生成 <paramref name="hash" /> 的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="90499-121">The hash algorithm used to produce <paramref name="hash" />.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="90499-122">时间戳颁发机构 (TSA) 应使用的时间戳策略的对象标识符 (OID)；若不公开任何首选项，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-122">The Object Identifier (OID) for the timestamp policy that the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="90499-123">一个可选值，用于唯一匹配对响应的请求；如果不在请求中包含 nonce，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-123">An optional value used to uniquely match a request to a response, or <see langword="null" /> to not include a nonce in the request.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="90499-124">指示时间戳颁发机构 (TSA) 的 <see langword="true" /> 必须在已颁发的时间戳令牌中包含签名证书；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90499-124"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="90499-125">要包含在请求中的可选扩展集合。</span><span class="sxs-lookup"><span data-stu-id="90499-125">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="90499-126">使用预先计算的哈希值和哈希算法的名称创建时间戳请求。</span><span class="sxs-lookup"><span data-stu-id="90499-126">Create a timestamp request using a pre-computed hash value and the name of the hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="90499-127">一个 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" />，它表示所选值。</span><span class="sxs-lookup"><span data-stu-id="90499-127">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="90499-128">此方法使用 `hashAlgorithm` 参数来确定要包含在时间戳请求中 (OID) 的对象标识符。</span><span class="sxs-lookup"><span data-stu-id="90499-128">This method uses the `hashAlgorithm` parameter to determine the Object Identifier (OID) to include in the timestamp request.</span></span>
<span data-ttu-id="90499-129">根据此方法不支持的哈希算法生成时间戳的请求时，请使用 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> 重载。</span><span class="sxs-lookup"><span data-stu-id="90499-129">When building a request for a timestamp based on a hash algorithm that this method does not support, use the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> overload.</span></span>

<span data-ttu-id="90499-130">此方法中的 nonce 值被视为无符号、大字节序整数。</span><span class="sxs-lookup"><span data-stu-id="90499-130">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="90499-131">此方法将输入规范化为 BER 整数编码，然后再分配 nonce 值。</span><span class="sxs-lookup"><span data-stu-id="90499-131">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="90499-132">规范化的值由 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> 方法返回。</span><span class="sxs-lookup"><span data-stu-id="90499-132">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="90499-133"><paramref name="hashAlgorithm" /> 不是已知的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="90499-133"><paramref name="hashAlgorithm" /> is not a known hash algorithm.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromHash">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash (ReadOnlyMemory&lt;byte&gt; hash, System.Security.Cryptography.Oid hashAlgorithmId, System.Security.Cryptography.Oid requestedPolicyId = default, ReadOnlyMemory&lt;byte&gt;? nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; hash, class System.Security.Cryptography.Oid hashAlgorithmId, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromHash (hash As ReadOnlyMemory(Of Byte), hashAlgorithmId As Oid, Optional requestedPolicyId As Oid = Nothing, Optional nonce As Nullable(Of ReadOnlyMemory(Of Byte)) = Nothing, Optional requestSignerCertificates As Boolean = false, Optional extensions As X509ExtensionCollection = Nothing) As Rfc3161TimestampRequest" />
      <MemberSignature Language="F#" Value="static member CreateFromHash : ReadOnlyMemory&lt;byte&gt; * System.Security.Cryptography.Oid * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash (hash, hashAlgorithmId, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash (ReadOnlyMemory&lt;byte&gt;? hash, System.Security.Cryptography.Oid hashAlgorithmId, System.Security.Cryptography.Oid requestedPolicyId = default, ReadOnlyMemory&lt;byte&gt;? nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="90499-134">要加盖时间戳的预先计算的哈希值。</span><span class="sxs-lookup"><span data-stu-id="90499-134">The pre-computed hash value to be timestamped.</span></span></param>
        <param name="hashAlgorithmId"><span data-ttu-id="90499-135">生成 <paramref name="hash" /> 的哈希算法的对象标识符 (OID)。</span><span class="sxs-lookup"><span data-stu-id="90499-135">The Object Identifier (OID) for the hash algorithm that produced <paramref name="hash" />.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="90499-136">时间戳颁发机构 (TSA) 应使用的时间戳策略的对象标识符 (OID)，或用来表示无首选项的 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-136">The Object Identifier (OID) for a timestamp policy the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="90499-137">一个可选的 nonce（使用一次的数字），用于唯一标识此请求以将其与响应配对。</span><span class="sxs-lookup"><span data-stu-id="90499-137">An optional nonce (number used once) to uniquely identify this request to pair it with the response.</span></span> <span data-ttu-id="90499-138">该值被解释为无符号大端的整数，并且可以规范化为编码格式。</span><span class="sxs-lookup"><span data-stu-id="90499-138">The value is interpreted as an unsigned big-endian integer and may be normalized to the encoding format.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="90499-139">指示时间戳颁发机构 (TSA) 的 <see langword="true" /> 必须在已颁发的时间戳令牌中包含签名证书；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90499-139"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="90499-140">要包含在请求中的可选扩展集合。</span><span class="sxs-lookup"><span data-stu-id="90499-140">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="90499-141">使用预先计算的哈希值和哈希算法的对象标识符创建时间戳请求。</span><span class="sxs-lookup"><span data-stu-id="90499-141">Create a timestamp request using a pre-computed hash value and the Object Identifier for the hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="90499-142">一个 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" />，它表示所选值。</span><span class="sxs-lookup"><span data-stu-id="90499-142">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="90499-143">此方法中的 nonce 值被视为无符号、大字节序整数。</span><span class="sxs-lookup"><span data-stu-id="90499-143">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="90499-144">此方法将输入规范化为 BER 整数编码，然后再分配 nonce 值。</span><span class="sxs-lookup"><span data-stu-id="90499-144">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="90499-145">规范化的值由 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> 方法返回。</span><span class="sxs-lookup"><span data-stu-id="90499-145">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90499-146"><paramref name="hashAlgorithmId" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-146"><paramref name="hashAlgorithmId" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="90499-147"><paramref name="hashAlgorithmId" />.<see cref="P:System.Security.Cryptography.Oid.Value" /></span><span class="sxs-lookup"><span data-stu-id="90499-147"><paramref name="hashAlgorithmId" />.<see cref="P:System.Security.Cryptography.Oid.Value" /></span></span> <span data-ttu-id="90499-148">不是有效的 OID。</span><span class="sxs-lookup"><span data-stu-id="90499-148">is not a valid OID.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromSignerInfo">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromSignerInfo (System.Security.Cryptography.Pkcs.SignerInfo signerInfo, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, ReadOnlyMemory&lt;byte&gt;? nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromSignerInfo(class System.Security.Cryptography.Pkcs.SignerInfo signerInfo, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromSignerInfo (signerInfo As SignerInfo, hashAlgorithm As HashAlgorithmName, Optional requestedPolicyId As Oid = Nothing, Optional nonce As Nullable(Of ReadOnlyMemory(Of Byte)) = Nothing, Optional requestSignerCertificates As Boolean = false, Optional extensions As X509ExtensionCollection = Nothing) As Rfc3161TimestampRequest" />
      <MemberSignature Language="F#" Value="static member CreateFromSignerInfo : System.Security.Cryptography.Pkcs.SignerInfo * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromSignerInfo (signerInfo, hashAlgorithm, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signerInfo" Type="System.Security.Cryptography.Pkcs.SignerInfo" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="signerInfo"><span data-ttu-id="90499-149">要为其生成时间戳请求的 CMS 签名程序信息。</span><span class="sxs-lookup"><span data-stu-id="90499-149">The CMS signer information to build a timestamp request for.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="90499-150">要与此时间戳请求一起使用的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="90499-150">The hash algorithm to use with this timestamp request.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="90499-151">时间戳颁发机构 (TSA) 应使用的时间戳策略的对象标识符 (OID)；若不公开任何首选项，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-151">The Object Identifier (OID) for the timestamp policy that the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="90499-152">一个可选的 nonce（使用一次的数字），用于唯一标识此请求以将其与响应配对。</span><span class="sxs-lookup"><span data-stu-id="90499-152">An optional nonce (number used once) to uniquely identify this request to pair it with the response.</span></span> <span data-ttu-id="90499-153">该值被解释为无符号大端的整数，并且可以规范化为编码格式。</span><span class="sxs-lookup"><span data-stu-id="90499-153">The value is interpreted as an unsigned big-endian integer and may be normalized to the encoding format.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="90499-154">指示时间戳颁发机构 (TSA) 的 <see langword="true" /> 必须在已颁发的时间戳令牌中包含签名证书；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90499-154"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="90499-155">要包含在请求中的可选扩展集合。</span><span class="sxs-lookup"><span data-stu-id="90499-155">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="90499-156">通过使用指定的算法对提供的签名程序的签名进行哈希处理，创建时间戳请求。</span><span class="sxs-lookup"><span data-stu-id="90499-156">Creates a timestamp request by hashing the signature of the provided signer with a specified algorithm.</span></span></summary>
        <returns><span data-ttu-id="90499-157">一个 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" />，它表示所选值。</span><span class="sxs-lookup"><span data-stu-id="90499-157">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="90499-158">此构造函数 <xref:System.Security.Cryptography.Pkcs.SignerInfo> 根据 IETF RFC 3161 附录 a (使用 CMS) 的签名时间戳属性的建议，为值的签名值创建时间戳。</span><span class="sxs-lookup"><span data-stu-id="90499-158">This constructor creates a timestamp for the signature value of a <xref:System.Security.Cryptography.Pkcs.SignerInfo> value, per the recommendation of IETF RFC 3161 Appendix A (Signature Time-stamp attribute using CMS).</span></span>

<span data-ttu-id="90499-159">此方法中的 nonce 值被视为无符号、大字节序整数。</span><span class="sxs-lookup"><span data-stu-id="90499-159">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="90499-160">此方法将输入规范化为 BER 整数编码，然后再分配 nonce 值。</span><span class="sxs-lookup"><span data-stu-id="90499-160">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="90499-161">规范化的值由 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> 方法返回。</span><span class="sxs-lookup"><span data-stu-id="90499-161">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90499-162"><paramref name="signerInfo" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-162"><paramref name="signerInfo" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90499-163"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="90499-163"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="90499-164">为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="90499-164">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="90499-165"><paramref name="hashAlgorithm" /> 不是已知的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="90499-165"><paramref name="hashAlgorithm" /> is not a known hash algorithm.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public byte[] Encode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.Encode" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Encode();" />
      <MemberSignature Language="F#" Value="member this.Encode : unit -&gt; byte[]" Usage="rfc3161TimestampRequest.Encode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90499-166">对时间戳请求进行编码并将它作为字节数组返回。</span><span class="sxs-lookup"><span data-stu-id="90499-166">Encodes the timestamp request and returns it as a byte array.</span></span></summary>
        <returns><span data-ttu-id="90499-167">包含 DER 编码的时间戳请求的字节数组。</span><span class="sxs-lookup"><span data-stu-id="90499-167">A byte array containing the DER-encoded timestamp request.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest@,System.Int32@)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryEncode(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="GetExtensions">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509ExtensionCollection GetExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.X509Certificates.X509ExtensionCollection GetExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExtensions () As X509ExtensionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::X509Certificates::X509ExtensionCollection ^ GetExtensions();" />
      <MemberSignature Language="F#" Value="member this.GetExtensions : unit -&gt; System.Security.Cryptography.X509Certificates.X509ExtensionCollection" Usage="rfc3161TimestampRequest.GetExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ExtensionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90499-168">获取一个集合，其包含此请求中存在的扩展副本。</span><span class="sxs-lookup"><span data-stu-id="90499-168">Gets a collection with a copy of the extensions present on this request.</span></span></summary>
        <returns><span data-ttu-id="90499-169">一个集合，其包含此请求中存在的扩展副本。</span><span class="sxs-lookup"><span data-stu-id="90499-169">A collection with a copy of the extensions present on this request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="90499-170">此方法返回的集合表示数据的快照。</span><span class="sxs-lookup"><span data-stu-id="90499-170">The collection returned by this method represents a snapshot of the data.</span></span>
<span data-ttu-id="90499-171">不修改集合或集合中的任何实例都将导致此实例发生更改。</span><span class="sxs-lookup"><span data-stu-id="90499-171">No modification of the collection or any instance within the collection will result in a change in this instance.</span></span>

<span data-ttu-id="90499-172">如果此方法没有任何扩展，则返回一个空集合。</span><span class="sxs-lookup"><span data-stu-id="90499-172">This method returns an empty collection when it has no extensions.</span></span>
<span data-ttu-id="90499-173">若要避免此常见情况下的对象创建，请阅读 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions> 。</span><span class="sxs-lookup"><span data-stu-id="90499-173">To avoid the object creation in this common scenario, read <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMessageHash">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; GetMessageHash ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; GetMessageHash() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetMessageHash" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMessageHash () As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyMemory&lt;System::Byte&gt; GetMessageHash();" />
      <MemberSignature Language="F#" Value="member this.GetMessageHash : unit -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="rfc3161TimestampRequest.GetMessageHash " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90499-174">获取此时间戳请求的数据哈希。</span><span class="sxs-lookup"><span data-stu-id="90499-174">Gets the data hash for this timestamp request.</span></span></summary>
        <returns><span data-ttu-id="90499-175">此时间戳请求的数据哈希（以只读内存值提供）。</span><span class="sxs-lookup"><span data-stu-id="90499-175">The data hash for this timestamp request as a read-only memory value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonce">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt;? GetNonce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; GetNonce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNonce () As Nullable(Of ReadOnlyMemory(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;ReadOnlyMemory&lt;System::Byte&gt;&gt; GetNonce();" />
      <MemberSignature Language="F#" Value="member this.GetNonce : unit -&gt; Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt;" Usage="rfc3161TimestampRequest.GetNonce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90499-176">获取此时间戳请求的 nonce。</span><span class="sxs-lookup"><span data-stu-id="90499-176">Gets the nonce for this timestamp request.</span></span></summary>
        <returns><span data-ttu-id="90499-177">此时间戳请求的 nonce（以只读内存值提供，若存在）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-177">The nonce for this timestamp request as a read-only memory value, if one was present; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasExtensions">
      <MemberSignature Language="C#" Value="public bool HasExtensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasExtensions { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasExtensions : bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90499-178">指示请求是否具有扩展。</span><span class="sxs-lookup"><span data-stu-id="90499-178">Indicates whether or not the request has extensions.</span></span></summary>
        <value><span data-ttu-id="90499-179"><see langword="true" /> 如果请求包含任何扩展，则为;否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="90499-179"><see langword="true" /> if the request has any extensions; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithmId">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Oid HashAlgorithmId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Oid HashAlgorithmId" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HashAlgorithmId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithmId As Oid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Oid ^ HashAlgorithmId { System::Security::Cryptography::Oid ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithmId : System.Security.Cryptography.Oid" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HashAlgorithmId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Oid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90499-180">获取与请求关联的哈希算法的对象标识符 (OID)。</span><span class="sxs-lookup"><span data-stu-id="90499-180">Gets the Object Identifier (OID) for the hash algorithm associated with the request.</span></span></summary>
        <value><span data-ttu-id="90499-181">与请求关联的哈希算法的对象标识符 (OID) 。</span><span class="sxs-lookup"><span data-stu-id="90499-181">The Object Identifier (OID) for the hash algorithm associated with the request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessResponse">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampToken ProcessResponse (ReadOnlyMemory&lt;byte&gt; responseBytes, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Pkcs.Rfc3161TimestampToken ProcessResponse(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; responseBytes, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.ProcessResponse(System.ReadOnlyMemory{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessResponse (responseBytes As ReadOnlyMemory(Of Byte), ByRef bytesConsumed As Integer) As Rfc3161TimestampToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Pkcs::Rfc3161TimestampToken ^ ProcessResponse(ReadOnlyMemory&lt;System::Byte&gt; responseBytes, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="member this.ProcessResponse : ReadOnlyMemory&lt;byte&gt; * int -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" Usage="rfc3161TimestampRequest.ProcessResponse (responseBytes, bytesConsumed)" />
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampToken? ProcessResponse (ReadOnlyMemory&lt;byte&gt; responseBytes, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="responseBytes"><span data-ttu-id="90499-182">DER 编码的时间戳响应。</span><span class="sxs-lookup"><span data-stu-id="90499-182">The DER encoded timestamp response.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="90499-183">此方法返回时，为从 <paramref name="responseBytes" /> 中读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="90499-183">When this method returns, the number of bytes that were read from <paramref name="responseBytes" />.</span></span> <span data-ttu-id="90499-184">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="90499-184">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="90499-185">将编码的时间戳响应与此请求合并，以生成 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />。</span><span class="sxs-lookup"><span data-stu-id="90499-185">Combines an encoded timestamp response with this request to produce a <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />.</span></span></summary>
        <returns><span data-ttu-id="90499-186">与此请求对应的响应中的时间戳标记。</span><span class="sxs-lookup"><span data-stu-id="90499-186">The timestamp token from the response that corresponds to this request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="90499-187">此方法将的开头解释 `responseBytes` 为 IETF RFC 3161 `TimeStampResp` 。</span><span class="sxs-lookup"><span data-stu-id="90499-187">This method interprets the beginning of `responseBytes` as an IETF RFC 3161 `TimeStampResp`.</span></span>
<span data-ttu-id="90499-188">如果无法对响应进行解码，则响应状态为 "不" `granted` 或 " `grantedWithMods` 已颁发的时间戳令牌不能成功进行解码"，或 "时间戳令牌" 按 IETF RFC 3161 (主要、sections 2.4.1 和 2.4.2 sections) 的验收条件不匹配，则 <xref:System.Security.Cryptography.CryptographicException> 会引发。</span><span class="sxs-lookup"><span data-stu-id="90499-188">If the response cannot be decoded, the response status is not `granted` or `grantedWithMods`, the issued timestamp token does not successfully decode, or the timestamp token does not match this request per the acceptance criteria of IETF RFC 3161 (chiefly, sections 2.4.1 and 2.4.2), then a <xref:System.Security.Cryptography.CryptographicException> is thrown.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestedPolicyId">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Oid RequestedPolicyId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Oid RequestedPolicyId" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestedPolicyId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestedPolicyId As Oid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Oid ^ RequestedPolicyId { System::Security::Cryptography::Oid ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestedPolicyId : System.Security.Cryptography.Oid" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestedPolicyId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Oid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90499-189">获取请求的策略 ID；如果未请求策略 ID，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-189">Gets the policy ID for the request, or <see langword="null" /> when no policy ID was requested.</span></span></summary>
        <value><span data-ttu-id="90499-190">请求的策略 ID，或 <see langword="null" /> 未请求策略 id 时为。</span><span class="sxs-lookup"><span data-stu-id="90499-190">The policy ID for the request, or <see langword="null" /> when no policy ID was requested.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestSignerCertificate">
      <MemberSignature Language="C#" Value="public bool RequestSignerCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequestSignerCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestSignerCertificate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestSignerCertificate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequestSignerCertificate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestSignerCertificate : bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestSignerCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90499-191">获取一个值，该值表示请求是否指示响应中必须有时间戳颁发机构证书。</span><span class="sxs-lookup"><span data-stu-id="90499-191">Gets a value indicating whether or not the request indicated that the timestamp authority certificate is required to be in the response.</span></span></summary>
        <value><span data-ttu-id="90499-192"><see langword="true" /> 如果响应必须包含时间戳颁发机构证书，则为;否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="90499-192"><see langword="true" /> if the response must include the timestamp authority certificate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDecode">
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest request, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecode(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; encodedBytes, [out] class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest&amp; request, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecode (encodedBytes As ReadOnlyMemory(Of Byte), ByRef request As Rfc3161TimestampRequest, ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecode(ReadOnlyMemory&lt;System::Byte&gt; encodedBytes, [Runtime::InteropServices::Out] System::Security::Cryptography::Pkcs::Rfc3161TimestampRequest ^ % request, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryDecode : ReadOnlyMemory&lt;byte&gt; * Rfc3161TimestampRequest * int -&gt; bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryDecode (encodedBytes, request, bytesConsumed)" />
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest? request, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="request" Type="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encodedBytes"><span data-ttu-id="90499-193">包含 DER 编码的时间戳请求的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="90499-193">The buffer containing a DER-encoded timestamp request.</span></span></param>
        <param name="request"><span data-ttu-id="90499-194">此方法返回时，如果解码成功，则为已成功解码的时间戳请求；如果解码失败，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90499-194">When this method returns, the successfully decoded timestamp request if decoding succeeded, or <see langword="null" /> if decoding failed.</span></span> <span data-ttu-id="90499-195">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="90499-195">This parameter is treated as uninitialized.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="90499-196">此方法返回时，为从 <paramref name="encodedBytes" /> 中读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="90499-196">When this method returns, the number of bytes that were read from <paramref name="encodedBytes" />.</span></span> <span data-ttu-id="90499-197">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="90499-197">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="90499-198">尝试将 <paramref name="encodedBytes" /> 的内容解释为 DER 编码的时间戳请求。</span><span class="sxs-lookup"><span data-stu-id="90499-198">Attemps to interpret the contents of <paramref name="encodedBytes" /> as a DER-encoded Timestamp Request.</span></span></summary>
        <returns><span data-ttu-id="90499-199">如果 <paramref name="encodedBytes" /> 成功解释为时间戳请求，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90499-199"><see langword="true" /> if <paramref name="encodedBytes" /> was successfully interpreted as a Timestamp Request; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncode">
      <MemberSignature Language="C#" Value="public bool TryEncode (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncode(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryEncode(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncode (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncode(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncode : Span&lt;byte&gt; * int -&gt; bool" Usage="rfc3161TimestampRequest.TryEncode (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="90499-200">要接收已编码请求的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="90499-200">The buffer to receive the encoded request.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="90499-201">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。</span><span class="sxs-lookup"><span data-stu-id="90499-201">When this method returns, the total number of bytes written into <paramref name="destination" />.</span></span> <span data-ttu-id="90499-202">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="90499-202">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="90499-203">尝试将实例编码为 IETF RFC 3161 <c>TimeStampReq</c>，从而将字节写入到提供的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="90499-203">Attempts to encode the instance as an IETF RFC 3161 <c>TimeStampReq</c>, writing the bytes into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="90499-204">如果 <paramref name="destination" /> 的长度足以接收编码的请求，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90499-204"><see langword="true" />if <paramref name="destination" /> is long enough to receive the encoded request; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public int Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Version" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Version { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : int" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90499-205">获取此请求的数据格式版本号。</span><span class="sxs-lookup"><span data-stu-id="90499-205">Gets the data format version number for this request.</span></span></summary>
        <value><span data-ttu-id="90499-206">此请求的数据格式版本号。</span><span class="sxs-lookup"><span data-stu-id="90499-206">The data format version number for this request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
