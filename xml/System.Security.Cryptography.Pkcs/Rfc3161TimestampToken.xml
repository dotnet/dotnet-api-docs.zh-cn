<Type Name="Rfc3161TimestampToken" FullName="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed035181f7cc68840cbbb65e3cba448aa9019462" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86581514" /></Metadata><TypeSignature Language="C#" Value="public sealed class Rfc3161TimestampToken" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Rfc3161TimestampToken extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Rfc3161TimestampToken" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc3161TimestampToken sealed" />
  <TypeSignature Language="F#" Value="type Rfc3161TimestampToken = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.1</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示来自 IETF RFC 3161 的时间戳令牌。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsSignedCms">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.SignedCms AsSignedCms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Pkcs.SignedCms AsSignedCms() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.AsSignedCms" />
      <MemberSignature Language="VB.NET" Value="Public Function AsSignedCms () As SignedCms" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Pkcs::SignedCms ^ AsSignedCms();" />
      <MemberSignature Language="F#" Value="member this.AsSignedCms : unit -&gt; System.Security.Cryptography.Pkcs.SignedCms" Usage="rfc3161TimestampToken.AsSignedCms " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.SignedCms</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取 RFC3161 时间戳令牌的签名加密消息语法 (CMS) 表示形式。</summary>
        <returns><see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" /> 的 <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> 表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
对此方法的后续调用将返回相同的对象。

此 <xref:System.Security.Cryptography.Pkcs.SignedCms> 类是可变的，但对该对象的更改不会反映在 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> 生成该对象的对象中。

来自调用的值 <xref:System.Security.Cryptography.Pkcs.SignedCms.Encode?displayProperty=nameWithType> 可以通过其他对的调用再次解释为 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)?displayProperty=nameWithType> 。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenInfo As Rfc3161TimestampTokenInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ TokenInfo { System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenInfo : System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此时间戳令牌的详细信息作为 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />。</summary>
        <value>作为此时间戳标记的详细信息 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" /> 。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDecode">
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampToken token, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecode(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; encodedBytes, [out] class System.Security.Cryptography.Pkcs.Rfc3161TimestampToken&amp; token, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecode (encodedBytes As ReadOnlyMemory(Of Byte), ByRef token As Rfc3161TimestampToken, ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecode(ReadOnlyMemory&lt;System::Byte&gt; encodedBytes, [Runtime::InteropServices::Out] System::Security::Cryptography::Pkcs::Rfc3161TimestampToken ^ % token, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryDecode : ReadOnlyMemory&lt;byte&gt; * Rfc3161TimestampToken * int -&gt; bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode (encodedBytes, token, bytesConsumed)" />
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampToken? token, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="token" Type="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encodedBytes">包含 DER 编码的时间戳令牌的缓冲区。</param>
        <param name="token">此方法返回结果时，如果解码成功，则为已成功解码的时间戳令牌；如果解码失败，则为 <see langword="null" />。 该参数未经初始化即被处理。</param>
        <param name="bytesConsumed">此方法返回时，为从 <paramref name="encodedBytes" /> 中读取的字节数。 该参数未经初始化即被处理。</param>
        <summary>尝试将 <paramref name="encodedBytes" /> 的内容解释为 DER 编码的时间戳令牌。</summary>
        <returns>如果 <paramref name="encodedBytes" /> 成功解释为时间戳令牌，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForData">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForData (ReadOnlySpan&lt;byte&gt; data, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForData (data As ReadOnlySpan(Of Byte), ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForData : ReadOnlySpan&lt;byte&gt; * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForData (data, signerCertificate, extraCandidates)" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForData (ReadOnlySpan&lt;byte&gt;? data, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="data">要根据此时间戳令牌验证的数据。</param>
        <param name="signerCertificate">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。 该参数未经初始化即被处理。</param>
        <param name="extraCandidates">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</param>
        <summary>验证当前令牌是否为提供的数据的有效时间戳令牌。</summary>
        <returns>如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与提供的数据的哈希匹配，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
此方法要求时间戳颁发机构 (TSA) 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的 Timestamp 值，并具有成功验证令牌签名的公钥。

确定相应的 TSA 证书后，此方法将 `data` 使用嵌入在标记中的算法标识符计算摘要。
如果该摘要与令牌的嵌入摘要相匹配，则会通过报告证书， `signerCertificate` 方法会返回 `true` 。

如果摘要不匹配，或者无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithm, signerCertificate, extraCandidates)" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt;? hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash">要根据此时间戳令牌验证的加密哈希。</param>
        <param name="hashAlgorithm">生成 <paramref name="hash" /> 的算法。</param>
        <param name="signerCertificate">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。 该参数未经初始化即被处理。</param>
        <param name="extraCandidates">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</param>
        <summary>验证当前令牌是否为提供的数据哈希和算法标识符的有效时间戳令牌。</summary>
        <returns>如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与提供的数据的哈希和算法匹配，则为 <see langword="true" />否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
此方法要求时间戳颁发机构 (TSA) 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的 Timestamp 值，并具有成功验证令牌签名的公钥。

确定相应的 TSA 证书后，此方法会将提供的摘要和算法标识符与令牌中的相应值进行比较。
如果摘要和算法都与令牌的值匹配，则会通过报告证书，方法会 `signerCertificate` 返回 `true` 。

如果摘要不匹配、算法不匹配或无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.Oid hashAlgorithmId, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, class System.Security.Cryptography.Oid hashAlgorithmId, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithmId As Oid, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.Oid * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithmId, signerCertificate, extraCandidates)" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt;? hash, System.Security.Cryptography.Oid hashAlgorithmId, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash">要根据此时间戳令牌验证的加密哈希。</param>
        <param name="hashAlgorithmId">To be added.</param>
        <param name="signerCertificate">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。 该参数未经初始化即被处理。</param>
        <param name="extraCandidates">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</param>
        <summary>验证当前令牌是否为提供的数据哈希和算法标识符的有效时间戳令牌。</summary>
        <returns>如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与提供的数据的哈希和算法匹配，则为 <see langword="true" />否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此方法要求 TSA 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的时间戳值，并具有成功验证令牌签名的公钥。

确定相应的 TSA 证书后，此方法会将提供的摘要和算法标识符与令牌中的相应值进行比较。
如果摘要和算法都与令牌的值匹配，则会通过报告证书，方法会 `signerCertificate` 返回 `true` 。

如果摘要不匹配、算法不匹配或无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForSignerInfo">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForSignerInfo (System.Security.Cryptography.Pkcs.SignerInfo signerInfo, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForSignerInfo(class System.Security.Cryptography.Pkcs.SignerInfo signerInfo, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForSignerInfo (signerInfo As SignerInfo, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForSignerInfo : System.Security.Cryptography.Pkcs.SignerInfo * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForSignerInfo (signerInfo, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signerInfo" Type="System.Security.Cryptography.Pkcs.SignerInfo" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="signerInfo">用于验证所生成的时间戳的 CMS 签名者信息。</param>
        <param name="signerCertificate">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。 该参数未经初始化即被处理。</param>
        <param name="extraCandidates">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</param>
        <summary>验证当前令牌是否为提供的 <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> 的有效时间戳令牌。</summary>
        <returns>如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与 <paramref name="signerInfo" /> 的签名匹配，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
此方法 <xref:System.Security.Cryptography.Pkcs.SignerInfo> 根据 IETF RFC 3161 附录 a (使用 CMS) 的签名时间戳属性，验证时间戳标记对 (CMS) 的加密消息语法是否有效。

此方法要求 TSA 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的时间戳值，并具有成功验证令牌签名的公钥。

确定相应的 TSA 证书后，此方法将确定所提供的签名值是否 `signerInfo` 与令牌中的摘要和算法标识符相匹配。
如果 `signerInfo` 签名与令牌的摘要和算法标识符相匹配，则会通过报告证书， `signerCertificate` 方法会返回 `true` 。

如果 `signerInfo` 签名不匹配，或者无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。

此方法不会 <xref:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes> `signerInfo` 考虑下的，也不会确定 `signerInfo` 签名是否适用于签名阅读机签名的数据。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="signerInfo" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
  </Members>
</Type>
