<Type Name="Rfc3161TimestampToken" FullName="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="286c738f4480c35be5c402fbd5f59397c220e22f" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90799489" /></Metadata><TypeSignature Language="C#" Value="public sealed class Rfc3161TimestampToken" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Rfc3161TimestampToken extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Rfc3161TimestampToken" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc3161TimestampToken sealed" />
  <TypeSignature Language="F#" Value="type Rfc3161TimestampToken = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.1</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5831c-101">表示来自 IETF RFC 3161 的时间戳令牌。</span><span class="sxs-lookup"><span data-stu-id="5831c-101">Represents a time-stamp token from IETF RFC 3161.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsSignedCms">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.SignedCms AsSignedCms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Pkcs.SignedCms AsSignedCms() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.AsSignedCms" />
      <MemberSignature Language="VB.NET" Value="Public Function AsSignedCms () As SignedCms" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Pkcs::SignedCms ^ AsSignedCms();" />
      <MemberSignature Language="F#" Value="member this.AsSignedCms : unit -&gt; System.Security.Cryptography.Pkcs.SignedCms" Usage="rfc3161TimestampToken.AsSignedCms " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.SignedCms</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5831c-102">获取 RFC3161 时间戳令牌的签名加密消息语法 (CMS) 表示形式。</span><span class="sxs-lookup"><span data-stu-id="5831c-102">Gets a Signed Cryptographic Message Syntax (CMS) representation of the RFC3161 time-stamp token.</span></span></summary>
        <returns><span data-ttu-id="5831c-103"><see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" /> 的 <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="5831c-103">The <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> representation of the <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="5831c-104">对此方法的后续调用将返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="5831c-104">Successive calls to this method return the same object.</span></span>

<span data-ttu-id="5831c-105">此 <xref:System.Security.Cryptography.Pkcs.SignedCms> 类是可变的，但对该对象的更改不会反映在 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> 生成该对象的对象中。</span><span class="sxs-lookup"><span data-stu-id="5831c-105">The <xref:System.Security.Cryptography.Pkcs.SignedCms> class is mutable, but changes to that object are not reflected in the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> object that produced it.</span></span>

<span data-ttu-id="5831c-106">来自调用的值 <xref:System.Security.Cryptography.Pkcs.SignedCms.Encode?displayProperty=nameWithType> 可以通过其他对的调用再次解释为 <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="5831c-106">The value from calling <xref:System.Security.Cryptography.Pkcs.SignedCms.Encode?displayProperty=nameWithType> can be interpreted again as an <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> via another call to <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo { get; }" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenInfo As Rfc3161TimestampTokenInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ TokenInfo { System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenInfo : System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo? TokenInfo { get; }" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5831c-107">获取此时间戳令牌的详细信息作为 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-107">Gets the details of this time-stamp token as a <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />.</span></span></summary>
        <value><span data-ttu-id="5831c-108">作为此时间戳标记的详细信息 <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" /> 。</span><span class="sxs-lookup"><span data-stu-id="5831c-108">The details of this time-stamp token as a <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDecode">
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampToken token, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecode(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; encodedBytes, [out] class System.Security.Cryptography.Pkcs.Rfc3161TimestampToken&amp; token, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecode (encodedBytes As ReadOnlyMemory(Of Byte), ByRef token As Rfc3161TimestampToken, ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecode(ReadOnlyMemory&lt;System::Byte&gt; encodedBytes, [Runtime::InteropServices::Out] System::Security::Cryptography::Pkcs::Rfc3161TimestampToken ^ % token, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryDecode : ReadOnlyMemory&lt;byte&gt; * Rfc3161TimestampToken * int -&gt; bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode (encodedBytes, token, bytesConsumed)" />
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampToken? token, out int bytesConsumed);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="token" Type="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encodedBytes"><span data-ttu-id="5831c-109">包含 DER 编码的时间戳令牌的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="5831c-109">The buffer containing a DER-encoded time-stamp token.</span></span></param>
        <param name="token"><span data-ttu-id="5831c-110">此方法返回结果时，如果解码成功，则为已成功解码的时间戳令牌；如果解码失败，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-110">When this method returns, the successfully decoded time-stamp token if decoding succeeded, or <see langword="null" /> if decoding failed.</span></span> <span data-ttu-id="5831c-111">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="5831c-111">This parameter is treated as uninitialized.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="5831c-112">此方法返回时，为从 <paramref name="encodedBytes" /> 中读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="5831c-112">When this method returns, the number of bytes that were read from <paramref name="encodedBytes" />.</span></span> <span data-ttu-id="5831c-113">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="5831c-113">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="5831c-114">尝试将 <paramref name="encodedBytes" /> 的内容解释为 DER 编码的时间戳令牌。</span><span class="sxs-lookup"><span data-stu-id="5831c-114">Attemps to interpret the contents of <paramref name="encodedBytes" /> as a DER-encoded time-stamp token.</span></span></summary>
        <returns><span data-ttu-id="5831c-115">如果 <paramref name="encodedBytes" /> 成功解释为时间戳令牌，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-115"><see langword="true" /> if <paramref name="encodedBytes" /> was successfully interpreted as a time-stamp token; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForData">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForData (ReadOnlySpan&lt;byte&gt; data, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForData (data As ReadOnlySpan(Of Byte), ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForData : ReadOnlySpan&lt;byte&gt; * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForData (data, signerCertificate, extraCandidates)" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForData (ReadOnlySpan&lt;byte&gt;? data, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="5831c-116">要根据此时间戳令牌验证的数据。</span><span class="sxs-lookup"><span data-stu-id="5831c-116">The data to verify against this time-stamp token.</span></span></param>
        <param name="signerCertificate"><span data-ttu-id="5831c-117">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-117">When this method returns, the certificate from the Timestamp Authority (TSA) which signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="5831c-118">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="5831c-118">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="5831c-119">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</span><span class="sxs-lookup"><span data-stu-id="5831c-119">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="5831c-120">验证当前令牌是否为提供的数据的有效时间戳令牌。</span><span class="sxs-lookup"><span data-stu-id="5831c-120">Verifies that the current token is a valid time-stamp token for the provided data.</span></span></summary>
        <returns><span data-ttu-id="5831c-121">如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与提供的数据的哈希匹配，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-121"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the hash for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="5831c-122">此方法要求时间戳颁发机构 (TSA) 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的 Timestamp 值，并具有成功验证令牌签名的公钥。</span><span class="sxs-lookup"><span data-stu-id="5831c-122">This method requires that the Timestamp Authority (TSA) certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="5831c-123">确定相应的 TSA 证书后，此方法将 `data` 使用嵌入在标记中的算法标识符计算摘要。</span><span class="sxs-lookup"><span data-stu-id="5831c-123">After determining the appropriate TSA certificate, this method computes the digest of `data` using the algorithm identifier embedded within the token.</span></span>
<span data-ttu-id="5831c-124">如果该摘要与令牌的嵌入摘要相匹配，则会通过报告证书， `signerCertificate` 方法会返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-124">If that digest matches the token's embedded digest, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="5831c-125">如果摘要不匹配，或者无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-125">If the digest does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithm, signerCertificate, extraCandidates)" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt;? hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="5831c-126">要根据此时间戳令牌验证的加密哈希。</span><span class="sxs-lookup"><span data-stu-id="5831c-126">The cryptographic hash to verify against this time-stamp token.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="5831c-127">生成 <paramref name="hash" /> 的算法。</span><span class="sxs-lookup"><span data-stu-id="5831c-127">The algorithm which produced <paramref name="hash" />.</span></span></param>
        <param name="signerCertificate"><span data-ttu-id="5831c-128">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-128">When this method returns, the certificate from the Timestamp Authority (TSA) which signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="5831c-129">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="5831c-129">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="5831c-130">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</span><span class="sxs-lookup"><span data-stu-id="5831c-130">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="5831c-131">验证当前令牌是否为提供的数据哈希和算法标识符的有效时间戳令牌。</span><span class="sxs-lookup"><span data-stu-id="5831c-131">Verifies that the current token is a valid time-stamp token for the provided data hash and algorithm identifier.</span></span></summary>
        <returns><span data-ttu-id="5831c-132">如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与提供的数据的哈希和算法匹配，则为 <see langword="true" />否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-132"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the hash for the provided data hash and algorithm; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="5831c-133">此方法要求时间戳颁发机构 (TSA) 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的 Timestamp 值，并具有成功验证令牌签名的公钥。</span><span class="sxs-lookup"><span data-stu-id="5831c-133">This method requires that the Timestamp Authority (TSA) certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="5831c-134">确定相应的 TSA 证书后，此方法会将提供的摘要和算法标识符与令牌中的相应值进行比较。</span><span class="sxs-lookup"><span data-stu-id="5831c-134">After determining the appropriate TSA certificate, this method compares the provided digest and algorithm identifier with the appropriate values from the token.</span></span>
<span data-ttu-id="5831c-135">如果摘要和算法都与令牌的值匹配，则会通过报告证书，方法会 `signerCertificate` 返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-135">If both the digest and the algorithm match the token's values, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="5831c-136">如果摘要不匹配、算法不匹配或无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-136">If the digest does not match, the algorithm does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.Oid hashAlgorithmId, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, class System.Security.Cryptography.Oid hashAlgorithmId, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithmId As Oid, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.Oid * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithmId, signerCertificate, extraCandidates)" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt;? hash, System.Security.Cryptography.Oid? hashAlgorithmId, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt;? hash, System.Security.Cryptography.Oid hashAlgorithmId, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="5831c-137">要根据此时间戳令牌验证的加密哈希。</span><span class="sxs-lookup"><span data-stu-id="5831c-137">The cryptographic hash to verify against this time-stamp token.</span></span></param>
        <param name="hashAlgorithmId">To be added.</param>
        <param name="signerCertificate"><span data-ttu-id="5831c-138">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-138">When this method returns, the certificate from the Timestamp Authority (TSA) which signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="5831c-139">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="5831c-139">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="5831c-140">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</span><span class="sxs-lookup"><span data-stu-id="5831c-140">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="5831c-141">验证当前令牌是否为提供的数据哈希和算法标识符的有效时间戳令牌。</span><span class="sxs-lookup"><span data-stu-id="5831c-141">Verifies that the current token is a valid time-stamp token for the provided data hash and algorithm identifier.</span></span></summary>
        <returns><span data-ttu-id="5831c-142">如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与提供的数据的哈希和算法匹配，则为 <see langword="true" />否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-142"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the hash for the provided data hash and algorithm; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="5831c-143">此方法要求 TSA 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的时间戳值，并具有成功验证令牌签名的公钥。</span><span class="sxs-lookup"><span data-stu-id="5831c-143">This method requires that the TSA certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="5831c-144">确定相应的 TSA 证书后，此方法会将提供的摘要和算法标识符与令牌中的相应值进行比较。</span><span class="sxs-lookup"><span data-stu-id="5831c-144">After determining the appropriate TSA certificate, this method compares the provided digest and algorithm identifier with the appropriate values from the token.</span></span>
<span data-ttu-id="5831c-145">如果摘要和算法都与令牌的值匹配，则会通过报告证书，方法会 `signerCertificate` 返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-145">If both the digest and the algorithm match the token's values, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="5831c-146">如果摘要不匹配、算法不匹配或无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-146">If the digest does not match, the algorithm does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForSignerInfo">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForSignerInfo (System.Security.Cryptography.Pkcs.SignerInfo signerInfo, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForSignerInfo(class System.Security.Cryptography.Pkcs.SignerInfo signerInfo, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForSignerInfo (signerInfo As SignerInfo, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForSignerInfo : System.Security.Cryptography.Pkcs.SignerInfo * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForSignerInfo (signerInfo, signerCertificate, extraCandidates)" />
      <MemberSignature Language="C#" Value="public bool VerifySignatureForSignerInfo (System.Security.Cryptography.Pkcs.SignerInfo? signerInfo, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signerInfo" Type="System.Security.Cryptography.Pkcs.SignerInfo" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="signerInfo"><span data-ttu-id="5831c-147">用于验证所生成的时间戳的 CMS 签名者信息。</span><span class="sxs-lookup"><span data-stu-id="5831c-147">The CMS signer information to verify the timestamp was built for.</span></span></param>
        <param name="signerCertificate"><span data-ttu-id="5831c-148">此方法返回结果时，从签署此令牌的时间戳颁发机构 (TSA) 返回证书，如果无法确定签名者证书，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-148">When this method returns, the certificate from the Timestamp Authority (TSA) that signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="5831c-149">该参数未经初始化即被处理。</span><span class="sxs-lookup"><span data-stu-id="5831c-149">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="5831c-150">除了令牌中可能包含的任何证书之外，还可以考虑作为时间戳颁发机构 (TSA) 证书的可选证书集合。</span><span class="sxs-lookup"><span data-stu-id="5831c-150">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="5831c-151">验证当前令牌是否为提供的 <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> 的有效时间戳令牌。</span><span class="sxs-lookup"><span data-stu-id="5831c-151">Verifies that the current token is a valid time-stamp token for the provided <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />.</span></span></summary>
        <returns><span data-ttu-id="5831c-152">如果找到了时间戳颁发机构（TSA）证书，证书公钥对令牌签名进行了验证，并且该令牌与 <paramref name="signerInfo" /> 的签名匹配，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-152"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the signature for <paramref name="signerInfo" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="5831c-153">此方法 <xref:System.Security.Cryptography.Pkcs.SignerInfo> 根据 IETF RFC 3161 附录 a (使用 CMS) 的签名时间戳属性，验证时间戳标记对 (CMS) 的加密消息语法是否有效。</span><span class="sxs-lookup"><span data-stu-id="5831c-153">This method verifies that the time-stamp token is valid for a Cryptographic Message Syntax (CMS) <xref:System.Security.Cryptography.Pkcs.SignerInfo>, according to IETF RFC 3161 Appendix A (Signature Time-stamp attribute using CMS).</span></span>

<span data-ttu-id="5831c-154">此方法要求 TSA 证书具有所需的扩展密钥用法值 (1.3.6.1.5.5.7.3.8) ，匹配令牌的嵌入 ESSCertID 或 ESSCertID2 标识符，其有效性范围包含令牌的时间戳值，并具有成功验证令牌签名的公钥。</span><span class="sxs-lookup"><span data-stu-id="5831c-154">This method requires that the TSA certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="5831c-155">确定相应的 TSA 证书后，此方法将确定所提供的签名值是否 `signerInfo` 与令牌中的摘要和算法标识符相匹配。</span><span class="sxs-lookup"><span data-stu-id="5831c-155">After determining the appropriate TSA certificate, this method determines if the signature value from the provided `signerInfo` matches the digest and algorithm identifier from the token.</span></span>
<span data-ttu-id="5831c-156">如果 `signerInfo` 签名与令牌的摘要和算法标识符相匹配，则会通过报告证书， `signerCertificate` 方法会返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-156">If the `signerInfo` signature matches the token's digest and algorithm identifier, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="5831c-157">如果 `signerInfo` 签名不匹配，或者无法确定 TSA 证书，则该方法将报告 `signerCertificate` 为 `null` 并返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="5831c-157">If the `signerInfo` signature does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

<span data-ttu-id="5831c-158">此方法不会 <xref:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes> `signerInfo` 考虑下的，也不会确定 `signerInfo` 签名是否适用于签名阅读机签名的数据。</span><span class="sxs-lookup"><span data-stu-id="5831c-158">This method does not take the <xref:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes> of the `signerInfo` under consideration, nor does it determine if the `signerInfo` signature is appropriate for the data that signature purports to have signed.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5831c-159"><paramref name="signerInfo" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5831c-159"><paramref name="signerInfo" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
  </Members>
</Type>
