<Type Name="IncrementalHitTester" FullName="System.Windows.Ink.IncrementalHitTester">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d48d7fccc615ebce1746e954a7f6e011a6290bb7" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89765434" /></Metadata><TypeSignature Language="C#" Value="public abstract class IncrementalHitTester" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IncrementalHitTester extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.IncrementalHitTester" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IncrementalHitTester" />
  <TypeSignature Language="C++ CLI" Value="public ref class IncrementalHitTester abstract" />
  <TypeSignature Language="F#" Value="type IncrementalHitTester = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>对 <see cref="T:System.Windows.Ink.Stroke" /> 动态执行命中测试。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.IncrementalHitTester>动态确定用户是否 "命中" 了 <xref:System.Windows.Ink.Stroke> 。 通过此类，您可以在选择和擦除墨迹时向用户提供即时反馈。  
  
 继承自的两个类 <xref:System.Windows.Ink.IncrementalHitTester> ：  
  
-   <xref:System.Windows.Ink.IncrementalLassoHitTester>命中通过确定套索路径是否环绕笔画来测试笔画。  
  
-   <xref:System.Windows.Ink.IncrementalStrokeHitTester>命中通过确定橡皮擦路径与之相交的位置来测试笔画。  
  
 下表列出了在何处学习如何在自定义控件上管理数字墨迹。  
  
|要实现的目的…|参考文章|  
|-----------------|----------------------|  
|创建用于收集数字墨迹的控件|[创建墨迹输入控件](/dotnet/framework/wpf/advanced/creating-an-ink-input-control)|  
|创建允许用户选择墨迹的控件|[如何：从自定义控件选择墨迹](/dotnet/framework/wpf/advanced/how-to-select-ink-from-a-custom-control)|  
|创建允许用户使用点擦除墨迹的控件|[如何：清除自定义控件上的墨迹](/dotnet/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control)|  
  
<a name="xamlTextUsage_IncrementalHitTester"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 此类通常不在 XAML 中使用。  
  
   
  
## Examples  
 下面的示例演示如何 <xref:System.Windows.Ink.IncrementalHitTester> 在用户通过触笔输入数据时向添加点。 该示例包括一个 <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> 事件处理程序，该处理程序清除 <xref:System.Windows.Ink.Stroke> 用户相交的部分。 若要创建使用户能够擦除墨迹的控件，请参阅 [如何：清除自定义控件上的墨迹](/dotnet/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control)。  
  
 [!code-csharp[InkEraser#6](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#6)]
 [!code-vb[InkEraser#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddPoint">
      <MemberSignature Language="C#" Value="public void AddPoint (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPoint(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPoint(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPoint (point As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPoint(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.AddPoint : System.Windows.Point -&gt; unit" Usage="incrementalHitTester.AddPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">要添加到 <see cref="T:System.Windows.Point" /> 的 <see cref="T:System.Windows.Ink.IncrementalHitTester" />。</param>
        <summary>向 <see cref="T:System.Windows.Point" /> 中添加一个 <see cref="T:System.Windows.Ink.IncrementalHitTester" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示 <xref:System.Windows.Ink.IncrementalHitTester> 当用户用鼠标输入数据时如何向添加点。 该示例包括一个 <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> 事件处理程序，该处理程序清除 <xref:System.Windows.Ink.Stroke> 用户相交的部分。 若要创建使用户能够擦除墨迹的控件，请参阅 [如何：清除自定义控件上的墨迹](/dotnet/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control)。  
  
 [!code-csharp[InkEraser#11](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#11)]
 [!code-vb[InkEraser#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#11)]  
[!code-csharp[InkEraser#2](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#2)]
[!code-vb[InkEraser#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddPoints">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 添加点。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddPoints">
      <MemberSignature Language="C#" Value="public void AddPoints (System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt; points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPoints(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Windows.Point&gt; points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPoints (points As IEnumerable(Of Point))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPoints(System::Collections::Generic::IEnumerable&lt;System::Windows::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.AddPoints : seq&lt;System.Windows.Point&gt; -&gt; unit" Usage="incrementalHitTester.AddPoints points" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt;" />
      </Parameters>
      <Docs>
        <param name="points">要添加到 <see cref="T:System.Windows.Point" /> 的 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 类型的数组。</param>
        <summary>向 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 添加点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何 <xref:System.Windows.Ink.IncrementalHitTester> 在用户通过触笔输入数据时向添加点。 该示例包括一个 <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> 事件处理程序，该处理程序清除 <xref:System.Windows.Ink.Stroke> 用户相交的部分。 若要创建使用户能够擦除墨迹的控件，请参阅 [如何：清除自定义控件上的墨迹](/dotnet/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control)。  
  
 [!code-csharp[InkEraser#6](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#6)]
 [!code-vb[InkEraser#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPoints">
      <MemberSignature Language="C#" Value="public void AddPoints (System.Windows.Input.StylusPointCollection stylusPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPoints(class System.Windows.Input.StylusPointCollection stylusPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Windows.Input.StylusPointCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPoints (stylusPoints As StylusPointCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPoints(System::Windows::Input::StylusPointCollection ^ stylusPoints);" />
      <MemberSignature Language="F#" Value="member this.AddPoints : System.Windows.Input.StylusPointCollection -&gt; unit" Usage="incrementalHitTester.AddPoints stylusPoints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoints" Type="System.Windows.Input.StylusPointCollection" />
      </Parameters>
      <Docs>
        <param name="stylusPoints">要添加到 <see cref="T:System.Windows.Input.StylusPoint" /> 中的 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 对象的集合。</param>
        <summary>将指定的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象添加到 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何 <xref:System.Windows.Ink.IncrementalStrokeHitTester> 在用户通过触笔输入数据时向添加点。 该示例包括一个 <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> 事件处理程序，该处理程序清除 <xref:System.Windows.Ink.Stroke> 用户相交的部分。 若要创建使用户能够擦除墨迹的控件，请参阅 [如何：清除自定义控件上的墨迹](/dotnet/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control)。  
  
 [!code-csharp[InkEraser#6](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#6)]
 [!code-vb[InkEraser#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPointsCore">
      <MemberSignature Language="C#" Value="protected abstract void AddPointsCore (System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt; points);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddPointsCore(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Windows.Point&gt; points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub AddPointsCore (points As IEnumerable(Of Point))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void AddPointsCore(System::Collections::Generic::IEnumerable&lt;System::Windows::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="abstract member AddPointsCore : seq&lt;System.Windows.Point&gt; -&gt; unit" Usage="incrementalHitTester.AddPointsCore points" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt;" />
      </Parameters>
      <Docs>
        <param name="points">要添加的点</param>
        <summary>向 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 添加点。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHitTesting">
      <MemberSignature Language="C#" Value="public void EndHitTesting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndHitTesting() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.EndHitTesting" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndHitTesting ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndHitTesting();" />
      <MemberSignature Language="F#" Value="member this.EndHitTesting : unit -&gt; unit" Usage="incrementalHitTester.EndHitTesting " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 使用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.IncrementalHitTester.EndHitTesting%2A> <xref:System.Windows.Ink.IncrementalHitTester> 完成命中测试时调用方法。  
  
   
  
## Examples  
 下面的示例演示如何 <xref:System.Windows.Ink.IncrementalHitTester.EndHitTesting%2A> 在使用后调用 <xref:System.Windows.Ink.IncrementalHitTester> 。 此示例假定存在一个名为 <xref:System.Windows.Ink.IncrementalHitTester> 的 `eraseTester` 。  
  
 [!code-csharp[InkEraser#10](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#10)]
 [!code-vb[InkEraser#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.IncrementalHitTester.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Windows.Ink.IncrementalHitTester.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 是否在进行命中测试。</summary>
        <value>如果 <see cref="T:System.Windows.Ink.IncrementalHitTester" /> 是在进行命中测试，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.IncrementalHitTester.IsValid%2A>返回 `true` 直到 <xref:System.Windows.Ink.IncrementalHitTester.EndHitTesting%2A> 调用。 然后，它将返回 `false` 。  
  
   
  
## Examples  
 下面的示例演示如何在向 <xref:System.Windows.Ink.IncrementalHitTester> 其添加点之前检查是否有效。 此示例假定存在一个名为 <xref:System.Windows.Ink.IncrementalHitTester> 的 `eraseTester` 。  
  
 [!code-csharp[InkEraser#9](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#9)]
 [!code-vb[InkEraser#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
