<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59bbee4d4697e621b6e67fd0fd3deb886ce5dba8" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83951632" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <TypeSignature Language="F#" Value="type DataLoadOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="124d6-101">提供相关数据的即时加载和筛选。</span><span class="sxs-lookup"><span data-stu-id="124d6-101">Provides for immediate loading and filtering of related data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a><span data-ttu-id="124d6-102">常规</span><span class="sxs-lookup"><span data-stu-id="124d6-102">General</span></span>  
 <span data-ttu-id="124d6-103">查询某对象时，实际上您只检索请求的对象。</span><span class="sxs-lookup"><span data-stu-id="124d6-103">When you query for an object, you actually retrieve only the object you requested.</span></span> <span data-ttu-id="124d6-104">不会同时自动提取*相关*的对象。</span><span class="sxs-lookup"><span data-stu-id="124d6-104">The *related* objects are not automatically fetched at the same time.</span></span> <span data-ttu-id="124d6-105">（有关详细信息，请参阅[跨关系查询](/dotnet/framework/data/adonet/sql/linq/querying-across-relationships)。）</span><span class="sxs-lookup"><span data-stu-id="124d6-105">(For more information, see [Querying Across Relationships](/dotnet/framework/data/adonet/sql/linq/querying-across-relationships).)</span></span>  
  
 <span data-ttu-id="124d6-106"><xref:System.Data.Linq.DataLoadOptions> 类提供两种方法来立即加载指定的相关数据。</span><span class="sxs-lookup"><span data-stu-id="124d6-106">The <xref:System.Data.Linq.DataLoadOptions> class provides two methods to achieve immediate loading of specified related data.</span></span> <span data-ttu-id="124d6-107"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 方法允许立即加载与主目标相关的数据。</span><span class="sxs-lookup"><span data-stu-id="124d6-107">The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target.</span></span> <span data-ttu-id="124d6-108"><xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> 方法允许筛选相关的对象。</span><span class="sxs-lookup"><span data-stu-id="124d6-108">The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.</span></span>  
  
## <a name="rules"></a><span data-ttu-id="124d6-109">规则</span><span class="sxs-lookup"><span data-stu-id="124d6-109">Rules</span></span>  
 <span data-ttu-id="124d6-110">请注意以下关于 <xref:System.Data.Linq.DataLoadOptions> 用法的规则：</span><span class="sxs-lookup"><span data-stu-id="124d6-110">Note the following rules regarding <xref:System.Data.Linq.DataLoadOptions> usage:</span></span>  
  
-   <span data-ttu-id="124d6-111">在执行第一个查询后将 <xref:System.Data.Linq.DataLoadOptions> 分配给 <xref:System.Data.Linq.DataContext> 会生成一个异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-111">Assigning a <xref:System.Data.Linq.DataLoadOptions> to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.</span></span>  
  
-   <span data-ttu-id="124d6-112">在将 <xref:System.Data.Linq.DataLoadOptions> 分配给某个 <xref:System.Data.Linq.DataContext> 后，对其进行修改会生成异常</span><span class="sxs-lookup"><span data-stu-id="124d6-112">Modifying a <xref:System.Data.Linq.DataLoadOptions> after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception</span></span>  
  
## <a name="cycle-handling"></a><span data-ttu-id="124d6-113">周期处理</span><span class="sxs-lookup"><span data-stu-id="124d6-113">Cycle Handling</span></span>  
 <span data-ttu-id="124d6-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 和 <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> 指令不能创建循环。</span><span class="sxs-lookup"><span data-stu-id="124d6-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles.</span></span> <span data-ttu-id="124d6-115">下面的示例表示此类图形的示例：</span><span class="sxs-lookup"><span data-stu-id="124d6-115">The following represent examples of such graphs:</span></span>  
  
-   <span data-ttu-id="124d6-116">示例1：自递归</span><span class="sxs-lookup"><span data-stu-id="124d6-116">Example 1: Self recursive</span></span>  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   <span data-ttu-id="124d6-117">示例2：后向指针</span><span class="sxs-lookup"><span data-stu-id="124d6-117">Example 2: Back-pointers</span></span>  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   <span data-ttu-id="124d6-118">示例3：更长循环</span><span class="sxs-lookup"><span data-stu-id="124d6-118">Example 3: Longer cycles</span></span>  
  
     <span data-ttu-id="124d6-119">虽然这不应在规范化的模型中出现，但也可能出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="124d6-119">Although this should not occur in a well-normalized model, it is possible.</span></span>  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   <span data-ttu-id="124d6-120">示例4：自递归子查询</span><span class="sxs-lookup"><span data-stu-id="124d6-120">Example 4: Self recursive subQueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   <span data-ttu-id="124d6-121">示例5：更长的递归子查询</span><span class="sxs-lookup"><span data-stu-id="124d6-121">Example 5: Longer recursive subqueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 <span data-ttu-id="124d6-122">下面是一些可帮助你了解这些方案中所发生情况的常规规则。</span><span class="sxs-lookup"><span data-stu-id="124d6-122">The following are some general rules that help you understand what occurs in these scenarios.</span></span>  
  
 <span data-ttu-id="124d6-123">**LoadWith**对的每个调用都将检查是否已在图形中引入循环 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>。</span><span class="sxs-lookup"><span data-stu-id="124d6-123">**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph.</span></span> <span data-ttu-id="124d6-124">如果有，如示例1、2和3中所示，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-124">If there are, as in Examples 1, 2, and 3, an exception is thrown.</span></span>  
  
 <span data-ttu-id="124d6-125">**AssociateWith**引擎在运行时不会将现有子查询子句应用到表达式中的关系。</span><span class="sxs-lookup"><span data-stu-id="124d6-125">**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</span></span>  
  
-   <span data-ttu-id="124d6-126">在示例4中，对所有 `A`（而不仅仅是子查询表达式本身的子筛选）执行 `Where` 子句（因为这会是递归的）</span><span class="sxs-lookup"><span data-stu-id="124d6-126">In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</span></span>  
  
-   <span data-ttu-id="124d6-127">在示例5中，第一个 `Where` 子句应用于所有 `B`，即使 `B`上存在子查询。</span><span class="sxs-lookup"><span data-stu-id="124d6-127">In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`.</span></span> <span data-ttu-id="124d6-128">即使 `A`上存在子查询，第二个 `Where` 子句也适用于所有 `A`。</span><span class="sxs-lookup"><span data-stu-id="124d6-128">The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="124d6-129">从 Northwind 示例数据库中检索 `Customers` 时，可以使用 <xref:System.Data.Linq.DataLoadOptions> 来指定还将检索 `Orders`。</span><span class="sxs-lookup"><span data-stu-id="124d6-129">When you retrieve `Customers` from the Northwind sample database, you can use <xref:System.Data.Linq.DataLoadOptions> to specify that `Orders` is also to be retrieved.</span></span> <span data-ttu-id="124d6-130">甚至可以指定要检索的 `Orders` 子集。</span><span class="sxs-lookup"><span data-stu-id="124d6-130">You can even specify which subset of `Orders` to retrieve.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="124d6-131">初始化 <see cref="T:System.Data.Linq.DataLoadOptions" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="124d6-131">Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="124d6-132">标识要对特定一对多字段或属性使用的查询。</span><span class="sxs-lookup"><span data-stu-id="124d6-132">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="124d6-133">注意以下各项：</span><span class="sxs-lookup"><span data-stu-id="124d6-133">Note the following:</span></span>  
  
 <span data-ttu-id="124d6-134">如果该表达式不是以表示一对多关系的字段或属性开头，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-134">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="124d6-135">如果无效运算符出现在表达式中，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-135">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="124d6-136">有效运算符包括：</span><span class="sxs-lookup"><span data-stu-id="124d6-136">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="124d6-137">其中</span><span class="sxs-lookup"><span data-stu-id="124d6-137">Where</span></span>  
  
 <span data-ttu-id="124d6-138">OrderBy</span><span class="sxs-lookup"><span data-stu-id="124d6-138">OrderBy</span></span>  
  
 <span data-ttu-id="124d6-139">ThenBy</span><span class="sxs-lookup"><span data-stu-id="124d6-139">ThenBy</span></span>  
  
 <span data-ttu-id="124d6-140">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="124d6-140">OrderByDescending</span></span>  
  
 <span data-ttu-id="124d6-141">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="124d6-141">ThenByDescending</span></span>  
  
 <span data-ttu-id="124d6-142">Take</span><span class="sxs-lookup"><span data-stu-id="124d6-142">Take</span></span></param>
        <summary><span data-ttu-id="124d6-143">筛选针对特定关系检索的对象。</span><span class="sxs-lookup"><span data-stu-id="124d6-143">Filters the objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="124d6-144">在下面的示例中，内部循环只循环访问当前未发货的那些 `Orders`。</span><span class="sxs-lookup"><span data-stu-id="124d6-144">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="124d6-145">要查询的类型。</span><span class="sxs-lookup"><span data-stu-id="124d6-145">The type that is queried against.</span></span>  
  
 <span data-ttu-id="124d6-146">如果未映射该类型，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-146">If the type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="124d6-147">标识要对特定一对多字段或属性使用的查询。</span><span class="sxs-lookup"><span data-stu-id="124d6-147">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="124d6-148">注意以下各项：</span><span class="sxs-lookup"><span data-stu-id="124d6-148">Note the following:</span></span>  
  
 <span data-ttu-id="124d6-149">如果该表达式不是以表示一对多关系的字段或属性开头，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-149">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="124d6-150">如果无效运算符出现在表达式中，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-150">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="124d6-151">有效运算符包括：</span><span class="sxs-lookup"><span data-stu-id="124d6-151">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="124d6-152">其中</span><span class="sxs-lookup"><span data-stu-id="124d6-152">Where</span></span>  
  
 <span data-ttu-id="124d6-153">OrderBy</span><span class="sxs-lookup"><span data-stu-id="124d6-153">OrderBy</span></span>  
  
 <span data-ttu-id="124d6-154">ThenBy</span><span class="sxs-lookup"><span data-stu-id="124d6-154">ThenBy</span></span>  
  
 <span data-ttu-id="124d6-155">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="124d6-155">OrderByDescending</span></span>  
  
 <span data-ttu-id="124d6-156">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="124d6-156">ThenByDescending</span></span>  
  
 <span data-ttu-id="124d6-157">Take</span><span class="sxs-lookup"><span data-stu-id="124d6-157">Take</span></span></param>
        <summary><span data-ttu-id="124d6-158">筛选针对特定关系检索的对象。</span><span class="sxs-lookup"><span data-stu-id="124d6-158">Filters objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="124d6-159">有关如何避免周期的信息，请参阅 <xref:System.Data.Linq.DataLoadOptions>。</span><span class="sxs-lookup"><span data-stu-id="124d6-159">For information about how to avoid cycles, see <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="124d6-160">在下面的示例中，内部循环只循环访问当前未发货的那些 `Orders`。</span><span class="sxs-lookup"><span data-stu-id="124d6-160">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssociationCriteria (memberInfo As MemberInfo, ByRef associationCriteria As LambdaExpression) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberSignature Language="F#" Value="member this.GetAssociationCriteria : System.Reflection.MemberInfo * LambdaExpression -&gt; bool" Usage="dataLoadOptions.GetAssociationCriteria (memberInfo, associationCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression" RefType="out" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsImmediate (memberInfo As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberSignature Language="F#" Value="member this.IsImmediate : System.Reflection.MemberInfo -&gt; bool" Usage="dataLoadOptions.IsImmediate memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="124d6-161">标识相关内容的 lambda 表达式。</span><span class="sxs-lookup"><span data-stu-id="124d6-161">A lambda expression that identifies the related material.</span></span></param>
        <summary><span data-ttu-id="124d6-162">通过使用 lambda 表达式检索与主目标相关的指定数据。</span><span class="sxs-lookup"><span data-stu-id="124d6-162">Retrieves specified data related to the main target by using a lambda expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="124d6-163">在下面的示例中，在执行查询时会检索到位于伦敦的所有 `Orders` 所下的所有 `Customers`。</span><span class="sxs-lookup"><span data-stu-id="124d6-163">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="124d6-164">这样一来，连续访问 `Orders` 对象的 `Customer` 属性不会触发新的数据库查询。</span><span class="sxs-lookup"><span data-stu-id="124d6-164">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="124d6-165">要查询的类型。</span><span class="sxs-lookup"><span data-stu-id="124d6-165">Type that is queried against.</span></span>  
  
 <span data-ttu-id="124d6-166">如果未映射此类型，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-166">If this type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="124d6-167">标识要检索的字段或属性。</span><span class="sxs-lookup"><span data-stu-id="124d6-167">Identifies the field or property to be retrieved.</span></span>  
  
 <span data-ttu-id="124d6-168">如果该表达式不标识表示一对一关系或一对多关系的字段或属性，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="124d6-168">If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</span></span></param>
        <summary><span data-ttu-id="124d6-169">指定在为 T 类型的对象提交查询时要检索的子对象。</span><span class="sxs-lookup"><span data-stu-id="124d6-169">Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="124d6-170">不能指定两个级别的关系（例如 `Orders.OrderDetails`）的加载。</span><span class="sxs-lookup"><span data-stu-id="124d6-170">You cannot specify the loading of two levels of relationships (for example, `Orders.OrderDetails`).</span></span> <span data-ttu-id="124d6-171">在这些情况下，您必须指定两个单独的 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="124d6-171">In these scenarios you must specify two separate <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> methods.</span></span>  
  
 <span data-ttu-id="124d6-172">若要避免循环，请参阅 <xref:System.Data.Linq.DataLoadOptions>中的 "备注" 部分。</span><span class="sxs-lookup"><span data-stu-id="124d6-172">To avoid cycling, see Remarks section in <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="124d6-173">在下面的示例中，在执行查询时会检索到位于伦敦的所有 `Orders` 所下的所有 `Customers`。</span><span class="sxs-lookup"><span data-stu-id="124d6-173">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="124d6-174">这样一来，连续访问 `Orders` 对象的 `Customer` 属性不会触发新的数据库查询。</span><span class="sxs-lookup"><span data-stu-id="124d6-174">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
