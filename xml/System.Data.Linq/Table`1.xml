<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dc38c01aedd43ade11dfcbc6dad063a938d7dca1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89806137" /></Metadata><TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryProvider&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface ITable&#xA;    interface IQueryable&#xA;    interface IEnumerable&#xA;    interface IListSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Data.Linq.ITable&lt;TEntity&gt;, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Data.Linq.ITable`1&lt;!TEntity&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable, ITable(Of TEntity)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Data::Linq::ITable&lt;TEntity&gt;, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryProvider&#xA;    interface ITable&#xA;    interface IListSource&#xA;    interface ITable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&#xA;    interface IQueryProvider&#xA;    interface ITable&#xA;    interface IListSource&#xA;    interface ITable&lt;'Entity (requires 'Entity : null)&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" FrameworkAlternate="xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.Data.Linq.ITable&lt;TEntity&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity"><span data-ttu-id="066a1-101">表中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-101">The type of the data in the table.</span></span></typeparam>
    <summary><span data-ttu-id="066a1-102">表示基础数据库中的特定类型的表。</span><span class="sxs-lookup"><span data-stu-id="066a1-102">Represents a table for a particular type in the underlying database.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-103">利用此类，您可以对表进行查询以及添加、删除和附加对象。</span><span class="sxs-lookup"><span data-stu-id="066a1-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="066a1-104">应用程序可以 <xref:System.Data.Linq.Table%601> 通过或使用强类型的 <xref:System.Data.Linq.DataContext.GetTable%2A> 强类型属性来访问实例 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="066a1-105">也就是说，当设计器生成 DataContext 对象时，它将生成用于表示每个表的属性。</span><span class="sxs-lookup"><span data-stu-id="066a1-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="066a1-106">例如：</span><span class="sxs-lookup"><span data-stu-id="066a1-106">For example:</span></span>  
  
```csharp
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext 
{
    public System.Data.Linq.Table<User> Users
    {
        get
        {
            return this.GetTable<User>();
        }
    }
}
```
  
 <span data-ttu-id="066a1-107">对于此强类型的 DataContext，可以访问 "用户" 属性以获取 `Table<User>` 。</span><span class="sxs-lookup"><span data-stu-id="066a1-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="066a1-108">将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-109">使用方法，将这些 `Attach` 方法与已创建的实体一起使用 <xref:System.Data.Linq.DataContext> ，并将其序列化为客户端，然后反序列化后 (，目的是) 执行更新或删除操作。</span><span class="sxs-lookup"><span data-stu-id="066a1-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="066a1-110">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 <span data-ttu-id="066a1-111">不要尝试 `Attach` 通过序列化分离的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="066a1-112">尚未进行序列化的实体仍然会保持与延迟加载程序的关联，如果在第二个数据上下文中跟踪实体，则可能会导致意外的结果。</span><span class="sxs-lookup"><span data-stu-id="066a1-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="066a1-113">附加新实体时，任何子集合的延迟加载程序 (例如， `EntitySet` 将初始化关联表中的实体集合) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="066a1-114"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，子集合的成员将进入 `Unmodified` 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="066a1-115">若要更新子集合的成员，必须显式调用 `Attach` 并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="066a1-116">`Attach` 附加所提供对象的对象图中的所有实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="066a1-117">例如：</span><span class="sxs-lookup"><span data-stu-id="066a1-117">For example:</span></span>
  
```csharp
using (var db = new SampleDataContext())
{  
    var employee = new Employee { employeeId = 1 };  
  
    var master = new Master();  
    master.Employee = employee;  
  
    var child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
} 
```  

```vb
Using db As New SampleDataContext()
    Dim employee As New Employee With { .employeeId = 1 }
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="066a1-118">对的调用会 `Attach` `Employee` 附加 employee、master 和 child，因为 `Employee` 同时具有与主节点和子节点之间的关系。</span><span class="sxs-lookup"><span data-stu-id="066a1-118">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="066a1-119">必须显式调用 `InsertOnSubmit` 以将状态从 "已附加" 更改为 "已插入"。</span><span class="sxs-lookup"><span data-stu-id="066a1-119">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Attach(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; unit&#xA;override this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">M:System.Data.Linq.ITable`1.Attach(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-120">要附加的实体的原始值。</span><span class="sxs-lookup"><span data-stu-id="066a1-120">The original values of the entity to be attached.</span></span></param>
        <summary><span data-ttu-id="066a1-121">如果执行开放式并发检查时需要原始值，请将已断开连接或“已拆离”的实体附加到新的 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-121">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-122">将方法用于已 `Attach` 创建的实体 <xref:System.Data.Linq.DataContext> （序列化为客户端），然后反序列化回以执行更新或删除操作。</span><span class="sxs-lookup"><span data-stu-id="066a1-122">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="066a1-123">由于新 <xref:System.Data.Linq.DataContext> 无法跟踪断开连接的实体的原始值，因此客户端负责提供这些值。</span><span class="sxs-lookup"><span data-stu-id="066a1-123">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="066a1-124">在此版本的中 <xref:System.Data.Linq.Table%601.Attach%2A> ，假定实体处于其原始值状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-124">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="066a1-125">调用此方法后，可以更新其字段，例如，通过客户端发送的其他数据。</span><span class="sxs-lookup"><span data-stu-id="066a1-125">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="066a1-126">附加新实体时，任何子集合的延迟加载程序 (例如， `EntitySet` 将初始化关联表中的实体集合) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-126">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="066a1-127"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，子集合的成员将进入 `Unmodified` 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-127">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="066a1-128">若要更新子集合的成员，必须显式调用 `Attach` 并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-128">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="066a1-129">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-129">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 <span data-ttu-id="066a1-130">不要尝试 `Attach` 通过序列化分离的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-130">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="066a1-131">尚未进行序列化的实体仍然会保持与延迟加载程序的关联，如果在第二个数据上下文中跟踪实体，则可能会导致意外的结果。</span><span class="sxs-lookup"><span data-stu-id="066a1-131">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-132">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-132">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="066a1-133">如果以修改状态附加实体，则为 <see langword="true" />；如果以未修改状态附加实体，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-133"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="066a1-134">以修改或未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-134">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-135">如果附加 *为 "已修改*"，则实体必须声明一个版本成员或不能参与更新冲突检查。</span><span class="sxs-lookup"><span data-stu-id="066a1-135">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="066a1-136">附加新实体时，任何子集合的延迟加载程序 (例如， `EntitySet` 将初始化关联表中的实体集合) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-136">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="066a1-137"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，子集合的成员将进入 `Unmodified` 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-137">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="066a1-138">若要更新子集合的成员，必须显式调用 `Attach` 并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-138">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-139">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-139">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="066a1-140">与包含原始值的数据成员具有相同实体类型的实例。</span><span class="sxs-lookup"><span data-stu-id="066a1-140">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="066a1-141">通过指定实体及其原始状态，以修改或未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-141">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-142">在下面的示例中， `Customer` 已正确配置了对象。</span><span class="sxs-lookup"><span data-stu-id="066a1-142">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="066a1-143">`Attach`无需重播更新即可调用。</span><span class="sxs-lookup"><span data-stu-id="066a1-143">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="066a1-144">附加新实体时，任何子集合的延迟加载程序 (例如， `EntitySet` 将初始化关联表中的实体集合) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-144">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="066a1-145"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，子集合的成员将进入 `Unmodified` 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-145">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="066a1-146">若要更新子集合的成员，必须显式调用 `Attach` 并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-146">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="066a1-147">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-147">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-148">如果附加为 "已修改"，则实体必须声明一个版本成员或不能参与更新冲突检查。</span><span class="sxs-lookup"><span data-stu-id="066a1-148">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="066a1-149">附加新实体时，任何子集合的延迟加载程序 (例如， `EntitySet` 将初始化关联表中的实体集合) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-149">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="066a1-150"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，子集合的成员将进入 `Unmodified` 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-150">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="066a1-151">若要更新子集合的成员，必须显式调用 `Attach` 并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-151">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="066a1-152">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-152">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="066a1-153">要附加的实体的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-153">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="066a1-154">实体的集合。</span><span class="sxs-lookup"><span data-stu-id="066a1-154">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="066a1-155">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-155">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-156">此方法将集合的所有实体附加到新的 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-156">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="066a1-157">附加新实体时，任何子集合的延迟加载程序 (例如， `EntitySet` 将初始化关联表中的实体集合) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-157">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="066a1-158"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，子集合的成员将进入 `Unmodified` 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-158">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="066a1-159">若要更新子集合的成员，必须显式调用 `Attach` 并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-159">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="066a1-160">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-160">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="066a1-161">要附加的实体的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-161">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="066a1-162">实体的集合。</span><span class="sxs-lookup"><span data-stu-id="066a1-162">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="066a1-163">如果对象拥有时间戳或 RowVersion 成员，则为 <see langword="true" />；如果执行开放式并发检查时需要使用原始值，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-163"><see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span></span></param>
        <summary><span data-ttu-id="066a1-164">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-164">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-165">此方法以 <xref:System.Data.Linq.DataContext> *已修改* 或未 *修改* 状态将集合的所有实体附加到。</span><span class="sxs-lookup"><span data-stu-id="066a1-165">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="066a1-166">如果附加为 "已修改"，则实体必须声明一个版本成员或不能参与更新冲突检查。</span><span class="sxs-lookup"><span data-stu-id="066a1-166">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="066a1-167">如果附加为未修改，则假定实体表示原始值。</span><span class="sxs-lookup"><span data-stu-id="066a1-167">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="066a1-168">调用此方法后，可以在调用之前，通过客户端中的其他信息来修改实体的字段 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-168">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="066a1-169">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-169">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 <span data-ttu-id="066a1-170">附加新实体时，任何子集合的延迟加载程序 (例如， `EntitySet` 将初始化关联表中的实体集合) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-170">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="066a1-171"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，子集合的成员将进入 `Unmodified` 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-171">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="066a1-172">若要更新子集合的成员，必须显式调用 `Attach` 并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-172">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="066a1-173">下面的示例演示如何更新 `Order` 其他实例上的对象 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-173">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="066a1-174">该示例假设你已连接到数据库，并为其创建了一个 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 文件 (在本例中，Northwind 示例数据库) 。</span><span class="sxs-lookup"><span data-stu-id="066a1-174">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="066a1-175">在下面的示例中，要附加的实体对象具有与另一个对象的外键关系，并将其存储在缓存中，但不会附加。</span><span class="sxs-lookup"><span data-stu-id="066a1-175">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="066a1-176">调用时 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> ，将 `ChangeProcessor` `Insert` 为所有外键对象添加操作。</span><span class="sxs-lookup"><span data-stu-id="066a1-176">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="066a1-177">在不同的实例中重新使用实体实例时，这会产生副作用 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-177">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="066a1-178">出于此原因，不 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 支持重复使用对象。</span><span class="sxs-lookup"><span data-stu-id="066a1-178">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="066a1-179">下面的示例演示了一个方案，其中客户 A 已取消所有订单，而客户 B 已取得这些订单的所有权。</span><span class="sxs-lookup"><span data-stu-id="066a1-179">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="066a1-180">您可以同时附加客户 A 的所有订单。</span><span class="sxs-lookup"><span data-stu-id="066a1-180">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">P:System.Data.Linq.ITable.Context</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="066a1-181">获取已用于检索此 <see cref="T:System.Data.Linq.Table`1" /> 的 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-181">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <value><span data-ttu-id="066a1-182">已用于检索表的数据上下文。</span><span class="sxs-lookup"><span data-stu-id="066a1-182">The data context that has been used to retrieve this table.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="066a1-183">要删除的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-183">The type of the elements to delete.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="066a1-184">要删除的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-184">The entities to delete.</span></span></param>
        <summary><span data-ttu-id="066a1-185">将集合中的所有实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-185">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-186">在调用之前，通过此方法进入挂起删除状态的实体不会从查询结果中消失 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-186">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="066a1-187">必须先附加已断开连接的实体，然后才能将其删除。</span><span class="sxs-lookup"><span data-stu-id="066a1-187">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="066a1-188">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-188">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
## Examples

<span data-ttu-id="066a1-189">下面的示例演示了此方法的一种用法：</span><span class="sxs-lookup"><span data-stu-id="066a1-189">The following example shows one use for this method:</span></span>
  
```csharp
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  

db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
```vb
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteOnSubmit(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member DeleteOnSubmit : 'Entity -&gt; unit&#xA;override this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-190">要删除的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-190">The entity to be deleted.</span></span></param>
        <summary><span data-ttu-id="066a1-191">将此表中的实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-191">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-192">在调用之前，删除的实体不会从查询结果中消失 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-192">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="066a1-193">必须先附加已断开连接的实体，然后才能将其删除。</span><span class="sxs-lookup"><span data-stu-id="066a1-193">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="066a1-194">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-194">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="066a1-195">不支持且无法识别级联删除操作。</span><span class="sxs-lookup"><span data-stu-id="066a1-195">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="066a1-196">如果要删除表中具有约束的行，则必须在 `ON DELETE CASCADE` 数据库的外键约束中设置规则，或者使用自己的代码先删除阻止删除父对象的子对象的子对象。</span><span class="sxs-lookup"><span data-stu-id="066a1-196">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="066a1-197">否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="066a1-197">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="066a1-198">获取能够循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="066a1-198">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="066a1-199">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="066a1-199">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-200">从其获取数组的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-200">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="066a1-201">返回包含当前值和原始值的已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="066a1-201">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="066a1-202">包含当前值和原始值的已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="066a1-202">An array of modified members that contain their current and original values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="066a1-203">创建用于绑定到数据源的新列表。</span><span class="sxs-lookup"><span data-stu-id="066a1-203">Creates a new list for binding to a data source.</span></span></summary>
        <returns><span data-ttu-id="066a1-204">用于绑定到数据源的新 <see cref="T:System.ComponentModel.IBindingList" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-204">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-205">返回的列表支持标准操作，如添加、删除、插入和更新，但保存必须由程序员显式管理。</span><span class="sxs-lookup"><span data-stu-id="066a1-205">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-206">要返回其原始状态的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-206">The entity whose original state is to be returned.</span></span></param>
        <summary><span data-ttu-id="066a1-207">返回包含实体原始状态的 <see cref="T:System.Data.Linq.Table`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="066a1-207">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></summary>
        <returns><span data-ttu-id="066a1-208">一个 <see cref="T:System.Data.Linq.Table`1" /> 实例，其中包含实体的原始状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-208">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-209">此方法将返回实体的原始状态，因为它是创建的或附加到当前的 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-209">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="066a1-210">已序列化和反序列化的实体的原始状态必须由独立的跟踪机制提供，并在将实体附加到新的时提供 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-210">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="066a1-211">有关详细信息，请参阅 [N 层应用程序中的数据检索和 CUD 操作 (LINQ to SQL) ](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)。</span><span class="sxs-lookup"><span data-stu-id="066a1-211">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="066a1-212">要插入的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-212">The type of the elements to insert.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="066a1-213">要添加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-213">The entities to add.</span></span></param>
        <summary><span data-ttu-id="066a1-214">以 <see langword="pending insert" /> 状态将集合中的所有实体添加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-214">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-215">在调用之前，添加的实体不会出现在查询结果中 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-215">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InsertOnSubmit(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member InsertOnSubmit : 'Entity -&gt; unit&#xA;override this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-216">要添加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-216">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="066a1-217">将处于 <see langword="pending insert" /> 状态的实体添加到此 <see cref="T:System.Data.Linq.Table`1" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-217">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-218">直到调用之后，添加的实体才会出现在此表的查询结果中 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="066a1-218">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="066a1-219">获取一个值，该值指示包含在此 <see cref="T:System.Data.Linq.Table`1" /> 实例中的实体类型是否具有主键。</span><span class="sxs-lookup"><span data-stu-id="066a1-219">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span></span></summary>
        <value><span data-ttu-id="066a1-220">如果实体类型不具有主键，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-220"><see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="066a1-221">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="066a1-221">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="066a1-222">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="066a1-222">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="table.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="066a1-223">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="066a1-223">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="066a1-224">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="066a1-224">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-225">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-225">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-226">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Collections.Generic.IEnumerable%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-226">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="066a1-227">获取一个值，该值指示集合是否为 <see cref="T:System.Collections.IList" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="066a1-227">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span></span></summary>
        <value><span data-ttu-id="066a1-228">如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-228"><see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-229">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-229">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-230">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-230">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="table.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="066a1-231">从不实现 <see cref="T:System.Collections.IList" /> 本身的对象返回可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-231">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span></span></summary>
        <returns><span data-ttu-id="066a1-232">可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-232">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-233">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-233">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-234">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-234">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="066a1-235">允许反序列化的实体与 <see cref="T:System.Data.Linq.DataContext" /> 的新实例相关联，以便可以从数据库更新或删除这些实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-235">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.Attach : obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.Attach : obj -&gt; unit" Usage="table.System.Data.Linq.ITable.Attach entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-236">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-236">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="066a1-237">以未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-237">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-238">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-238">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-239">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-239">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.Attach : obj * bool -&gt; unit&#xA;override this.System.Data.Linq.ITable.Attach : obj * bool -&gt; unit" Usage="table.System.Data.Linq.ITable.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-240">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-240">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="066a1-241">如果以修改状态附加实体，则为 <see langword="true" />；如果以未修改状态附加实体，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-241"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="066a1-242">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-242">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-243">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-243">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-244">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-244">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.Attach : obj * obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.Attach : obj * obj -&gt; unit" Usage="table.System.Data.Linq.ITable.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-245">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-245">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="066a1-246">与包含原始值的数据成员具有相同实体类型的实例。</span><span class="sxs-lookup"><span data-stu-id="066a1-246">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="066a1-247">通过指定实体及其原始状态，以修改或未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-247">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-248">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-248">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-249">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-249">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="066a1-250">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-250">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable -&gt; unit&#xA;override this.System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable -&gt; unit" Usage="table.System.Data.Linq.ITable.AttachAll entities" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="066a1-251">要附加的实体集合。</span><span class="sxs-lookup"><span data-stu-id="066a1-251">The collection of entities to be attached.</span></span></param>
        <summary><span data-ttu-id="066a1-252">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-253">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-253">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-254">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-254">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable * bool -&gt; unit&#xA;override this.System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable * bool -&gt; unit" Usage="table.System.Data.Linq.ITable.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="066a1-255">要附加的实体集合。</span><span class="sxs-lookup"><span data-stu-id="066a1-255">The collection of entities to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="066a1-256">如果以修改状态附加实体，则为 <see langword="true" />；如果以未修改状态附加实体，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-256"><see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span></span></param>
        <summary><span data-ttu-id="066a1-257">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-257">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-258">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-258">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-259">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-259">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.DeleteAllOnSubmit : System.Collections.IEnumerable -&gt; unit&#xA;override this.System.Data.Linq.ITable.DeleteAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="table.System.Data.Linq.ITable.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="066a1-260">要移除的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-260">The entities being removed.</span></span></param>
        <summary><span data-ttu-id="066a1-261">将集合中的所有实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-261">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-262">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-262">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-263">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-263">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.DeleteOnSubmit : obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.DeleteOnSubmit : obj -&gt; unit" Usage="table.System.Data.Linq.ITable.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-264">要移除的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-264">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="066a1-265">将此表中的实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="066a1-265">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-266">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-266">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-267">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-267">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="066a1-268">不支持且无法识别级联删除操作。</span><span class="sxs-lookup"><span data-stu-id="066a1-268">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="066a1-269">如果要删除表中具有约束的行，则必须在 `ON DELETE CASCADE` 数据库的外键约束中设置规则，或者使用自己的代码先删除阻止删除父对象的子对象的子对象。</span><span class="sxs-lookup"><span data-stu-id="066a1-269">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="066a1-270">否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="066a1-270">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.GetModifiedMembers : obj -&gt; System.Data.Linq.ModifiedMemberInfo[]&#xA;override this.System.Data.Linq.ITable.GetModifiedMembers : obj -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.System.Data.Linq.ITable.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("NOT IMPLEMENTED YET")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("NOT IMPLEMENTED YET")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-271">要从其获取已修改成员的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-271">The entity from which to obtain the modified members.</span></span></param>
        <summary><span data-ttu-id="066a1-272">返回包含当前值和原始值的已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="066a1-272">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="066a1-273">已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="066a1-273">An array of modified members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-274">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-274">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-275">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-275">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.GetOriginalEntityState : obj -&gt; obj&#xA;override this.System.Data.Linq.ITable.GetOriginalEntityState : obj -&gt; obj" Usage="table.System.Data.Linq.ITable.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("NOT IMPLEMENTED YET")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("NOT IMPLEMENTED YET")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-276">要访问其原始状态的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-276">The entity whose original state is to be accessed.</span></span></param>
        <summary><span data-ttu-id="066a1-277">检索给定实体的原始值。</span><span class="sxs-lookup"><span data-stu-id="066a1-277">Retrieves original values of a given entity.</span></span></summary>
        <returns><span data-ttu-id="066a1-278">原始实体的副本。</span><span class="sxs-lookup"><span data-stu-id="066a1-278">A copy of the original entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-279">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-279">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-280">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-280">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.InsertAllOnSubmit : System.Collections.IEnumerable -&gt; unit&#xA;override this.System.Data.Linq.ITable.InsertAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="table.System.Data.Linq.ITable.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="066a1-281">要添加的实体集合。</span><span class="sxs-lookup"><span data-stu-id="066a1-281">The collection of entities to be added.</span></span></param>
        <summary><span data-ttu-id="066a1-282">以 <see langword="pending insert" /> 状态将集合中的所有实体添加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-282">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-283">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-283">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-284">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-284">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.InsertOnSubmit : obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.InsertOnSubmit : obj -&gt; unit" Usage="table.System.Data.Linq.ITable.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="066a1-285">要添加的实体。</span><span class="sxs-lookup"><span data-stu-id="066a1-285">The entity to add.</span></span></param>
        <summary><span data-ttu-id="066a1-286">将处于 <see langword="pending insert" /> 状态的实体添加到此表。</span><span class="sxs-lookup"><span data-stu-id="066a1-286">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-287">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-287">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-288">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-288">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Linq::IQueryable::ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.ElementType : Type" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.ElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="066a1-289">获取在执行与此对象相关联的表达式树时返回的元素类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-289">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></summary>
        <value><span data-ttu-id="066a1-290">在执行与对象的此实例关联的表达式目录树时返回的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-290">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-291">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-291">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-292">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Linq.IQueryable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-292">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System::Linq::IQueryable::Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.Expression : System.Linq.Expressions.Expression" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Expression</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="066a1-293">获取与 <see cref="T:System.Linq.IQueryable" /> 的此实例相关联的表达式树。</span><span class="sxs-lookup"><span data-stu-id="066a1-293">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></summary>
        <value><span data-ttu-id="066a1-294">与 <see cref="T:System.Linq.Expressions.Expression" /> 的此实例关联的 <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-294">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-295">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-295">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-296">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Linq.IQueryable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-296">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System::Linq::IQueryable::Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.Provider : System.Linq.IQueryProvider" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Provider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="066a1-297">获取与此数据源相关联的查询提供程序。</span><span class="sxs-lookup"><span data-stu-id="066a1-297">Gets the query provider that is associated with this data source.</span></span></summary>
        <value><span data-ttu-id="066a1-298">与此数据源关联的 <see cref="T:System.Linq.IQueryProvider" />。</span><span class="sxs-lookup"><span data-stu-id="066a1-298">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-299">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-299">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-300">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Linq.IQueryable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-300">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function CreateQuery (expression As Expression) As IQueryable Implements IQueryProvider.CreateQuery" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&#xA;override this.System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable" Usage="table.System.Linq.IQueryProvider.CreateQuery expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="066a1-301">从其开始执行计算的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="066a1-301">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="066a1-302">构造一个 <see cref="T:System.Linq.IQueryable" /> 对象，该对象可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="066a1-302">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="066a1-303">一个 <see cref="T:System.Linq.IQueryable" />，它可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="066a1-303">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-304">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-304">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-305">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-305">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Function CreateQuery(Of TResult) (expression As Expression) As IQueryable(Of TResult) Implements IQueryProvider.CreateQuery" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&lt;'Result&gt;&#xA;override this.System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="table.System.Linq.IQueryProvider.CreateQuery expression" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="066a1-306">表中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-306">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="066a1-307">从其开始执行计算的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="066a1-307">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="066a1-308">构造一个 <see cref="T:System.Linq.IQueryable`1" /> 对象，该对象可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="066a1-308">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="066a1-309">一个 <see cref="T:System.Linq.IQueryable`1" />，它可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="066a1-309">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-310">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-310">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-311">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-311">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function Execute (expression As Expression) As Object Implements IQueryProvider.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; obj&#xA;override this.System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; obj" Usage="table.System.Linq.IQueryProvider.Execute expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="066a1-312">要执行的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="066a1-312">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="066a1-313">执行指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="066a1-313">Executes the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="066a1-314">执行指定查询所生成的值。</span><span class="sxs-lookup"><span data-stu-id="066a1-314">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-315">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-315">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-316">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-316">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Function Execute(Of TResult) (expression As Expression) As TResult Implements IQueryProvider.Execute" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'Result&#xA;override this.System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'Result" Usage="table.System.Linq.IQueryProvider.Execute expression" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="066a1-317">表中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="066a1-317">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="066a1-318">要执行的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="066a1-318">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="066a1-319">执行指定表达式树所表示的强类型查询。</span><span class="sxs-lookup"><span data-stu-id="066a1-319">Executes the strongly-typed query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="066a1-320">执行指定查询所生成的值。</span><span class="sxs-lookup"><span data-stu-id="066a1-320">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="066a1-321">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="066a1-321">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="066a1-322">它只能在 <xref:System.Data.Linq.Table%601> 实例被强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="066a1-322">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="066a1-323">返回表示表的字符串。</span><span class="sxs-lookup"><span data-stu-id="066a1-323">Returns a string that represents the table.</span></span></summary>
        <returns><span data-ttu-id="066a1-324">表的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="066a1-324">A string representation of the table.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
