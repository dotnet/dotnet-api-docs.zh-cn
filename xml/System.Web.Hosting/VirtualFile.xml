<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1dc1490a7df51d445efca113976396a3d0fc7cb5" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70628229" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <TypeSignature Language="F#" Value="type VirtualFile = class&#xA;    inherit VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示虚拟文件或资源空间中的一个文件对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile>类是表示虚拟文件系统中的文件的对象的基类。 通常，将 <xref:System.Web.Hosting.VirtualFile> 为 <xref:System.Web.Hosting.VirtualPathProvider> Web 应用程序中的每个对象子代实现类的子代。  
  
   
  
## Examples  
 下面的代码示例是一个 <xref:System.Web.Hosting.VirtualFile> 类实现，它将存储在对象中的信息 <xref:System.Data.DataSet> 与模板文件组合在一起以返回 HTML 数据。 此代码示例使用和类的代码示例， <xref:System.Web.Hosting.VirtualPathProvider> <xref:System.Web.Hosting.VirtualDirectory> 以从加载到对象的数据存储区中提供虚拟资源 <xref:System.Data.DataSet> 。 有关编译和运行该示例的完整说明，请参阅类概述的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 此示例包含三个部分： <xref:System.Web.Hosting.VirtualFile> 类实现、用于填充对象的 XML 数据文件 <xref:System.Data.DataSet> 以及页模板文件。  
  
 第一个代码示例是类的实现 <xref:System.Web.Hosting.VirtualFile> 。 其构造函数使用自定义对象的方法 <xref:System.Web.Hosting.VirtualPathProvider> 来返回 <xref:System.Data.DataSet> 对象。 然后，它搜索 <xref:System.Data.DataSet> 对象以检索与提供的虚拟文件路径相关联的信息。 在 <xref:System.Web.Hosting.VirtualFile.Open%2A> 方法中，它将对象中的信息 <xref:System.Data.DataSet> 与模板文件组合在一起，并以对象的形式返回组合 <xref:System.IO.Stream> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 第二个示例是用于填充 <xref:System.Data.DataSet> 自定义对象返回的对象的 XML 数据文件 <xref:System.Web.Hosting.VirtualPathProvider> 。 此 XML 数据用于演示如何使用 <xref:System.Web.Hosting.VirtualPathProvider> 、 <xref:System.Web.Hosting.VirtualFile> 和 <xref:System.Web.Hosting.VirtualDirectory> 类从外部数据中检索数据，而不用于表示生产质量的数据存储区。  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 第三个示例是用作虚拟文件模板的文本文件。 文件中的占位符用% (% ) 标记之间的文本表示，例如 `%file%` 和 `%content%` 。 时间戳用于监视对缓存的虚拟文件数据的更改。  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>从类继承时 <see cref="T:System.Web.Hosting.VirtualFile" /> ，必须重写 <see cref="M:System.Web.Hosting.VirtualFile.Open" /> 方法，以将只读流返回到虚拟资源的内容。</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="new System.Web.Hosting.VirtualFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="new System.Web.Hosting.VirtualFile virtualPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">此实例所表示资源的虚拟路径。</param>
        <summary>初始化 <see cref="T:System.Web.Hosting.VirtualFile" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例是一个 <xref:System.Web.Hosting.VirtualFile.%23ctor%2A> 构造函数的实现，它从 <xref:System.Data.DataSet> 自定义对象提供的对象中检索虚拟文件信息 <xref:System.Web.Hosting.VirtualPathProvider> 。 有关运行此示例所需的完整代码，请参阅类概述的 "示例" 部分 <xref:System.Web.Hosting.VirtualFile> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirectory : bool" Usage="System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示该资源是应作为文件处理的虚拟资源。</summary>
        <value>总是为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberSignature Language="F#" Value="abstract member Open : unit -&gt; System.IO.Stream" Usage="virtualFile.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，返回到虚拟资源的只读流。</summary>
        <returns>到虚拟文件的只读流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile.Open%2A>方法返回一个流，其中包含由类视为文件的数据 <xref:System.Web.Hosting.VirtualPathProvider> 。 流是只读的，并且可查找 (<xref:System.IO.Stream.CanSeek%2A> 属性为 true) 。  
  
   
  
## Examples  
 下面的代码示例是方法的实现 <xref:System.Web.Hosting.VirtualFile.Open%2A> ，该方法将虚拟文件特定的信息与模板文件合并，然后返回组合。 缓存模板文件以减少多次读取文件系统以检索模板文件的开销。 有关运行此示例所需的完整代码，请参阅类概述的 "示例" 部分 <xref:System.Web.Hosting.VirtualFile> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中， <see cref="M:System.Web.Hosting.VirtualFile.Open" /> 方法必须返回一个查找的流。 如果该方法返回的流不支持查找，则 <see cref="T:System.NotSupportedException" /> 当流传递到 <see cref="T:System.Web.HttpResponse" /> 对象以写出数据时，将引发。 发生此异常的原因是响应尝试读取 <see cref="P:System.IO.Stream.Length" /> 属性，但在无法查找的流上，尝试访问该属性将导致异常。 有关更多信息，请参见 <see cref="P:System.IO.Stream.CanSeek" /> 属性。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
