<Type Name="VirtualPathProvider" FullName="System.Web.Hosting.VirtualPathProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f93e75c030c0c052794e0ca463ee17ed16756327" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89816886" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualPathProvider : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualPathProvider extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualPathProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualPathProvider&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualPathProvider abstract : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type VirtualPathProvider = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供了一组方法，使 Web 应用程序可以从虚拟文件系统中检索资源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualPathProvider>类提供一组方法，用于实现 Web 应用程序的虚拟文件系统。 在虚拟文件系统中，文件和目录由服务器操作系统所提供的文件系统以外的数据存储管理。 例如，可以使用虚拟文件系统将内容存储在 SQL Server 数据库中。  
  
 可以存储在虚拟文件系统中按请求处理的任何文件。 这包括：  
  
-   ASP.NET 页、母版页、用户控件和其他对象。  
  
-   扩展名为 .htm 和 .jpg 的标准网页。  
  
-   映射到实例的任何自定义扩展 <xref:System.Web.Compilation.BuildProvider> 。  
  
-   文件夹中的任何命名主题 `App_Theme` 。  
  
 不能将 ASP.NET 应用程序文件夹或文件存储在虚拟文件系统中。 这包括：  
  
-   Global.asax 文件。  
  
-   Web.config 文件。  
  
-   使用的站点地图数据文件 <xref:System.Web.XmlSiteMapProvider> 。  
  
-   包含应用程序程序集或生成应用程序程序集的目录： `Bin` 、 `App_Code` 、 `App_GlobalResources` 、any `App_LocalResources` 。  
  
-   应用程序数据文件夹 `App_Data` 。  
  
> [!NOTE]
>  如果为部署预编译了某个网站， <xref:System.Web.Hosting.VirtualPathProvider> 则不会编译实例提供的内容，并且 <xref:System.Web.Hosting.VirtualPathProvider> 预编译的站点不使用任何实例。  
  
## <a name="registering-a-virtualpathprovider"></a>注册 VirtualPathProvider  
 自定义 <xref:System.Web.Hosting.VirtualPathProvider> 实例应通过使用 <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=nameWithType> 方法在 Web 应用程序执行任何页面分析或编译之前，使用方法在 ASP.NET 编译系统中进行注册。  
  
 通常情况下， <xref:System.Web.Hosting.VirtualPathProvider> 会在目录中 `AppInitialize` 定义的方法中 `App_Code` 或在文件中的事件过程中注册实例 `Application_Start` `Global.asax` 。 有关 <xref:System.Web.Hosting.VirtualPathProvider> 在方法中注册实例的示例 `AppInitialize` ，请参见 "示例" 部分。  
  
 你可以 <xref:System.Web.Hosting.VirtualPathProvider> 在其他事件期间注册实例，但在注册实例之前编译和缓存的页 <xref:System.Web.Hosting.VirtualPathProvider> 将不会失效，即使新的 <xref:System.Web.Hosting.VirtualPathProvider> 实例现在将为先前编译的页提供源也是如此。  
  
   
  
## Examples  
 下面的代码示例是一个 <xref:System.Web.Hosting.VirtualPathProvider> 类实现，它使用存储在对象中的信息创建虚拟文件系统 <xref:System.Data.DataSet> 。 此代码示例使用和类的代码示例， <xref:System.Web.Hosting.VirtualFile> <xref:System.Web.Hosting.VirtualDirectory> 以从加载到对象的数据存储区中提供虚拟资源 <xref:System.Data.DataSet> 。  
  
 此示例包含四个部分： <xref:System.Web.Hosting.VirtualPathProvider> 类实现、用于填充对象的 XML 数据文件 <xref:System.Data.DataSet> 、 `AppStart` 包含 `AppInitialize` 用于向编译系统注册该类的方法的对象， <xref:System.Web.Hosting.VirtualPathProvider> 以及提供指向虚拟文件的链接的 ASP.NET 页。  
  
 若要在应用程序中使用此示例代码，请执行以下步骤。  
  
1.  在 Web 服务器上创建一个示例应用程序。  
  
2.  复制自定义对象的源代码 <xref:System.Web.Hosting.VirtualPathProvider> (参阅下面) 到应用程序目录中的文件 `App_Code` 。  
  
3.  复制自定义对象的源代码 <xref:System.Web.Hosting.VirtualDirectory> (参阅类概述主题中的 "示例" 部分 <xref:System.Web.Hosting.VirtualDirectory>) 到应用程序目录中的文件 `App_Code` 。  
  
4.  复制自定义对象的源代码 <xref:System.Web.Hosting.VirtualFile> (参阅类概述主题中的 "示例" 部分 <xref:System.Web.Hosting.VirtualFile>) 到应用程序目录中的文件 `App_Code` 。  
  
5.  复制对象的源代码 `AppStart` (参阅下面) 到应用程序目录中的文件 `App_Code` 。  
  
6.  将 XML 数据 (如下) 中的文件复制到 `XMLData.xml` 应用程序目录中的文件 `App_Data` 。  
  
7.  将 `default.aspx` 下面)  (的文件复制到示例应用程序的根目录中。 使用 Web 浏览器打开 `default.aspx` 文件，然后单击页面上的链接以查看虚拟文件的内容。  
  
 第一个示例是自定义 <xref:System.Web.Hosting.VirtualPathProvider> 类。 <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> 重写和方法，以指示请求的目录是否存在于虚拟文件系统中。 <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> 重写和方法，以返回 <xref:System.Web.Hosting.VirtualDirectory> <xref:System.Web.Hosting.VirtualFile> 包含虚拟文件系统中的信息的自定义和实例。  
  
 类还提供了 `GetVirtualData` <xref:System.Web.Hosting.VirtualDirectory> 和 <xref:System.Web.Hosting.VirtualFile> 类用于访问 <xref:System.Data.DataSet> 包含虚拟文件系统数据的对象的方法。 在生产实现中，通常会在负责与数据存储区交互的业务对象中实现此方法。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#20)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#20)]  
  
 第二个示例是用于填充 <xref:System.Data.DataSet> 自定义对象返回的对象的 XML 数据文件 <xref:System.Web.Hosting.VirtualPathProvider> 。 此 XML 数据用于演示 <xref:System.Web.Hosting.VirtualPathProvider> 如何使用、 <xref:System.Web.Hosting.VirtualDirectory> 和 <xref:System.Web.Hosting.VirtualFile> 对象从外部数据中检索数据，而不用于表示生产质量的数据存储区。  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
  <resource type="dir"   
    path="/vrDir"   
    parentPath=""   
    content="">  
    <resource type="file"   
      path="/vrDir/Level1FileA.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level1FileB.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileB.">  
    </resource>  
    <resource type="dir"   
      path="/vrDir/Level2DirA"   
      parentPath="/vrDir"   
      content="">  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
    path="/vrDir/Level2DirB"   
    parentPath="/vrDir"   
    content="">  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 第三个示例提供一个 `AppStart` 包含方法的对象 `AppInitialize` 。 此方法在 ASP.NET 应用程序的初始化过程中调用，以执行所需的任何自定义初始化。 在这种情况下，它会 <xref:System.Web.Hosting.VirtualPathProvider> 向 ASP.NET 生成系统注册自定义对象。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/AppStart.cs#10)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/AppStart.vb#10)]  
  
 最后一个示例是一个 ASP.NET 页面，其中包含指向虚拟文件系统中包含的虚拟文件的链接。  
  
 [!code-aspx-csharp[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>当从继承时 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> ，必须重写以下成员： 
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />  
  
如果自定义 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 类支持虚拟文件系统中的目录，则必须重写以下成员。  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" /><block subset="none" type="note"><para>  
      如果虚拟文件系统将包含网站 (通过创建虚拟 <c>App_Themes</c> 目录) 的主题，则您的自定义 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 类必须支持目录。
    </para></block>  
  
    自定义 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 类适用于从和类派生的类 <see cref="T:System.Web.Hosting.VirtualFile" /> <see cref="T:System.Web.Hosting.VirtualDirectory" /> 。 你应从这些类型实现派生类，以提供虚拟文件系统中的文件和目录信息。 有关自定义实现的示例 <see cref="T:System.Web.Hosting.VirtualFile" /> ，请参阅类概述主题的 "示例" 部分 <see cref="T:System.Web.Hosting.VirtualFile" /> 。 有关自定义实现的示例 <see cref="T:System.Web.Hosting.VirtualDirectory" /> ，请参阅类概述主题的 "示例" 部分 <see cref="T:System.Web.Hosting.VirtualDirectory" /> 。</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualPathProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualPathProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化该类供继承的类实例使用。 此构造函数只能由继承的类调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当重写 <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> 构造函数时，延迟在将 <xref:System.Web.Hosting.VirtualPathProvider> 对象注册到方法之后必须发生的任何初始化 <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> 。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> 初始化自定义类的构造函数的实现 <xref:System.Web.Hosting.VirtualPathProvider> 。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#25)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombineVirtualPaths">
      <MemberSignature Language="C#" Value="public virtual string CombineVirtualPaths (string basePath, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CombineVirtualPaths(string basePath, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CombineVirtualPaths (basePath As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CombineVirtualPaths(System::String ^ basePath, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="abstract member CombineVirtualPaths : string * string -&gt; string&#xA;override this.CombineVirtualPaths : string * string -&gt; string" Usage="virtualPathProvider.CombineVirtualPaths (basePath, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePath" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basePath">应用程序的基路径。</param>
        <param name="relativePath">虚拟资源相对于基路径的路径。</param>
        <summary>将基路径与相对路径组合，以返回某虚拟资源的完整路径。</summary>
        <returns>虚拟资源的完整路径。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths%2A> 方法检查虚拟资源的相对路径的内容，并执行所需的任何修改。  
  
 默认实现 `basePath` `relativePath` 根据标准 ASP.NET 路径处理组合和参数。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果重写方法的默认实现 <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> ，则需要将具有参数的任何特殊语法转换 <paramref name="relativePath" /> 为有效的虚拟路径。 你需要负责语法检查、路径验证和处理格式不正确的输入，以及适用于格式正确输入的边缘事例。  
  
在大多数情况下，不需要重写默认 <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> 方法。 但是，如果确实需要修改路径，建议限制 <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> 实现，以在参数中修改特定于虚拟路径提供程序的标记 <paramref name="relativeUrl" /> ，然后调用基实现以执行正常的 ASP.NET 路径处理</para></block>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public virtual bool DirectoryExists (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DirectoryExists(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DirectoryExists (virtualDir As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DirectoryExists(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member DirectoryExists : string -&gt; bool&#xA;override this.DirectoryExists : string -&gt; bool" Usage="virtualPathProvider.DirectoryExists virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">虚拟目录的路径。</param>
        <summary>获取一个值，该值指示目录是否存在于虚拟文件系统中。</summary>
        <returns>如果该目录存在于虚拟文件系统中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写 <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> 方法，以向编译系统指示所表示的资源 `virtualDir` 存在于此实例提供的虚拟文件系统中 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 如果自定义 <xref:System.Web.Hosting.VirtualPathProvider> 类不支持目录，则该 <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> 方法应返回 `false` 。  
  
> [!NOTE]
>  如果虚拟文件系统将包含网站 (通过创建虚拟目录) 的主题，则 `App_Themes` 您的自定义 <xref:System.Web.Hosting.VirtualPathProvider> 类必须支持目录。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> 自定义类中方法的实现 <xref:System.Web.Hosting.VirtualPathProvider> 。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#22)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public virtual bool FileExists (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FileExists(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FileExists (virtualPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool FileExists(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member FileExists : string -&gt; bool&#xA;override this.FileExists : string -&gt; bool" Usage="virtualPathProvider.FileExists virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟文件的路径。</param>
        <summary>获取一个值，该值指示文件是否存在于虚拟文件系统中。</summary>
        <returns>如果该文件存在于虚拟文件系统中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写 <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> 方法，以向编译系统指示所表示的资源 `virtualPath` 存在于此实例提供的虚拟文件系统中 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> 自定义类中方法的实现 <xref:System.Web.Hosting.VirtualPathProvider> 。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#21)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheDependency">
      <MemberSignature Language="C#" Value="public virtual System.Web.Caching.CacheDependency GetCacheDependency (string virtualPath, System.Collections.IEnumerable virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Caching.CacheDependency GetCacheDependency(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies, valuetype System.DateTime utcStart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheDependency (virtualPath As String, virtualPathDependencies As IEnumerable, utcStart As DateTime) As CacheDependency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Caching::CacheDependency ^ GetCacheDependency(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency&#xA;override this.GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="virtualPathProvider.GetCacheDependency (virtualPath, virtualPathDependencies, utcStart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.CacheDependency</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
        <Parameter Name="utcStart" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="virtualPath">主虚拟资源的路径。</param>
        <param name="virtualPathDependencies">一个路径数组，路径指向主要虚拟资源需要的其他资源。</param>
        <param name="utcStart">虚拟资源被读取的 UTC 时间。</param>
        <summary>基于指定的虚拟路径创建一个缓存依赖项。</summary>
        <returns>指定虚拟资源的 <see cref="T:System.Web.Caching.CacheDependency" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法的默认实现 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> 返回 `null` 。 若要缓存虚拟资源以供以后使用，必须重写 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> 方法或 <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例实现 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> 自定义类的方法 <xref:System.Web.Hosting.VirtualPathProvider> 。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#28)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheKey">
      <MemberSignature Language="C#" Value="public virtual string GetCacheKey (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCacheKey(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheKey (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetCacheKey(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheKey : string -&gt; string&#xA;override this.GetCacheKey : string -&gt; string" Usage="virtualPathProvider.GetCacheKey virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟资源的路径。</param>
        <summary>返回一个用于指定虚拟路径的缓存键。</summary>
        <returns>所指定虚拟资源的缓存键。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> 方法为虚拟资源提供自定义缓存键。 如果不重写 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> 方法，则将虚拟路径用于缓存键。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" />如果基于虚拟路径创建缓存密钥，则仅重写默认方法对于应用程序不起作用。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetDirectory">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualDirectory GetDirectory (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualDirectory GetDirectory(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectory (virtualDir As String) As VirtualDirectory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualDirectory ^ GetDirectory(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory&#xA;override this.GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory" Usage="virtualPathProvider.GetDirectory virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualDirectory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">虚拟目录的路径。</param>
        <summary>从虚拟文件系统中获取一个虚拟目录。</summary>
        <returns><see cref="T:System.Web.Hosting.VirtualDirectory" /> 类的子代，表示虚拟文件系统中的一个目录。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A>方法返回 <xref:System.Web.Hosting.VirtualDirectory> 类的子代，该类包含参数中指定的目录中包含的文件和目录 `virtualDir` 。  
  
 如果自定义 <xref:System.Web.Hosting.VirtualPathProvider> 类不支持目录，则该 <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> 方法应返回 `null` 。  
  
> [!NOTE]
>  如果虚拟文件系统将包含网站 (通过创建虚拟目录) 的主题，则 `App_Themes` 您的自定义 <xref:System.Web.Hosting.VirtualPathProvider> 类必须支持目录。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> 自定义类中方法的实现 <xref:System.Web.Hosting.VirtualPathProvider> 。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#24)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualFile GetFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualFile GetFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (virtualPath As String) As VirtualFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualFile ^ GetFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string -&gt; System.Web.Hosting.VirtualFile&#xA;override this.GetFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="virtualPathProvider.GetFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟文件的路径。</param>
        <summary>从虚拟文件系统中获取一个虚拟文件。</summary>
        <returns><see cref="T:System.Web.Hosting.VirtualFile" /> 类的子代，该子代表示虚拟文件系统中的一个文件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A>方法返回 <xref:System.Web.Hosting.VirtualFile> 类的子代，该类表示参数指定的文件 `virtualPath` 。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> 自定义类中方法的实现 <xref:System.Web.Hosting.VirtualPathProvider> 。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileHash">
      <MemberSignature Language="C#" Value="public virtual string GetFileHash (string virtualPath, System.Collections.IEnumerable virtualPathDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFileHash(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileHash (virtualPath As String, virtualPathDependencies As IEnumerable) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFileHash(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies);" />
      <MemberSignature Language="F#" Value="abstract member GetFileHash : string * System.Collections.IEnumerable -&gt; string&#xA;override this.GetFileHash : string * System.Collections.IEnumerable -&gt; string" Usage="virtualPathProvider.GetFileHash (virtualPath, virtualPathDependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="virtualPath">主虚拟资源的路径。</param>
        <param name="virtualPathDependencies">一个路径数组，所包含的路径指向主要虚拟资源需要的其他虚拟资源。</param>
        <summary>返回指定虚拟路径的哈希值。</summary>
        <returns>指定虚拟路径的哈希值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> 方法可提供虚拟文件系统资源的依赖项哈希。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.Initialize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Initialize();" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit&#xA;override this.Initialize : unit -&gt; unit" Usage="virtualPathProvider.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A>向 ASP.NET 编译系统注册提供程序后，将调用方法。 <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A>方法用于提供将 <xref:System.Web.Hosting.VirtualPathProvider> 实例置于应用程序所占用的环境中后所需的任何初始化。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> 从应用程序的实例设置数据文件路径的方法的实现 <xref:System.Web.Hosting.HostingEnvironment> 。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#26)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="virtualPathProvider.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过阻止创建租约给予 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 对象无限的生存期。</summary>
        <returns>总是为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会重写 <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> 其基类中的方法。 它始终返回 `null` ，从而防止创建将限制 <xref:System.Web.Hosting.VirtualPathProvider> 对象生存期的租约。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenFile (virtualPath As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="static member OpenFile : string -&gt; System.IO.Stream" Usage="System.Web.Hosting.VirtualPathProvider.OpenFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟文件的路径。</param>
        <summary>从虚拟文件返回一个流。</summary>
        <returns>所指定虚拟文件或资源的只读 <see cref="T:System.IO.Stream" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Web.Hosting.VirtualPathProvider.OpenFile%2A> 方法是一种便捷方法，使你可以从虚拟文件获取流，而无需创建 <xref:System.Web.Hosting.VirtualPathProvider> 实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="protected internal System.Web.Hosting.VirtualPathProvider Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Hosting.VirtualPathProvider Previous" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Previous As VirtualPathProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::Hosting::VirtualPathProvider ^ Previous { System::Web::Hosting::VirtualPathProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Previous : System.Web.Hosting.VirtualPathProvider" Usage="System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualPathProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对编译系统中以前注册的 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 对象的引用。</summary>
        <value>编译系统中的下一个 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualPathProvider>向 ASP.NET 编译系统注册对象时，会将该对象添加到提供程序链中。 <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> <xref:System.Web.Hosting.VirtualPathProvider> 如果此实例未提供请求的路径，请使用属性将处理方式移交给链中的上一个对象 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 路径提供程序链始终以默认的 ASP.NET 提供程序结尾，该提供程序可提供文件系统中的文件。  
  
   
  
## Examples  
 下面的代码示例是方法的实现 <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> 。 如果请求的虚拟目录不以字符串开头 `"/vrdir"` ，则方法将使用 <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> 属性将请求传递给链中的下一个 <xref:System.Web.Hosting.VirtualPathProvider> 对象。 有关运行此示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.Hosting.VirtualPathProvider> 。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
