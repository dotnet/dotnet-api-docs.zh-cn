<Type Name="LdapConnection" FullName="System.DirectoryServices.Protocols.LdapConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="195c49d6528840d994138a5582c1f0b14f1fb709" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89826004" /></Metadata><TypeSignature Language="C#" Value="public class LdapConnection : System.DirectoryServices.Protocols.DirectoryConnection, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LdapConnection extends System.DirectoryServices.Protocols.DirectoryConnection implements class System.IDisposable" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.Protocols.LdapConnection" />
  <TypeSignature Language="VB.NET" Value="Public Class LdapConnection&#xA;Inherits DirectoryConnection&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LdapConnection : System::DirectoryServices::Protocols::DirectoryConnection, IDisposable" />
  <TypeSignature Language="F#" Value="type LdapConnection = class&#xA;    inherit DirectoryConnection&#xA;    interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi LdapConnection extends System.DirectoryServices.Protocols.DirectoryConnection implements class System.IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.DirectoryServices.Protocols.DirectoryConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 类创建与 Microsoft Active Directory 域服务或 LDAP 服务器的 TCP/IP 或 UDP LDAP 连接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果对象 <xref:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates%2A> <xref:System.DirectoryServices.Protocols.LdapConnection> 上对象和属性上的属性均 <xref:System.DirectoryServices.Protocols.LdapSessionOptions.QueryClientCertificate%2A> 设置为，则 <xref:System.DirectoryServices.Protocols.LdapSessionOptions> 忽略在属性中指定的证书 <xref:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates%2A> 。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">如果无法创建连接块或者无法打开与服务器的连接，则引发该异常。</exception>
        <summary>创建 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 类的实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LdapConnection (System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identifier As LdapDirectoryIdentifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LdapConnection(System::DirectoryServices::Protocols::LdapDirectoryIdentifier ^ identifier);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.Protocols.LdapConnection : System.DirectoryServices.Protocols.LdapDirectoryIdentifier -&gt; System.DirectoryServices.Protocols.LdapConnection" Usage="new System.DirectoryServices.Protocols.LdapConnection identifier" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identifier" Type="System.DirectoryServices.Protocols.LdapDirectoryIdentifier" />
      </Parameters>
      <Docs>
        <param name="identifier">一个指定服务器的 <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> 对象。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier)" /> 构造函数使用指定的目录标识符创建 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 类的实例。 登录凭据和协商身份验证用于连接 LDAP 服务器。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">如果无法创建连接块或者无法打开与服务器的连接，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LdapConnection (string server);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (server As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LdapConnection(System::String ^ server);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.Protocols.LdapConnection : string -&gt; System.DirectoryServices.Protocols.LdapConnection" Usage="new System.DirectoryServices.Protocols.LdapConnection server" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="server">一个指定服务器的字符串，它可以是域名、LDAP 服务器名称或表示 LDAP 服务器的 IP 地址的带点的字符串。 此外，此参数可能还包括一个端口号，用冒号 (:) 与字符串的右端隔开。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.String)" /> 构造函数使用指定服务器创建 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 类的实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">如果无法创建连接块或者无法打开与服务器的连接，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LdapConnection (System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier, System.Net.NetworkCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier, class System.Net.NetworkCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identifier As LdapDirectoryIdentifier, credential As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LdapConnection(System::DirectoryServices::Protocols::LdapDirectoryIdentifier ^ identifier, System::Net::NetworkCredential ^ credential);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.Protocols.LdapConnection : System.DirectoryServices.Protocols.LdapDirectoryIdentifier * System.Net.NetworkCredential -&gt; System.DirectoryServices.Protocols.LdapConnection" Usage="new System.DirectoryServices.Protocols.LdapConnection (identifier, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identifier" Type="System.DirectoryServices.Protocols.LdapDirectoryIdentifier" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="identifier">一个指定服务器的 <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> 对象。</param>
        <param name="credential">一个 <see cref="T:System.Net.NetworkCredential" /> 对象，指定要使用的凭据。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential)" /> 构造函数使用指定的目录标识符和网络凭据创建 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 类的实例。 将使用协商身份验证。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">如果无法创建连接块或者无法打开与服务器的连接，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LdapConnection (System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier, System.Net.NetworkCredential credential, System.DirectoryServices.Protocols.AuthType authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier, class System.Net.NetworkCredential credential, valuetype System.DirectoryServices.Protocols.AuthType authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential,System.DirectoryServices.Protocols.AuthType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identifier As LdapDirectoryIdentifier, credential As NetworkCredential, authType As AuthType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LdapConnection(System::DirectoryServices::Protocols::LdapDirectoryIdentifier ^ identifier, System::Net::NetworkCredential ^ credential, System::DirectoryServices::Protocols::AuthType authType);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.Protocols.LdapConnection : System.DirectoryServices.Protocols.LdapDirectoryIdentifier * System.Net.NetworkCredential * System.DirectoryServices.Protocols.AuthType -&gt; System.DirectoryServices.Protocols.LdapConnection" Usage="new System.DirectoryServices.Protocols.LdapConnection (identifier, credential, authType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identifier" Type="System.DirectoryServices.Protocols.LdapDirectoryIdentifier" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="authType" Type="System.DirectoryServices.Protocols.AuthType" />
      </Parameters>
      <Docs>
        <param name="identifier">一个指定服务器的 <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> 对象。</param>
        <param name="credential">一个 <see cref="T:System.Net.NetworkCredential" /> 对象，指定要使用的凭据。</param>
        <param name="authType">指定要使用的身份验证类型的 <see cref="T:System.DirectoryServices.Protocols.AuthType" /> 值。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential,System.DirectoryServices.Protocols.AuthType)" /> 构造函数使用指定的目录标识符、网络凭据和身份验证类型创建 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 类的实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">如果无法创建连接块或者无法打开与服务器的连接，则引发该异常。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">如果 <paramref name="authType" /> 超出范围，则引发该异常。</exception>
        <exception cref="T:System.ArgumentException">如果将 <paramref name="authType" /> 指定为“匿名”但 <paramref name="credential" /> 指定了凭据，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.Abort(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.Abort : IAsyncResult -&gt; unit" Usage="ldapConnection.Abort asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">一个引用该异步请求的 <see cref="T:System.IAsyncResult" /> 对象。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.Abort(System.IAsyncResult)" /> 方法取消异步请求。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">该对象句柄无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> 为 null（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> 不是由 <see cref="Overload:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest" /> 的对应调用返回的</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthType">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.Protocols.AuthType AuthType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DirectoryServices.Protocols.AuthType AuthType" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.Protocols.LdapConnection.AuthType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthType As AuthType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::Protocols::AuthType AuthType { System::DirectoryServices::Protocols::AuthType get(); void set(System::DirectoryServices::Protocols::AuthType value); };" />
      <MemberSignature Language="F#" Value="member this.AuthType : System.DirectoryServices.Protocols.AuthType with get, set" Usage="System.DirectoryServices.Protocols.LdapConnection.AuthType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.AuthType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.DirectoryServices.Protocols.LdapConnection.AuthType" /> 属性包含支持的身份验证类型。</summary>
        <value>支持的身份验证类型。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">如果 <paramref name="authType" /> 超出范围，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoBind">
      <MemberSignature Language="C#" Value="public bool AutoBind { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoBind" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.Protocols.LdapConnection.AutoBind" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoBind As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoBind { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoBind : bool with get, set" Usage="System.DirectoryServices.Protocols.LdapConnection.AutoBind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.DirectoryServices.Protocols.LdapConnection.AutoBind" /> 属性指定是否允许自动绑定。</summary>
        <value>如果允许自动绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSendRequest">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据异步发送到服务器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSendRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendRequest (System.DirectoryServices.Protocols.DirectoryRequest request, System.DirectoryServices.Protocols.PartialResultProcessing partialMode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendRequest(class System.DirectoryServices.Protocols.DirectoryRequest request, valuetype System.DirectoryServices.Protocols.PartialResultProcessing partialMode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.DirectoryServices.Protocols.PartialResultProcessing,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendRequest (request As DirectoryRequest, partialMode As PartialResultProcessing, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendRequest(System::DirectoryServices::Protocols::DirectoryRequest ^ request, System::DirectoryServices::Protocols::PartialResultProcessing partialMode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendRequest : System.DirectoryServices.Protocols.DirectoryRequest * System.DirectoryServices.Protocols.PartialResultProcessing * AsyncCallback * obj -&gt; IAsyncResult" Usage="ldapConnection.BeginSendRequest (request, partialMode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.DirectoryServices.Protocols.DirectoryRequest" />
        <Parameter Name="partialMode" Type="System.DirectoryServices.Protocols.PartialResultProcessing" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="request"><see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> 对象。</param>
        <param name="partialMode"><see cref="T:System.DirectoryServices.Protocols.PartialResultProcessing" /> 枚举中的一个值，用于指定要返回的部分结果的级别。</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> 函数。</param>
        <param name="state">包含此请求的状态数据的 <see cref="T:System.Object" />。</param>
        <summary>将数据异步发送到服务器。</summary>
        <returns>引用异步发送的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">该对象句柄无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.NotSupportedException">不支持部分结果。</exception>
        <exception cref="T:System.ArgumentException">如果 <paramref name="partialMode" /> 等于 <see cref="F:System.DirectoryServices.Protocols.PartialResultProcessing.ReturnPartialResultsAndNotifyCallback" />，则必须指定回调函数。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendRequest (System.DirectoryServices.Protocols.DirectoryRequest request, TimeSpan requestTimeout, System.DirectoryServices.Protocols.PartialResultProcessing partialMode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendRequest(class System.DirectoryServices.Protocols.DirectoryRequest request, valuetype System.TimeSpan requestTimeout, valuetype System.DirectoryServices.Protocols.PartialResultProcessing partialMode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.TimeSpan,System.DirectoryServices.Protocols.PartialResultProcessing,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendRequest (request As DirectoryRequest, requestTimeout As TimeSpan, partialMode As PartialResultProcessing, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendRequest(System::DirectoryServices::Protocols::DirectoryRequest ^ request, TimeSpan requestTimeout, System::DirectoryServices::Protocols::PartialResultProcessing partialMode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendRequest : System.DirectoryServices.Protocols.DirectoryRequest * TimeSpan * System.DirectoryServices.Protocols.PartialResultProcessing * AsyncCallback * obj -&gt; IAsyncResult" Usage="ldapConnection.BeginSendRequest (request, requestTimeout, partialMode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.DirectoryServices.Protocols.DirectoryRequest" />
        <Parameter Name="requestTimeout" Type="System.TimeSpan" />
        <Parameter Name="partialMode" Type="System.DirectoryServices.Protocols.PartialResultProcessing" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="request"><see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> 对象。</param>
        <param name="requestTimeout">请求超时之前的时间，以秒为单位。</param>
        <param name="partialMode"><see cref="T:System.DirectoryServices.Protocols.PartialResultProcessing" /> 枚举中的一个值，用于指定要返回的部分结果的级别。</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> 函数。</param>
        <param name="state">包含此请求的状态数据的 <see cref="T:System.Object" />。</param>
        <summary>将数据异步发送到服务器。</summary>
        <returns>引用异步发送的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">该对象句柄无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 null（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.NotSupportedException">不支持部分结果。</exception>
        <exception cref="T:System.ArgumentException">如果 <paramref name="partialMode" /> 等于 <see cref="F:System.DirectoryServices.Protocols.PartialResultProcessing.ReturnPartialResultsAndNotifyCallback" />，则必须指定回调函数。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>发送 LDAP 绑定。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public void Bind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Bind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.Bind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Bind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Bind();" />
      <MemberSignature Language="F#" Value="member this.Bind : unit -&gt; unit" Usage="ldapConnection.Bind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.Bind" /> 方法使用当前凭据发送 LDAP 绑定。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">该对象句柄无效。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">LDAP 返回的错误代码未映射到其中一个 <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> 枚举错误代码。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates" /> 属性指定多个要发送的客户端证书以进行身份验证，或者 <see cref="P:System.DirectoryServices.Protocols.LdapConnection.AuthType" /> 属性为“匿名”，并提供一个或多个凭据。</exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public void Bind (System.Net.NetworkCredential newCredential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Bind(class System.Net.NetworkCredential newCredential) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.Bind(System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Bind (newCredential As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Bind(System::Net::NetworkCredential ^ newCredential);" />
      <MemberSignature Language="F#" Value="member this.Bind : System.Net.NetworkCredential -&gt; unit" Usage="ldapConnection.Bind newCredential" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newCredential" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="newCredential">一个 <see cref="T:System.Net.NetworkCredential" /> 对象，指定要使用的凭据。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.Bind(System.Net.NetworkCredential)" /> 方法使用指定的 <see cref="T:System.Net.NetworkCredential" /> 发送 LDAP 绑定。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">该对象句柄无效。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">LDAP 返回的错误代码未映射到 <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> 枚举错误代码。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates" /> 属性指定多个要发送的客户端证书以进行身份验证，或者 <see cref="P:System.DirectoryServices.Protocols.LdapConnection.AuthType" /> 属性为“匿名”，并提供一个或多个凭据。</exception>
      </Docs>
    </Member>
    <Member MemberName="Credential">
      <MemberSignature Language="C#" Value="public override System.Net.NetworkCredential Credential { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkCredential Credential" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.Protocols.LdapConnection.Credential" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credential As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::NetworkCredential ^ Credential {  void set(System::Net::NetworkCredential ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credential : System.Net.NetworkCredential" Usage="System.DirectoryServices.Protocols.LdapConnection.Credential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.DirectoryServices.Protocols.LdapConnection.Credential" /> 属性包含该对象的网络凭据。</summary>
        <value>该对象的网络凭据。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>关闭并释放（可选）LDAP 句柄。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ldapConnection.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.Dispose" /> 方法关闭并释放 LDAP 句柄。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="ldapConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">如果关闭连接后释放句柄，则为 <see langword="true" />；如果关闭连接后不释放句柄，则为 <see langword="false" />。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.Dispose(System.Boolean)" /> 方法关闭连接，并可选择释放 LDAP 句柄。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSendRequest">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.Protocols.DirectoryResponse EndSendRequest (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.Protocols.DirectoryResponse EndSendRequest(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.EndSendRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendRequest (asyncResult As IAsyncResult) As DirectoryResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::Protocols::DirectoryResponse ^ EndSendRequest(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSendRequest : IAsyncResult -&gt; System.DirectoryServices.Protocols.DirectoryResponse" Usage="ldapConnection.EndSendRequest asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.DirectoryResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">一个 <see cref="T:System.IAsyncResult" /> 对象，它包含该请求的状态数据。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.EndSendRequest(System.IAsyncResult)" /> 方法完成异步请求。</summary>
        <returns>一个 <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> 对象，它包含该请求的结果。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">如果已释放相应对象，则引发该异常。  该对象句柄无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> 为 null（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> 与 <see cref="Overload:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest" /> 调用中返回的 <paramref name="asyncResult" /> 不匹配。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">LDAP 返回的错误代码不映射到 <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> 枚举错误代码。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">如果服务器返回了有错误的 <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> 对象，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~LdapConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!LdapConnection ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="ldapConnection.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.Finalize" /> 方法允许 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 对象在“垃圾回收”功能回收 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 对象之前尝试释放资源并执行其他清理操作。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartialResults">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.Protocols.PartialResultsCollection GetPartialResults (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.Protocols.PartialResultsCollection GetPartialResults(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.GetPartialResults(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPartialResults (asyncResult As IAsyncResult) As PartialResultsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::Protocols::PartialResultsCollection ^ GetPartialResults(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.GetPartialResults : IAsyncResult -&gt; System.DirectoryServices.Protocols.PartialResultsCollection" Usage="ldapConnection.GetPartialResults asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.PartialResultsCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">一个 <see cref="T:System.IAsyncResult" /> 对象，它包含该请求的状态数据。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.GetPartialResults(System.IAsyncResult)" /> 方法检索异步操作的部分结果。</summary>
        <returns>一个包含部分结果的 <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> 对象。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放该对象。 该对象句柄无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> 为 null（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> 与 <see cref="Overload:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest" /> 调用中返回的 <paramref name="asyncResult" /> 不匹配。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">LDAP 返回的错误代码不映射到 <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> 枚举错误代码。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">如果服务器返回了有错误的 <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> 对象，则引发该异常。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendRequest">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>作为一个 LDAP v3 操作发送单个 <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendRequest">
      <MemberSignature Language="C#" Value="public override System.DirectoryServices.Protocols.DirectoryResponse SendRequest (System.DirectoryServices.Protocols.DirectoryRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.DirectoryServices.Protocols.DirectoryResponse SendRequest(class System.DirectoryServices.Protocols.DirectoryRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SendRequest (request As DirectoryRequest) As DirectoryResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::DirectoryServices::Protocols::DirectoryResponse ^ SendRequest(System::DirectoryServices::Protocols::DirectoryRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendRequest : System.DirectoryServices.Protocols.DirectoryRequest -&gt; System.DirectoryServices.Protocols.DirectoryResponse" Usage="ldapConnection.SendRequest request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.DirectoryResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.DirectoryServices.Protocols.DirectoryRequest" />
      </Parameters>
      <Docs>
        <param name="request">一个包含该请求的 <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> 对象。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> 方法将单个 <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> 作为 LDAP v3 操作进行发送。</summary>
        <returns>一个 <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> 对象，其中包含来自该服务器的响应。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放该对象。 该对象句柄无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> 为 null（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.NotSupportedException">请求的类型是 DsmlAuthRequest。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">LDAP 返回的错误代码未映射到 <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> 枚举错误代码。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">如果服务器返回了有错误的 <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> 对象，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendRequest">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.Protocols.DirectoryResponse SendRequest (System.DirectoryServices.Protocols.DirectoryRequest request, TimeSpan requestTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.Protocols.DirectoryResponse SendRequest(class System.DirectoryServices.Protocols.DirectoryRequest request, valuetype System.TimeSpan requestTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendRequest (request As DirectoryRequest, requestTimeout As TimeSpan) As DirectoryResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::Protocols::DirectoryResponse ^ SendRequest(System::DirectoryServices::Protocols::DirectoryRequest ^ request, TimeSpan requestTimeout);" />
      <MemberSignature Language="F#" Value="override this.SendRequest : System.DirectoryServices.Protocols.DirectoryRequest * TimeSpan -&gt; System.DirectoryServices.Protocols.DirectoryResponse" Usage="ldapConnection.SendRequest (request, requestTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.DirectoryResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.DirectoryServices.Protocols.DirectoryRequest" />
        <Parameter Name="requestTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="request">一个包含该请求的 <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> 对象。</param>
        <param name="requestTimeout">请求超时之前的时间长度（以秒为单位）。</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.TimeSpan)" /> 方法将单个 <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> 作为 LDAP v3 操作进行发送。</summary>
        <returns>一个 <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> 对象，其中包含来自该服务器的响应。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放该对象。 该对象句柄无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> 为 null（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.NotSupportedException">请求的类型是 DsmlAuthRequest。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.LdapException">LDAP 返回的错误代码未映射到 <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> 枚举错误代码。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">如果服务器返回了有错误的 <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> 对象，则引发该异常。</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionOptions">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.Protocols.LdapSessionOptions SessionOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.Protocols.LdapSessionOptions SessionOptions" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.Protocols.LdapConnection.SessionOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionOptions As LdapSessionOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::Protocols::LdapSessionOptions ^ SessionOptions { System::DirectoryServices::Protocols::LdapSessionOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SessionOptions : System.DirectoryServices.Protocols.LdapSessionOptions" Usage="System.DirectoryServices.Protocols.LdapConnection.SessionOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.LdapSessionOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.DirectoryServices.Protocols.LdapConnection.SessionOptions" /> 属性包含一个指定会话选项的 <see cref="T:System.DirectoryServices.Protocols.LdapSessionOptions" /> 对象。</summary>
        <value>一个指定会话选项的 <see cref="T:System.DirectoryServices.Protocols.LdapSessionOptions" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果对象 <xref:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates%2A> <xref:System.DirectoryServices.Protocols.LdapConnection> 上对象和属性上的属性均 <xref:System.DirectoryServices.Protocols.LdapSessionOptions.QueryClientCertificate%2A> 设置为，则 <xref:System.DirectoryServices.Protocols.LdapSessionOptions> 忽略在属性中指定的证书 <xref:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates%2A> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public override TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.Protocols.LdapConnection.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.DirectoryServices.Protocols.LdapConnection.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.DirectoryServices.Protocols.LdapConnection.Timeout" /> 属性包含 <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 超时前的时间长度（以秒为单位）。</summary>
        <value><see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> 超时前的时间长度（以秒为单位）。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
