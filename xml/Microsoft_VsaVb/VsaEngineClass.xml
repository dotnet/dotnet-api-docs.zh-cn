<Type Name="VsaEngineClass" FullName="Microsoft_VsaVb.VsaEngineClass">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f459df20ef5d5d0d48b4be39cbefc0c1fe91d01e" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86841571" /></Metadata><TypeSignature Language="C#" Value="public class VsaEngineClass : Microsoft.Vsa.IVsaEngine, Microsoft_VsaVb.VsaEngine" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi VsaEngineClass extends System.Object implements class Microsoft.Vsa.IVsaEngine, class Microsoft_VsaVb.VsaEngine" />
  <TypeSignature Language="DocId" Value="T:Microsoft_VsaVb.VsaEngineClass" />
  <TypeSignature Language="VB.NET" Value="Public Class VsaEngineClass&#xA;Implements IVsaEngine, VsaEngine" />
  <TypeSignature Language="C++ CLI" Value="public ref class VsaEngineClass : Microsoft::Vsa::IVsaEngine, Microsoft_VsaVb::VsaEngine" />
  <TypeSignature Language="F#" Value="type VsaEngineClass = class&#xA;    interface IVsaEngine&#xA;    interface VsaEngine" />
  <AssemblyInfo>
    <AssemblyName>Microsoft_VsaVb</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaEngine</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft_VsaVb.VsaEngine</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.ClassInterface(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ClassInterface(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("24800CD0-0F4E-4DF7-9F69-3C6903C89224")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("24800CD0-0F4E-4DF7-9F69-3C6903C89224")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.TypeLibType(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.TypeLibType(2)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("A138CF39-2CAE-42C2-ADB3-022658D79F2F")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("A138CF39-2CAE-42C2-ADB3-022658D79F2F")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VsaEngineClass ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VsaEngineClass();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft_VsaVb.VsaEngineClass" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678304)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678304)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由 <see cref="M:Microsoft_VsaVb.VsaEngineClass.Run" /> 方法生成的运行程序集的引用。</summary>
        <value>对当前正在运行的程序集的引用。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close() = Microsoft::Vsa::IVsaEngine::Close;" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="vsaEngineClass.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭脚本引擎并释放所有资源。 如果脚本引擎当前正在运行，则首先调用 <see cref="M:Microsoft_VsaVb.VsaEngineClass.Reset" /> 方法。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public virtual bool Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Compile() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compile () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Compile() = Microsoft::Vsa::IVsaEngine::Compile;" />
      <MemberSignature Language="F#" Value="abstract member Compile : unit -&gt; bool&#xA;override this.Compile : unit -&gt; bool" Usage="vsaEngineClass.Compile " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.Compile</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使脚本引擎编译现有的源状态。</summary>
        <returns>成功编译时，返回 <see langword="true" />，这表示可以在新编译的程序集上调用 <see cref="M:Microsoft_VsaVb.VsaEngineClass.Run" /> 方法。 如果编译失败，则返回 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public virtual System.Security.Policy.Evidence Evidence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); void set(System::Security::Policy::Evidence ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence with get, set" Usage="Evidence" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.Evidence</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678284)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678284)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于验证当前对象的标识的证据。</summary>
        <value>用于验证当前对象的标识的证据。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="GenerateDebugInfo">
      <MemberSignature Language="C#" Value="public virtual bool GenerateDebugInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateDebugInfo" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.GenerateDebugInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property GenerateDebugInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool GenerateDebugInfo { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GenerateDebugInfo : bool with get, set" Usage="GenerateDebugInfo" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.GenerateDebugInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678282)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678282)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在调用 <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" /> 方法时脚本引擎是否会生成调试信息。</summary>
        <value>如果生成调试信息，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="GetOption">
      <MemberSignature Language="C#" Value="public virtual object GetOption (string Name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOption([in]string Name) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.GetOption(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOption (Name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetOption(System::String ^ Name) = Microsoft::Vsa::IVsaEngine::GetOption;" />
      <MemberSignature Language="F#" Value="abstract member GetOption : string -&gt; obj&#xA;override this.GetOption : string -&gt; obj" Usage="vsaEngineClass.GetOption Name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Name">要获取的选项的名称。</param>
        <summary>获取脚本引擎实现特定的选项。</summary>
        <returns>选项对象的名称。</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="InitNew">
      <MemberSignature Language="C#" Value="public virtual void InitNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitNew() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.InitNew" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitNew() = Microsoft::Vsa::IVsaEngine::InitNew;" />
      <MemberSignature Language="F#" Value="abstract member InitNew : unit -&gt; unit&#xA;override this.InitNew : unit -&gt; unit" Usage="vsaEngineClass.InitNew " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.InitNew</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供有关初始化阶段已完成并且已准备好脚本引擎来添加 <see cref="T:Microsoft_VsaVb.VsaEngineClass" /> 对象的通知。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public virtual bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="IsCompiled" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.IsCompiled</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678297)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678297)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示在调用 <see cref="M:Microsoft_VsaVb.VsaEngineClass.Compile" /> 方法时是否将脚本引擎设置为生成调试信息。</summary>
        <value><see langword="true" /> 如果脚本引擎设置为在调用方法时生成调试信息 <see cref="M:Microsoft_VsaVb.VsaEngineClass.Compile" /> ，则为; 否则为 <see langword="false" /> 。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public virtual bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="IsDirty" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.IsDirty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678287)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678287)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示脚本引擎的源状态是否自上次保存操作或是自最初加载脚本引擎以来已更改。</summary>
        <value><see langword="true" /> 如果脚本引擎标记为 "已修改" (即 "脏" ) ;否则为 <see langword="false" /> 。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public virtual bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="IsRunning" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.IsRunning</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678296)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678296)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示脚本引擎当前是否处于运行模式。</summary>
        <value><see langword="true" /> 如果脚本引擎正在运行，则为;否则为 <see langword="false" /> 。 此属性的默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier([in]string identifier) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (identifier As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ identifier) = Microsoft::Vsa::IVsaEngine::IsValidIdentifier;" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="vsaEngineClass.IsValidIdentifier identifier" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.IsValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">作为标识符提供的字符串值。</param>
        <summary>检查提供的标识符是否对脚本引擎有效。</summary>
        <returns>如果标识符有效，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Vsa.IVsaItems Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Vsa.IVsaItems Items" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.Items" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Items As IVsaItems" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::Vsa::IVsaItems ^ Items { Microsoft::Vsa::IVsaItems ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : Microsoft.Vsa.IVsaItems" Usage="Items" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.Items</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678286)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678286)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Vsa.IVsaItems</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Vsa.IVsaItems" /> 对象的 <see cref="T:Microsoft.Vsa.IVsaItem" /> 集合，这些对象表示使用 CreateItem 方法添加到脚本引擎的所有项，包括代码项、引用项和全局项。</summary>
        <value>使用 CreateItem 方法添加到脚本引擎的所有项的集合，包括代码项、引用项和全局项。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public virtual string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.Language" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Language { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Language" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.Language</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678288)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678288)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取脚本引擎支持的编程语言的非本地化名称。</summary>
        <value>脚本引擎支持的编程语言的英文名称。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int with get, set" Usage="LCID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.LCID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678280)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678280)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在报告异常消息时所使用的地理区域设置和语言。</summary>
        <value>表示要在其中报告异常消息的区域设置的整数值。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="LoadSourceState">
      <MemberSignature Language="C#" Value="public virtual void LoadSourceState (Microsoft.Vsa.IVsaPersistSite Site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadSourceState([in]class Microsoft.Vsa.IVsaPersistSite Site) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadSourceState (Site As IVsaPersistSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadSourceState(Microsoft::Vsa::IVsaPersistSite ^ Site) = Microsoft::Vsa::IVsaEngine::LoadSourceState;" />
      <MemberSignature Language="F#" Value="abstract member LoadSourceState : Microsoft.Vsa.IVsaPersistSite -&gt; unit&#xA;override this.LoadSourceState : Microsoft.Vsa.IVsaPersistSite -&gt; unit" Usage="vsaEngineClass.LoadSourceState Site" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Site" Type="Microsoft.Vsa.IVsaPersistSite" />
      </Parameters>
      <Docs>
        <param name="Site">从中加载指定源项的站点。</param>
        <summary>指示脚本引擎按照实现 <see cref="T:Microsoft.Vsa.IVsaPersistSite" /> 接口的宿主提供对象的指定，从持久性点加载源项。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678274)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678274)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置脚本引擎的显示名称，该名称主要用于在托管环境中向用户标识各个脚本引擎。</summary>
        <value>脚本引擎的 Name 属性的值，该值可能为空字符串。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset() = Microsoft::Vsa::IVsaEngine::Reset;" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="vsaEngineClass.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从运行状态中移除脚本引擎，并自动断开与绑定事件处理程序的连接。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="RevokeCache">
      <MemberSignature Language="C#" Value="public virtual void RevokeCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RevokeCache() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.RevokeCache" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RevokeCache ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RevokeCache() = Microsoft::Vsa::IVsaEngine::RevokeCache;" />
      <MemberSignature Language="F#" Value="abstract member RevokeCache : unit -&gt; unit&#xA;override this.RevokeCache : unit -&gt; unit" Usage="vsaEngineClass.RevokeCache " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.RevokeCache</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为脚本引擎将缓存程序集无效化，由其根名字对象指定。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="RootMoniker">
      <MemberSignature Language="C#" Value="public virtual string RootMoniker { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RootMoniker" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.RootMoniker" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RootMoniker As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ RootMoniker { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RootMoniker : string with get, set" Usage="RootMoniker" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.RootMoniker</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678276)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678276)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置脚本引擎的根名字对象。</summary>
        <value>RootMoniker 属性的当前值。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="RootNamespace">
      <MemberSignature Language="C#" Value="public virtual string RootNamespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RootNamespace" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.RootNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RootNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ RootNamespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RootNamespace : string with get, set" Usage="RootNamespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.RootNamespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678278)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678278)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置脚本引擎使用的根命名空间。</summary>
        <value>根命名空间的字符串值。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public virtual void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Run() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.Run" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Run() = Microsoft::Vsa::IVsaEngine::Run;" />
      <MemberSignature Language="F#" Value="abstract member Run : unit -&gt; unit&#xA;override this.Run : unit -&gt; unit" Usage="vsaEngineClass.Run " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.Run</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启动脚本引擎中已编译代码的执行，并绑定所有事件处理程序。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="SaveCompiledState">
      <MemberSignature Language="C#" Value="public virtual void SaveCompiledState (out byte[] pe, out byte[] pdb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveCompiledState([out] unsigned int8[]&amp; pe, [out] unsigned int8[]&amp; pdb) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.SaveCompiledState(System.Byte[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SaveCompiledState (ByRef pe As Byte(), ByRef pdb As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SaveCompiledState([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % pe, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % pdb) = Microsoft::Vsa::IVsaEngine::SaveCompiledState;" />
      <MemberSignature Language="F#" Value="abstract member SaveCompiledState : Byte[] * Byte[] -&gt; unit&#xA;override this.SaveCompiledState : Byte[] * Byte[] -&gt; unit" Usage="vsaEngineClass.SaveCompiledState (pe, pdb)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pe" Type="System.Byte[]" RefType="out" />
        <Parameter Name="pdb" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pe">脚本引擎的编译状态。</param>
        <param name="pdb">指定与 PE（可移植可执行文件）对应的 .PDB 文件中包含的调试信息。</param>
        <summary>保存脚本引擎的编译状态；它还可选择保存调试信息。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="SaveSourceState">
      <MemberSignature Language="C#" Value="public virtual void SaveSourceState (Microsoft.Vsa.IVsaPersistSite Site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveSourceState([in]class Microsoft.Vsa.IVsaPersistSite Site) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.SaveSourceState(Microsoft.Vsa.IVsaPersistSite)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SaveSourceState (Site As IVsaPersistSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SaveSourceState(Microsoft::Vsa::IVsaPersistSite ^ Site) = Microsoft::Vsa::IVsaEngine::SaveSourceState;" />
      <MemberSignature Language="F#" Value="abstract member SaveSourceState : Microsoft.Vsa.IVsaPersistSite -&gt; unit&#xA;override this.SaveSourceState : Microsoft.Vsa.IVsaPersistSite -&gt; unit" Usage="vsaEngineClass.SaveSourceState Site" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.SaveSourceState(Microsoft.Vsa.IVsaPersistSite)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Site" Type="Microsoft.Vsa.IVsaPersistSite" />
      </Parameters>
      <Docs>
        <param name="Site"><see cref="T:Microsoft.Vsa.IVsaPersistSite" /> 接口建立的用于保存源状态的站点。</param>
        <summary>指示脚本引擎将其源状态保存到指定 <see cref="T:Microsoft.Vsa.IVsaPersistSite" /> 对象。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="SetOption">
      <MemberSignature Language="C#" Value="public virtual void SetOption (string Name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOption([in]string Name, [in]object value) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft_VsaVb.VsaEngineClass.SetOption(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOption (Name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOption(System::String ^ Name, System::Object ^ value) = Microsoft::Vsa::IVsaEngine::SetOption;" />
      <MemberSignature Language="F#" Value="abstract member SetOption : string * obj -&gt; unit&#xA;override this.SetOption : string * obj -&gt; unit" Usage="vsaEngineClass.SetOption (Name, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Name">要设置的选项的名称。</param>
        <param name="value">所设置的选项的值。</param>
        <summary>设置脚本引擎特定于实现的选项。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Vsa.IVsaSite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Vsa.IVsaSite Site" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Site As IVsaSite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::Vsa::IVsaSite ^ Site { Microsoft::Vsa::IVsaSite ^ get(); void set(Microsoft::Vsa::IVsaSite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : Microsoft.Vsa.IVsaSite with get, set" Usage="Site" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.Site</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678272)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678272)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Vsa.IVsaSite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由主机实现的 <see cref="T:Microsoft.Vsa.IVsaSite" /> 对象，脚本引擎使用此对象与主机通信。</summary>
        <value>对当前对象的引用 <see cref="T:Microsoft.Vsa.IVsaSite" /> 。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public virtual string Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Version" />
      <MemberSignature Language="DocId" Value="P:Microsoft_VsaVb.VsaEngineClass.Version" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Version As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Version { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : string" Usage="Version" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Vsa.IVsaEngine.Version</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft_VsaVb</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1610678289)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1610678289)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由该脚本引擎支持的当前版本的语言编译器，格式为 Major.Minor.Revision.Build。</summary>
        <value>当前版本的字符串值，格式为 "主要版本. 次要版本. 内部版本. 修订版本"。</value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
