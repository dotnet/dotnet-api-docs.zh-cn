<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf10a98675636414b480f83fb16086e86dcab030" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86842637" /></Metadata><TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定当使用 SOAP 时客户端代理从其中派生的类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 如果要生成 XML Web service 客户端，则必须为 XML Web service 创建间接或直接从其派生的代理类 <xref:System.Web.Services.Protocols.WebClientProtocol> 。 当 XML Web service 客户端使用 SOAP 调用时，代理类必须从派生自的派生 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol> <xref:System.Web.Services.Protocols.HttpWebClientProtocol> 。 <xref:System.Web.Services.Protocols.HttpWebClientProtocol>反过来，派生自 <xref:System.Web.Services.Protocols.WebClientProtocol> 。

 若要与 XML Web service 通信，请创建间接或直接从中为要调用的 XML Web service 派生的代理类 <xref:System.Web.Services.Protocols.WebClientProtocol> 。 不是手动创建代理类，而是使用 Web 服务描述语言工具 ( # A0) 为给定 XML Web service 的服务说明创建代理类。 为 SOAP 协议生成代理类时，通过方法对 XML Web service 方法进行同步调用 <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> ，而使用 <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> 方法和方法进行异步调用 <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> 。



## Examples
 下面的代码示例是 Wsdl.exe 为 XML Web service 生成的代理类 `Math` 。 代理类派生自 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol> 抽象类，后者派生自抽象 <xref:System.Web.Services.Protocols.WebClientProtocol> 类。

 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]

 下面的代码示例是 `Math` 从其生成上一个代理类的 XML Web service。

> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[Classic SoapHttpClientProtocol Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic SoapHttpClientProtocol Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/sourcevb.asmx)]


 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
    <block subset="none" type="overrides"><para>重写此类时，可以在派生类中引入特定于特定类型的 XML Web service 的方法。 方法捕获参数，并调用基类来完成与 XML Web service 通信的工作。 如果引入的方法是异步的，则调用 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> 方法和 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> 方法。 如果引入的方法是同步的，请调用 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> 方法。 重写的构造函数通常将 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> 属性设置为 XML Web service 方法的 URL。</para></block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">正调用 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> 方法的派生类中的 XML Web services 方法的名称。</param>
        <param name="parameters">对象的数组，包含要传递给 XML Web services 的参数。 数组中值的顺序与派生类的调用方法中的参数顺序对应。</param>
        <param name="callback">异步调用完成时要调用的委托。 如果 <paramref name="callback" /> 为 <see langword="null" />，则不调用委托。</param>
        <param name="asyncState">调用方提供的额外信息。</param>
        <summary>开始使用 SOAP 异步调用 XML Web services 方法。</summary>
        <returns><see cref="T:System.IAsyncResult" />，传递给 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> 方法以从远程方法调用中获取返回值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 通常，您不会直接调用 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> 方法，除非您为 XML Web service 生成自己的代理类。

 Web 服务描述语言工具生成的代理类 ( 从服务说明中 # A0) 将 XML Web service 方法公开为从代理类派生的名称，以同步调用 XML Web service 方法。 若要异步调用 XML Web service 方法，需要向每个 XML Web service 方法的代理类中添加另外两个方法，其中一个 `Begin` 前缀添加到了 XML Web service 方法的名称，另一个添加了 `End` 前缀。

 代理类调用 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> 方法来启动对 XML Web service 方法的异步调用调用。 例如，如果 XML Web service 公开名为的 XML Web service 方法 `Add` ，则代理类包含名为的方法 `BeginAdd` ，用于启动对 XML Web service 方法的调用。 在的代码中 `BeginAdd` ，对方法进行调用， <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> 并将结果放入的预期返回类型中 `Add` 。

 `methodName`用于查找可能已添加到方法中的自定义特性，例如 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 。 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 提供有关 SOAP 协议所需的派生方法的其他信息。

 `asyncState` 传入 `callback` ，并且包含在 <xref:System.IAsyncResult> 从方法返回的中 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> 。 `asyncState`参数可用于将与参数中指定的异步调用上下文有关的信息传递 `callback` 给处理结果的委托。



## Examples
 下面的代码示例是由 Web 服务描述语言工具为 XML Web service ( # A0) 生成的代理类 `Math` 。 在 `BeginAdd` proxy 类的方法中， <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> 方法将启动对 XML Web service 方法的异步调用 `Add` 。

 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]

 下面的代码示例是 `Math` 从其创建前面的代理类的 XML Web service。

 [!code-aspx-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/sourcevb.asmx)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">请求到达了服务器计算机，但未被成功处理。</exception>
        <exception cref="T:System.InvalidOperationException">请求对对象的当前状态无效。</exception>
        <exception cref="T:System.Net.WebException">访问网络时出错。</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>动态绑定到 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> 处的发现文档中描述的 XML Web services。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 XML Web service 客户端可以动态绑定到 XML Web service，而不是使用方法在代理类中引用的另一个 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> 。 通常， <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> 属性指的是 XML Web service 的基址。 但是，在调用方法之前， <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> 将 <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> 属性设置为发现文档的 URL。 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A>方法尝试在发现文档中找到与代理类中定义的绑定匹配的匹配项，然后动态绑定到该绑定。 如果成功，则后续方法调用会定向到发现文档中所述的 XML Web service。

 如果使用 Web 服务描述语言工具生成的代理类 ( # A0) ，则代理类将定义由它使用调用的 XML Web service 方法实现的绑定 <xref:System.Web.Services.WebServiceBindingAttribute> 。 当 XML Web service 实现多个绑定时，Wsdl.exe 为每个绑定创建一个代理类。 应用于每个代理类是一个 <xref:System.Web.Services.WebServiceBindingAttribute> ，它定义绑定的名称及其命名空间。 将属性设置为的发现文档 <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> 必须包含对实现相同绑定名称和命名空间的 XML Web service 的引用，否则会引发异常。



## Examples
 下面的代码示例是一个使用 XML Web service 的 Wsdl.exe 实用程序生成的代理类 `Math` 。 <xref:System.Web.Services.WebServiceBindingAttribute>应用于 `Math` 代理类，该代理类将绑定名称设置为 `MathSoap` ，并将其命名空间设置为 `http://tempuri.org/` 。

 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]

 下面的代码示例是使用上述代理类的 Web 服务客户端。 在 `EnterBtn_Click` Web 窗体的事件中，XML Web service 客户端调用 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> 尝试动态绑定到用户提供的 URL 的方法。

> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">未能在 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> 处的发现文档中找到代理类中定义的绑定。

- 或 -

代理类没有定义绑定。</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/fxx6cfx2(v=vs.100)">XML Web services 发现</related>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">从 <see cref="T:System.IAsyncResult" /> 方法返回的 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />。</param>
        <summary>结束使用 SOAP 异步调用 XML Web services 方法。</summary>
        <returns>包含派生类方法的返回值、所有引用或 <see langword="out" /> 参数的对象数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 通常，您不会直接调用 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> 方法，除非您为 XML Web service 生成自己的代理类。

 由 Web 服务描述语言工具生成的代理类 ( # A0) XML Web service 将 XML Web service 方法公开为代理类的名称，以便同步调用 XML Web service 方法。 若要异步调用 XML Web service 方法，需要为每个 XML Web service 方法将两个附加方法添加到代理类，其中一个 `Begin` 前缀添加到了 XML Web service 方法的名称，另一个添加了 `End` 前缀。

 代理类调用 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> 方法来完成对 XML Web service 方法的异步调用调用。 例如，如果 XML Web service 公开名为的 XML Web service 方法 `Add` ，则代理类包含一个名为 `EndAdd` 的方法，用于完成对 XML Web service 方法的异步调用。 在调用的代码中，对 `EndAdd` 方法进行调用 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> ，然后将结果放入的预期返回类型中 `Add` 。



## Examples
 下面的代码示例是 Wsdl.exe 为 XML Web service 生成的代理类 `Math` 。 在 `EndAdd` proxy 类的方法中， <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> 方法完成对 XML Web service 方法的异步调用 `Add` 。

 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]

 下面的代码示例是 `Math` 从其创建前面的代理类的 XML Web service。

 [!code-aspx-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic SoapHttpClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/sourcevb.asmx)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> 不是 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> 方法的返回值。</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">请求到达了服务器计算机，但未被成功处理。</exception>
        <exception cref="T:System.InvalidOperationException">请求对对象的当前状态无效。</exception>
        <exception cref="T:System.Net.WebException">访问网络时出错。</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bufferSize" Type="System.Int32" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Web.Services.Protocols.SoapClientMessage" />，提供 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 来初始化 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="bufferSize"><see cref="T:System.IO.StreamReader" /> 使用的 <see cref="T:System.Xml.XmlReader" /> 的初始缓冲区大小。</param>
        <summary>返回一个用 <see cref="T:System.Xml.XmlReader" /> 参数的 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 属性初始化的 <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />。</summary>
        <returns>用 <paramref name="message" /> 参数的 <see cref="T:System.Xml.XmlReader" /> 属性初始化的 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetWebRequest (uri As Uri) As WebRequest" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri"><see cref="T:System.Uri" /> 在创建 <see cref="T:System.Net.WebRequest" /> 时使用。</param>
        <summary>为指定的 <paramref name="uri" /> 创建 <see cref="T:System.Net.WebRequest" />。</summary>
        <returns>指定 URI 的 <see cref="T:System.Net.WebRequest" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 可以重写此方法，以便在 <xref:System.Net.WebRequest> 发出 XML Web service 请求之前自定义。 例如，可以将自定义标头添加到请求。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bufferSize" Type="System.Int32" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Web.Services.Protocols.SoapClientMessage" />，提供 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 来初始化 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="bufferSize"><see cref="T:System.IO.StreamWriter" /> 使用的 <see cref="T:System.Xml.XmlWriter" /> 的初始缓冲区大小。</param>
        <summary>返回用 <see cref="T:System.Xml.XmlWriter" /> 参数的 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 属性初始化的 <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />。</summary>
        <returns>用 <paramref name="message" /> 参数的 <see cref="T:System.Xml.XmlWriter" /> 属性初始化的 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (methodName, parameters)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">XML Web services 方法的名称。</param>
        <param name="method_name">XML Web services 方法的名称。</param>
        <param name="parameters">包含要传递给 XML Web services 的参数的对象数组。 数组中值的顺序与派生类的调用方法中的参数顺序对应。</param>
        <summary>使用 SOAP 同步调用 XML Web services 方法。</summary>
        <returns>包含派生类方法的返回值、所有 <see langword="reference" /> 或 <see langword="out" /> 参数的对象数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 通常，你不 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> 会直接调用方法，除非你要为 XML Web service 生成自己的代理类。

 由 Web 服务描述语言工具生成的代理类 ( # A0) XML Web service 将 XML Web service 方法公开为代理类的名称。 代理类调用 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> 方法来调用 XML Web service 方法调用。 例如，如果 XML Web service 公开名为的 XML Web service 方法 `Add` ，则代理类还包含一个名为的方法 `Add` 。 在 `Add` 代理类中方法的代码中，通过方法对 XML Web service 方法进行同步调用， <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> 然后将结果放入的预期返回类型中 `Add` 。

 `methodName`参数用于查找可能已添加到方法（如）的自定义属性 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 。 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 提供有关 SOAP 协议所需的派生方法的其他信息。



## Examples
 下面的代码示例是 Wsdl.exe 为 XML Web service 生成的代理类 `Math` 。 在 `Add` proxy 类的方法中， <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> 方法调用 `Add` XML Web service 方法。

 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]

 下面的代码示例是 `Math` 从其创建前面的代理类的 XML Web service。

 [!code-aspx-csharp[Classic SoapHttpClientProtocol.Invoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic SoapHttpClientProtocol.Invoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/sourcevb.asmx)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">请求到达了服务器计算机，但未被成功处理。</exception>
        <exception cref="T:System.InvalidOperationException">请求对对象的当前状态无效。</exception>
        <exception cref="T:System.Net.WebException">访问网络时出错。</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>异步调用指定的方法。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="methodName">要调用的方法的名称。</param>
        <param name="parameters">要传递给该方法的参数。</param>
        <param name="callback">当方法调用完成后调用的委托。</param>
        <summary>异步调用指定的方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userState" Type="System.Object" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="methodName">要调用的方法的名称。</param>
        <param name="parameters">要传递给该方法的参数。</param>
        <param name="callback">当方法调用完成后调用的委托。</param>
        <param name="userState">用于将状态信息传入 <paramref name="callback" /> 委托的对象。</param>
        <summary>异步调用指定的方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于对 XML Web services 修改的 SOAP 请求的 SOAP 协议版本。</summary>
        <value><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> 值之一。 默认值为 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> Web 服务描述语言工具生成的代理类中设置属性 ( # A0) <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> 默认情况下，当 XML WEB SERVICE 的 WSDL 文档支持 SOAP 版本1.1 时，默认为。 但是，当 XML Web service 仅支持 SOAP 1.2 时，Wsdl.exe 将 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> 属性设置为 <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12> 。 若要在使用 Wsdl.exe 生成代理类时选择 SOAP 协议的版本，请将 `/protocol` 开关与或设置一起使用， `SOAP` `SOAP12` 以将 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> 属性分别设置为 <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> 和 <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12> 。



## Examples
 下面的代码示例将用于与 XML Web service 通信的协议版本设置为 SOAP 1.2。

 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>
