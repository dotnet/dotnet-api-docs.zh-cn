<Type Name="SoapHeaderAttribute" FullName="System.Web.Services.Protocols.SoapHeaderAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="073decf774214147db7faede3ecbc286d49a21e3" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89997787" /></Metadata><TypeSignature Language="C#" Value="public sealed class SoapHeaderAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SoapHeaderAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHeaderAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SoapHeaderAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHeaderAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type SoapHeaderAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>此特性应用于 XML Web services 方法或 XML Web services 客户端，用以指定该 XML Web services 方法或 XML Web services 客户端可以处理的 SOAP 标头。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接收和处理 SOAP 标头的基本步骤如下：  
  
1.  创建一个派生自的类 <xref:System.Web.Services.Protocols.SoapHeader> ，该类表示在 SOAP 标头中传递的数据。  
  
2.  将成员添加到 XML Web service 类或在步骤1中创建的类型的客户端代理类 XML Web service。  
  
3.  将应用 <xref:System.Web.Services.Protocols.SoapHeaderAttribute> 到代理类中的 XML Web service 方法或相应方法，并指定在属性中的步骤2中创建的成员 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 。  
  
4.  在 XML Web service 方法或 XML Web service 客户端代码中，访问 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 属性来处理 SOAP 标头中发送的数据。  
  
 有关更多详细信息，请参见 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 属性。  
  
   
  
## Examples  
 下面的 `MyWebService` XML Web service 定义一个 <xref:System.Web.Services.Protocols.SoapHeader> 类型为的 `MyHeader` 。 `Hello`XML Web service 方法要求客户端通过此调用 XML Web service 方法 <xref:System.Web.Services.Protocols.SoapHeader> 。 `Hello`XML Web service 还会捕获除之外的任何 SOAP 标头 `MyHeader` 。  
  
 [!code-aspx-csharp[Classic SoapHeaderAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHeaderAttribute Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic SoapHeaderAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHeaderAttribute Example/VB/sourcevb.asmx)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" />
    <altmember cref="T:System.Web.Services.Protocols.SoapHeader" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHeaderAttribute (string memberName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHeaderAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHeaderAttribute(System::String ^ memberName);" />
      <MemberSignature Language="F#" Value="new System.Web.Services.Protocols.SoapHeaderAttribute : string -&gt; System.Web.Services.Protocols.SoapHeaderAttribute" Usage="new System.Web.Services.Protocols.SoapHeaderAttribute memberName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberName">表示 SOAP 标头内容的 XML Web services 类的成员。 <see cref="P:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" /> 属性将被设置为此参数的值。</param>
        <summary>通过设置表示 SOAP 标头内容的 XML Web services 类的成员，初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML Web service 客户端或 XML Web service 可以通过将应用 <xref:System.Web.Services.Protocols.SoapHeaderAttribute> 于 XML Web service 类中的 XML Web service 方法或代理类中的相应方法，指定它要处理的特定 XML Web service 方法的 SOAP 标头。 为了使 XML Web service 方法接收 SOAP 标头的内容，将向派生自的派生自的 XML Web service 类添加成员 <xref:System.Type> <xref:System.Web.Services.Protocols.SoapHeader> 。 同样，XML Web service 客户端将成员添加到从派生的代理类 <xref:System.Web.Services.Protocols.SoapHeader> 。 <xref:System.Type>派生自的 <xref:System.Web.Services.Protocols.SoapHeader> 表示 SOAP 标头的内容，由 XML Web service 的开发人员创建或想要接收 SOAP 标头的 XML Web service 客户端创建。 创建类后， <xref:System.Web.Services.Protocols.SoapHeaderAttribute> 可以应用于 XML Web service 客户端代理类中的 XML Web service 方法或相应方法，指定成员以接收具有 `memberName` 此构造函数或属性的参数的 SOAP 标头内容 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 。  
  
 XML Web service 方法可以通过将多个成员添加到 XML Web service 类或 XML Web service 代理类，然后将多个 <xref:System.Web.Services.Protocols.SoapHeaderAttribute> 属性应用于 XML Web service 方法来接收多个 SOAP 标头。  
  
 若要在写入 XML Web service 时接收和处理未知的 SOAP 标头，请将成员的指定为 <xref:System.Type> <xref:System.Web.Services.Protocols.SoapUnknownHeader> <xref:System.Web.Services.Protocols.SoapHeader> 或任一类的数组。  
  
   
  
## Examples  
 下面的 `MyWebService` XML Web service 定义一个 <xref:System.Web.Services.Protocols.SoapHeader> 类型为的 `MyHeader` 。 `Hello`XML Web service 方法将成员指定 `myHeader` 为 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 属性，以接收 `MyHeader` 传入 XML Web service 方法的 SOAP 标头的内容。  
  
 [!code-cpp[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapHeaderDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapHeaderDirection Direction" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeaderAttribute.Direction" />
      <MemberSignature Language="VB.NET" Value="Public Property Direction As SoapHeaderDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapHeaderDirection Direction { System::Web::Services::Protocols::SoapHeaderDirection get(); void set(System::Web::Services::Protocols::SoapHeaderDirection value); };" />
      <MemberSignature Language="F#" Value="member this.Direction : System.Web.Services.Protocols.SoapHeaderDirection with get, set" Usage="System.Web.Services.Protocols.SoapHeaderAttribute.Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapHeaderDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 SOAP 标头是用于 XML Web services 还是 XML Web services 客户端，或同时用于二者。</summary>
        <value>SOAP 标头的预期接收者。 默认为 <see cref="F:System.Web.Services.Protocols.SoapHeaderDirection.In" />，这意味着预期接收者只是 XML Web services。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的 `MyWebService` XML Web service 定义一个 <xref:System.Web.Services.Protocols.SoapHeader> 类型为的 `MyHeader` 。 `Hello`XML Web service 方法指定 `MyHeader` 必须发送到 XML Web service 方法和客户端以 invocate XML Web service 方法。  
  
 [!code-cpp[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberName">
      <MemberSignature Language="C#" Value="public string MemberName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MemberName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" />
      <MemberSignature Language="VB.NET" Value="Public Property MemberName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MemberName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MemberName : string with get, set" Usage="System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示 SOAP 标头内容的 XML Web services 类的成员。</summary>
        <value>表示 SOAP 标头内容的 XML Web services 类的成员。 没有默认值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML Web service 或 XML Web service 客户端可以通过将应用 <xref:System.Web.Services.Protocols.SoapHeaderAttribute> 于 XML Web service 类中的 XML Web service 方法或代理类中的相应方法，指定它要处理的 SOAP 标头。 为了使 XML Web service 方法接收 SOAP 标头的内容，会将成员添加到派生自的类型的 XML Web service 类中 <xref:System.Web.Services.Protocols.SoapHeader> 。 同样，XML Web service 客户端将成员添加到从派生的代理类 <xref:System.Web.Services.Protocols.SoapHeader> 。 <xref:System.Type>派生自 <xref:System.Web.Services.Protocols.SoapHeader> 表示 SOAP 标头的内容，由 XML Web service 的开发人员创建或要接收 SOAP 标头的 XML Web service 客户端创建。 创建类后， <xref:System.Web.Services.Protocols.SoapHeaderAttribute> 可以应用于 XML Web service 客户端代理类中的 XML Web service 方法或相应方法，该方法用于指定要接收 SOAP 标头内容的属性的成员 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 。  
  
 XML Web service 方法可以通过将多个成员添加到 XML Web service 类或 XML Web service 代理类，然后将多个 <xref:System.Web.Services.Protocols.SoapHeaderAttribute> 属性应用于 XML Web service 方法来接收多个 SOAP 标头。  
  
 若要在写入 XML Web service 时接收和处理未知的 SOAP 标头，请将成员的类型指定为 <xref:System.Web.Services.Protocols.SoapUnknownHeader> <xref:System.Web.Services.Protocols.SoapHeader> 或任一类的数组。  
  
   
  
## Examples  
 下面的 `MyWebService` XML Web service 定义一个 <xref:System.Web.Services.Protocols.SoapHeader> 类型为的 `MyHeader` 。 `Hello`XML Web service 方法将成员指定 `myHeader` 为 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 属性，以接收 `MyHeader` 传入 XML Web service 方法的 SOAP 标头的内容。  
  
 [!code-cpp[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHeaderAttribute.MemberName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHeaderAttribute.MemberName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Required">
      <MemberSignature Language="C#" Value="public bool Required { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Required" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeaderAttribute.Required" />
      <MemberSignature Language="VB.NET" Value="Public Property Required As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Required { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Required : bool with get, set" Usage="System.Web.Services.Protocols.SoapHeaderAttribute.Required" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This property will be removed from a future version. The presence of a particular header in a SOAP message is no longer enforced", false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property will be removed from a future version. The presence of a particular header in a SOAP message is no longer enforced", false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此成员已经过时，不具有任何功能。</summary>
        <value>一个 <see cref="T:System.Boolean" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要验证是否已将 SOAP 标头发送到 XML Web service，请确认在属性中指定的成员 <xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> 为 `null` 。 如果为 `null` ，则不发送 SOAP 标头。  
  
 在 .NET Framework SDK 版本1.0 中， <xref:System.Web.Services.Protocols.SoapHeaderAttribute.Required%2A> 属性指示接收方 XML Web service 或 XML Web service 客户端是否必须理解并处理 SOAP 标头。 如果收件人未处理 SOAP 标头，则会引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
