<Type Name="ParallelLoopResult" FullName="System.Threading.Tasks.ParallelLoopResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db5a1070ba6e82fdce3d052a968473767887f853" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89949815" /></Metadata><TypeSignature Language="C#" Value="public struct ParallelLoopResult" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ParallelLoopResult extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopResult" />
  <TypeSignature Language="VB.NET" Value="Public Structure ParallelLoopResult" />
  <TypeSignature Language="C++ CLI" Value="public value class ParallelLoopResult" />
  <TypeSignature Language="F#" Value="type ParallelLoopResult = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Tasks.Parallel" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Tasks.Parallel" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="59a5c-101">提供执行 <see cref="T:System.Threading.Tasks.Parallel" /> 循环的完成状态。</span><span class="sxs-lookup"><span data-stu-id="59a5c-101">Provides completion status on the execution of a <see cref="T:System.Threading.Tasks.Parallel" /> loop.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59a5c-102">如果 <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> 返回 true，则循环运行到完成，从而执行循环的所有迭代。</span><span class="sxs-lookup"><span data-stu-id="59a5c-102">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed.</span></span> <span data-ttu-id="59a5c-103">如果 <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> 返回 false 并 <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> 返回 null，则对的调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 用于提前结束循环。</span><span class="sxs-lookup"><span data-stu-id="59a5c-103">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely.</span></span> <span data-ttu-id="59a5c-104">如果 <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> 返回 false 并 <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> 返回一个非 null 整数值，则 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 用于提前结束循环。</span><span class="sxs-lookup"><span data-stu-id="59a5c-104">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="59a5c-105">的所有公共成员 <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 都是线程安全的，并且可以同时从多个线程调用。</span><span class="sxs-lookup"><span data-stu-id="59a5c-105">All public members of <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> are thread safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="59a5c-106">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="59a5c-106">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59a5c-107">获取该循环是否已运行完成（即，该循环的所有迭代均已执行，并且该循环没有收到提前结束的请求）。</span><span class="sxs-lookup"><span data-stu-id="59a5c-107">Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.</span></span></summary>
        <value><span data-ttu-id="59a5c-108">如果该循环已运行完成，则为 true；否则为 false。</span><span class="sxs-lookup"><span data-stu-id="59a5c-108">true if the loop ran to completion; otherwise false;</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public long? LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59a5c-109">获取从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低迭代的索引。</span><span class="sxs-lookup"><span data-stu-id="59a5c-109">Gets the index of the lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="59a5c-110">返回一个表示从中调用 Break 语句的最低迭代的整数。</span><span class="sxs-lookup"><span data-stu-id="59a5c-110">Returns an integer that represents the lowest iteration from which the Break statement was called.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59a5c-111">如果 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 未采用，则此属性将返回 null。</span><span class="sxs-lookup"><span data-stu-id="59a5c-111">If <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was not employed, this property will return null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
