<Type Name="TaskAsyncEnumerableExtensions" FullName="System.Threading.Tasks.TaskAsyncEnumerableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1b46dea910e895b536e024e1f46da9ca0031c50" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100323782" /></Metadata><TypeSignature Language="C#" Value="public static class TaskAsyncEnumerableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskAsyncEnumerableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TaskAsyncEnumerableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskAsyncEnumerableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type TaskAsyncEnumerableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Bcl.AsyncInterfaces" FromVersion="1.0.0.0" To="netstandard" ToVersion="2.1.0.0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一组静态方法，用于配置异步可枚举项和可处置项的任务相关行为。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.ConfiguredAsyncDisposable ConfigureAwait (this IAsyncDisposable source, bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.ConfiguredAsyncDisposable ConfigureAwait(class System.IAsyncDisposable source, bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureAwait (source As IAsyncDisposable, continueOnCapturedContext As Boolean) As ConfiguredAsyncDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::ConfiguredAsyncDisposable ConfigureAwait(IAsyncDisposable ^ source, bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="static member ConfigureAwait : IAsyncDisposable * bool -&gt; System.Runtime.CompilerServices.ConfiguredAsyncDisposable" Usage="System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait (source, continueOnCapturedContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredAsyncDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IAsyncDisposable" RefType="this" />
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">源异步可处置项。</param>
        <param name="continueOnCapturedContext">若要捕获并封装回当前上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>配置如何执行从异步可处置项返回的任务的等待。</summary>
        <returns>配置的异步可处置项。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait&lt;T&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;T&gt; source, bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1&lt;!!T&gt; ConfigureAwait&lt;T&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!T&gt; source, bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureAwait(Of T) (source As IAsyncEnumerable(Of T), continueOnCapturedContext As Boolean) As ConfiguredCancelableAsyncEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait(System::Collections::Generic::IAsyncEnumerable&lt;T&gt; ^ source, bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="static member ConfigureAwait : System.Collections.Generic.IAsyncEnumerable&lt;'T&gt; * bool -&gt; System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;'T&gt;" Usage="System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait (source, continueOnCapturedContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="T">要循环访问的对象的类型。</typeparam>
        <param name="source">要循环访问的源可枚举项。</param>
        <param name="continueOnCapturedContext">若要捕获并封装回当前上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>配置如何执行从异步迭代返回的任务的等待。</summary>
        <returns>配置的可枚举项。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCancellation&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation&lt;T&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;T&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1&lt;!!T&gt; WithCancellation&lt;T&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!T&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithCancellation(Of T) (source As IAsyncEnumerable(Of T), cancellationToken As CancellationToken) As ConfiguredCancelableAsyncEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation(System::Collections::Generic::IAsyncEnumerable&lt;T&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WithCancellation : System.Collections.Generic.IAsyncEnumerable&lt;'T&gt; * System.Threading.CancellationToken -&gt; System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;'T&gt;" Usage="System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">要循环访问的对象的类型。</typeparam>
        <param name="source">要循环访问的源可枚举项。</param>
        <param name="cancellationToken">要使用的取消标记。</param>
        <summary>设置要在循环访问时传递到 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> 的 <see cref="T:System.Threading.CancellationToken" />。</summary>
        <returns>配置的可枚举项。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
