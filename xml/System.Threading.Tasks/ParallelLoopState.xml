<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a714bf5f7466ad1104fd70b6be5738b2e8443675" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83945799" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Tasks.Parallel" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Tasks.Parallel" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f36ac-101">可使并行循环迭代与其他迭代交互。</span><span class="sxs-lookup"><span data-stu-id="f36ac-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="f36ac-102">此类的实例由 <see cref="T:System.Threading.Tasks.Parallel" /> 类提供给每个循环；不能在你的用户代码中创建实例。</span><span class="sxs-lookup"><span data-stu-id="f36ac-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f36ac-103">请注意，不能实例化此类的实例。</span><span class="sxs-lookup"><span data-stu-id="f36ac-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="f36ac-104">它在调用 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 或 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 方法时由编译器自动生成为参数。</span><span class="sxs-lookup"><span data-stu-id="f36ac-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f36ac-105">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="f36ac-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="f36ac-106">`for` 和 `foreach` （在中C#）和 `For` 和 `For Each` （在 Visual Basic 中）的构造按顺序从最高索引到最高的索引执行，或从集合中的第一个对象按顺序执行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="f36ac-107">与此相反，<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 和 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 方法不会。</span><span class="sxs-lookup"><span data-stu-id="f36ac-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="f36ac-108">由于循环的单个迭代是并行运行的，因此它们可以按任意顺序开始和结束。</span><span class="sxs-lookup"><span data-stu-id="f36ac-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="f36ac-109"><xref:System.Threading.Tasks.ParallelLoopState> 类允许并行循环的各个迭代彼此交互。</span><span class="sxs-lookup"><span data-stu-id="f36ac-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="f36ac-110">通过 <xref:System.Threading.Tasks.ParallelLoopState> 类，您可以：</span><span class="sxs-lookup"><span data-stu-id="f36ac-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="f36ac-111">退出当前迭代，并通过调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法阻止任何其他迭代开始。</span><span class="sxs-lookup"><span data-stu-id="f36ac-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="f36ac-112">这不会影响已开始执行的迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="f36ac-113">通过调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法，阻止索引大于当前索引的任何迭代执行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="f36ac-114">这不会影响已开始执行的迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="f36ac-115">通过检索 <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> 属性的值来确定是否已在任何循环迭代中发生了异常。</span><span class="sxs-lookup"><span data-stu-id="f36ac-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="f36ac-116">通过检索 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 属性的值，确定循环的任何迭代是否已调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="f36ac-117">您可以使用此属性从在调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法之前启动但仍在执行的循环的迭代中返回。</span><span class="sxs-lookup"><span data-stu-id="f36ac-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="f36ac-118">通过检索 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 属性的值，确定循环的任何迭代是否已调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 或 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法或引发了异常。</span><span class="sxs-lookup"><span data-stu-id="f36ac-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="f36ac-119">退出一个长时间运行的迭代，该迭代的索引大于通过检索 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性的值而调用 Break 的迭代索引。</span><span class="sxs-lookup"><span data-stu-id="f36ac-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f36ac-120">下面的示例并行执行最多100迭代的循环。</span><span class="sxs-lookup"><span data-stu-id="f36ac-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="f36ac-121">每个迭代都将暂停1到1000毫秒的随机间隔。</span><span class="sxs-lookup"><span data-stu-id="f36ac-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="f36ac-122">随机生成的值确定调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法的循环迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="f36ac-123">如示例的输出所示，在调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法后，索引大于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性值的任何迭代都将开始。</span><span class="sxs-lookup"><span data-stu-id="f36ac-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="f36ac-124">由于调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法时循环的迭代仍可能会执行，每次迭代都会调用 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 属性来检查其他迭代是否已调用了 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="f36ac-125">如果 `true`属性值，则迭代会检查 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性的值，如果该值大于当前迭代的索引值，则会立即返回。</span><span class="sxs-lookup"><span data-stu-id="f36ac-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="f36ac-126"><see cref="T:System.Threading.Tasks.ParallelLoopState" /> 实例只应在为其提供实例的循环主体中使用。</span><span class="sxs-lookup"><span data-stu-id="f36ac-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="f36ac-127">在关联的循环结束后使用提供的 <see cref="T:System.Threading.Tasks.ParallelLoopState" /> 实例并不安全，也不安全地将其显式提交给其他线程，并使这些线程随时访问。</span><span class="sxs-lookup"><span data-stu-id="f36ac-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="f36ac-128">将为循环中涉及的每个线程提供不同的 <see cref="T:System.Threading.Tasks.ParallelLoopState" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="f36ac-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="f36ac-129">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="f36ac-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f36ac-130">告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行当前迭代之外的迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f36ac-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 指示应运行当前迭代之后的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="f36ac-132">它可以有效地取消循环的任何其他迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="f36ac-133">但是，它不会停止已经开始执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="f36ac-134">例如，如果从从0到1000的并行循环的第100迭代调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，则仍将运行小于100的所有迭代，但不会执行从101到1000的迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="f36ac-135">对于可能已在执行的长时间运行的迭代，如果当前索引小于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>的当前值，<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 将 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性设置为当前迭代的索引。</span><span class="sxs-lookup"><span data-stu-id="f36ac-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="f36ac-136">若要停止其索引大于从争用执行的最低中断迭代的迭代，应执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="f36ac-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="f36ac-137">检查 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 属性是否 `true`。</span><span class="sxs-lookup"><span data-stu-id="f36ac-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="f36ac-138">如果其索引大于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性值，则从迭代退出。</span><span class="sxs-lookup"><span data-stu-id="f36ac-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="f36ac-139">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="f36ac-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="f36ac-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 通常用于基于搜索的算法，其中排序在数据源中存在。</span><span class="sxs-lookup"><span data-stu-id="f36ac-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f36ac-141">下面的示例并行执行最多100迭代的循环。</span><span class="sxs-lookup"><span data-stu-id="f36ac-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="f36ac-142">每个迭代都将暂停1到1000毫秒的随机间隔。</span><span class="sxs-lookup"><span data-stu-id="f36ac-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="f36ac-143">随机生成的值确定调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法的循环迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="f36ac-144">如示例的输出所示，在调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法后，索引大于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性值的任何迭代都将开始。</span><span class="sxs-lookup"><span data-stu-id="f36ac-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="f36ac-145">由于调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法时循环的迭代仍可能会执行，每次迭代都会调用 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 属性来检查其他迭代是否已调用了 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="f36ac-146">如果 `true`属性值，则迭代会检查 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性的值，如果该值大于当前迭代的索引值，则会立即返回。</span><span class="sxs-lookup"><span data-stu-id="f36ac-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f36ac-147"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法以前被调用过。</span><span class="sxs-lookup"><span data-stu-id="f36ac-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="f36ac-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</span><span class="sxs-lookup"><span data-stu-id="f36ac-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="f36ac-149">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="f36ac-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f36ac-150">获取循环的任何迭代是否已引发相应迭代未处理的异常。</span><span class="sxs-lookup"><span data-stu-id="f36ac-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="f36ac-151">如果引发了未经处理的异常，则为 <see langword="true" />;否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f36ac-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="f36ac-152">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="f36ac-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f36ac-153">获取循环的任何迭代是否已调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="f36ac-154">如果任何迭代通过调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法已停止循环，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f36ac-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f36ac-155">对于循环的长时间运行迭代，您可以检索 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 属性的值，以确定在调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法之前开始执行的循环的任何迭代是否仍在执行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="f36ac-156">然后，可以使用 "<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>" 属性的值来确定是否应立即返回或正常执行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f36ac-157">下面的示例并行执行最多10000迭代的循环。</span><span class="sxs-lookup"><span data-stu-id="f36ac-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="f36ac-158">每个迭代都将暂停1到1000毫秒的随机间隔。</span><span class="sxs-lookup"><span data-stu-id="f36ac-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="f36ac-159">随机生成的值确定调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法的循环迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="f36ac-160">由于调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法时循环的迭代仍可能会执行，因此 lambda 表达式调用 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 方法以检查其他迭代是否已调用了 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="f36ac-161">如果它返回 `true`，则迭代将立即返回。</span><span class="sxs-lookup"><span data-stu-id="f36ac-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="f36ac-162">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="f36ac-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public long? LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f36ac-163">获取从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低循环迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="f36ac-164">从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="f36ac-165">如果是 <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> 循环，该值会基于内部生成的索引。</span><span class="sxs-lookup"><span data-stu-id="f36ac-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f36ac-166">并行循环的多个迭代可以调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="f36ac-167">如果是这样，则此值是调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>的迭代的最小索引。</span><span class="sxs-lookup"><span data-stu-id="f36ac-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="f36ac-168">如果没有 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>的循环迭代，此属性将返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="f36ac-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="f36ac-169">请注意，属性值不受 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法调用的影响。</span><span class="sxs-lookup"><span data-stu-id="f36ac-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="f36ac-170">在长时间运行的迭代中，如果调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法的迭代之后的所有迭代都不需要运行，则 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性用于终止在调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法之前开始执行的迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="f36ac-171">若要停止其索引大于从争用执行的最低中断迭代的迭代，应执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="f36ac-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="f36ac-172">检查 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 属性是否 `true`。</span><span class="sxs-lookup"><span data-stu-id="f36ac-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="f36ac-173">如果其索引大于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性值，则从迭代退出。</span><span class="sxs-lookup"><span data-stu-id="f36ac-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="f36ac-174">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="f36ac-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f36ac-175">下面的示例并行执行最多100迭代的循环。</span><span class="sxs-lookup"><span data-stu-id="f36ac-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="f36ac-176">每个迭代都将暂停1到1000毫秒的随机间隔。</span><span class="sxs-lookup"><span data-stu-id="f36ac-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="f36ac-177">随机生成的值确定调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法的循环迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="f36ac-178">这会阻止其索引大于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性值的迭代在调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法后开始，但它不会影响已开始执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="f36ac-179">若要防止这些工作完成，每次迭代都会调用 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 方法来检查其他迭代是否已调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="f36ac-180">如果是这样，则迭代会检查 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性的值，如果该值大于当前迭代的索引值，则会立即返回。</span><span class="sxs-lookup"><span data-stu-id="f36ac-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="f36ac-181">请注意，由于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 值超出了并行循环的范围，因此，如果要保留其值，则必须将其分配给在循环外部可见的变量。</span><span class="sxs-lookup"><span data-stu-id="f36ac-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="f36ac-182">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="f36ac-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f36ac-183">获取循环的当前迭代是否应基于此迭代或其他迭代发出的请求退出。</span><span class="sxs-lookup"><span data-stu-id="f36ac-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="f36ac-184">如果当前迭代应退出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f36ac-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f36ac-185"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 属性设置为在以下任何条件下 `true`：</span><span class="sxs-lookup"><span data-stu-id="f36ac-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="f36ac-186">循环的迭代调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 或 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>。</span><span class="sxs-lookup"><span data-stu-id="f36ac-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="f36ac-187">循环迭代引发异常。</span><span class="sxs-lookup"><span data-stu-id="f36ac-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="f36ac-188">循环已取消。</span><span class="sxs-lookup"><span data-stu-id="f36ac-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="f36ac-189">如果 `true`此属性，则 <xref:System.Threading.Tasks.Parallel> 类将主动尝试禁止从开始执行循环的其他迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="f36ac-190">但是，在某些情况下，它无法阻止启动其他迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="f36ac-191">这也可能是长时间运行的迭代已开始执行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="f36ac-192">在这种情况下，如果属性返回 `true`，则迭代可能会显式检查 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 属性并停止执行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f36ac-193">下面的示例并行执行最多100迭代的循环。</span><span class="sxs-lookup"><span data-stu-id="f36ac-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="f36ac-194">每个迭代都将暂停1到1000毫秒的随机间隔。</span><span class="sxs-lookup"><span data-stu-id="f36ac-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="f36ac-195">随机生成的值确定调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法的循环迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="f36ac-196">这会阻止其索引大于 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性值的迭代在调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法后开始，但它不会影响已开始执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="f36ac-197">若要防止这些工作完成，每次迭代都会调用 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 方法来检查其他迭代是否已调用 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="f36ac-198">如果是这样，则迭代会检查 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 属性的值，如果该值大于当前迭代的索引值，则会立即返回。</span><span class="sxs-lookup"><span data-stu-id="f36ac-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="f36ac-199">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="f36ac-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f36ac-200">告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f36ac-201">调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法指示尚未开始的循环的任何迭代都无需运行。</span><span class="sxs-lookup"><span data-stu-id="f36ac-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="f36ac-202">它可以有效地取消循环的任何其他迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="f36ac-203">但是，它不会停止已经开始执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="f36ac-204">调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法会导致 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 属性返回仍在执行的循环的任何迭代的 `true`。</span><span class="sxs-lookup"><span data-stu-id="f36ac-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="f36ac-205">这对于长时间运行的迭代特别有用，它可以检查 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 属性并在其值 `true`之前提前退出。</span><span class="sxs-lookup"><span data-stu-id="f36ac-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="f36ac-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 通常用于基于搜索的算法中，一旦找到结果，就不需要执行任何其他迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f36ac-207">下面的示例并行执行最多10000迭代的循环。</span><span class="sxs-lookup"><span data-stu-id="f36ac-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="f36ac-208">每个迭代都将暂停1到1000毫秒的随机间隔。</span><span class="sxs-lookup"><span data-stu-id="f36ac-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="f36ac-209">随机生成的值确定调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法的循环迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="f36ac-210">如示例的输出所示，在调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法后不会执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="f36ac-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="f36ac-211">由于调用 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法时循环的迭代仍可能会执行，每次迭代都会调用 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 方法来检查其他迭代是否已调用了 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="f36ac-212">如果它返回 `true`，则迭代将立即返回。</span><span class="sxs-lookup"><span data-stu-id="f36ac-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f36ac-213">以前调用过 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="f36ac-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="f36ac-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</span><span class="sxs-lookup"><span data-stu-id="f36ac-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="f36ac-215">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="f36ac-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
