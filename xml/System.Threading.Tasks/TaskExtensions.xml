<Type Name="TaskExtensions" FullName="System.Threading.Tasks.TaskExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6fac9bb3714b125b9bd98da4d8bee3d878692da" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89802019" /></Metadata><TypeSignature Language="C#" Value="public static class TaskExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TaskExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type TaskExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Threading.Tasks" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="51fc0-101">提供一组用于处理特定类型的 <see cref="T:System.Threading.Tasks.Task" /> 实例的静态方法（在 Visual Basic 中为共享方法）。</span><span class="sxs-lookup"><span data-stu-id="51fc0-101">Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></summary>
    <remarks>To be added.</remarks>
    <related type="Article" href="/dotnet/standard/parallel-programming/task-parallel-library-tpl"><span data-ttu-id="51fc0-102">任务并行库 (TPL)</span><span class="sxs-lookup"><span data-stu-id="51fc0-102">Task Parallel Library (TPL)</span></span></related>
    <related type="Article" href="/dotnet/standard/parallel-programming/task-based-asynchronous-programming"><span data-ttu-id="51fc0-103">基于任务的异步编程</span><span class="sxs-lookup"><span data-stu-id="51fc0-103">Task-based Asynchronous Programming</span></span></related>
    <related type="Article" href="/dotnet/standard/parallel-programming/how-to-unwrap-a-nested-task"><span data-ttu-id="51fc0-104">如何：解除嵌套任务的包装</span><span class="sxs-lookup"><span data-stu-id="51fc0-104">How to: Unwrap a Nested Task</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Unwrap(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unwrap (task As Task(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ task);" />
      <MemberSignature Language="F#" Value="static member Unwrap : System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.TaskExtensions.Unwrap task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="task"><span data-ttu-id="51fc0-105">要解包的 <see langword="Task&lt;Task&gt;" /> (C#) 或者 <see langword="Task (Of Task)" /> (Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="51fc0-105">The <see langword="Task&lt;Task&gt;" /> (C#) or <see langword="Task (Of Task)" /> (Visual Basic) to unwrap.</span></span></param>
        <summary><span data-ttu-id="51fc0-106">创建一个表示 <see cref="T:System.Threading.Tasks.Task" /> 的异步操作的代理 <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="51fc0-106">Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</span></span></summary>
        <returns><span data-ttu-id="51fc0-107">表示所提供的 <see langword="System.Threading.Tasks.Task(Of Task)" /> 的异步操作的 Task。</span><span class="sxs-lookup"><span data-stu-id="51fc0-107">A Task that represents the asynchronous operation of the provided <see langword="System.Threading.Tasks.Task(Of Task)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51fc0-108">如果能够从中返回任务，则这通常很有用 <xref:System.Threading.Tasks.Task%601> ，其中内部任务表示作为外部工作完成的工作 <xref:System.Threading.Tasks.Task%601> 。</span><span class="sxs-lookup"><span data-stu-id="51fc0-108">It is often useful to be able to return a Task from a <xref:System.Threading.Tasks.Task%601>, where the inner Task represents work done as part of the outer <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="51fc0-109">不过，这样做 `Task<Task>` 会导致 (c # ) 或 `Task (Of Task)` (Visual Basic) ，如果不仔细处理，则可能会产生意外行为。</span><span class="sxs-lookup"><span data-stu-id="51fc0-109">However, doing so results in a `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</span></span> <span data-ttu-id="51fc0-110">解包通过创建代表此类任务的整个异步操作的代理任务来解决此问题。</span><span class="sxs-lookup"><span data-stu-id="51fc0-110">Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="51fc0-111">下面的示例演示如何解包任务：</span><span class="sxs-lookup"><span data-stu-id="51fc0-111">The following example shows how to unwrap a task:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/cs/unwrap.cs#01)]
 [!code-vb[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/vb/unwrap.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="51fc0-112"><paramref name="task" /> 参数为 null 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="51fc0-112">The exception that is thrown if the <paramref name="task" /> argument is null.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-parallel-library-tpl"><span data-ttu-id="51fc0-113">任务并行库 (TPL)</span><span class="sxs-lookup"><span data-stu-id="51fc0-113">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-based-asynchronous-programming"><span data-ttu-id="51fc0-114">基于任务的异步编程</span><span class="sxs-lookup"><span data-stu-id="51fc0-114">Task-based Asynchronous Programming</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-unwrap-a-nested-task"><span data-ttu-id="51fc0-115">如何：解除嵌套任务的包装</span><span class="sxs-lookup"><span data-stu-id="51fc0-115">How to: Unwrap a Nested Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unwrap&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Unwrap&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Unwrap&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unwrap(Of TResult) (task As Task(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ task);" />
      <MemberSignature Language="F#" Value="static member Unwrap : System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.TaskExtensions.Unwrap task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="51fc0-116">任务结果的类型。</span><span class="sxs-lookup"><span data-stu-id="51fc0-116">The type of the task's result.</span></span></typeparam>
        <param name="task"><span data-ttu-id="51fc0-117">要解包的 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) 或者 <see langword="Task (Of Task(Of T))" /> (Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="51fc0-117">The <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic) to unwrap.</span></span></param>
        <summary><span data-ttu-id="51fc0-118">创建一个表示 <see cref="T:System.Threading.Tasks.Task" /> 的异步操作的代理 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic)。 </span><span class="sxs-lookup"><span data-stu-id="51fc0-118">Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic).</span></span></summary>
        <returns><span data-ttu-id="51fc0-119">一个 <see cref="T:System.Threading.Tasks.Task" /> 它表示所提供的 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) 或 <see langword="Task (Of Task(Of T))" /> (Visual Basic) 的异步运算。</span><span class="sxs-lookup"><span data-stu-id="51fc0-119">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of the provided <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51fc0-120">通常 <xref:System.Threading.Tasks.Task> ，能够从返回 <xref:System.Threading.Tasks.Task> ，其中内部 <xref:System.Threading.Tasks.Task> 表示作为外部工作完成的工作 <xref:System.Threading.Tasks.Task> 。</span><span class="sxs-lookup"><span data-stu-id="51fc0-120">It is often useful to be able to return a <xref:System.Threading.Tasks.Task> from a <xref:System.Threading.Tasks.Task>, where the inner <xref:System.Threading.Tasks.Task> represents work done as part of the outer <xref:System.Threading.Tasks.Task>.</span></span> <span data-ttu-id="51fc0-121">不过，这样做 `Task<Task<T>>` 会导致 (c # ) 或 `Task (Of Task(Of T))` (Visual Basic) ，如果不仔细处理，则可能会产生意外行为。</span><span class="sxs-lookup"><span data-stu-id="51fc0-121">However, doing so results in a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</span></span> <span data-ttu-id="51fc0-122">解包通过创建 <xref:System.Threading.Tasks.Task%601> 代表此类 `Task<Task<T>>` (c # ) 或 (Visual Basic) 的整个异步操作的代理来解决此问题 `Task (Of Task(Of T))` 。</span><span class="sxs-lookup"><span data-stu-id="51fc0-122">Unwrap solves this problem by creating a proxy <xref:System.Threading.Tasks.Task%601> that represents the entire asynchronous operation of such a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="51fc0-123"><paramref name="task" /> 参数为 null 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="51fc0-123">The exception that is thrown if the <paramref name="task" /> argument is null.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-parallel-library-tpl"><span data-ttu-id="51fc0-124">任务并行库 (TPL)</span><span class="sxs-lookup"><span data-stu-id="51fc0-124">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-based-asynchronous-programming"><span data-ttu-id="51fc0-125">基于任务的异步编程</span><span class="sxs-lookup"><span data-stu-id="51fc0-125">Task-based Asynchronous Programming</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-unwrap-a-nested-task"><span data-ttu-id="51fc0-126">如何：解除嵌套任务的包装</span><span class="sxs-lookup"><span data-stu-id="51fc0-126">How to: Unwrap a Nested Task</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
