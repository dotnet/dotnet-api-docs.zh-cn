<Type Name="LambdaReference&lt;T&gt;" FullName="System.Activities.Expressions.LambdaReference&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="85ea7e6da8272d9b2c9f6b0cdf44b0415b7d4085" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86839478" /></Metadata><TypeSignature Language="C#" Value="public sealed class LambdaReference&lt;T&gt; : System.Activities.CodeActivity&lt;System.Activities.Location&lt;T&gt;&gt;, System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LambdaReference`1&lt;T&gt; extends System.Activities.CodeActivity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; implements class System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.LambdaReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LambdaReference(Of T)&#xA;Inherits CodeActivity(Of Location(Of T))&#xA;Implements IValueSerializableExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class LambdaReference sealed : System::Activities::CodeActivity&lt;System::Activities::Location&lt;T&gt; ^&gt;, System::Activities::XamlIntegration::IValueSerializableExpression" />
  <TypeSignature Language="F#" Value="type LambdaReference&lt;'T&gt; = class&#xA;    inherit CodeActivity&lt;Location&lt;'T&gt;&gt;&#xA;    interface IValueSerializableExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.CodeActivity&lt;System.Activities.Location&lt;T&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">System.Activities.Location&lt;T&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.XamlIntegration.IValueSerializableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="89075-101">表达式返回的值的类型。</span><span class="sxs-lookup"><span data-stu-id="89075-101">The type of value returned by the expression.</span></span></typeparam>
    <summary><span data-ttu-id="89075-102">表示一个用作左值的 lambda 表达式，它支持绑定 <see cref="F:System.Activities.ArgumentDirection.Out" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="89075-102">Represents a lambda expression used as an l-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89075-103"><xref:System.Activities.Expressions.LambdaReference%601> 用于代码中指定的 lambda 表达式，并且不能序列化为 XAML。</span><span class="sxs-lookup"><span data-stu-id="89075-103"><xref:System.Activities.Expressions.LambdaReference%601> is used for lambda expressions specified in code and cannot be serialized to XAML.</span></span> <span data-ttu-id="89075-104">如果尝试序列化包含 <xref:System.Activities.Expressions.LambdaReference%601> 的工作流，则会引发 <xref:System.Activities.Expressions.LambdaSerializationException>。</span><span class="sxs-lookup"><span data-stu-id="89075-104">If an attempt to serialize a workflow that contains a <xref:System.Activities.Expressions.LambdaReference%601> is made, a <xref:System.Activities.Expressions.LambdaSerializationException> is thrown.</span></span> <span data-ttu-id="89075-105">如果包含工作流需要 XAML 序列化，请使用 <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> 或使用 <xref:System.Activities.Expressions.ExpressionServices> 将 <xref:System.Activities.Expressions.LambdaReference%601> 转换为可序列化的格式。</span><span class="sxs-lookup"><span data-stu-id="89075-105">If the containing workflow requires XAML serialization, use <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> or use <xref:System.Activities.Expressions.ExpressionServices> to convert the <xref:System.Activities.Expressions.LambdaReference%601> to a format that can be serialized.</span></span>  
  
 <span data-ttu-id="89075-106">此活动使用 LINQ to entities 提供程序来计算 LINQ 表达式。</span><span class="sxs-lookup"><span data-stu-id="89075-106">This activity uses the LINQ to Entity provider to evaluate LINQ expressions.</span></span> <span data-ttu-id="89075-107">与此活动一起使用的任何 LINQ 表达式都必须由 ADO.Net 实体数据模型进行 evaluatable。</span><span class="sxs-lookup"><span data-stu-id="89075-107">Any LINQ expressions used with this activity must be evaluatable by the ADO.Net Entity Data Model.</span></span> <span data-ttu-id="89075-108">例如，LINQ 表达式不能用于引用工作流本身的活动、变量或参数。</span><span class="sxs-lookup"><span data-stu-id="89075-108">For example, LINQ expressions cannot be used to reference activities, variables, or arguments of the workflow itself.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LambdaReference (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,T&gt;&gt; locationExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !T&gt;&gt; locationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (locationExpression As Expression(Of Func(Of ActivityContext, T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LambdaReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, T&gt; ^&gt; ^ locationExpression);" />
      <MemberSignature Language="F#" Value="new System.Activities.Expressions.LambdaReference&lt;'T&gt; : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'T&gt;&gt; -&gt; System.Activities.Expressions.LambdaReference&lt;'T&gt;" Usage="new System.Activities.Expressions.LambdaReference&lt;'T&gt; locationExpression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="locationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="locationExpression"><span data-ttu-id="89075-109">表达式的值。</span><span class="sxs-lookup"><span data-stu-id="89075-109">The value of the expression.</span></span></param>
        <summary><span data-ttu-id="89075-110">初始化 <see cref="T:System.Activities.Expressions.LambdaReference`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="89075-110">Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaReference`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override void CacheMetadata (System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CacheMetadata (metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::CodeActivityMetadata metadata);" />
      <MemberSignature Language="F#" Value="override this.CacheMetadata : System.Activities.CodeActivityMetadata -&gt; unit" Usage="lambdaReference.CacheMetadata metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public bool CanConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanConvertToString (context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="lambdaReference.CanConvertToString context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="89075-111">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="89075-111">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="89075-112">此方法始终返回 <see langword="true" />，并与 <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> 结合使用以便在尝试将此活动序列化为 XAML 时提供描述性错误消息。</span><span class="sxs-lookup"><span data-stu-id="89075-112">This method always returns <see langword="true" /> and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</span></span></summary>
        <returns><span data-ttu-id="89075-113">此方法始终返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="89075-113">This method always returns <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89075-114"><xref:System.Activities.Expressions.LambdaReference%601> 用于代码中指定的 lambda 表达式，并且不能序列化为 XAML。</span><span class="sxs-lookup"><span data-stu-id="89075-114"><xref:System.Activities.Expressions.LambdaReference%601> is used for lambda expressions specified in code and cannot be serialized to XAML.</span></span> <span data-ttu-id="89075-115">如果尝试序列化包含 <xref:System.Activities.Expressions.LambdaReference%601> 的工作流，则会引发 <xref:System.Activities.Expressions.LambdaSerializationException>。</span><span class="sxs-lookup"><span data-stu-id="89075-115">If an attempt to serialize a workflow that contains a <xref:System.Activities.Expressions.LambdaReference%601> is made, a <xref:System.Activities.Expressions.LambdaSerializationException> is thrown.</span></span> <span data-ttu-id="89075-116">如果包含工作流需要 XAML 序列化，请使用 <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> 或使用 <xref:System.Activities.Expressions.ExpressionServices> 将 <xref:System.Activities.Expressions.LambdaReference%601> 转换为可序列化的格式。</span><span class="sxs-lookup"><span data-stu-id="89075-116">If the containing workflow requires XAML serialization, use <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> or use <xref:System.Activities.Expressions.ExpressionServices> to convert the <xref:System.Activities.Expressions.LambdaReference%601> to a format that can be serialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public string ConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertToString (context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="lambdaReference.ConvertToString context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="89075-117">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="89075-117">The context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="89075-118">引发 <see cref="T:System.Activities.Expressions.LambdaSerializationException" />，并与 <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> 结合使用以便在尝试将此活动序列化为 XAML 时提供描述性错误消息。</span><span class="sxs-lookup"><span data-stu-id="89075-118">Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</span></span></summary>
        <returns><span data-ttu-id="89075-119">此方法在调用时会引发 <see cref="T:System.Activities.Expressions.LambdaSerializationException" />。</span><span class="sxs-lookup"><span data-stu-id="89075-119">This method throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89075-120"><xref:System.Activities.Expressions.LambdaReference%601> 用于代码中指定的 lambda 表达式，并且不能序列化为 XAML。</span><span class="sxs-lookup"><span data-stu-id="89075-120"><xref:System.Activities.Expressions.LambdaReference%601> is used for lambda expressions specified in code and cannot be serialized to XAML.</span></span> <span data-ttu-id="89075-121">如果尝试序列化包含 <xref:System.Activities.Expressions.LambdaReference%601> 的工作流，则会引发 <xref:System.Activities.Expressions.LambdaSerializationException>。</span><span class="sxs-lookup"><span data-stu-id="89075-121">If an attempt to serialize a workflow that contains a <xref:System.Activities.Expressions.LambdaReference%601> is made, a <xref:System.Activities.Expressions.LambdaSerializationException> is thrown.</span></span> <span data-ttu-id="89075-122">如果包含工作流需要 XAML 序列化，请使用 <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> 或使用 <xref:System.Activities.Expressions.ExpressionServices> 将 <xref:System.Activities.Expressions.LambdaReference%601> 转换为可序列化的格式。</span><span class="sxs-lookup"><span data-stu-id="89075-122">If the containing workflow requires XAML serialization, use <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> or use <xref:System.Activities.Expressions.ExpressionServices> to convert the <xref:System.Activities.Expressions.LambdaReference%601> to a format that can be serialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Activities.Location&lt;T&gt; Execute (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Activities.Location`1&lt;!T&gt; Execute(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.Execute(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (context As CodeActivityContext) As Location(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Activities::Location&lt;T&gt; ^ Execute(System::Activities::CodeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Activities.CodeActivityContext -&gt; System.Activities.Location&lt;'T&gt;" Usage="lambdaReference.Execute context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Location&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
