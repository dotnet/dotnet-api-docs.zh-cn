<Type Name="CompiledExpressionInvoker" FullName="System.Activities.Expressions.CompiledExpressionInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="58e84b52b0bc5e02b48ca156890906700f379099" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78803743" /></Metadata><TypeSignature Language="C#" Value="public class CompiledExpressionInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompiledExpressionInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.CompiledExpressionInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class CompiledExpressionInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompiledExpressionInvoker" />
  <TypeSignature Language="F#" Value="type CompiledExpressionInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示已编译的表达式调用程序。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompiledExpressionInvoker (System.Activities.Expressions.ITextExpression expression, bool isReference, System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Expressions.ITextExpression expression, bool isReference, valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.CompiledExpressionInvoker.#ctor(System.Activities.Expressions.ITextExpression,System.Boolean,System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As ITextExpression, isReference As Boolean, metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompiledExpressionInvoker(System::Activities::Expressions::ITextExpression ^ expression, bool isReference, System::Activities::CodeActivityMetadata metadata);" />
      <MemberSignature Language="F#" Value="new System.Activities.Expressions.CompiledExpressionInvoker : System.Activities.Expressions.ITextExpression * bool * System.Activities.CodeActivityMetadata -&gt; System.Activities.Expressions.CompiledExpressionInvoker" Usage="new System.Activities.Expressions.CompiledExpressionInvoker (expression, isReference, metadata)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.Expressions.ITextExpression" />
        <Parameter Name="isReference" Type="System.Boolean" />
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="expression">表达式。</param>
        <param name="isReference">如果保留对象引用数据，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="metadata">活动元数据。</param>
        <summary>使用表达式，isReference和元数据初始化 <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompiledExpressionRoot">
      <MemberSignature Language="C#" Value="public static object GetCompiledExpressionRoot (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetCompiledExpressionRoot(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRoot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompiledExpressionRoot (target As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetCompiledExpressionRoot(System::Object ^ target);" />
      <MemberSignature Language="F#" Value="static member GetCompiledExpressionRoot : obj -&gt; obj" Usage="System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRoot target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">目标。</param>
        <summary>设置已编译的表达式根。</summary>
        <returns>已编译的表达式根。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompiledExpressionRootForImplementation">
      <MemberSignature Language="C#" Value="public static object GetCompiledExpressionRootForImplementation (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetCompiledExpressionRootForImplementation(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRootForImplementation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompiledExpressionRootForImplementation (target As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetCompiledExpressionRootForImplementation(System::Object ^ target);" />
      <MemberSignature Language="F#" Value="static member GetCompiledExpressionRootForImplementation : obj -&gt; obj" Usage="System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRootForImplementation target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">目标。</param>
        <summary>获取用于实现 <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" /> 的已编译表达式根。</summary>
        <returns>已编译的表达式根。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeExpression">
      <MemberSignature Language="C#" Value="public object InvokeExpression (System.Activities.ActivityContext activityContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeExpression(class System.Activities.ActivityContext activityContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.CompiledExpressionInvoker.InvokeExpression(System.Activities.ActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeExpression (activityContext As ActivityContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeExpression(System::Activities::ActivityContext ^ activityContext);" />
      <MemberSignature Language="F#" Value="member this.InvokeExpression : System.Activities.ActivityContext -&gt; obj" Usage="compiledExpressionInvoker.InvokeExpression activityContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityContext" Type="System.Activities.ActivityContext" />
      </Parameters>
      <Docs>
        <param name="activityContext">活动上下文。</param>
        <summary>调用已编译的表达式。</summary>
        <returns>调用的表达式。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStaticallyCompiled">
      <MemberSignature Language="C#" Value="public bool IsStaticallyCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStaticallyCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Expressions.CompiledExpressionInvoker.IsStaticallyCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStaticallyCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStaticallyCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStaticallyCompiled : bool" Usage="System.Activities.Expressions.CompiledExpressionInvoker.IsStaticallyCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置是否已静态编译已编译表达式调用程序。</summary>
        <value>如果编译的表达调用程序静态编译，则为<see langword="true" />，否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCompiledExpressionRoot">
      <MemberSignature Language="C#" Value="public static void SetCompiledExpressionRoot (object target, System.Activities.XamlIntegration.ICompiledExpressionRoot compiledExpressionRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCompiledExpressionRoot(object target, class System.Activities.XamlIntegration.ICompiledExpressionRoot compiledExpressionRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRoot(System.Object,System.Activities.XamlIntegration.ICompiledExpressionRoot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCompiledExpressionRoot (target As Object, compiledExpressionRoot As ICompiledExpressionRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCompiledExpressionRoot(System::Object ^ target, System::Activities::XamlIntegration::ICompiledExpressionRoot ^ compiledExpressionRoot);" />
      <MemberSignature Language="F#" Value="static member SetCompiledExpressionRoot : obj * System.Activities.XamlIntegration.ICompiledExpressionRoot -&gt; unit" Usage="System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRoot (target, compiledExpressionRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="compiledExpressionRoot" Type="System.Activities.XamlIntegration.ICompiledExpressionRoot" />
      </Parameters>
      <Docs>
        <param name="target">目标。</param>
        <param name="compiledExpressionRoot">要设置的编译表达式根。</param>
        <summary>设置已编译的表达式根。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已编译的表达式根。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCompiledExpressionRootForImplementation">
      <MemberSignature Language="C#" Value="public static void SetCompiledExpressionRootForImplementation (object target, System.Activities.XamlIntegration.ICompiledExpressionRoot compiledExpressionRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCompiledExpressionRootForImplementation(object target, class System.Activities.XamlIntegration.ICompiledExpressionRoot compiledExpressionRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation(System.Object,System.Activities.XamlIntegration.ICompiledExpressionRoot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCompiledExpressionRootForImplementation (target As Object, compiledExpressionRoot As ICompiledExpressionRoot)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCompiledExpressionRootForImplementation(System::Object ^ target, System::Activities::XamlIntegration::ICompiledExpressionRoot ^ compiledExpressionRoot);" />
      <MemberSignature Language="F#" Value="static member SetCompiledExpressionRootForImplementation : obj * System.Activities.XamlIntegration.ICompiledExpressionRoot -&gt; unit" Usage="System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation (target, compiledExpressionRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="compiledExpressionRoot" Type="System.Activities.XamlIntegration.ICompiledExpressionRoot" />
      </Parameters>
      <Docs>
        <param name="target">目标。</param>
        <param name="compiledExpressionRoot">要设置的编译表达式根。</param>
        <summary>为 <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" />实现设置已编译的表达式根。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已编译的表达式根。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
