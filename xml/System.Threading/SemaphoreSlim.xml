<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="30e7f9b212adef60c507178f14a2a7b71e6f05bb" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83960193" /></Metadata><TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type SemaphoreSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="45748-101">对可同时访问资源或资源池的线程数加以限制的 <see cref="T:System.Threading.Semaphore" /> 的轻量替代。</span><span class="sxs-lookup"><span data-stu-id="45748-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-102">信号量分为两种类型：本地信号量和命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="45748-103">本地信号灯对应用程序而言是本地的，系统信号量在整个操作系统中均可见，适用于进程间同步。</span><span class="sxs-lookup"><span data-stu-id="45748-103">Local semaphores are local to an application, system semaphores are visible throughout the operating system and are suitable for inter-process synchronization.</span></span> <span data-ttu-id="45748-104"><xref:System.Threading.SemaphoreSlim> 是不使用 Windows 内核信号量的 <xref:System.Threading.Semaphore> 类的轻型替代项。</span><span class="sxs-lookup"><span data-stu-id="45748-104">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="45748-105">与 <xref:System.Threading.Semaphore> 类不同，<xref:System.Threading.SemaphoreSlim> 类不支持已命名的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-105">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="45748-106">只能将其用作本地信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-106">You can use it as a local semaphore only.</span></span> <span data-ttu-id="45748-107"><xref:System.Threading.SemaphoreSlim> 类是用于在单个应用内进行同步的建议信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-107">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="45748-108">轻型信号灯控制对应用程序的本地资源池的访问。</span><span class="sxs-lookup"><span data-stu-id="45748-108">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="45748-109">实例化信号量时，可以指定可同时进入信号量的最大线程数。</span><span class="sxs-lookup"><span data-stu-id="45748-109">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="45748-110">还可以指定可同时进入信号量的初始线程数。</span><span class="sxs-lookup"><span data-stu-id="45748-110">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="45748-111">这会定义信号量的计数。</span><span class="sxs-lookup"><span data-stu-id="45748-111">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="45748-112">每次线程进入信号量时，计数就会减少，每次线程释放信号量时都会递增。</span><span class="sxs-lookup"><span data-stu-id="45748-112">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="45748-113">为了进入信号量，线程会调用 <xref:System.Threading.SemaphoreSlim.Wait%2A> 或 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 重载之一。</span><span class="sxs-lookup"><span data-stu-id="45748-113">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="45748-114">为了释放信号量，它会调用 <xref:System.Threading.SemaphoreSlim.Release%2A> 重载之一。</span><span class="sxs-lookup"><span data-stu-id="45748-114">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="45748-115">当计数达到零时，对其中一个 `Wait` 方法的后续调用将会阻塞，直到其他线程释放该信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-115">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="45748-116">如果多个线程被阻止，则不保证在线程进入信号量时控制的顺序，如 FIFO 或 LIFO。</span><span class="sxs-lookup"><span data-stu-id="45748-116">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="45748-117">使用信号灯保护资源的代码的基本结构是：</span><span class="sxs-lookup"><span data-stu-id="45748-117">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="45748-118">当所有线程都已释放信号量后，计数将达到创建信号量时指定的最大值。</span><span class="sxs-lookup"><span data-stu-id="45748-118">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="45748-119">可从 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性获取信号量的计数。</span><span class="sxs-lookup"><span data-stu-id="45748-119">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45748-120"><xref:System.Threading.SemaphoreSlim> 类不会对 <xref:System.Threading.SemaphoreSlim.Wait%2A>、<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>和 <xref:System.Threading.SemaphoreSlim.Release%2A> 方法的调用强制执行线程或任务标识。</span><span class="sxs-lookup"><span data-stu-id="45748-120">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="45748-121">此外，如果使用 <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> 构造函数来实例化 <xref:System.Threading.SemaphoreSlim> 对象，<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性可能会超出构造函数设置的值。</span><span class="sxs-lookup"><span data-stu-id="45748-121">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="45748-122">编程人员应负责确保对 <xref:System.Threading.SemaphoreSlim.Wait%2A> 或 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 方法的调用与 <xref:System.Threading.SemaphoreSlim.Release%2A> 方法的调用进行适当配对。</span><span class="sxs-lookup"><span data-stu-id="45748-122">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45748-123">下面的示例创建一个信号量，其最大计数为三个线程，初始计数为零个线程。</span><span class="sxs-lookup"><span data-stu-id="45748-123">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="45748-124">该示例启动五个任务，所有任务块会等待信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-124">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="45748-125">主线程调用 <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> 重载，以将信号量计数增加到其最大值，这允许三个任务进入信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-125">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="45748-126">每次释放信号灯时，都将显示以前的信号量计数。</span><span class="sxs-lookup"><span data-stu-id="45748-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="45748-127">控制台消息跟踪信号量使用。</span><span class="sxs-lookup"><span data-stu-id="45748-127">Console messages track semaphore use.</span></span> <span data-ttu-id="45748-128">对于每个线程，会略微增加模拟的工作时间间隔，使输出更易于读取。</span><span class="sxs-lookup"><span data-stu-id="45748-128">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="45748-129"><see cref="T:System.Threading.SemaphoreSlim" /> 的所有公共和受保护成员都是线程安全的，并且可以从多个线程并发使用，但 <see cref="M:System.Threading.SemaphoreSlim.Dispose" />除外，只有在 <see cref="T:System.Threading.SemaphoreSlim" /> 上的所有其他操作都已完成时，才必须使用这些成员。</span><span class="sxs-lookup"><span data-stu-id="45748-129">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-130">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-130">Semaphore and SemaphoreSlim</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45748-131">初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="45748-131">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim initialCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="45748-132">可以同时授予的信号量的初始请求数。</span><span class="sxs-lookup"><span data-stu-id="45748-132">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="45748-133">初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 类的新实例，以指定可同时授予的请求的初始数量。</span><span class="sxs-lookup"><span data-stu-id="45748-133">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-134">`initialCount` 参数定义了输入可授予的信号量的并发请求数。</span><span class="sxs-lookup"><span data-stu-id="45748-134">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="45748-135">但是，它不定义可同时授予的请求的最大数量。</span><span class="sxs-lookup"><span data-stu-id="45748-135">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="45748-136">如果对 <xref:System.Threading.SemaphoreSlim.Release%2A> 方法的调用增加了超出 `initialCount`的 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性的值，则通过调用此构造函数实例化的 <xref:System.Threading.SemaphoreSlim> 对象不会引发 <xref:System.Threading.SemaphoreFullException> 异常。</span><span class="sxs-lookup"><span data-stu-id="45748-136">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="45748-137">如果调用的 <xref:System.Threading.SemaphoreSlim.Release%2A> 方法比 <xref:System.Threading.SemaphoreSlim.Wait%2A> 或 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 方法多，则会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="45748-137">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="45748-138">若要设置最大并发请求数以输入可授予的信号量，请调用 <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="45748-138">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-139"><paramref name="initialCount" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="45748-139"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-140">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-140">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int * int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim (initialCount, maxCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="45748-141">可以同时授予的信号量的初始请求数。</span><span class="sxs-lookup"><span data-stu-id="45748-141">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maxCount"><span data-ttu-id="45748-142">可以同时授予的信号量的最大请求数。</span><span class="sxs-lookup"><span data-stu-id="45748-142">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="45748-143">初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 类的新实例，同时指定可同时授予的请求的初始数量和最大数量。</span><span class="sxs-lookup"><span data-stu-id="45748-143">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-144"><paramref name="initialCount" /> 小于 0，或 <paramref name="initialCount" /> 大于 <paramref name="maxCount" />，或 <paramref name="maxCount" /> 小于等于 0。</span><span class="sxs-lookup"><span data-stu-id="45748-144"><paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-145">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-145">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableWaitHandle : System.Threading.WaitHandle" Usage="System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45748-146">返回一个可用于在信号量上等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="45748-146">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></summary>
        <value><span data-ttu-id="45748-147">可用于在信号量上等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="45748-147">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-148">仅当必须使用相同的等待句柄等待 SemaphoreSlim 与其他基于内核的同步对象一起使用时，才使用此属性。</span><span class="sxs-lookup"><span data-stu-id="45748-148">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="45748-149"><xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> 上的成功等待并不意味着在 <xref:System.Threading.SemaphoreSlim> 本身上成功等待，也不会降低信号量的计数。</span><span class="sxs-lookup"><span data-stu-id="45748-149">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="45748-150">在可用的等待句柄终止后，您应该具体等待 <xref:System.Threading.SemaphoreSlim>。</span><span class="sxs-lookup"><span data-stu-id="45748-150">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-151">已释放了 <see cref="T:System.Threading.SemaphoreSlim" />。</span><span class="sxs-lookup"><span data-stu-id="45748-151">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-152">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-152">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCount : int" Usage="System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45748-153">获取可以输入 <see cref="T:System.Threading.SemaphoreSlim" /> 对象的剩余线程数。</span><span class="sxs-lookup"><span data-stu-id="45748-153">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="45748-154">可以输入信号量的剩余线程数。</span><span class="sxs-lookup"><span data-stu-id="45748-154">The number of remaining threads that can enter the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-155"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性的初始值由对 <xref:System.Threading.SemaphoreSlim.%23ctor%2A> 类构造函数的调用设置。</span><span class="sxs-lookup"><span data-stu-id="45748-155">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="45748-156">每次调用 <xref:System.Threading.SemaphoreSlim.Wait%2A> 或 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 方法时，它都会递减，每次调用 <xref:System.Threading.SemaphoreSlim.Release%2A> 方法时都会递增。</span><span class="sxs-lookup"><span data-stu-id="45748-156">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-157">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-157">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45748-158">释放由 <see cref="T:System.Threading.SemaphoreSlim" /> 类的当前实例使用的资源。</span><span class="sxs-lookup"><span data-stu-id="45748-158">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="semaphoreSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45748-159">释放由 <see cref="T:System.Threading.SemaphoreSlim" /> 类的当前实例占用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="45748-159">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-160">在完成使用 `Dispose` 后，应调用 <xref:System.Threading.SemaphoreSlim>。</span><span class="sxs-lookup"><span data-stu-id="45748-160">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="45748-161">`Dispose` 方法使 <xref:System.Threading.SemaphoreSlim> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="45748-161">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="45748-162">调用 `Dispose`后，必须释放对 <xref:System.Threading.SemaphoreSlim> 的所有引用，以便垃圾回收器可以回收 <xref:System.Threading.SemaphoreSlim> 占用的内存。</span><span class="sxs-lookup"><span data-stu-id="45748-162">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="45748-163">有关详细信息，请参阅[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="45748-163">For more information, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45748-164">每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.Threading.SemaphoreSlim>。</span><span class="sxs-lookup"><span data-stu-id="45748-164">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="45748-165">否则，在垃圾回收器调用 <xref:System.Threading.SemaphoreSlim> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="45748-165">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-166">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-166">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="semaphoreSlim.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="45748-167">如果为 <see langword="true" />，则托管及非托管资源都释放；如果为 <see langword="false" />，则仅释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="45748-167"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="45748-168">释放由 <see cref="T:System.Threading.SemaphoreSlim" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="45748-168">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-169">与 <xref:System.Threading.SemaphoreSlim>的大多数成员不同，<xref:System.Threading.SemaphoreSlim.Dispose%2A> 不是线程安全的，并且不能与此实例的其他成员同时使用。</span><span class="sxs-lookup"><span data-stu-id="45748-169">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-170">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-170">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45748-171">释放 <see cref="T:System.Threading.SemaphoreSlim" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45748-171">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphoreSlim.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45748-172">释放 <see cref="T:System.Threading.SemaphoreSlim" /> 对象一次。</span><span class="sxs-lookup"><span data-stu-id="45748-172">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span></span></summary>
        <returns><span data-ttu-id="45748-173"><see cref="T:System.Threading.SemaphoreSlim" /> 的前一个计数。</span><span class="sxs-lookup"><span data-stu-id="45748-173">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-174">对 <xref:System.Threading.SemaphoreSlim.Release> 方法的调用会将 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性递增1。</span><span class="sxs-lookup"><span data-stu-id="45748-174">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="45748-175">如果在调用此方法之前，<xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性的值为零，则该方法还允许通过调用 <xref:System.Threading.SemaphoreSlim.Wait%2A> 或 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 方法来阻止一个线程或任务进入信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-175">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-176">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-176">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="45748-177"><see cref="T:System.Threading.SemaphoreSlim" /> 已达到其最大大小。</span><span class="sxs-lookup"><span data-stu-id="45748-177">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-178">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-178">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphoreSlim.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount"><span data-ttu-id="45748-179">退出信号量的次数。</span><span class="sxs-lookup"><span data-stu-id="45748-179">The number of times to exit the semaphore.</span></span></param>
        <summary><span data-ttu-id="45748-180">以指定的次数释放 <see cref="T:System.Threading.SemaphoreSlim" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45748-180">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span></span></summary>
        <returns><span data-ttu-id="45748-181"><see cref="T:System.Threading.SemaphoreSlim" /> 的前一个计数。</span><span class="sxs-lookup"><span data-stu-id="45748-181">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-182">对 <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> 方法的调用按 `releaseCount`递增 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="45748-182">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="45748-183">如果在调用此方法之前 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性的值为零，则该方法还允许 `releaseCount` 线程或任务通过调用 <xref:System.Threading.SemaphoreSlim.Wait%2A> 或 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 方法来进入信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-183">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-184">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-184">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-185"><paramref name="releaseCount" /> 小于 1。</span><span class="sxs-lookup"><span data-stu-id="45748-185"><paramref name="releaseCount" /> is less than 1.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="45748-186"><see cref="T:System.Threading.SemaphoreSlim" /> 已达到其最大大小。</span><span class="sxs-lookup"><span data-stu-id="45748-186">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-187">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-187">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45748-188">阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止。</span><span class="sxs-lookup"><span data-stu-id="45748-188">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="semaphoreSlim.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45748-189">阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止。</span><span class="sxs-lookup"><span data-stu-id="45748-189">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-190">如果线程或任务能够进入信号量，则会将 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="45748-190">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-191">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-191">The current instance has already been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-192">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-192">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="semaphoreSlim.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="45748-193">要等待的毫秒数，<see cref="F:System.Threading.Timeout.Infinite" />(-1) 表示无限等待，零表示测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-193">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="45748-194">阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，同时使用 32 位带符号整数来指定超时。</span><span class="sxs-lookup"><span data-stu-id="45748-194">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span></span></summary>
        <returns><span data-ttu-id="45748-195">如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45748-195"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="45748-196">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-196">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="45748-197">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-197">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-198">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-198">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="45748-199">如果线程或任务能够进入信号量，则会将 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="45748-199">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="45748-200">如果线程或任务在调用 <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> 时被阻止，并且 `millisecondsTimeout` 指定的超时间隔过期：</span><span class="sxs-lookup"><span data-stu-id="45748-200">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="45748-201">线程或任务不输入信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-201">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="45748-202"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性未减少。</span><span class="sxs-lookup"><span data-stu-id="45748-202">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-203"><paramref name="millisecondsTimeout" /> 是 -1 之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-203"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-204">已释放了 <see cref="T:System.Threading.SemaphoreSlim" />。</span><span class="sxs-lookup"><span data-stu-id="45748-204">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-205">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-205">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait (cancellationToken As CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="semaphoreSlim.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="45748-206">要观察的 <see cref="T:System.Threading.CancellationToken" /> 标记。</span><span class="sxs-lookup"><span data-stu-id="45748-206">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="45748-207">阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，同时观察 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="45748-207">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-208">如果线程或任务能够进入信号量，则会将 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="45748-208">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="45748-209">如果 `cancellationToken` 取消，则线程或任务不会进入信号量，并且 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性不会减少。</span><span class="sxs-lookup"><span data-stu-id="45748-209">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="45748-210">相反，方法会引发 <xref:System.OperationCanceledException> 异常。</span><span class="sxs-lookup"><span data-stu-id="45748-210">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="45748-211"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="45748-211"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-212">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-212">The current instance has already been disposed.</span></span>  
  
<span data-ttu-id="45748-213">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-213">-or-</span></span> 
<span data-ttu-id="45748-214">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</span><span class="sxs-lookup"><span data-stu-id="45748-214">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-215">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-215">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="45748-216">取消</span><span class="sxs-lookup"><span data-stu-id="45748-216">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="semaphoreSlim.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45748-217"><see cref="T:System.TimeSpan" /> 表示要等待的毫秒数，<see cref="T:System.TimeSpan" /> 表示要无无限等待的 -1 毫秒，<see cref="T:System.TimeSpan" /> 表示要测试句柄并立即返回的 0 毫秒。</span><span class="sxs-lookup"><span data-stu-id="45748-217">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="45748-218">阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，同时使用 <see cref="T:System.TimeSpan" /> 来指定超时。</span><span class="sxs-lookup"><span data-stu-id="45748-218">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span></span></summary>
        <returns><span data-ttu-id="45748-219">如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45748-219"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="45748-220">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-220">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="45748-221">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-221">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-222">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-222">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="45748-223">如果线程或任务能够进入信号量，则会将 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="45748-223">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="45748-224">如果线程或任务在调用 <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> 时被阻止，并且 `millisecondsTimeout` 指定的超时间隔过期：</span><span class="sxs-lookup"><span data-stu-id="45748-224">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="45748-225">线程或任务不输入信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-225">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="45748-226"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性未减少。</span><span class="sxs-lookup"><span data-stu-id="45748-226">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-227"><paramref name="timeout" /> 是除 -1 以外的负数，表示无限超时。</span><span class="sxs-lookup"><span data-stu-id="45748-227"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="45748-228">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-228">-or-</span></span>

<span data-ttu-id="45748-229"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-229"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-230">已释放 semaphoreSlim 实例。</span><span class="sxs-lookup"><span data-stu-id="45748-230">The semaphoreSlim instance has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-231">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-231">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="45748-232">要等待的毫秒数，<see cref="F:System.Threading.Timeout.Infinite" />(-1) 表示无限等待，零表示测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-232">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="45748-233">要观察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="45748-233">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="45748-234">阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，并使用 32 位带符号整数来指定超时，同时观察 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="45748-234">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="45748-235">如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45748-235"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="45748-236">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-236">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="45748-237">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-237">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-238">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-238">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="45748-239">如果线程或任务能够进入信号量，则会将 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="45748-239">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="45748-240">如果 `cancellationToken` 已取消，或者线程或任务在调用 <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> 时被阻止，并且 `millisecondsTimeout` 指定的超时时间间隔过期：</span><span class="sxs-lookup"><span data-stu-id="45748-240">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="45748-241">线程或任务不输入信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-241">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="45748-242"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性未减少。</span><span class="sxs-lookup"><span data-stu-id="45748-242">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="45748-243">如果 `cancellationToken` 取消，则该方法将引发 <xref:System.OperationCanceledException> 异常。</span><span class="sxs-lookup"><span data-stu-id="45748-243">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="45748-244"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="45748-244"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-245"><paramref name="millisecondsTimeout" /> 是除 -1 以外的负数，表示无限超时。</span><span class="sxs-lookup"><span data-stu-id="45748-245"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="45748-246">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-246">-or-</span></span>

<span data-ttu-id="45748-247"><paramref name="millisecondsTimeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-247"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-248">已释放 <see cref="T:System.Threading.SemaphoreSlim" /> 实例，或已释放创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="45748-248">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-249">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-249">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45748-250"><see cref="T:System.TimeSpan" /> 表示要等待的毫秒数，<see cref="T:System.TimeSpan" /> 表示要无无限等待的 -1 毫秒，<see cref="T:System.TimeSpan" /> 表示要测试句柄并立即返回的 0 毫秒。</span><span class="sxs-lookup"><span data-stu-id="45748-250">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="45748-251">要观察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="45748-251">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="45748-252">阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，并使用 <see cref="T:System.TimeSpan" /> 来指定超时，同时观察 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="45748-252">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="45748-253">如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45748-253"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="45748-254">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-254">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="45748-255">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-255">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-256">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-256">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="45748-257">如果线程或任务能够进入信号量，则会将 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="45748-257">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="45748-258">如果 `cancellationToken` 已取消，或者线程或任务在调用 <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> 时被阻止，并且 `millisecondsTimeout` 指定的超时时间间隔过期：</span><span class="sxs-lookup"><span data-stu-id="45748-258">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="45748-259">线程或任务不输入信号量。</span><span class="sxs-lookup"><span data-stu-id="45748-259">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="45748-260"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 属性未减少。</span><span class="sxs-lookup"><span data-stu-id="45748-260">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="45748-261">如果 `cancellationToken` 取消，则该方法将引发 <xref:System.OperationCanceledException> 异常。</span><span class="sxs-lookup"><span data-stu-id="45748-261">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="45748-262"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="45748-262"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-263"><paramref name="timeout" /> 是除 -1 以外的负数，表示无限超时。</span><span class="sxs-lookup"><span data-stu-id="45748-263"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="45748-264">-或-。</span><span class="sxs-lookup"><span data-stu-id="45748-264">-or-.</span></span>

<span data-ttu-id="45748-265"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-265"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-266">已释放 semaphoreSlim 实例。</span><span class="sxs-lookup"><span data-stu-id="45748-266">The semaphoreSlim instance has been disposed.</span></span>
          
<span data-ttu-id="45748-267">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-267">-or-</span></span>

<span data-ttu-id="45748-268">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</span><span class="sxs-lookup"><span data-stu-id="45748-268">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="45748-269">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="45748-269">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="45748-270">取消</span><span class="sxs-lookup"><span data-stu-id="45748-270">Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45748-271">输入 <see cref="T:System.Threading.SemaphoreSlim" /> 的异步等待。</span><span class="sxs-lookup"><span data-stu-id="45748-271">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : unit -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45748-272">输入 <see cref="T:System.Threading.SemaphoreSlim" /> 的异步等待。</span><span class="sxs-lookup"><span data-stu-id="45748-272">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <returns><span data-ttu-id="45748-273">输入信号量时完成任务。</span><span class="sxs-lookup"><span data-stu-id="45748-273">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-274">已释放了 <see cref="T:System.Threading.SemaphoreSlim" />。</span><span class="sxs-lookup"><span data-stu-id="45748-274">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="45748-275">要等待的毫秒数，<see cref="F:System.Threading.Timeout.Infinite" />(-1) 表示无限等待，零表示测试等待句柄状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-275">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="45748-276">输入 <see cref="T:System.Threading.SemaphoreSlim" /> 的异步等待，使用 32 位带符号整数度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="45748-276">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="45748-277">如果当前线程成功输入了 <see cref="T:System.Threading.SemaphoreSlim" />，则为将通过 <see langword="true" /> 的结果一起完成的任务，否则将通过 <see langword="false" /> 的结果完成。</span><span class="sxs-lookup"><span data-stu-id="45748-277">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-278">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-278">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="45748-279">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-279">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-280">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-280">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-281">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-281">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-282"><paramref name="millisecondsTimeout" /> 是除 -1 以外的负数，表示无限超时。</span><span class="sxs-lookup"><span data-stu-id="45748-282"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="45748-283">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-283">-or-</span></span> 
<span data-ttu-id="45748-284"><paramref name="millisecondsTimeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-284"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="45748-285">要观察的 <see cref="T:System.Threading.CancellationToken" /> 标记。</span><span class="sxs-lookup"><span data-stu-id="45748-285">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="45748-286">在观察 <see cref="T:System.Threading.CancellationToken" /> 时，输入 <see cref="T:System.Threading.SemaphoreSlim" /> 的异步等待。</span><span class="sxs-lookup"><span data-stu-id="45748-286">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="45748-287">输入信号量时完成任务。</span><span class="sxs-lookup"><span data-stu-id="45748-287">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-288">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-288">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="45748-289"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="45748-289"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45748-290"><see cref="T:System.TimeSpan" /> 表示要等待的毫秒数，<see cref="T:System.TimeSpan" /> 表示要无无限等待的 -1 毫秒，<see cref="T:System.TimeSpan" /> 表示要测试句柄并立即返回的 0 毫秒。</span><span class="sxs-lookup"><span data-stu-id="45748-290">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="45748-291">输入 <see cref="T:System.Threading.SemaphoreSlim" /> 的异步等待，使用 <see cref="T:System.TimeSpan" /> 度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="45748-291">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="45748-292">如果当前线程成功输入了 <see cref="T:System.Threading.SemaphoreSlim" />，则为将通过 <see langword="true" /> 的结果一起完成的任务，否则将通过 <see langword="false" /> 的结果完成。</span><span class="sxs-lookup"><span data-stu-id="45748-292">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-293">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-293">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="45748-294">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-294">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-295">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-295">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-296">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-296">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-297"><paramref name="timeout" /> 是除 -1 以外的负数，表示无限超时。</span><span class="sxs-lookup"><span data-stu-id="45748-297"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="45748-298">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-298">-or-</span></span> 
<span data-ttu-id="45748-299"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-299"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="45748-300">要等待的毫秒数，<see cref="F:System.Threading.Timeout.Infinite" />(-1) 表示无限等待，零表示测试等待句柄状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-300">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="45748-301">要观察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="45748-301">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="45748-302">在观察 <see cref="T:System.Threading.CancellationToken" /> 时，输入 <see cref="T:System.Threading.SemaphoreSlim" /> 的异步等待，使用 32 位带符号整数度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="45748-302">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="45748-303">如果当前线程成功输入了 <see cref="T:System.Threading.SemaphoreSlim" />，则为将通过 <see langword="true" /> 的结果一起完成的任务，否则将通过 <see langword="false" /> 的结果完成。</span><span class="sxs-lookup"><span data-stu-id="45748-303">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-304">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-304">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="45748-305">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-305">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-306">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-306">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-307"><paramref name="millisecondsTimeout" /> 是除 -1 以外的数字，表示无限超时。</span><span class="sxs-lookup"><span data-stu-id="45748-307"><paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="45748-308">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-308">-or-</span></span>

<span data-ttu-id="45748-309"><paramref name="millisecondsTimeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-309"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-310">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="45748-310">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="45748-311"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="45748-311"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="45748-312"><see cref="T:System.TimeSpan" /> 表示要等待的毫秒数，<see cref="T:System.TimeSpan" /> 表示要无无限等待的 -1 毫秒，<see cref="T:System.TimeSpan" /> 表示要测试句柄并立即返回的 0 毫秒。</span><span class="sxs-lookup"><span data-stu-id="45748-312">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="45748-313">要观察的 <see cref="T:System.Threading.CancellationToken" /> 标记。</span><span class="sxs-lookup"><span data-stu-id="45748-313">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="45748-314">在观察 <see cref="T:System.Threading.SemaphoreSlim" /> 时，输入 <see cref="T:System.TimeSpan" /> 的异步等待，使用 <see cref="T:System.Threading.CancellationToken" /> 度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="45748-314">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="45748-315">如果当前线程成功输入了 <see cref="T:System.Threading.SemaphoreSlim" />，则为将通过 <see langword="true" /> 的结果一起完成的任务，否则将通过 <see langword="false" /> 的结果完成。</span><span class="sxs-lookup"><span data-stu-id="45748-315">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45748-316">如果超时设置为-1 毫秒，则方法会无限期地等待。</span><span class="sxs-lookup"><span data-stu-id="45748-316">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="45748-317">如果超时设置为零毫秒，则方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="45748-317">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="45748-318">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="45748-318">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45748-319"><paramref name="timeout" /> 是除 -1 以外的负数，表示无限超时。</span><span class="sxs-lookup"><span data-stu-id="45748-319"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="45748-320">- 或 -</span><span class="sxs-lookup"><span data-stu-id="45748-320">-or-</span></span>

<span data-ttu-id="45748-321"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="45748-321"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="45748-322"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="45748-322"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45748-323">已释放了 <see cref="T:System.Threading.SemaphoreSlim" />。</span><span class="sxs-lookup"><span data-stu-id="45748-323">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
