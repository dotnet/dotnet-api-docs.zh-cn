<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4643c3358655a3ade484f1a3d02222956fc4536b" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94467053" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.ThreadPool" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.ThreadPool" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">一个对象，包含回调方法在每次执行时要使用的信息。</param>
    <param name="timedOut">如果 <see cref="T:System.Threading.WaitHandle" /> 超时，则为 <see langword="true" />；如果其终止，则为 <see langword="false" />。</param>
    <summary>表示当 <see cref="T:System.Threading.WaitHandle" /> 超时或终止时要调用的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> 表示一个回调方法，当注册的等待句柄超时或终止时，您希望执行此方法。 通过向构造函数传递回调方法来创建委托 <xref:System.Threading.WaitOrTimerCallback> 。 你的方法必须具有此处显示的签名。  
  
 通过 <xref:System.Threading.WaitOrTimerCallback> 将委托和传递到来创建已注册的等待句柄 <xref:System.Threading.WaitHandle> <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType> 。 每次 <xref:System.Threading.WaitHandle> 超时时或终止时，您的回调方法都将执行。  
  
  
> [!NOTE]
>  Visual Basic 用户可以省略 <xref:System.Threading.WaitOrTimerCallback> 构造函数，并且只需在将 `AddressOf` 回调方法传递给时使用运算符 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 。 Visual Basic 自动调用正确的委托构造函数。  
  
 如果要将信息传递到回调方法，请创建一个包含所需信息的对象，并在 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 创建已注册的等待句柄时将其传递到。 每次执行回调方法时， `state` 参数都包含此对象。  
  
 有关使用回调方法同步线程池线程的详细信息，请参阅 [托管线程池](/dotnet/standard/threading/the-managed-thread-pool)。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Threading.WaitOrTimerCallback> 委托表示在等待句柄终止时执行的回调方法。  
  
 该示例还演示了如何使用 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 方法在指定的等待句柄收到信号时执行指定的回调方法。 在此示例中，回调方法为 `WaitProc` ，等待句柄是 <xref:System.Threading.AutoResetEvent> 。  
  
 该示例定义了一个 `TaskInfo` 类，用于保存在执行时传递给回调的信息。 该示例创建一个 `TaskInfo` 对象，并为其分配一些字符串数据。 <xref:System.Threading.RegisteredWaitHandle>方法返回的将 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 分配给 `Handle` 对象的字段 `TaskInfo` ，以便回调方法有权访问 <xref:System.Threading.RegisteredWaitHandle> 。  
  
 除了 `TaskInfo` 对象之外，对方法的调用还 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 指定了 <xref:System.Threading.AutoResetEvent> 任务等待、 <xref:System.Threading.WaitOrTimerCallback> 表示 `WaitProc` 回调方法的委托、一秒的超时间隔和多个回调。  
  
 当主线程 <xref:System.Threading.AutoResetEvent> 通过调用其方法发出信号时 <xref:System.Threading.EventWaitHandle.Set%2A> ，将 <xref:System.Threading.WaitOrTimerCallback> 调用委托。 `WaitProc`方法测试 <xref:System.Threading.RegisteredWaitHandle> 以确定是否发生了超时。 如果回调是由于等待句柄已发出信号而调用的，则该方法将取消 `WaitProc` 注册 <xref:System.Threading.RegisteredWaitHandle> ，从而停止进一步的回调。 在超时情况下，任务将继续等待。 `WaitProc`方法通过将消息打印到控制台来结束。  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/threading/threads-and-threading">线程与线程处理</related>
    <related type="Article" href="/dotnet/standard/threading/the-managed-thread-pool">托管线程池</related>
  </Docs>
</Type>
