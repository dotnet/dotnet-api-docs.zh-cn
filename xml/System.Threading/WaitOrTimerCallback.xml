<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a7f9c5c2d80dc263f10e26517fcacbd8617b3c04" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86848552" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.ThreadPool" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state"><span data-ttu-id="0cc12-101">一个对象，包含回调方法在每次执行时要使用的信息。</span><span class="sxs-lookup"><span data-stu-id="0cc12-101">An object containing information to be used by the callback method each time it executes.</span></span></param>
    <param name="timedOut"><span data-ttu-id="0cc12-102">如果 <see cref="T:System.Threading.WaitHandle" /> 超时，则为 <see langword="true" />；如果其终止，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0cc12-102"><see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span></span></param>
    <summary><span data-ttu-id="0cc12-103">表示当 <see cref="T:System.Threading.WaitHandle" /> 超时或终止时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="0cc12-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0cc12-104"><xref:System.Threading.WaitOrTimerCallback> 表示一个回调方法，当注册的等待句柄超时或终止时，您希望执行此方法。</span><span class="sxs-lookup"><span data-stu-id="0cc12-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="0cc12-105">通过向构造函数传递回调方法来创建委托 <xref:System.Threading.WaitOrTimerCallback> 。</span><span class="sxs-lookup"><span data-stu-id="0cc12-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="0cc12-106">你的方法必须具有此处显示的签名。</span><span class="sxs-lookup"><span data-stu-id="0cc12-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="0cc12-107">通过 <xref:System.Threading.WaitOrTimerCallback> 将委托和传递到来创建已注册的等待句柄 <xref:System.Threading.WaitHandle> <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="0cc12-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0cc12-108">每次 <xref:System.Threading.WaitHandle> 超时时或终止时，您的回调方法都将执行。</span><span class="sxs-lookup"><span data-stu-id="0cc12-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="0cc12-109">Visual Basic 用户可以省略 <xref:System.Threading.WaitOrTimerCallback> 构造函数，并且只需在将 `AddressOf` 回调方法传递给时使用运算符 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0cc12-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="0cc12-110">Visual Basic 自动调用正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="0cc12-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="0cc12-111">如果要将信息传递到回调方法，请创建一个包含所需信息的对象，并在 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 创建已注册的等待句柄时将其传递到。</span><span class="sxs-lookup"><span data-stu-id="0cc12-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="0cc12-112">每次执行回调方法时， `state` 参数都包含此对象。</span><span class="sxs-lookup"><span data-stu-id="0cc12-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="0cc12-113">有关使用回调方法同步线程池线程的详细信息，请参阅 [托管线程池](/dotnet/standard/threading/the-managed-thread-pool)。</span><span class="sxs-lookup"><span data-stu-id="0cc12-113">For more information about using callback methods to synchronize thread pool threads, see [The managed thread pool](/dotnet/standard/threading/the-managed-thread-pool).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0cc12-114">下面的示例演示如何使用 <xref:System.Threading.WaitOrTimerCallback> 委托表示在等待句柄终止时执行的回调方法。</span><span class="sxs-lookup"><span data-stu-id="0cc12-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="0cc12-115">该示例还演示了如何使用 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 方法在指定的等待句柄收到信号时执行指定的回调方法。</span><span class="sxs-lookup"><span data-stu-id="0cc12-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="0cc12-116">在此示例中，回调方法为 `WaitProc` ，等待句柄是 <xref:System.Threading.AutoResetEvent> 。</span><span class="sxs-lookup"><span data-stu-id="0cc12-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="0cc12-117">该示例定义了一个 `TaskInfo` 类，用于保存在执行时传递给回调的信息。</span><span class="sxs-lookup"><span data-stu-id="0cc12-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="0cc12-118">该示例创建一个 `TaskInfo` 对象，并为其分配一些字符串数据。</span><span class="sxs-lookup"><span data-stu-id="0cc12-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="0cc12-119"><xref:System.Threading.RegisteredWaitHandle>方法返回的将 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 分配给 `Handle` 对象的字段 `TaskInfo` ，以便回调方法有权访问 <xref:System.Threading.RegisteredWaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="0cc12-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="0cc12-120">除了 `TaskInfo` 对象之外，对方法的调用还 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 指定了 <xref:System.Threading.AutoResetEvent> 任务等待、 <xref:System.Threading.WaitOrTimerCallback> 表示 `WaitProc` 回调方法的委托、一秒的超时间隔和多个回调。</span><span class="sxs-lookup"><span data-stu-id="0cc12-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="0cc12-121">当主线程 <xref:System.Threading.AutoResetEvent> 通过调用其方法发出信号时 <xref:System.Threading.EventWaitHandle.Set%2A> ，将 <xref:System.Threading.WaitOrTimerCallback> 调用委托。</span><span class="sxs-lookup"><span data-stu-id="0cc12-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="0cc12-122">`WaitProc`方法测试 <xref:System.Threading.RegisteredWaitHandle> 以确定是否发生了超时。</span><span class="sxs-lookup"><span data-stu-id="0cc12-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="0cc12-123">如果回调是由于等待句柄已发出信号而调用的，则该方法将取消 `WaitProc` 注册 <xref:System.Threading.RegisteredWaitHandle> ，从而停止进一步的回调。</span><span class="sxs-lookup"><span data-stu-id="0cc12-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="0cc12-124">在超时情况下，任务将继续等待。</span><span class="sxs-lookup"><span data-stu-id="0cc12-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="0cc12-125">`WaitProc`方法通过将消息打印到控制台来结束。</span><span class="sxs-lookup"><span data-stu-id="0cc12-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/threading/threads-and-threading"><span data-ttu-id="0cc12-126">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="0cc12-126">Threads and Threading</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/the-managed-thread-pool"><span data-ttu-id="0cc12-127">托管线程池</span><span class="sxs-lookup"><span data-stu-id="0cc12-127">The managed thread pool</span></span></related>
  </Docs>
</Type>
