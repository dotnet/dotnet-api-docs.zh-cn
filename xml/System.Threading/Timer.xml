<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d0582d4efcfd08ea59ebe6531a7f82eb9248913" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83518635" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Timer" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Timer" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供以指定的时间间隔对线程池线程执行方法的机制。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Threading.TimerCallback> 委托来指定要 <xref:System.Threading.Timer> 执行的方法。 <xref:System.Threading.TimerCallback> 委托的签名是：  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 计时器委托在构造计时器时指定，无法更改。 此方法不会在创建计时器的线程上执行;它在系统提供的 <xref:System.Threading.ThreadPool> 线程上执行。  
  
> [!TIP]
> .NET 包括四个名为 `Timer`的类，每个类都提供不同的功能：  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>，它将触发事件，并定期在一个或多个事件接收器中执行代码。 类旨在用作多线程环境中基于服务器的组件或服务组件;它没有用户界面，在运行时不可见。
> - <xref:System.Threading.Timer?displayProperty=nameWithType>，它按固定的时间间隔对线程池线程执行单个回调方法。 回调方法是在实例化计时器时定义的，无法更改。 与 <xref:System.Timers.Timer?displayProperty=nameWithType> 类一样，此类用作多线程环境中基于服务器的或服务组件;它没有用户界面，在运行时不可见。
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> （仅 .NET Framework），这是一个触发事件并定期在一个或多个事件接收器中执行代码的 Windows 窗体组件。 组件没有用户界面，旨在在单线程环境中使用;它在 UI 线程上执行。
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> （仅 .NET Framework），是一种定期执行异步或同步网页回发的 ASP.NET 组件。
  
 创建计时器时，您可以指定在第一次执行方法之前要等待的时间（截止时间），以及在后续执行之间等待的时间量（周期）。 <xref:System.Threading.Timer> 类与系统时钟具有相同的分辨率。 这意味着，如果时间段小于系统时钟的分辨率，则 <xref:System.Threading.TimerCallback> 委托将按系统时钟解析所定义的时间间隔执行，该时间大约为 Windows 7 和 Windows 8 系统上的15毫秒。 您可以使用 <xref:System.Threading.Timer.Change%2A> 方法更改截止时间和期限，或禁用计时器。  
  
> [!NOTE]
>  只要您使用 <xref:System.Threading.Timer>，就必须保留对它的引用。 与任何托管对象一样，当不存在任何引用时，<xref:System.Threading.Timer> 可能会进行垃圾回收。 即使 <xref:System.Threading.Timer> 仍处于活动状态，也不会阻止收集它。  
  
 当不再需要计时器时，请使用 <xref:System.Threading.Timer.Dispose%2A> 方法释放计时器持有的资源。 请注意，回调可能在调用 <xref:System.Threading.Timer.Dispose> 方法重载之后发生，因为计时器会将回调排队等待线程池线程执行。 您可以使用 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 方法重载来等待所有回调完成。  
  
 由计时器执行的回调方法应可重入，因为它是在 <xref:System.Threading.ThreadPool> 线程上调用的。 如果计时器间隔小于执行回调所需的时间，则可以在两个线程池线程上同时执行回调，或者，如果正在使用所有线程池线程，并且回调被多次排队。  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> 是一种简单的轻型计时器，它使用回调方法，并由线程池线程提供服务。 不建议与 Windows 窗体一起使用，因为它的回调不会在用户界面线程上发生。 <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 是用于 Windows 窗体的更好选择。 对于基于服务器的计时器功能，您可以考虑使用 <xref:System.Timers.Timer?displayProperty=nameWithType>，这会引发事件并具有其他功能。  
  
   
  
## Examples  
 下面的示例定义了一个 `StatusChecker` 类，该类包含其签名与 <xref:System.Threading.TimerCallback> 委托相同的 `CheckStatus` 方法。 `CheckStatus` 方法的 `state` 参数是用于同步应用程序线程和执行回调委托的线程池线程的 <xref:System.Threading.AutoResetEvent> 对象。 `StatusChecker` 类还包括两个状态变量：  
  
 `invokeCount`  
 指示回调方法被调用的次数。  
  
 `maxCount`  
 确定回调方法应调用的最大次数。  
  
 应用程序线程创建计时器，该计时器将等待一秒钟，然后每250毫秒执行 `CheckStatus` 回调方法。 然后，应用程序线程会阻塞，直到终止 <xref:System.Threading.AutoResetEvent> 对象为止。 当 `CheckStatus` 回调方法执行 `maxCount` 次时，它将调用 `AutoResetEvent.Set` 方法将 <xref:System.Threading.AutoResetEvent> 对象的状态设置为 "已终止"。 第一次发生这种情况时，应用程序线程调用 <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> 方法，以便现在每半秒执行一次回调方法。 再次阻塞，直到终止 <xref:System.Threading.AutoResetEvent> 对象。 发生这种情况时，将通过调用 <xref:System.Threading.Timer.Dispose%2A> 方法来销毁计时器，并终止应用程序。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">托管线程池</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see langword="Timer" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
        <summary>使用新创建的 <see cref="T:System.Threading.Timer" /> 对象作为状态对象，用一个无限周期和一个无限到期时间初始化 <see cref="T:System.Threading.Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要使用 <xref:System.Threading.Timer> 对象本身作为状态对象，请调用此构造函数。 创建计时器后，使用 <xref:System.Threading.Timer.Change%2A> 方法设置时间间隔和截止时间。  
  
 此构造函数指定第一次回调之前的无限到期时间和回调之间的无限间隔，以防止在 <xref:System.Threading.Timer> 对象分配给状态对象之前发生第一次回调。  
  
 为 `callback` 指定的方法应是可重入的，因为它是在 <xref:System.Threading.ThreadPool> 线程上调用的。 如果计时器间隔小于执行方法所需的时间，则可以在两个线程池线程上同时执行此方法，或者，如果正在使用所有线程池线程，则方法将被多次排队。  
  
   
  
## Examples  
 下面的代码示例创建一个新的计时器，并使用计时器本身作为状态对象。 <xref:System.Threading.Timer.Change%2A> 方法用于启动计时器。 计时器回调发生时，状态对象用于关闭计时器。  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">调用 <paramref name="callback" /> 之前延迟的时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">调用 <paramref name="callback" /> 的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>使用 32 位的有符号整数指定时间间隔，初始化 <see langword="Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dueTime` 经过一段时间后，在每次 `period` 时间间隔过后调用 `callback` 参数指定的委托。  
  
 如果 `dueTime` 为零（0），则会立即调用 `callback`。 如果 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>`dueTime`，则不会调用 `callback`;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 方法来重新启用它。  
  
 由于 <xref:System.Threading.Timer> 类与系统时钟的分辨率相同（在 Windows 7 和 Windows 8 系统上约为15毫秒），因此，如果 `period` 小于系统时钟的分辨率，则 `callback` 委托以系统时钟的分辨率定义的间隔执行。 如果 `period` 为零（0）或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 并且 `dueTime` 不 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则调用一次 `callback`计时器的定期行为处于禁用状态，但可以使用 <xref:System.Threading.Timer.Change%2A> 方法重新启用。  
  
 为 `callback` 指定的方法应是可重入的，因为它是在 <xref:System.Threading.ThreadPool> 线程上调用的。 如果计时器间隔小于执行方法所需的时间，则可以在两个线程池线程上同时执行此方法，或者，如果正在使用所有线程池线程，则方法将被多次排队。  
  
   
  
## Examples  
 下面的代码示例演示如何创建 `TimerCallback` 委托并初始化 `Timer` 类的新实例。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">调用 <paramref name="callback" /> 之前延迟的时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">调用 <paramref name="callback" /> 的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>用 64 位有符号整数来度量时间间隔，以初始化 <see langword="Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dueTime` 经过一段时间后，在每次 `period` 时间间隔过后调用 `callback` 参数指定的委托。  
  
 如果 `dueTime` 为零（0），则会立即调用 `callback`。 如果 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>`dueTime`，则不会调用 `callback`;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 方法来重新启用它。  
  
 由于 <xref:System.Threading.Timer> 类与系统时钟的分辨率相同（在 Windows 7 和 Windows 8 系统上约为15毫秒），因此，如果 `period` 小于系统时钟的分辨率，则 `callback` 委托以系统时钟的分辨率定义的间隔执行。 如果 `period` 为零（0）或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 并且 `dueTime` 不 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则调用一次 `callback`计时器的定期行为处于禁用状态，但可以使用 <xref:System.Threading.Timer.Change%2A> 方法重新启用。  
  
 为 `callback` 指定的方法应是可重入的，因为它是在 <xref:System.Threading.ThreadPool> 线程上调用的。 如果计时器间隔小于执行方法所需的时间，则可以在两个线程池线程上同时执行此方法，或者，如果正在使用所有线程池线程，则方法将被多次排队。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数大于 4294967294。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">表示要执行的方法的委托。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">在 <paramref name="callback" /> 参数调用其方法之前要延迟的时间量。 指定 -1 毫秒以防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">在调用 <paramref name="callback" /> 所引用的方法之间的时间间隔。 指定 -1 毫秒可以禁用定期终止。</param>
        <summary>初始化 <see langword="Timer" /> 类的新实例，使用 <see cref="T:System.TimeSpan" /> 值来度量时间间隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dueTime` 经过一段时间后，在每次 `period` 时间间隔过后调用 `callback` 参数指定的委托。  
  
 如果 `dueTime` 为零（0），则会立即调用 `callback`。 如果 `dueTime` 为负一（-1）毫秒，则不调用 `callback`;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 方法来重新启用它。  
  
 由于 <xref:System.Threading.Timer> 类与系统时钟的分辨率相同（在 Windows 7 和 Windows 8 系统上约为15毫秒），因此，如果 `period` 小于系统时钟的分辨率，则 `callback` 委托以系统时钟的分辨率定义的间隔执行。 如果 `period` 为零（0）或负一（-1）毫秒并且 `dueTime` 为正，则将调用 `callback` 一次;计时器的定期行为处于禁用状态，但可以使用 <xref:System.Threading.Timer.Change%2A> 方法重新启用。  
  
 为 `callback` 指定的方法应是可重入的，因为它是在 <xref:System.Threading.ThreadPool> 线程上调用的。 如果计时器间隔小于执行方法所需的时间，则可以在两个线程池线程上同时执行此方法，或者，如果正在使用所有线程池线程，则方法将被多次排队。  
  
   
  
## Examples  
 下面的代码示例演示如何创建 `TimerCallback` 委托并初始化 `Timer` 类的新实例。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> 或 <paramref name="period" /> 值中的毫秒数为负并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />，或者大于 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback">表示要执行的方法的委托。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">调用 <paramref name="callback" /> 之前延迟的时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">调用 <paramref name="callback" /> 的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>用 32 位无符号整数来度量时间间隔，以初始化 <see langword="Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dueTime` 经过一段时间后，在每次 `period` 时间间隔过后调用 `callback` 参数指定的委托。  
  
 如果 `dueTime` 为零（0），则会立即调用 `callback`。 如果 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>`dueTime`，则不会调用 `callback`;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 方法来重新启用它。  
  
 由于 <xref:System.Threading.Timer> 类与系统时钟的分辨率相同（在 Windows 7 和 Windows 8 系统上约为15毫秒），因此，如果 `period` 小于系统时钟的分辨率，则 `callback` 委托以系统时钟的分辨率定义的间隔执行。 如果 `period` 为零（0）或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 并且 `dueTime` 不 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则调用一次 `callback`计时器的定期行为处于禁用状态，但可以使用 <xref:System.Threading.Timer.Change%2A> 方法重新启用。  
  
 为 `callback` 指定的方法应是可重入的，因为它是在 <xref:System.Threading.ThreadPool> 线程上调用的。 如果计时器间隔小于执行方法所需的时间，则可以在两个线程池线程上同时执行此方法，或者，如果正在使用所有线程池线程，则方法将被多次排队。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static long ActiveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 ActiveCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Timer.ActiveCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long ActiveCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveCount : int64" Usage="System.Threading.Timer.ActiveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前活动的计时器计数。 活动计数器注册为在未来某一时间点进行计时且尚未取消。</summary>
        <value>当前处于活动状态的计时器的数目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>更改计时器的启动时间和方法调用之间的间隔。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。 指定零 (0) 可立即重新启动计时器。</param>
        <param name="period">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的间隔，用 32 位有符号整数度量时间间隔。</summary>
        <returns>如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回调方法在 `dueTime` 过去之后调用一次，并在每次 `period` 指定的时间间隔过后调用。  
  
 如果 `dueTime` 为零（0），则会立即调用回调方法。 如果 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>`dueTime`，则永远不会调用回调方法;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `dueTime`指定正值来重新启用它。  
  
 如果 `period` 为零（0）或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，而 `dueTime` 未 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则调用一次回调方法;计时器的定期行为处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `period`指定正值来重新启用它。  
  
 可以从 <xref:System.Threading.TimerCallback> 委托调用 <xref:System.Threading.Timer.Change%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何启动一个 `Timer`，并在调用数后，更改其时间段。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 已被释放。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。 指定零 (0) 可立即重新启动计时器。  此值必须小于或等于 4294967294。</param>
        <param name="period">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的间隔，用 64 位有符号整数度量时间间隔。</summary>
        <returns>如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回调方法在 `dueTime` 过去之后调用一次，并在每次 `period` 指定的时间间隔过后调用。  
  
 如果 `dueTime` 为零（0），则会立即调用回调方法。 如果 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>`dueTime`，则永远不会调用回调方法;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `dueTime`指定正值来重新启用它。  
  
 如果 `period` 为零（0）或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，而 `dueTime` 未 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则调用一次回调方法;计时器的定期行为处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `period`指定正值来重新启用它。  
  
 可以从 <xref:System.Threading.TimerCallback> 委托调用 <xref:System.Threading.Timer.Change%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 已被释放。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> 或 <paramref name="period" /> 小于 -1。
        
- 或 -

<paramref name="dueTime" /> 或 <paramref name="period" /> 大于 4294967294。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">一个 <see cref="T:System.TimeSpan" />，表示在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量。 指定负 -1 毫秒以防止计时器重新启动。 指定零 (0) 可立即重新启动计时器。</param>
        <param name="period">在构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法调用之间的时间间隔。 指定 -1 毫秒可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的时间间隔，使用 <see cref="T:System.TimeSpan" /> 值度量时间间隔。</summary>
        <returns>如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回调方法在 `dueTime` 过去之后调用一次，并在每次 `period` 指定的时间间隔过后调用。  
  
 如果 `dueTime` 为零（0），则会立即调用回调方法。 如果 `dueTime` 为负一（-1）毫秒，则永远不会调用回调方法;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `dueTime`指定正值来重新启用它。  
  
 如果 `period` 为零（0）或负一（-1）毫秒，并且 `dueTime` 为正，则调用一次回调方法;计时器的定期行为处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `period`指定大于零的值来重新启用它。  
  
 可以从 <xref:System.Threading.TimerCallback> 委托调用 <xref:System.Threading.Timer.Change%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何启动一个 `Timer`，并在调用数后，更改其时间段。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 已被释放。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）小于 -1。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）大于 4294967294。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。 指定零 (0) 可立即重新启动计时器。</param>
        <param name="period">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的间隔，用 32 位无符号整数度量时间间隔。</summary>
        <returns>如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回调方法在 `dueTime` 过去之后调用一次，并在每次 `period` 指定的时间间隔过后调用。  
  
 如果 `dueTime` 为零（0），则会立即调用回调方法。 如果 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>`dueTime`，则永远不会调用回调方法;计时器处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `dueTime`指定正值来重新启用它。  
  
 如果 `period` 为零（0）或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，而 `dueTime` 未 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则调用一次回调方法;计时器的定期行为处于禁用状态，但可以通过调用 <xref:System.Threading.Timer.Change%2A> 并为 `period`指定正值来重新启用它。  
  
 可以从 <xref:System.Threading.TimerCallback> 委托调用 <xref:System.Threading.Timer.Change%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 已被释放。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用 `Dispose` 允许出于其他目的重新分配 <xref:System.Threading.Timer> 所使用的资源。 有关 `Dispose`的详细信息，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。  
  
> [!NOTE]
>  回调可以在调用 <xref:System.Threading.Timer.Dispose> 方法重载之后发生，因为计时器会将回调排队等待线程池线程执行。 您可以使用 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 方法重载来等待所有回调完成。  
  
   
  
## Examples  
 下面的代码示例演示如何释放 `Timer`占用的资源。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="notifyObject">释放完 <see langword="Timer" /> 时要发出其信号的 <see cref="T:System.Threading.WaitHandle" />。</param>
        <summary>释放 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源并在释放完计时器时发出信号。</summary>
        <returns>如果函数成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用 `Dispose` 允许出于其他目的重新分配 <xref:System.Threading.Timer> 所使用的资源。 有关 `Dispose`的详细信息，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。  
  
 此方法完成时，它会发出 `notifyObject` 参数指定的 <xref:System.Threading.WaitHandle>。如果希望在确定计时器已释放之前能够阻止，请使用 <xref:System.Threading.Timer.Dispose%2A> 方法的此重载。 直到当前排队的所有回调都完成后，才会释放计时器。  
  
> [!NOTE]
>  如果回调使用 <xref:System.Threading.Timer.Change%2A> 方法将 `dueTime` 参数设置为零，则在调用 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 方法重载时，可能会出现争用条件：如果计时器在将新回调排队之前，<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 方法重载检测到没有已排队的回调，<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 将继续阻塞;否则，将在新的回调排队时释放计时器，并在新回调调用 <xref:System.Threading.Timer.Change%2A> 方法时引发 <xref:System.ObjectDisposedException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notifyObject" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">计时器</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</summary>
        <returns>当所有与计时器相关联的工作停止时完成的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
