<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a441d5271a79b3a08175a9e37951d78b9b29937" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83967376" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Tasks" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="367c8-101">传播应取消操作的通知。</span><span class="sxs-lookup"><span data-stu-id="367c8-101">Propagates notification that operations should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-102"><xref:System.Threading.CancellationToken> 在线程、线程池工作项或 <xref:System.Threading.Tasks.Task> 对象之间启用协作取消。</span><span class="sxs-lookup"><span data-stu-id="367c8-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="367c8-103">可以通过实例化一个 <xref:System.Threading.CancellationTokenSource> 对象来创建取消标记，该对象管理从其 <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> 属性检索到的取消标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="367c8-104">然后，将取消标记传递给应接收取消通知的任意数量的线程、任务或操作。</span><span class="sxs-lookup"><span data-stu-id="367c8-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="367c8-105">标记无法用于启动取消。</span><span class="sxs-lookup"><span data-stu-id="367c8-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="367c8-106">如果拥有的对象调用 <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>，则取消标记的每个副本上的 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 属性都设置为 "`true`"。</span><span class="sxs-lookup"><span data-stu-id="367c8-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="367c8-107">接收通知的对象可以采用任何适当的方式进行响应。</span><span class="sxs-lookup"><span data-stu-id="367c8-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="367c8-108">有关详细信息和代码示例，请参阅[托管线程中的取消](/dotnet/standard/threading/cancellation-in-managed-threads)。</span><span class="sxs-lookup"><span data-stu-id="367c8-108">For more information and code examples see [Cancellation in Managed Threads](/dotnet/standard/threading/cancellation-in-managed-threads).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="367c8-109">下面的示例使用随机数生成器来模拟数据收集应用程序，该应用程序从第11个不同乐器读取10个整数值。</span><span class="sxs-lookup"><span data-stu-id="367c8-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="367c8-110">如果值为零，则指示度量值对一个检测失败，在这种情况下，应取消该操作，而不应计算整体平均值。</span><span class="sxs-lookup"><span data-stu-id="367c8-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
<span data-ttu-id="367c8-111">为了处理操作的可能取消，此示例实例化一个 <xref:System.Threading.CancellationTokenSource> 对象，该对象生成一个传递到 <xref:System.Threading.Tasks.TaskFactory> 对象的取消标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token that's passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="367c8-112">相反，<xref:System.Threading.Tasks.TaskFactory> 对象将取消标记传递给负责收集特定检测的读取的每个任务。</span><span class="sxs-lookup"><span data-stu-id="367c8-112">In turn, the <xref:System.Threading.Tasks.TaskFactory> object passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="367c8-113">调用 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> 方法，以确保仅在成功收集所有读数后计算平均值。</span><span class="sxs-lookup"><span data-stu-id="367c8-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="367c8-114">如果任务由于被取消而未完成，<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> 方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="367c8-114">If a task has not completed because it was cancelled, the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="367c8-115"><see cref="T:System.Threading.CancellationToken" /> 的所有公共和受保护成员都是线程安全的，可从多个线程并发使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-116">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-116">Cancellation</span></span></related>
    <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-117">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-117">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled"><span data-ttu-id="367c8-118">标记的已取消状态。</span><span class="sxs-lookup"><span data-stu-id="367c8-118">The canceled state for the token.</span></span></param>
        <summary><span data-ttu-id="367c8-119">初始化 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-119">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-120">使用此构造函数创建的标记将保留 `canceled` 参数指定的已取消状态。</span><span class="sxs-lookup"><span data-stu-id="367c8-120">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="367c8-121">如果 `false``canceled`，<xref:System.Threading.CancellationToken.CanBeCanceled%2A> 和 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 将 `false`。</span><span class="sxs-lookup"><span data-stu-id="367c8-121">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="367c8-122">如果 `true``canceled`，<xref:System.Threading.CancellationToken.CanBeCanceled%2A> 和 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 将 `true`。</span><span class="sxs-lookup"><span data-stu-id="367c8-122">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-123">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-123">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-124">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-124">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="367c8-125">获取此标记是否能处于已取消状态。</span><span class="sxs-lookup"><span data-stu-id="367c8-125">Gets whether this token is capable of being in the canceled state.</span></span></summary>
        <value><span data-ttu-id="367c8-126">如果此令牌能够处于已取消状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-126"><see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-127">如果 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 返回 `false`，则保证令牌永远不会转换为已取消状态，这意味着 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 绝不会返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="367c8-127">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="367c8-128">静态 <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> 属性返回无法取消的取消标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-128">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="367c8-129">您可以选择使用此属性来确定在检查 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 属性的值之前是否可以取消取消标记，以确定是否已取消。</span><span class="sxs-lookup"><span data-stu-id="367c8-129">You can optionally use this property to determine whether a cancellation token can be canceled before examining the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-130">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-130">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-131">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-131">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="367c8-132">确定当前的 <see cref="T:System.Threading.CancellationToken" /> 实例是否等于指定的标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-132">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="367c8-133">要与此实例进行比较的其他对象。</span><span class="sxs-lookup"><span data-stu-id="367c8-133">The other object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="367c8-134">确定当前的 <see cref="T:System.Threading.CancellationToken" /> 实例是否等于指定的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-134">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="367c8-135">如果 <paramref name="other" /> 是 <see cref="T:System.Threading.CancellationToken" /> 且这两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-135"><see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="367c8-136">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="367c8-136">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="367c8-137">如果满足以下任一条件，则两个取消标记相等：</span><span class="sxs-lookup"><span data-stu-id="367c8-137">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="367c8-138">它们与相同的 <xref:System.Threading.CancellationTokenSource>关联。</span><span class="sxs-lookup"><span data-stu-id="367c8-138">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="367c8-139">它们都是从公共 <xref:System.Threading.CancellationToken> 构造函数构造的，它们的 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 值相等。</span><span class="sxs-lookup"><span data-stu-id="367c8-139">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="367c8-140">这两个取消标记的值都是 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="367c8-140">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-141">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-141">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-142">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-142">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-143">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-143">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="367c8-144">要与此实例进行比较的其他 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-144">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="367c8-145">确定当前的 <see cref="T:System.Threading.CancellationToken" /> 实例是否等于指定的标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-145">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
        <returns><span data-ttu-id="367c8-146">如果实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-146"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="367c8-147">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="367c8-147">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="367c8-148">如果满足以下任一条件，则两个取消标记相等：</span><span class="sxs-lookup"><span data-stu-id="367c8-148">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="367c8-149">它们与相同的 <xref:System.Threading.CancellationTokenSource>关联。</span><span class="sxs-lookup"><span data-stu-id="367c8-149">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="367c8-150">它们都是从公共 <xref:System.Threading.CancellationToken> 构造函数构造的，它们的 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 值相等。</span><span class="sxs-lookup"><span data-stu-id="367c8-150">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="367c8-151">这两个取消标记的值都是 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="367c8-151">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-152">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-152">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-153">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-153">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="367c8-154">作为 <see cref="T:System.Threading.CancellationToken" /> 的哈希函数。</span><span class="sxs-lookup"><span data-stu-id="367c8-154">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="367c8-155">当前 <see cref="T:System.Threading.CancellationToken" /> 实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="367c8-155">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="367c8-156">获取是否已请求取消此标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-156">Gets whether cancellation has been requested for this token.</span></span></summary>
        <value><span data-ttu-id="367c8-157">如果此令牌已请求取消，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-157"><see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-158">此属性指示是否已为此标记请求取消，无论是通过最初以已取消状态构造的令牌，还是通过对令牌的关联 <xref:System.Threading.CancellationTokenSource>调用 <xref:System.Threading.CancellationTokenSource.Cancel%2A>。</span><span class="sxs-lookup"><span data-stu-id="367c8-158">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="367c8-159">如果 `true`此属性，则它仅保证已请求取消。</span><span class="sxs-lookup"><span data-stu-id="367c8-159">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="367c8-160">它不保证每个已注册的处理程序已完成执行，也不保证取消请求已完成传播到所有已注册的处理程序。</span><span class="sxs-lookup"><span data-stu-id="367c8-160">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="367c8-161">可能需要更多的同步，尤其是在同时取消相关对象的情况下。</span><span class="sxs-lookup"><span data-stu-id="367c8-161">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="367c8-162">下面是一个简单的示例，它在 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 属性返回 `true`之前执行服务器进程。</span><span class="sxs-lookup"><span data-stu-id="367c8-162">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="367c8-163">该示例实例化一个 <xref:System.Threading.CancellationTokenSource> 对象，该对象控制对取消标记的访问。</span><span class="sxs-lookup"><span data-stu-id="367c8-163">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="367c8-164">然后，它定义了两个线程过程。</span><span class="sxs-lookup"><span data-stu-id="367c8-164">It then defines two thread procedures.</span></span> <span data-ttu-id="367c8-165">第一个定义为用于汇集键盘的 lambda 表达式，并在按 "C" 键时调用 <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> 将取消标记设置为 "已取消" 状态。</span><span class="sxs-lookup"><span data-stu-id="367c8-165">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="367c8-166">第二种方法是参数化方法，`ServerClass.StaticMethod`执行循环，直到 `true`<xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="367c8-166">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="367c8-167">然后，主线程启动两个线程和块，直到执行 `ServerClass.StaticMethod` 方法的线程终止。</span><span class="sxs-lookup"><span data-stu-id="367c8-167">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-168">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-168">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-169">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-169">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="367c8-170">返回一个空 <see cref="T:System.Threading.CancellationToken" /> 值。</span><span class="sxs-lookup"><span data-stu-id="367c8-170">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span></span></summary>
        <value><span data-ttu-id="367c8-171">一个空取消标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-171">An empty cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-172">此属性返回的取消标记无法取消;也就是说，它的 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 属性是 `false`的。</span><span class="sxs-lookup"><span data-stu-id="367c8-172">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="367c8-173">你还可以使用C# [default （CancellationToken）](/dotnet/csharp/language-reference/keywords/default)语句创建空取消标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-173">You can also use the C#  [default(CancellationToken)](/dotnet/csharp/language-reference/keywords/default) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="367c8-174">两个空取消标记始终相等。</span><span class="sxs-lookup"><span data-stu-id="367c8-174">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-175">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-175">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-176">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-176">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="367c8-177">第一个实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-177">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="367c8-178">第二个实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-178">The second instance.</span></span></param>
        <summary><span data-ttu-id="367c8-179">确定两个 <see cref="T:System.Threading.CancellationToken" /> 实例是否相等。</span><span class="sxs-lookup"><span data-stu-id="367c8-179">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="367c8-180">如果实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。有关详细信息，请参阅备注部分。</span><span class="sxs-lookup"><span data-stu-id="367c8-180"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="367c8-181">如果满足以下任一条件，则两个取消标记相等：</span><span class="sxs-lookup"><span data-stu-id="367c8-181">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="367c8-182">它们与相同的 <xref:System.Threading.CancellationTokenSource>关联。</span><span class="sxs-lookup"><span data-stu-id="367c8-182">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="367c8-183">它们都是从公共 <xref:System.Threading.CancellationToken> 构造函数构造的，它们的 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 值相等。</span><span class="sxs-lookup"><span data-stu-id="367c8-183">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="367c8-184">这两个取消标记的值都是 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="367c8-184">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-185">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-185">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-186">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-186">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-187">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-187">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="367c8-188">第一个实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-188">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="367c8-189">第二个实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-189">The second instance.</span></span></param>
        <summary><span data-ttu-id="367c8-190">确定两个 <see cref="T:System.Threading.CancellationToken" /> 实例是否不相等。</span><span class="sxs-lookup"><span data-stu-id="367c8-190">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="367c8-191">如果实例不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-191"><see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="367c8-192">有关相等的定义，请参阅 <xref:System.Threading.CancellationToken.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="367c8-192">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-193">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-193">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-194">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-194">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-195">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-195">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="367c8-196">注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-196">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-197">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-197">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-198">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-198">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="367c8-199">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <summary><span data-ttu-id="367c8-200">注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-200">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="367c8-201">可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-201">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-202">如果此标记已处于 "已取消" 状态，则委托将立即和同步运行。</span><span class="sxs-lookup"><span data-stu-id="367c8-202">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="367c8-203">此方法调用将传播委托生成的任何异常。</span><span class="sxs-lookup"><span data-stu-id="367c8-203">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="367c8-204">当前 <xref:System.Threading.ExecutionContext> 与委托一起捕获，并将在执行时使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-204">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="367c8-205">不捕获当前 <xref:System.Threading.SynchronizationContext>。</span><span class="sxs-lookup"><span data-stu-id="367c8-205">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-206">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-206">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="367c8-207"><paramref name="callback" /> 为 null。</span><span class="sxs-lookup"><span data-stu-id="367c8-207"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-208">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-208">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-209">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-209">Task Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-register-callbacks-for-cancellation-requests"><span data-ttu-id="367c8-210">如何：注册取消请求的回调</span><span class="sxs-lookup"><span data-stu-id="367c8-210">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="367c8-211">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-211">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="367c8-212">一个值，该值指示是否捕获当前 <see cref="T:System.Threading.SynchronizationContext" /> 并在调用 <paramref name="callback" /> 时使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-212">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="367c8-213">注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-213">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="367c8-214">可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-214">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-215">如果此标记已处于 "已取消" 状态，则委托将立即和同步运行。</span><span class="sxs-lookup"><span data-stu-id="367c8-215">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="367c8-216">此方法调用将传播委托生成的任何异常。</span><span class="sxs-lookup"><span data-stu-id="367c8-216">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="367c8-217">当前 <xref:System.Threading.ExecutionContext> 与委托一起捕获，并将在执行时使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-217">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="367c8-218">如果 `true``useSynchronizationContext`，则当前 <xref:System.Threading.SynchronizationContext>（如果存在）也将与委托一起捕获，并在执行时使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-218">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="367c8-219">否则，将不会捕获 <xref:System.Threading.SynchronizationContext>。</span><span class="sxs-lookup"><span data-stu-id="367c8-219">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-220">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-220">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="367c8-221"><paramref name="callback" /> 为 null。</span><span class="sxs-lookup"><span data-stu-id="367c8-221"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-222">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-222">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-223">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-223">Task Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-register-callbacks-for-cancellation-requests"><span data-ttu-id="367c8-224">如何：注册取消请求的回调</span><span class="sxs-lookup"><span data-stu-id="367c8-224">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="367c8-225">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-225">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="367c8-226">要在调用委托时传递给 <paramref name="callback" /> 的状态。</span><span class="sxs-lookup"><span data-stu-id="367c8-226">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="367c8-227">这可能为 null。</span><span class="sxs-lookup"><span data-stu-id="367c8-227">This may be null.</span></span></param>
        <summary><span data-ttu-id="367c8-228">注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-228">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="367c8-229">可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-229">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-230">如果此标记已处于 "已取消" 状态，则委托将立即和同步运行。</span><span class="sxs-lookup"><span data-stu-id="367c8-230">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="367c8-231">此方法调用将传播委托生成的任何异常。</span><span class="sxs-lookup"><span data-stu-id="367c8-231">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="367c8-232">当前 <xref:System.Threading.ExecutionContext> 与委托一起捕获，并将在执行时使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-232">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="367c8-233">不捕获当前 <xref:System.Threading.SynchronizationContext>。</span><span class="sxs-lookup"><span data-stu-id="367c8-233">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-234">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-234">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="367c8-235"><paramref name="callback" /> 为 null。</span><span class="sxs-lookup"><span data-stu-id="367c8-235"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-236">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-236">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-237">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-237">Task Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-register-callbacks-for-cancellation-requests"><span data-ttu-id="367c8-238">如何：注册取消请求的回调</span><span class="sxs-lookup"><span data-stu-id="367c8-238">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="367c8-239">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-239">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="367c8-240">要在调用委托时传递给 <paramref name="callback" /> 的状态。</span><span class="sxs-lookup"><span data-stu-id="367c8-240">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="367c8-241">这可能为 null。</span><span class="sxs-lookup"><span data-stu-id="367c8-241">This may be null.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="367c8-242">一个布尔值，该值指示是否捕获当前 <see cref="T:System.Threading.SynchronizationContext" /> 并在调用 <paramref name="callback" /> 时使用它。</span><span class="sxs-lookup"><span data-stu-id="367c8-242">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="367c8-243">注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-243">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="367c8-244">可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="367c8-244">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-245">如果此标记已处于 "已取消" 状态，则委托将立即和同步运行。</span><span class="sxs-lookup"><span data-stu-id="367c8-245">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="367c8-246">此方法调用将传播委托生成的任何异常。</span><span class="sxs-lookup"><span data-stu-id="367c8-246">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="367c8-247">当前 <xref:System.Threading.ExecutionContext> 与委托一起捕获，并将在执行时使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-247">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="367c8-248">如果 `true``useSynchronizationContext`，则当前 <xref:System.Threading.SynchronizationContext>（如果存在）也将与委托一起捕获，并在执行时使用。</span><span class="sxs-lookup"><span data-stu-id="367c8-248">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="367c8-249">否则，将不会捕获 <xref:System.Threading.SynchronizationContext>。</span><span class="sxs-lookup"><span data-stu-id="367c8-249">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-250">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-250">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="367c8-251"><paramref name="callback" /> 为 null。</span><span class="sxs-lookup"><span data-stu-id="367c8-251"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-252">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-252">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-253">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-253">Task Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-register-callbacks-for-cancellation-requests"><span data-ttu-id="367c8-254">如何：注册取消请求的回调</span><span class="sxs-lookup"><span data-stu-id="367c8-254">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="367c8-255">如果已请求取消此标记，则引发 <see cref="T:System.OperationCanceledException" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-255">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-256">此方法提供等效于的功能：</span><span class="sxs-lookup"><span data-stu-id="367c8-256">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="367c8-257">C#</span><span class="sxs-lookup"><span data-stu-id="367c8-257">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="367c8-258">已请求取消此标记。</span><span class="sxs-lookup"><span data-stu-id="367c8-258">The token has had cancellation requested.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-259">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-259">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-260">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-260">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-261">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-261">Task Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-cancel-a-task-and-its-children"><span data-ttu-id="367c8-262">如何：取消任务及其子级</span><span class="sxs-lookup"><span data-stu-id="367c8-262">How to: Cancel a Task and Its Children</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegister">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration UnsafeRegister (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration UnsafeRegister(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnsafeRegister (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration UnsafeRegister(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.UnsafeRegister : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.UnsafeRegister (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="367c8-263">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-263">The delegate to execute when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="367c8-264">要在调用委托时传递给 <paramref name="callback" /> 的状态。</span><span class="sxs-lookup"><span data-stu-id="367c8-264">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span>  <span data-ttu-id="367c8-265">这可能是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-265">This may be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="367c8-266">注册一个在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="367c8-266">Registers a delegate that is called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="367c8-267">可用于注销回调的对象。</span><span class="sxs-lookup"><span data-stu-id="367c8-267">An object that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
            If this token is already in the canceled state, the delegate is run immediately and synchronously.
            Any exception the delegate generates is propagated out of this method call.
            
<span data-ttu-id="367c8-268">不会捕获 <xref:System.Threading.ExecutionContext>，也不会流向回调调用。</span><span class="sxs-lookup"><span data-stu-id="367c8-268">The  <xref:System.Threading.ExecutionContext> is not captured nor flowed to the callback's invocation.</span></span>
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="367c8-269"><paramref name="callback" /> 为 null。</span><span class="sxs-lookup"><span data-stu-id="367c8-269"><paramref name="callback" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="367c8-270">获取在取消标记时收到信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-270">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></summary>
        <value><span data-ttu-id="367c8-271">在取消标记时收到信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="367c8-271">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="367c8-272">访问此属性将导致 <xref:System.Threading.WaitHandle> 实例化。</span><span class="sxs-lookup"><span data-stu-id="367c8-272">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="367c8-273">最好只在必要时使用此属性，然后在最早的机会中释放关联的 <xref:System.Threading.CancellationTokenSource> 实例（释放源将释放此分配的句柄）。</span><span class="sxs-lookup"><span data-stu-id="367c8-273">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="367c8-274">不应直接关闭或释放该句柄。</span><span class="sxs-lookup"><span data-stu-id="367c8-274">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="367c8-275">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="367c8-275">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/threading/cancellation-in-managed-threads"><span data-ttu-id="367c8-276">取消</span><span class="sxs-lookup"><span data-stu-id="367c8-276">Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/task-cancellation"><span data-ttu-id="367c8-277">任务取消</span><span class="sxs-lookup"><span data-stu-id="367c8-277">Task Cancellation</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/how-to-listen-for-cancellation-requests-that-have-wait-handles"><span data-ttu-id="367c8-278">如何：侦听具有等待句柄的取消请求</span><span class="sxs-lookup"><span data-stu-id="367c8-278">How to: Listen for Cancellation Requests That Have Wait Handles</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
