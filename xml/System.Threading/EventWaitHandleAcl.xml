<Type Name="EventWaitHandleAcl" FullName="System.Threading.EventWaitHandleAcl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="271f719f5059512f4cd1b542f1d4c9840f57c76a" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90798219" /></Metadata><TypeSignature Language="C#" Value="public static class EventWaitHandleAcl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventWaitHandleAcl extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.EventWaitHandleAcl" />
  <TypeSignature Language="VB.NET" Value="Public Class EventWaitHandleAcl" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAcl abstract sealed" />
  <TypeSignature Language="F#" Value="type EventWaitHandleAcl = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="07ef5-101">提供了一种特定于 Windows 的扩展方法，用于通过特定的访问控制列表 (ACL) 安全性来创建 <see cref="T:System.Threading.EventWaitHandle" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="07ef5-101">Provides a Windows-specific extension method for creating <see cref="T:System.Threading.EventWaitHandle" /> objects with specific access control list (ACL) security.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Threading.EventWaitHandle? Create (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.EventWaitHandle Create(bool initialState, valuetype System.Threading.EventResetMode mode, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.EventWaitHandleSecurity eventSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandleAcl.Create(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (initialState As Boolean, mode As EventResetMode, name As String, ByRef createdNew As Boolean, eventSecurity As EventWaitHandleSecurity) As EventWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::EventWaitHandle ^ Create(bool initialState, System::Threading::EventResetMode mode, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::EventWaitHandleSecurity ^ eventSecurity);" />
      <MemberSignature Language="F#" Value="static member Create : bool * System.Threading.EventResetMode * string * bool * System.Security.AccessControl.EventWaitHandleSecurity -&gt; System.Threading.EventWaitHandle" Usage="System.Threading.EventWaitHandleAcl.Create (initialState, mode, name, createdNew, eventSecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.EventWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
        <Parameter Name="eventSecurity" Type="System.Security.AccessControl.EventWaitHandleSecurity" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="07ef5-102">如果将命名事件作为此调用的结果创建时，将初始状态设置为通过信号通知，则为 <see langword="true" />；如果将其设置为不通过信号通知，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="07ef5-102"><see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to non-signaled.</span></span></param>
        <param name="mode"><span data-ttu-id="07ef5-103">其中一个枚举值，它确定是自动还是手动重置事件。</span><span class="sxs-lookup"><span data-stu-id="07ef5-103">One of the enum values that determines whether the event resets automatically or manually.</span></span></param>
        <param name="name"><span data-ttu-id="07ef5-104">如果要与其他进程共享事件，则为名称；否则为 <see langword="null" /> 或空字符串。</span><span class="sxs-lookup"><span data-stu-id="07ef5-104">The name, if the event is to be shared with other processes; otherwise, <see langword="null" /> or an empty string.</span></span></param>
        <param name="createdNew"><span data-ttu-id="07ef5-105">当此方法返回时，如果创建了本地事件（即，当 <paramref name="name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" /> 时），则此参数始终设置为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="07ef5-105">When this method returns, this argument is always set to <see langword="true" /> if a local event is created; that is, when <paramref name="name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="07ef5-106">如果 <paramref name="name" /> 具有有效的非空值，则在创建系统事件时，此参数设置为 <see langword="true" />；如果找到具有该名称的现有系统事件，则此参数设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="07ef5-106">If <paramref name="name" /> has a valid, non-empty value, this argument is set to <see langword="true" /> when the system event is created, or it is set to <see langword="false" /> if an existing system event is found with that name.</span></span></param>
        <param name="eventSecurity"><span data-ttu-id="07ef5-107">要应用的可选 Windows 访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="07ef5-107">The optional Windows access control security to apply.</span></span></param>
        <summary><span data-ttu-id="07ef5-108">获取或创建 <see cref="T:System.Threading.EventWaitHandle" /> 实例，允许在事件创建期间选择性地指定 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 实例来设置该实例。</span><span class="sxs-lookup"><span data-stu-id="07ef5-108">Gets or creates an <see cref="T:System.Threading.EventWaitHandle" /> instance, allowing a <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> instance to be optionally specified to set it during the event creation.</span></span></summary>
        <returns><span data-ttu-id="07ef5-109">一个对象，它表示请求的事件等待句柄。</span><span class="sxs-lookup"><span data-stu-id="07ef5-109">An object that represents an event wait handle as requested.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="07ef5-110">如果 `name` 传递了并且系统事件已存在，则会返回现有事件。</span><span class="sxs-lookup"><span data-stu-id="07ef5-110">If a `name` is passed and the system event already exists, the existing event is returned.</span></span> <span data-ttu-id="07ef5-111">如果 `name` 为 `null` 或 <xref:System.String.Empty> ，则创建一个新的进程本地事件。</span><span class="sxs-lookup"><span data-stu-id="07ef5-111">If `name` is `null` or <xref:System.String.Empty>, a new process-local event is created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="07ef5-112">仅限 .NET Framework：<paramref name="name" /> 的长度超出了 MAX_PATH（260 个字符）。</span><span class="sxs-lookup"><span data-stu-id="07ef5-112">.NET Framework only: The <paramref name="name" /> length is beyond MAX_PATH (260 characters).</span></span>

<span data-ttu-id="07ef5-113">- 或 -</span><span class="sxs-lookup"><span data-stu-id="07ef5-113">-or-</span></span>

<span data-ttu-id="07ef5-114">仅限 .NET Framework：<paramref name="mode" /> 枚举值超出了合法范围。</span><span class="sxs-lookup"><span data-stu-id="07ef5-114">.NET Framework only: The <paramref name="mode" /> enum value was out of legal range.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="07ef5-115"><paramref name="mode" /> 枚举值超出了合法范围。</span><span class="sxs-lookup"><span data-stu-id="07ef5-115">The <paramref name="mode" /> enum value was out of legal range.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="07ef5-116">找不到 <paramref name="name" /> 中指定的路径的一部分。</span><span class="sxs-lookup"><span data-stu-id="07ef5-116">Could not find a part of the path specified in <paramref name="name" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="07ef5-117">找不到具有提供的 <paramref name="name" /> 的系统范围的同步事件。</span><span class="sxs-lookup"><span data-stu-id="07ef5-117">A system-wide synchronization event with the provided <paramref name="name" /> was not found.</span></span>
<span data-ttu-id="07ef5-118">-或-无法创建系统范围名称为 <paramref name="name" /> 的 <see cref="T:System.Threading.EventWaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="07ef5-118">-or- An <see cref="T:System.Threading.EventWaitHandle" /> with system-wide name <paramref name="name" /> cannot be created.</span></span> <span data-ttu-id="07ef5-119">不同类型的 <see cref="T:System.Threading.EventWaitHandle" /> 可能具有相同的名称。</span><span class="sxs-lookup"><span data-stu-id="07ef5-119">An <see cref="T:System.Threading.EventWaitHandle" /> of a different type might have the same name.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
