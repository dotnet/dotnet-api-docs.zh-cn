<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2326b47f6f0bd7fa8fcbccf91a2eb97af64e143b" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94467170" /></Metadata><TypeSignature Language="C#" Value="public abstract class WaitHandle : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WaitHandle extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="52d66-101">封装等待对共享资源进行独占访问的操作系统特定的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-101">Encapsulates operating system-specific objects that wait for exclusive access to shared resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-102"><xref:System.Threading.WaitHandle>类封装本机操作系统同步句柄，用于表示运行时中允许多个等待操作的所有同步对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-102">The <xref:System.Threading.WaitHandle> class encapsulates a native operating system synchronization handle and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="52d66-103">有关等待句柄与其他同步对象的比较，请参阅 [同步基元概述](/dotnet/standard/threading/overview-of-synchronization-primitives)。</span><span class="sxs-lookup"><span data-stu-id="52d66-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](/dotnet/standard/threading/overview-of-synchronization-primitives).</span></span>  
  
 <span data-ttu-id="52d66-104"><xref:System.Threading.WaitHandle>类本身是抽象类。</span><span class="sxs-lookup"><span data-stu-id="52d66-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="52d66-105">从派生的类 <xref:System.Threading.WaitHandle> 定义信号机制以指示获取或释放对共享资源的访问，但它们使用继承的 <xref:System.Threading.WaitHandle> 方法在等待对共享资源的访问时进行阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="52d66-106">派生自的类 <xref:System.Threading.WaitHandle> 包括：</span><span class="sxs-lookup"><span data-stu-id="52d66-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="52d66-107"><xref:System.Threading.Mutex> 类。</span><span class="sxs-lookup"><span data-stu-id="52d66-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="52d66-108">请参阅 [mutex](/dotnet/standard/threading/mutexes)。</span><span class="sxs-lookup"><span data-stu-id="52d66-108">See [Mutexes](/dotnet/standard/threading/mutexes).</span></span>  
  
-   <span data-ttu-id="52d66-109"><xref:System.Threading.EventWaitHandle>类及其派生类 <xref:System.Threading.AutoResetEvent> 和 <xref:System.Threading.ManualResetEvent> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span>  
  
-   <span data-ttu-id="52d66-110"><xref:System.Threading.Semaphore> 类。</span><span class="sxs-lookup"><span data-stu-id="52d66-110">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="52d66-111">请参阅 [信号灯和 SemaphoreSlim](/dotnet/standard/threading/semaphore-and-semaphoreslim)。</span><span class="sxs-lookup"><span data-stu-id="52d66-111">See [Semaphore and SemaphoreSlim](/dotnet/standard/threading/semaphore-and-semaphoreslim).</span></span>  
  
 <span data-ttu-id="52d66-112">线程可以通过调用实例方法阻止单个等待句柄 <xref:System.Threading.WaitHandle.WaitOne%2A> ，该实例方法由派生自的类继承 <xref:System.Threading.WaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-112">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="52d66-113">的派生类 <xref:System.Threading.WaitHandle> 在其线程关联中有所不同。</span><span class="sxs-lookup"><span data-stu-id="52d66-113">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="52d66-114">事件等待句柄 (<xref:System.Threading.EventWaitHandle> 、 <xref:System.Threading.AutoResetEvent> 和 <xref:System.Threading.ManualResetEvent>) 和信号量不具有线程关联; 任何线程都可以通知事件等待句柄或信号量。</span><span class="sxs-lookup"><span data-stu-id="52d66-114">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="52d66-115">另一方面，互斥体确实具有线程关联;拥有互斥体的线程必须释放它，如果线程对 <xref:System.Threading.Mutex.ReleaseMutex%2A> 不属于它的互斥体调用方法，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-115">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="52d66-116">由于 <xref:System.Threading.WaitHandle> 类派生自 <xref:System.MarshalByRefObject> ，因此这些类可用于跨应用程序域边界同步线程的活动。</span><span class="sxs-lookup"><span data-stu-id="52d66-116">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="52d66-117">除派生类之外， <xref:System.Threading.WaitHandle> 类还具有许多静态方法，这些方法阻止线程，直到一个或多个同步对象收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-117">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal.</span></span> <span data-ttu-id="52d66-118">这些方法包括：</span><span class="sxs-lookup"><span data-stu-id="52d66-118">These include:</span></span>  
  
-   <span data-ttu-id="52d66-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>，它允许线程向一个等待句柄发出信号，并立即等待另一个等待句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="52d66-120"><xref:System.Threading.WaitHandle.WaitAll%2A>，它允许线程等待，直到数组中的所有等待句柄都收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-120"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="52d66-121"><xref:System.Threading.WaitHandle.WaitAny%2A>，它允许线程等待，直到指定的一组等待句柄发出信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-121"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled.</span></span>  
  
 <span data-ttu-id="52d66-122">这些方法的重载提供了放弃等待的超时间隔，以及在进入等待前退出同步上下文的机会，从而允许其他线程使用同步上下文。</span><span class="sxs-lookup"><span data-stu-id="52d66-122">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="52d66-123">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="52d66-123">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="52d66-124">使用完类型或派生自该类型的类型后，应直接或间接释放它。</span><span class="sxs-lookup"><span data-stu-id="52d66-124">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="52d66-125">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.Threading.WaitHandle.Close%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-125">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="52d66-126">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="52d66-126">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="52d66-127">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="52d66-127">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="52d66-128"><xref:System.Threading.WaitHandle> 实现 <xref:System.IDisposable.Dispose%2A> 模式。</span><span class="sxs-lookup"><span data-stu-id="52d66-128"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="52d66-129">请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="52d66-129">See [Implementing a Dispose method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span> <span data-ttu-id="52d66-130">从派生时 <xref:System.Threading.WaitHandle> ，请使用 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 属性存储本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-130">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native operating system handle.</span></span> <span data-ttu-id="52d66-131">除非使用其他非托管资源，否则不需要重写受保护的 <xref:System.Threading.WaitHandle.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-131">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-132">下面的代码示例演示了在主线程使用类的静态和方法等待任务完成时，两个线程可以执行后台任务的方式 <xref:System.Threading.WaitHandle.WaitAny%2A> <xref:System.Threading.WaitHandle.WaitAll%2A> <xref:System.Threading.WaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-132">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="52d66-133">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="52d66-133">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/threading/"><span data-ttu-id="52d66-134">线程</span><span class="sxs-lookup"><span data-stu-id="52d66-134">Threading</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/threading-objects-and-features"><span data-ttu-id="52d66-135">线程处理对象和功能</span><span class="sxs-lookup"><span data-stu-id="52d66-135">Threading Objects and Features</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/mutexes"><span data-ttu-id="52d66-136">Mutexes</span><span class="sxs-lookup"><span data-stu-id="52d66-136">Mutexes</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/overview-of-synchronization-primitives?#thread-interaction-or-signaling"><span data-ttu-id="52d66-137">EventWaitHandle、AutoResetEvent 和 anualResetEvent</span><span class="sxs-lookup"><span data-stu-id="52d66-137">EventWaitHandle, AutoResetEvent, and ManualResetEvent</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/semaphore-and-semaphoreslim"><span data-ttu-id="52d66-138">信号量</span><span class="sxs-lookup"><span data-stu-id="52d66-138">Semaphores</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public WaitHandle ();" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WaitHandle();" FrameworkAlternate="netframework-1.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52d66-139">初始化 <see cref="T:System.Threading.WaitHandle" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="52d66-139">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52d66-140">释放由当前 <see cref="T:System.Threading.WaitHandle" /> 占用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-140">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-141">此方法是 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> <xref:System.Threading.WaitHandle> 该类及其派生类的方法的公共实现。</span><span class="sxs-lookup"><span data-stu-id="52d66-141">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="52d66-142">它提供了一个标准实现，该实现 `Dispose(Boolean)` 使用 `true` 自变量调用重载，然后调用 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-142">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="52d66-143">调用此方法可释放实例持有的所有资源 `WaitHandle` 或派生类。</span><span class="sxs-lookup"><span data-stu-id="52d66-143">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="52d66-144">调用此方法后，对当前实例的引用将导致未定义的行为。</span><span class="sxs-lookup"><span data-stu-id="52d66-144">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52d66-145">在 <xref:System.Threading.WaitHandle.Close%2A> <xref:System.Threading.WaitHandle.Dispose> 释放对的最后一个引用之前，请始终调用或 <xref:System.Threading.WaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-145">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="52d66-146">否则，将不会释放它所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-146">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="52d66-147">应重写 <see langword="Dispose(Boolean)" /> 方法以释放派生类中分配的资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-147">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span></span></para></block>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose"><span data-ttu-id="52d66-148">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="52d66-148">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="52d66-149">释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-149">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52d66-150">释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-150">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-151">此方法等效于 <xref:System.Threading.WaitHandle.Close%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-151">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52d66-152">在 <xref:System.Threading.WaitHandle.Close%2A> <xref:System.Threading.WaitHandle.Dispose> 释放对的最后一个引用之前，请始终调用或 <xref:System.Threading.WaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-152">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="52d66-153">否则，将不会释放它所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-153">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/unmanaged"><span data-ttu-id="52d66-154">清理非托管资源</span><span class="sxs-lookup"><span data-stu-id="52d66-154">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing"><span data-ttu-id="52d66-155">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-155"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="52d66-156">当在派生类中重写时，释放 <see cref="T:System.Threading.WaitHandle" /> 使用的非托管资源，并且可选择释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-156">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-157">此方法由 <xref:System.Threading.WaitHandle.Close%2A> 和 <xref:System.Threading.WaitHandle.Dispose> `explicitDisposing` 参数设置为的方法调用 `true` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-157">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="52d66-158">当 `explicitDisposing` 参数为时 `true` ，此方法释放该对象引用的任何托管对象所持有的所有资源 <xref:System.Threading.WaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-158">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="52d66-159">应重写 <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> 方法以释放派生类中分配的资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-159">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span></span>  
  
<span data-ttu-id="52d66-160"><see cref="M:System.Threading.WaitHandle.Close" />或 <see cref="M:System.Threading.WaitHandle.Dispose" /> 方法可由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="52d66-160">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span></span> <span data-ttu-id="52d66-161">重写此方法时，请注意不要引用之前在或对或的调用中已释放的 <see langword="Dispose" /> 对象 <see langword="Close" /> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-161">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span></span></para></block>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose"><span data-ttu-id="52d66-162">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="52d66-162">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52d66-163">释放由当前实例所持有的资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-163">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <span data-ttu-id="52d66-164">此成员已从 .NET Framework 版本2.0 和后续版本中删除。</span><span class="sxs-lookup"><span data-stu-id="52d66-164">This member has been removed from the .NET Framework version 2.0 and subsequent versions.</span></span> <span data-ttu-id="52d66-165">本主题仅适用于本主题后面的 "版本信息" 中列出的版本。</span><span class="sxs-lookup"><span data-stu-id="52d66-165">This topic applies only to the versions listed in "Version Information" later in this topic.</span></span>


<span data-ttu-id="52d66-166">应用程序代码不会调用此方法;它在垃圾回收期间自动调用，除非已禁用垃圾回收器的终止。</span><span class="sxs-lookup"><span data-stu-id="52d66-166">Application code does not call this method; it is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled.</span></span> <span data-ttu-id="52d66-167">有关详细信息，请参阅 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 和 <xref:System.Object.Finalize>。</span><span class="sxs-lookup"><span data-stu-id="52d66-167">For more information, see <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> and <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="52d66-168">此方法重写 <xref:System.Object.Finalize>。</span><span class="sxs-lookup"><span data-stu-id="52d66-168">This method overrides <xref:System.Object.Finalize>.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use the SafeWaitHandle property instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the SafeWaitHandle property instead.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52d66-169">获取或设置本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-169">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="52d66-170"><see cref="T:System.IntPtr" />，它表示本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-170">An <see cref="T:System.IntPtr" /> representing the native operating system handle.</span></span> <span data-ttu-id="52d66-171">默认为 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="52d66-171">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-172">为属性分配新值不 <xref:System.Threading.WaitHandle.Handle%2A> 会关闭上一个句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-172">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="52d66-173">这可能会导致句柄泄露。</span><span class="sxs-lookup"><span data-stu-id="52d66-173">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="52d66-174">请不要在 .NET Framework 版本2.0 或更高版本中使用此属性;请 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 改用属性。</span><span class="sxs-lookup"><span data-stu-id="52d66-174">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="52d66-175">如果将此属性设置为有效的句柄 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> ，还会设置属性，但将其设置为 <xref:System.Threading.WaitHandle.InvalidHandle> 可能导致泄漏的句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-175">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52d66-176">表示无效的本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-176">Represents an invalid native operating system handle.</span></span> <span data-ttu-id="52d66-177">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="52d66-177">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-178">在内部用来初始化 <xref:System.Threading.WaitHandle.Handle%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="52d66-178">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="52d66-179">您可以使用此值来确定属性是否 <see cref="P:System.Threading.WaitHandle.Handle" /> 包含有效的本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-179">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52d66-180">获取或设置本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-180">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="52d66-181"><see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，它表示本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-181">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-182">将新值分配到 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 属性时，将在收集上一个对象时关闭上一个句柄 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-182">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="52d66-183">不要手动关闭句柄，因为这会导致在 <xref:System.ObjectDisposedException> <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 尝试关闭句柄时出现。</span><span class="sxs-lookup"><span data-stu-id="52d66-183">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="52d66-184"><xref:System.Threading.WaitHandle> 实现 <xref:System.IDisposable.Dispose%2A> 模式。</span><span class="sxs-lookup"><span data-stu-id="52d66-184"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="52d66-185">请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="52d66-185">See [Implementing a Dispose method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span> <span data-ttu-id="52d66-186">当从派生时 <xref:System.Threading.WaitHandle> ，使用 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 属性存储本机句柄操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="52d66-186">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="52d66-187">除非使用其他非托管资源，否则不需要重写受保护的 <xref:System.Threading.WaitHandle.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-187">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="52d66-188">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个。</span><span class="sxs-lookup"><span data-stu-id="52d66-188">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="52d66-189">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-189">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="52d66-190">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-190">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <summary><span data-ttu-id="52d66-191">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个。</span><span class="sxs-lookup"><span data-stu-id="52d66-191">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
        <returns><span data-ttu-id="52d66-192">如果信号和等待都成功完成，则为 <see langword="true" />；如果等待没有完成，则此方法不返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-192"><see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-193">不保证此操作为原子操作。</span><span class="sxs-lookup"><span data-stu-id="52d66-193">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="52d66-194">在当前线程发出信号之后 `toSignal` 但在等待之前 `toWaitOn` ，另一个处理器上运行的线程可能会发出信号 `toWaitOn` 或等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-194">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-195">下面的代码示例使用 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 方法重载，以允许主线程向阻止的线程发出信号，并等待线程完成任务。</span><span class="sxs-lookup"><span data-stu-id="52d66-195">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="52d66-196">该示例启动五个线程，使其可以在 <xref:System.Threading.EventWaitHandle> 使用标志创建的上阻塞 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> ，然后在每次用户按下 enter 键时释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="52d66-196">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="52d66-197">然后，该示例将另一线程排队，并通过使用标志创建的所有线程释放它们 <xref:System.Threading.EventWaitHandle> <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-197">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-198"><paramref name="toSignal" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-198"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-199">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-199">-or-</span></span> 
 <span data-ttu-id="52d66-200"><paramref name="toWaitOn" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-200"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-201">在一个处于 <see cref="F:System.Threading.ApartmentState.STA" /> 状态的线程上调用了该方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-201">The method was called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-202"><paramref name="toSignal" /> 是信号量，已达到最大计数。</span><span class="sxs-lookup"><span data-stu-id="52d66-202"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-203">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-203">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-204">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-204">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="52d66-205">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-205">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="52d66-206">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-206">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="52d66-207">一个整数，表示要等待的间隔。</span><span class="sxs-lookup"><span data-stu-id="52d66-207">An integer that represents the interval to wait.</span></span> <span data-ttu-id="52d66-208">如果值是 <see cref="F:System.Threading.Timeout.Infinite" />，即 -1，则等待是无限期的。</span><span class="sxs-lookup"><span data-stu-id="52d66-208">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-209">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-209"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-210">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 32 位有符号整数，并指定在进入等待前是否退出上下文的同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-210">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-211">如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-211"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-212">不保证此操作为原子操作。</span><span class="sxs-lookup"><span data-stu-id="52d66-212">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="52d66-213">在当前线程发出信号之后 `toSignal` 但在等待之前 `toWaitOn` ，另一个处理器上运行的线程可能会发出信号 `toWaitOn` 或等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-213">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="52d66-214">如果 `millisecondsTimeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-214">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-215">它测试的状态 `toWaitOn` 并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-215">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-216">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-216">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-217">`exitContext`除非 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-217">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-218">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-218">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-219">即使当前正在对不是从派生的类（如）执行方法， <xref:System.ContextBoundObject> 如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-219">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-220">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.SignalAndWait%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-220">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="52d66-221">调用方法完成后，线程返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-221">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-222">当上下文绑定类具有时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-222">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="52d66-223">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-223">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-224">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-224">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-225">当 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-225">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-226"><paramref name="toSignal" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-226"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-227">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-227">-or-</span></span> 
 <span data-ttu-id="52d66-228"><paramref name="toWaitOn" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-228"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-229">对处于 <see cref="F:System.Threading.ApartmentState.STA" /> 状态的线程调用了此方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-229">The method is called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-230">无法终止 <see cref="T:System.Threading.WaitHandle" />，因为它将超过其最大计数。</span><span class="sxs-lookup"><span data-stu-id="52d66-230">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-231"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-231"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-232">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-232">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-233">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-233">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="52d66-234">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-234">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="52d66-235">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-235">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="timeout"><span data-ttu-id="52d66-236">一个 <see cref="T:System.TimeSpan" />，表示要等待的间隔。</span><span class="sxs-lookup"><span data-stu-id="52d66-236">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span></span> <span data-ttu-id="52d66-237">如果值是 -1，则等待是无限期的。</span><span class="sxs-lookup"><span data-stu-id="52d66-237">If the value is -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-238">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-238"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-239">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 <see cref="T:System.TimeSpan" />，并指定在进入等待前是否退出上下文的同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-239">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-240">如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-240"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-241">不保证此操作为原子操作。</span><span class="sxs-lookup"><span data-stu-id="52d66-241">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="52d66-242">在当前线程发出信号之后 `toSignal` 但在等待之前 `toWaitOn` ，另一个处理器上运行的线程可能会发出信号 `toWaitOn` 或等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-242">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="52d66-243">的最大值 `timeout` 为 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-243">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="52d66-244">如果 `timeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-244">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-245">它测试的状态 `toWaitOn` 并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-245">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-246">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-246">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-247">`exitContext`除非 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-247">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-248">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-248">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-249">即使当前正在对不是从派生的类（如）执行方法， <xref:System.ContextBoundObject> 如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-249">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-250">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.SignalAndWait%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-250">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="52d66-251">调用方法完成后，线程返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-251">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-252">当上下文绑定类具有时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-252">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="52d66-253">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-253">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-254">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-254">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-255">当 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-255">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-256"><paramref name="toSignal" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-256"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-257">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-257">-or-</span></span> 
 <span data-ttu-id="52d66-258"><paramref name="toWaitOn" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-258"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-259">在一个处于 <see cref="F:System.Threading.ApartmentState.STA" /> 状态的线程上调用了该方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-259">The method was called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-260"><paramref name="toSignal" /> 是信号量，已达到最大计数。</span><span class="sxs-lookup"><span data-stu-id="52d66-260"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-261"><paramref name="timeout" /> 计算为 -1 以外的负毫秒数。</span><span class="sxs-lookup"><span data-stu-id="52d66-261"><paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span></span>  
  
<span data-ttu-id="52d66-262">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-262">-or-</span></span> 
 <span data-ttu-id="52d66-263"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-263"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-264">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-264">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-265">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-265">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="waitHandle.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52d66-266">释放由 <see cref="T:System.Threading.WaitHandle" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="52d66-266">Releases all resources used by the <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="52d66-267">调用 `Dispose` 会允许出于其他目的重新分配所使用的资源 <xref:System.Threading.WaitHandle> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-267">Calling `Dispose` allows the resources used by the <xref:System.Threading.WaitHandle> to be reallocated for other purposes.</span></span> <span data-ttu-id="52d66-268">有关的详细信息 `Dispose` ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="52d66-268">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="52d66-269">等待指定数组中的所有元素都收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-269">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-270">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-270">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="52d66-271">此数组不能包含对同一对象的多个引用。</span><span class="sxs-lookup"><span data-stu-id="52d66-271">This array cannot contain multiple references to the same object.</span></span></param>
        <summary><span data-ttu-id="52d66-272">等待指定数组中的所有元素都收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-272">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="52d66-273">如果 <see langword="true" /> 中的每个元素都收到信号，则返回 <paramref name="waitHandles" />；否则该方法永不返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-273"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-274"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-274"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-275">在以前的版本中，在 <xref:System.Threading.WaitHandle.WaitAll%2A> `true` 放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-275">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="52d66-276">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-276">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-277">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-277">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-278">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-278">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-279"><xref:System.Threading.WaitHandle.WaitAll%2A>当所有句柄都收到信号时，此方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-279">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="52d66-280">如果传递的句柄超过64， <xref:System.NotSupportedException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-280">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="52d66-281">如果数组包含重复项，调用将失败，并出现 <xref:System.DuplicateWaitObjectException> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-281">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="52d66-282">处于 <xref:System.Threading.WaitHandle.WaitAll%2A> 状态的线程不支持方法 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-282">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="52d66-283">调用此方法重载等效于调用 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 方法重载并为指定-1 (或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) `millisecondsTimeout` `true` `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-283">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-284">下面的代码示例演示如何使用线程池异步创建和写入一组文件。</span><span class="sxs-lookup"><span data-stu-id="52d66-284">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="52d66-285">每个写入操作都作为工作项排队，并在完成后发出信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-285">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="52d66-286">主线程等待所有项发出信号，然后退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-286">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-287"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-287">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span> <span data-ttu-id="52d66-288">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-288">-or-</span></span> 
<span data-ttu-id="52d66-289"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-289">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-290">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-290">-or-</span></span> 
 <span data-ttu-id="52d66-291"><paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="52d66-291"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="52d66-292">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-292">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="52d66-293"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-293">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-294"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-294">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="52d66-295">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-295">-or-</span></span> 
<span data-ttu-id="52d66-296">当前线程处于 <see cref="F:System.Threading.ApartmentState.STA" /> 状态，且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-296">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="52d66-297"><paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="52d66-297"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-298">等待终止，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-298">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-299">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-299">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-300"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-300">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-301">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-301">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="52d66-302">此数组不能包含对同一对象的多个引用（重复的元素）。</span><span class="sxs-lookup"><span data-stu-id="52d66-302">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="52d66-303">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-303">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="52d66-304">等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.Int32" /> 值指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="52d66-304">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="52d66-305">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-305"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-306">如果 `millisecondsTimeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-306">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-307">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-307">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-308">此 <xref:System.Threading.WaitHandle.WaitAll%2A> 方法在等待终止时返回，这意味着在所有句柄都发出信号或发生超时时。</span><span class="sxs-lookup"><span data-stu-id="52d66-308">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="52d66-309">如果传递的句柄超过64， <xref:System.NotSupportedException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-309">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="52d66-310">如果数组中有重复项，调用将失败，并出现 <xref:System.DuplicateWaitObjectException> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-310">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52d66-311">处于 <xref:System.Threading.WaitHandle.WaitAll%2A> 状态的线程不支持方法 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-311">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="52d66-312">调用此方法重载与调用 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 重载并为指定 `false` 的相同 `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-312">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-313"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-313">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-314">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-314">-or-</span></span> 
<span data-ttu-id="52d66-315"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-315">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-316">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-316">-or-</span></span> 
 <span data-ttu-id="52d66-317"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="52d66-317"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="52d66-318">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-318">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="52d66-319"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-319">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-320"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-320">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="52d66-321">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-321">-or-</span></span> 
<span data-ttu-id="52d66-322">当前线程处于 <see cref="F:System.Threading.ApartmentState.STA" /> 状态，且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-322">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-323"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-323"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-324">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-324">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-325">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-325">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-326"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-326">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-327">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-327">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="52d66-328">此数组不能包含对同一对象的多个引用。</span><span class="sxs-lookup"><span data-stu-id="52d66-328">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="52d66-329">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-329">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="52d66-330">等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="52d66-330">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="52d66-331">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-331"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-332">如果 `timeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-332">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-333">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-333">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-334"><xref:System.Threading.WaitHandle.WaitAll%2A>当等待终止时，此方法将返回，这意味着所有句柄都已终止或发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-334">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="52d66-335">如果传递的句柄超过64， <xref:System.NotSupportedException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-335">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="52d66-336">如果数组包含重复项，则调用将失败。</span><span class="sxs-lookup"><span data-stu-id="52d66-336">If the array contains duplicates, the call will fail.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="52d66-337">处于 <xref:System.Threading.WaitHandle.WaitAll%2A> 状态的线程不支持方法 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-337">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="52d66-338">的最大值 `timeout` 为 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-338">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="52d66-339">调用此方法重载与调用 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> 重载并为指定 `false` 的相同 `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-339">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-340"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-340">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-341">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-341">-or-</span></span> 
<span data-ttu-id="52d66-342"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-342">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-343">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-343">-or-</span></span> 
 <span data-ttu-id="52d66-344"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="52d66-344"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="52d66-345">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-345">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="52d66-346"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-346">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-347"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-347">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="52d66-348">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-348">-or-</span></span> 
<span data-ttu-id="52d66-349">当前线程处于 <see cref="F:System.Threading.ApartmentState.STA" /> 状态，且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-349">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-350"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-350"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="52d66-351">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-351">-or-</span></span> 
 <span data-ttu-id="52d66-352"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-352"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-353">等待终止，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-353">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-354">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-354">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-355"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-355">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-356">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-356">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="52d66-357">此数组不能包含对同一对象的多个引用（重复的元素）。</span><span class="sxs-lookup"><span data-stu-id="52d66-357">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="52d66-358">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-358">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-359">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-359"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-360">等待指定数组中的所有元素收到信号，使用 <see cref="T:System.Int32" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-360">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-361">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-361"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-362">如果 `millisecondsTimeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-362">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-363">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-363">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-364"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-364"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-365">在以前的版本中，在 <xref:System.Threading.WaitHandle.WaitAll%2A> `true` 放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-365">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="52d66-366">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-366">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-367">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-367">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-368">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-368">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-369">此 <xref:System.Threading.WaitHandle.WaitAll%2A> 方法在等待终止时返回，这意味着在所有句柄都发出信号或发生超时时。</span><span class="sxs-lookup"><span data-stu-id="52d66-369">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="52d66-370">如果传递的句柄超过64， <xref:System.NotSupportedException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-370">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="52d66-371">如果数组中有重复项，调用将失败，并出现 <xref:System.DuplicateWaitObjectException> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-371">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="52d66-372">处于 <xref:System.Threading.WaitHandle.WaitAll%2A> 状态的线程不支持方法 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-372">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-373">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-373">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-374">`exitContext`除非 <xref:System.Threading.WaitHandle.WaitAll%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-374">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-375">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-375">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-376">即使当前正在对不是从派生的类 <xref:System.ContextBoundObject> （如）执行方法，如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-376">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-377">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.WaitAll%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-377">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="52d66-378">调用方法完成后，线程返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.WaitAll%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-378">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-379">当上下文绑定类具有属性时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-379">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="52d66-380">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-380">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-381">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.WaitAll%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-381">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-382">当 <xref:System.Threading.WaitHandle.WaitAll%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-382">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-383">下面的代码示例演示如何使用线程池异步创建和写入一组文件。</span><span class="sxs-lookup"><span data-stu-id="52d66-383">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="52d66-384">每个写入操作都作为工作项排队，并在完成后发出信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-384">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="52d66-385">主线程等待所有项发出信号，然后退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-385">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-386"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-386">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-387">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-387">-or-</span></span> 
<span data-ttu-id="52d66-388"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-388">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-389">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-389">-or-</span></span> 
 <span data-ttu-id="52d66-390"><paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="52d66-390"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="52d66-391"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-391">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-392"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-392">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="52d66-393">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-393">-or-</span></span> 
<span data-ttu-id="52d66-394">当前线程处于 <see cref="F:System.Threading.ApartmentState.STA" /> 状态，且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-394">The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="52d66-395"><paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="52d66-395"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-396"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-396"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-397">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-397">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-398">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-398">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-399"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-399">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-400">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-400">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="52d66-401">此数组不能包含对同一对象的多个引用。</span><span class="sxs-lookup"><span data-stu-id="52d66-401">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="52d66-402">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-402">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-403">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-403"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-404">等待指定数组中的所有元素收到信号，使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-404">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-405">如果 <paramref name="waitHandles" /> 中的每个元素都收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-405"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-406">如果 `timeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-406">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-407">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-407">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-408"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-408"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-409">在以前的版本中，在 <xref:System.Threading.WaitHandle.WaitAll%2A> `true` 放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-409">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="52d66-410">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-410">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-411">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-411">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-412">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-412">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-413"><xref:System.Threading.WaitHandle.WaitAll%2A>当等待终止时，此方法将返回，这意味着所有句柄都已终止或发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-413">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="52d66-414">如果传递的句柄超过64， <xref:System.NotSupportedException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-414">If more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="52d66-415">如果数组包含重复项，则调用将失败。</span><span class="sxs-lookup"><span data-stu-id="52d66-415">If the array contains duplicates, the call will fail.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="52d66-416">处于 <xref:System.Threading.WaitHandle.WaitAll%2A> 状态的线程不支持方法 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-416">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="52d66-417">的最大值 `timeout` 为 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-417">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-418">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-418">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-419">`exitContext`除非 <xref:System.Threading.WaitHandle.WaitAll%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-419">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-420">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-420">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-421">即使当前正在对不是从派生的类 <xref:System.ContextBoundObject> （如）执行方法，如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-421">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-422">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.WaitAll%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-422">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="52d66-423">此方法在调用方法完成后返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.WaitAll%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-423">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-424">当上下文绑定类具有时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-424">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="52d66-425">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-425">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-426">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.WaitAll%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-426">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-427">当 <xref:System.Threading.WaitHandle.WaitAll%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-427">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-428">下面的代码示例演示如何使用线程池异步创建和写入一组文件。</span><span class="sxs-lookup"><span data-stu-id="52d66-428">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="52d66-429">每个写入操作都作为工作项排队，并在完成后发出信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-429">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="52d66-430">主线程等待所有项发出信号，然后退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-430">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-431"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-431">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-432">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-432">-or-</span></span> 
<span data-ttu-id="52d66-433"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-433">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-434">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-434">-or-</span></span> 
 <span data-ttu-id="52d66-435"><paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="52d66-435"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="52d66-436"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-436">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-437"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-437">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="52d66-438">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-438">-or-</span></span> 
<span data-ttu-id="52d66-439"><see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="52d66-439">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="52d66-440"><paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="52d66-440"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-441"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-441"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="52d66-442">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-442">-or-</span></span> 
 <span data-ttu-id="52d66-443"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-443"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-444">等待终止，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-444">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-445">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-445">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-446"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-446">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="52d66-447">等待指定数组中的任一元素收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-447">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-448">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-448">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <summary><span data-ttu-id="52d66-449">等待指定数组中的任一元素收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-449">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="52d66-450">满足等待的对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="52d66-450">The array index of the object that satisfied the wait.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-451"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-451"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-452">在以前的版本中， <xref:System.Threading.WaitHandle.WaitAny%2A> `true` 如果等待因放弃互斥体而完成，则该方法返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-452">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="52d66-453">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-453">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-454">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-454">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-455">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-455">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-456">此 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法 <xref:System.Threading.AbandonedMutexException> 仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-456">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="52d66-457">如果 `waitHandles` 包含的释放互斥体的索引号小于被放弃的互斥体，则该 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-457">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52d66-458">在早于版本2.0 的 .NET Framework 版本中，如果某个线程在未显式释放的情况下退出或中止 <xref:System.Threading.Mutex> ，并且在 `Mutex` 索引 0 (在另一个线程的数组中) 零 `WaitAny` ，则返回的索引 `WaitAny` 为128，而不是0。</span><span class="sxs-lookup"><span data-stu-id="52d66-458">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="52d66-459">当任何句柄终止时，此方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-459">This method returns when any handle is signaled.</span></span> <span data-ttu-id="52d66-460">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="52d66-460">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="52d66-461">等待句柄的最大数目为64，如果当前线程处于状态，则为 63 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-461">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>

 <span data-ttu-id="52d66-462">调用此方法重载等效于调用 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 方法重载并为指定-1 (或 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) `millisecondsTimeout` `true` `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-462">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-463">下面的代码示例演示如何调用 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="52d66-463">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-464"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-464">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-465">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-465">-or-</span></span> 
<span data-ttu-id="52d66-466"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-466">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-467"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-467">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="52d66-468"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="52d66-468"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-469">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-469">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-470">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-470">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="52d66-471"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span><span class="sxs-lookup"><span data-stu-id="52d66-471"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-472"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-472">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-473">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-473">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="52d66-474">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-474">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="52d66-475">等待指定数组中的任意元素接收信号，同时使用 32 位有符号整数指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="52d66-475">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="52d66-476">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> 的时间间隔已过，则为 <paramref name="millisecondsTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-476">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-477">如果 `millisecondsTimeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-477">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-478">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-478">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-479">此 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法 <xref:System.Threading.AbandonedMutexException> 仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-479">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="52d66-480">如果 `waitHandles` 包含的释放互斥体的索引号小于被放弃的互斥体，则该 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-480">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="52d66-481">当等待终止时，此方法将返回，无论是在任何句柄收到信号，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-481">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="52d66-482">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="52d66-482">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="52d66-483">等待句柄的最大数目为64，如果当前线程处于状态，则为 63 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-483">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
 <span data-ttu-id="52d66-484">调用此方法重载与调用 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 重载并为指定 `false` 的相同 `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-484">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-485"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-485">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-486">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-486">-or-</span></span> 
<span data-ttu-id="52d66-487"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-487">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-488"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-488">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-489"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-489"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-490">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-490">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-491">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-491">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="52d66-492"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="52d66-492"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-493"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-493">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-494">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-494">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="52d66-495">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-495">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="52d66-496">等待指定数组中的任意元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="52d66-496">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="52d66-497">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> 的时间间隔已过，则为 <paramref name="timeout" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-497">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-498">如果 `timeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-498">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-499">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-499">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-500">此 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法 <xref:System.Threading.AbandonedMutexException> 仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-500">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="52d66-501">如果 `waitHandles` 包含的释放互斥体的索引号小于被放弃的互斥体，则该 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-501">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="52d66-502">当等待终止时，此方法将返回，无论是在任何句柄收到信号时，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-502">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="52d66-503">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="52d66-503">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="52d66-504">等待句柄的最大数目为64，如果当前线程处于状态，则为 63 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-504">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>

 <span data-ttu-id="52d66-505">的最大值 `timeout` 为 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-505">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="52d66-506">调用此方法重载与调用 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> 重载并为指定 `false` 的相同 `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-506">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-507"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-507">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-508">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-508">-or-</span></span> 
<span data-ttu-id="52d66-509"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-509">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-510"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-510">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-511"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-511"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="52d66-512">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-512">-or-</span></span> 
 <span data-ttu-id="52d66-513"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-513"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-514">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-514">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-515">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-515">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="52d66-516"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="52d66-516"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-517"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-517">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-518">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-518">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="52d66-519">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-519">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-520">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-520"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-521">等待指定数组中的任一元素收到信号，使用 32 位带符号整数指定时间间隔并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-521">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-522">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> 的时间间隔已过，则为 <paramref name="millisecondsTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-522">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-523">如果 `millisecondsTimeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-523">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-524">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-524">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-525"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-525"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-526">在以前的版本中， <xref:System.Threading.WaitHandle.WaitAny%2A> `true` 如果等待因放弃互斥体而完成，则该方法返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-526">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="52d66-527">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-527">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-528">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-528">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-529">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-529">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-530">此 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法 <xref:System.Threading.AbandonedMutexException> 仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-530">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="52d66-531">如果 `waitHandles` 包含的释放互斥体的索引号小于被放弃的互斥体，则该 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-531">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52d66-532">在早于版本2.0 的 .NET Framework 版本中，如果某个线程在未显式释放的情况下退出或中止 <xref:System.Threading.Mutex> ，并且在 `Mutex` 索引 0 (在另一个线程的数组中) 零 `WaitAny` ，则返回的索引 `WaitAny` 为128，而不是0。</span><span class="sxs-lookup"><span data-stu-id="52d66-532">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="52d66-533">当等待终止时，此方法将返回，无论是在任何句柄收到信号，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-533">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="52d66-534">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="52d66-534">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="52d66-535">等待句柄的最大数目为64，如果当前线程处于状态，则为 63 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-535">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-536">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-536">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-537">`exitContext`除非 <xref:System.Threading.WaitHandle.WaitAny%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-537">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-538">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-538">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-539">即使当前正在对不是从派生的类（如）执行方法， <xref:System.ContextBoundObject> 如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-539">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-540">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.WaitAny%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-540">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="52d66-541">调用方法完成后，线程返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.WaitAny%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-541">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-542">当上下文绑定类具有时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-542">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="52d66-543">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-543">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-544">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-544">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-545">当 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-545">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-546">下面的代码示例演示如何使用线程池同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="52d66-546">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="52d66-547">出于空间考虑，只会搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="52d66-547">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-548"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-548">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-549">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-549">-or-</span></span> 
<span data-ttu-id="52d66-550"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-550">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-551"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-551">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="52d66-552"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="52d66-552"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-553"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-553"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-554">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-554">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-555">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-555">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="52d66-556"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span><span class="sxs-lookup"><span data-stu-id="52d66-556"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-557"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-557">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="52d66-558">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="52d66-558">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="52d66-559">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-559">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-560">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-560"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-561">等待指定数组中的任一元素收到信号，使用 <see cref="T:System.TimeSpan" /> 指定时间间隔并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-561">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-562">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> 的时间间隔已过，则为 <paramref name="timeout" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-562">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-563">如果 `timeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-563">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-564">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-564">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-565"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-565"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-566">在以前的版本中， <xref:System.Threading.WaitHandle.WaitAny%2A> `true` 如果等待因放弃互斥体而完成，则该方法返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-566">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="52d66-567">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-567">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-568">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-568">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-569">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-569">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-570">此 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法 <xref:System.Threading.AbandonedMutexException> 仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="52d66-570">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="52d66-571">如果 `waitHandles` 包含的释放互斥体的索引号小于被放弃的互斥体，则该 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-571">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52d66-572">在早于版本2.0 的 .NET Framework 版本中，如果某个线程在未显式释放的情况下退出或中止 <xref:System.Threading.Mutex> ，并且在 `Mutex` 索引 0 (在另一个线程的数组中) 零 `WaitAny` ，则返回的索引 `WaitAny` 为128，而不是0。</span><span class="sxs-lookup"><span data-stu-id="52d66-572">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="52d66-573">当等待终止时，此方法将返回，无论是在任何句柄收到信号时，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-573">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="52d66-574">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="52d66-574">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span>

 <span data-ttu-id="52d66-575">等待句柄的最大数目为64，如果当前线程处于状态，则为 63 <xref:System.Threading.ApartmentState.STA> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-575">The maximum number of the wait handles is 64, and 63 if the current thread is in <xref:System.Threading.ApartmentState.STA> state.</span></span>

 <span data-ttu-id="52d66-576">的最大值 `timeout` 为 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-576">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-577">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-577">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-578">`exitContext`除非 <xref:System.Threading.WaitHandle.WaitAny%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-578">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-579">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-579">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-580">即使当前正在对不是从派生的类（如）执行方法， <xref:System.ContextBoundObject> 如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-580">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-581">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.WaitAny%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-581">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="52d66-582">调用方法完成后，线程返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.WaitAny%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-582">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-583">当上下文绑定类具有时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-583">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="52d66-584">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-584">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-585">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-585">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-586">当 <xref:System.Threading.WaitHandle.WaitAny%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-586">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-587">下面的代码示例演示如何使用线程池同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="52d66-587">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="52d66-588">出于空间考虑，只会搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="52d66-588">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="52d66-589"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-589">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="52d66-590">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-590">-or-</span></span> 
<span data-ttu-id="52d66-591"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-591">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="52d66-592"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="52d66-592">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="52d66-593"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="52d66-593"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-594"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-594"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="52d66-595">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-595">-or-</span></span> 
 <span data-ttu-id="52d66-596"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-596"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-597">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-597">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-598">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-598">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="52d66-599"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span><span class="sxs-lookup"><span data-stu-id="52d66-599"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-600"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-600">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="52d66-601">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-601">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52d66-602">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-602">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
        <returns><span data-ttu-id="52d66-603">如果当前实例收到信号，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-603"><see langword="true" /> if the current instance receives a signal.</span></span> <span data-ttu-id="52d66-604">如果当前实例永不发出信号，则 <see cref="M:System.Threading.WaitHandle.WaitOne" /> 永不返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-604">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne" /> never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-605"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-605"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-606">在以前的版本中，在 <xref:System.Threading.WaitHandle.WaitOne%2A> `true` 放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-606">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="52d66-607">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-607">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-608">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-608">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-609">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-609">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-610">此方法的调用方会无限期阻止，直到当前实例收到信号。</span><span class="sxs-lookup"><span data-stu-id="52d66-610">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="52d66-611">使用此方法可在 <xref:System.Threading.WaitHandle> 接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="52d66-611">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="52d66-612">有关详细信息，请参阅 <xref:System.IAsyncResult> 接口。</span><span class="sxs-lookup"><span data-stu-id="52d66-612">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="52d66-613">调用此方法重载等效于调用 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 方法重载，并将 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 第一个参数和第 `false` 二个参数指定为-1 或。</span><span class="sxs-lookup"><span data-stu-id="52d66-613">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="52d66-614">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="52d66-614">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-615">下面的代码示例演示如何使用等待句柄来防止进程在等待后台线程完成执行时终止。</span><span class="sxs-lookup"><span data-stu-id="52d66-615">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="52d66-616">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="52d66-616">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-617">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-617">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-618">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-618">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-619">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-619">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="52d66-620">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-620">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="52d66-621">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="52d66-621">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="52d66-622">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-622"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-623">如果 `millisecondsTimeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-623">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-624">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-624">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-625">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-625">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="52d66-626">使用此方法可在 <xref:System.Threading.WaitHandle> 接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="52d66-626">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="52d66-627">有关详细信息，请参阅 <xref:System.IAsyncResult> 接口。</span><span class="sxs-lookup"><span data-stu-id="52d66-627">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="52d66-628">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="52d66-628">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="52d66-629">调用此方法重载与调用 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 重载并为指定 `false` 的相同 `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-629">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-630">下面的代码示例演示如何使用等待句柄来防止进程在等待后台线程完成执行时终止。</span><span class="sxs-lookup"><span data-stu-id="52d66-630">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="52d66-631">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="52d66-631">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-632"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-632"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-633">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-633">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-634">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-634">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-635">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-635">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="52d66-636">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-636">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="52d66-637">阻止当前线程，直到当前实例收到信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="52d66-637">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="52d66-638">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-638"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-639">如果 `timeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-639">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-640">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-640">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-641">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-641">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="52d66-642">使用此方法可在 <xref:System.Threading.WaitHandle> 接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="52d66-642">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="52d66-643">有关详细信息，请参阅 <xref:System.IAsyncResult> 接口。</span><span class="sxs-lookup"><span data-stu-id="52d66-643">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="52d66-644">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="52d66-644">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="52d66-645">的最大值 `timeout` 为 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-645">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="52d66-646">调用此方法重载与调用 <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> 重载并为指定 `false` 的相同 `exitContext` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-646">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="52d66-647">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="52d66-647">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-648"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-648"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="52d66-649">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-649">-or-</span></span> 
 <span data-ttu-id="52d66-650"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-650"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-651">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-651">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-652">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-652">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-653">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-653">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="52d66-654">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="52d66-654">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-655">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-655"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-656">阻止当前线程，直到当前的 <see cref="T:System.Threading.WaitHandle" /> 收到信号为止，同时使用 32 位带符号整数指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-656">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-657">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-657"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-658">如果 `millisecondsTimeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-658">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-659">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-659">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-660"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-660"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-661">在以前的版本中，在 <xref:System.Threading.WaitHandle.WaitOne%2A> `true` 放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-661">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="52d66-662">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-662">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-663">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-663">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-664">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-664">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-665">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-665">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="52d66-666">使用此方法可在 <xref:System.Threading.WaitHandle> 接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="52d66-666">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="52d66-667">有关详细信息，请参阅 <xref:System.IAsyncResult> 接口。</span><span class="sxs-lookup"><span data-stu-id="52d66-667">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="52d66-668">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="52d66-668">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-669">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-669">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-670">`exitContext`除非 <xref:System.Threading.WaitHandle.WaitOne%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-670">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-671">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-671">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-672">即使当前正在对不是从派生的类（如）执行方法， <xref:System.ContextBoundObject> 如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-672">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-673">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.WaitOne%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-673">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="52d66-674">调用方法完成后，线程返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.WaitOne%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-674">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-675">当上下文绑定类具有时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-675">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="52d66-676">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-676">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-677">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-677">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-678">当 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-678">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-679">下面的示例演示 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 方法重载在同步域中调用时的行为方式。</span><span class="sxs-lookup"><span data-stu-id="52d66-679">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="52d66-680">首先，线程 `exitContext` 将设置为 `false` 并在等待超时过期之前进行阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-680">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="52d66-681">第一个线程在第一个线程终止并等待 `exitContext` 设置为时执行 `true` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-681">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="52d66-682">对此第二个线程的等待句柄发出信号的调用未被阻止，线程在等待超时前完成。</span><span class="sxs-lookup"><span data-stu-id="52d66-682">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="52d66-683">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="52d66-683">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-684"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-684"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-685">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-685">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-686">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-686">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-687">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-687">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="52d66-688">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-688">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="52d66-689">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-689"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="52d66-690">阻止当前线程，直到当前实例收到信号为止，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-690">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="52d66-691">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-691"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-692">如果 `timeout` 为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="52d66-692">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="52d66-693">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-693">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="52d66-694"><xref:System.Threading.AbandonedMutexException> 是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="52d66-694"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="52d66-695">在以前的版本中，在 <xref:System.Threading.WaitHandle.WaitOne%2A> `true` 放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="52d66-695">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="52d66-696">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="52d66-696">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="52d66-697">对于系统范围内的互斥体，它可能指示应用程序突然终止 (例如，使用 Windows 任务管理器) 。</span><span class="sxs-lookup"><span data-stu-id="52d66-697">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="52d66-698">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="52d66-698">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="52d66-699">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-699">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="52d66-700">使用此方法可在 <xref:System.Threading.WaitHandle> 接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="52d66-700">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="52d66-701">有关详细信息，请参阅 <xref:System.IAsyncResult> 接口。</span><span class="sxs-lookup"><span data-stu-id="52d66-701">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="52d66-702">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="52d66-702">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="52d66-703">的最大值 `timeout` 为 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-703">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="52d66-704">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="52d66-704">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="52d66-705">`exitContext`除非 <xref:System.Threading.WaitHandle.WaitOne%2A> 从非默认托管上下文内调用方法，否则参数不起作用。</span><span class="sxs-lookup"><span data-stu-id="52d66-705">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="52d66-706">如果你的线程在对从派生的类的实例的调用中，则可能会发生这种情况 <xref:System.ContextBoundObject> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-706">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="52d66-707">即使当前正在对不是从派生的类（如）执行方法， <xref:System.ContextBoundObject> 如果在 <xref:System.String> <xref:System.ContextBoundObject> 当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="52d66-707">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="52d66-708">当你的代码在非默认上下文中执行时，为指定将 `true` `exitContext` 导致线程退出非默认的托管上下文 (也就是说，在执行方法前转换为默认上下文) <xref:System.Threading.WaitHandle.WaitOne%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-708">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="52d66-709">调用方法完成后，线程返回到原始的非默认上下文 <xref:System.Threading.WaitHandle.WaitOne%2A> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-709">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="52d66-710">当上下文绑定类具有时，这会很有用 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="52d66-710">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="52d66-711">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="52d66-711">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="52d66-712">如果成员的调用堆栈中的代码调用 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法并 `true` 为指定 `exitContext` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="52d66-712">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="52d66-713">当 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="52d66-713">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-714">下面的代码示例演示如何使用等待句柄来防止进程在等待后台线程完成执行时终止。</span><span class="sxs-lookup"><span data-stu-id="52d66-714">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="52d66-715">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="52d66-715">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="52d66-716"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-716"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="52d66-717">- 或 -</span><span class="sxs-lookup"><span data-stu-id="52d66-717">-or-</span></span> 
 <span data-ttu-id="52d66-718"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="52d66-718"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="52d66-719">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="52d66-719">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="52d66-720">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="52d66-720">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52d66-721">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="52d66-721">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary><span data-ttu-id="52d66-722">指示在任何等待句柄终止之前 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作已超时。</span><span class="sxs-lookup"><span data-stu-id="52d66-722">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span></span> <span data-ttu-id="52d66-723">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="52d66-723">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52d66-724">此字段是可能的返回值之一 `WaitAny` 。</span><span class="sxs-lookup"><span data-stu-id="52d66-724">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52d66-725">下面的代码示例演示如何使用线程池同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="52d66-725">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="52d66-726">出于空间考虑，只会搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="52d66-726">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
