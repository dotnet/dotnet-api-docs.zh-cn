<Type Name="Barrier" FullName="System.Threading.Barrier">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ce90dcc888fe04c55e57eedce8323642d070468" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89930969" /></Metadata><TypeSignature Language="C#" Value="public class Barrier : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Barrier extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Barrier" />
  <TypeSignature Language="VB.NET" Value="Public Class Barrier&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Barrier : IDisposable" />
  <TypeSignature Language="F#" Value="type Barrier = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使多个任务能够采用并行方式依据某种算法在多个阶段中协同工作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过一系列阶段共同合作的一组任务，其中每个阶段都在每个阶段到达， <xref:System.Threading.Barrier> 并隐式等待所有其他阶段到达。 相同的 <xref:System.Threading.Barrier> 可用于多个阶段。  
  
   
  
## Examples  
 下面的示例演示如何使用屏障：  
  
 [!code-csharp[System.Threading.Barrier#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.barrier/cs/barrier.cs#01)]
 [!code-vb[System.Threading.Barrier#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.barrier/vb/barrier.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>的所有公共和受保护的成员 <see cref="T:System.Threading.Barrier" /> 都是线程安全的，并且可以从多个线程并发使用，而 Dispose 除外，只需在上的所有其他操作完成后使用 <see cref="T:System.Threading.Barrier" /> 。</threadsafe>
    <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
    <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</summary>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Barrier (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (participantCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Barrier(int participantCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Barrier : int -&gt; System.Threading.Barrier" Usage="new System.Threading.Barrier participantCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount">参与线程的数量。</param>
        <summary>初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount" /> 小于 0 或大于 32,767。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Barrier (int participantCount, Action&lt;System.Threading.Barrier&gt; postPhaseAction);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 participantCount, class System.Action`1&lt;class System.Threading.Barrier&gt; postPhaseAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (participantCount As Integer, postPhaseAction As Action(Of Barrier))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Barrier(int participantCount, Action&lt;System::Threading::Barrier ^&gt; ^ postPhaseAction);" />
      <MemberSignature Language="F#" Value="new System.Threading.Barrier : int * Action&lt;System.Threading.Barrier&gt; -&gt; System.Threading.Barrier" Usage="new System.Threading.Barrier (participantCount, postPhaseAction)" />
      <MemberSignature Language="C#" Value="public Barrier (int participantCount, Action&lt;System.Threading.Barrier&gt;? postPhaseAction);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
        <Parameter Name="postPhaseAction" Type="System.Action&lt;System.Threading.Barrier&gt;" />
      </Parameters>
      <Docs>
        <param name="participantCount">参与线程的数量。</param>
        <param name="postPhaseAction">在每个阶段后执行 <see cref="T:System.Action`1" />。 可传递 NULL（在 Visual Basic 中为 Nothing）以执行未执行任何操作。</param>
        <summary>初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `postPhaseAction`委托将在所有参与者在一个阶段到达关卡后执行。 在 postPhaseAction 委托执行完毕之前，不会将参与者发布到下一阶段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount" /> 小于 0 或大于 32,767。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="AddParticipant">
      <MemberSignature Language="C#" Value="public long AddParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AddParticipant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.AddParticipant" />
      <MemberSignature Language="VB.NET" Value="Public Function AddParticipant () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AddParticipant();" />
      <MemberSignature Language="F#" Value="member this.AddParticipant : unit -&gt; int64" Usage="barrier.AddParticipant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会有另一个参与者。</summary>
        <returns>新参与者将首先参与的屏障的阶段编号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果关卡当前正在执行 "后阶段" 操作，此调用将被阻止，直到 "后期阶段" 操作完成并且关卡已转到下一阶段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.InvalidOperationException">添加参与者将导致屏障的参与者计数超过 32,767。  
  
 - 或 -  
  
 该方法从阶段后操作中调用。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="AddParticipants">
      <MemberSignature Language="C#" Value="public long AddParticipants (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AddParticipants(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.AddParticipants(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddParticipants (participantCount As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AddParticipants(int participantCount);" />
      <MemberSignature Language="F#" Value="member this.AddParticipants : int -&gt; int64" Usage="barrier.AddParticipants participantCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount">要添加到屏障的其他参与者的数量。</param>
        <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会有多个其他参与者。</summary>
        <returns>新参与者将首先参与的屏障的阶段编号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果关卡当前正在执行 "后阶段" 操作，此调用将被阻止，直到 "后期阶段" 操作完成并且关卡已转到下一阶段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount" /> 小于 0。  
  
- 或 - 
添加 <paramref name="participantCount" /> 参与者将导致屏障的参与者计数超过 32,767。</exception>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentPhaseNumber">
      <MemberSignature Language="C#" Value="public long CurrentPhaseNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 CurrentPhaseNumber" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.CurrentPhaseNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPhaseNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long CurrentPhaseNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPhaseNumber : int64" Usage="System.Threading.Barrier.CurrentPhaseNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取屏障的当前阶段的编号。</summary>
        <value>返回屏障的当前阶段的编号。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.Threading.Barrier" /> 类的当前实例使用的资源。</summary>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="barrier.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.Threading.Barrier" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 `Dispose` 后，应调用 <xref:System.Threading.Barrier>。 `Dispose` 方法使 <xref:System.Threading.Barrier> 处于不可用状态。 调用后 `Dispose` ，必须释放对的所有引用， <xref:System.Threading.Barrier> 以便垃圾回收器能够回收占用的内存 <xref:System.Threading.Barrier> 。  
  
 有关详细信息，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。  
  
> [!NOTE]
>  每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.Threading.Barrier>。 否则，在垃圾回收器调用 <xref:System.Threading.Barrier> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="barrier.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要同时释放非托管资源和托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
        <summary>释放由 <see cref="T:System.Threading.Barrier" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与的大多数成员不同 <xref:System.Threading.Barrier> ，Dispose 不是线程安全的，不能与此实例的其他成员同时使用。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="ParticipantCount">
      <MemberSignature Language="C#" Value="public int ParticipantCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ParticipantCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.ParticipantCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParticipantCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ParticipantCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ParticipantCount : int" Usage="System.Threading.Barrier.ParticipantCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取屏障中参与者的总数。</summary>
        <value>返回屏障中参与者的总数。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="ParticipantsRemaining">
      <MemberSignature Language="C#" Value="public int ParticipantsRemaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ParticipantsRemaining" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.ParticipantsRemaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParticipantsRemaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ParticipantsRemaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ParticipantsRemaining : int" Usage="System.Threading.Barrier.ParticipantsRemaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取屏障中尚未在当前阶段发出信号的参与者的数量。</summary>
        <value>返回屏障中尚未在当前阶段发出信号的参与者的数量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行阶段操作委托执行期间，如果 ParticipantCount 为0，则这可能为0。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveParticipant">
      <MemberSignature Language="C#" Value="public void RemoveParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveParticipant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.RemoveParticipant" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveParticipant ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveParticipant();" />
      <MemberSignature Language="F#" Value="member this.RemoveParticipant : unit -&gt; unit" Usage="barrier.RemoveParticipant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会减少一个参与者。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.InvalidOperationException">屏障已经有 0 个参与者。  
  
 - 或 -  
  
 该方法从阶段后操作中调用。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveParticipants">
      <MemberSignature Language="C#" Value="public void RemoveParticipants (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveParticipants(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.RemoveParticipants(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveParticipants (participantCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveParticipants(int participantCount);" />
      <MemberSignature Language="F#" Value="member this.RemoveParticipants : int -&gt; unit" Usage="barrier.RemoveParticipants participantCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount">要从屏障中移除的其他参与者的数量。</param>
        <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会减少一些参与者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `participantCount` 参与者已在等待关卡，此删除操作将完成关卡，执行 "后期阶段" 操作，并且所有参与者都将唤醒，就像要删除的此参与者已成功达到关卡一样。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">参与者总数小于指定 <paramref name="participantCount" /></exception>
        <exception cref="T:System.InvalidOperationException">屏障已经有 0 个参与者。  
  
 - 或 -  
  
 该方法从阶段后操作中调用。  
  
 - 或 -  
  
 当前的参与者计数小于指定 participantCount</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>发出参与者已达到屏障并等待所有其他参与者也达到屏障。</summary>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public void SignalAndWait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalAndWait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignalAndWait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SignalAndWait();" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : unit -&gt; unit" Usage="barrier.SignalAndWait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>发出参与者已达到屏障并等待所有其他参与者也达到屏障。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
        <exception cref="T:System.Threading.BarrierPostPhaseException">在所有参与线程调用了 SignalAndWait 之后，如果关卡的后期阶段操作中引发了异常，该异常将包装在 BarrierPostPhaseException 中并在所有参与线程上引发。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : int -&gt; bool" Usage="barrier.SignalAndWait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
        <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，同时使用 32 位带符号整数测量超时。</summary>
        <returns>如果所有参与者都已在指定时间内达到屏障，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
        <exception cref="T:System.Threading.BarrierPostPhaseException">在所有参与线程调用了 SignalAndWait 之后，如果关卡的后期阶段操作中引发了异常，该异常将包装在 BarrierPostPhaseException 中并在所有参与线程上引发。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public void SignalAndWait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalAndWait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignalAndWait (cancellationToken As CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SignalAndWait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : System.Threading.CancellationToken -&gt; unit" Usage="barrier.SignalAndWait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
        <summary>发出参与者已达到屏障的信号，并等待所有其他参与者达到屏障，同时观察取消标记。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" /> 已取消。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : TimeSpan -&gt; bool" Usage="barrier.SignalAndWait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
        <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，同时使用 <see cref="T:System.TimeSpan" /> 对象测量时间间隔。</summary>
        <returns>如果所有其他参与者已到达关卡，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 32,767。</exception>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : int * System.Threading.CancellationToken -&gt; bool" Usage="barrier.SignalAndWait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
        <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
        <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，使用 32 位带符号整数测量超时，同时观察取消标记。</summary>
        <returns>如果所有参与者都已在指定时间内达到屏障，则为 true；否则为 false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在 `cancellationToken` 信号生效之前已取消，则 <xref:System.OperationCanceledException> 会引发并 <xref:System.Threading.Barrier.ParticipantsRemaining%2A> 减小值。 如果在 `cancellationToken` 信号生效后未取消或被取消，则 <xref:System.Threading.Barrier.ParticipantsRemaining%2A> 会降低，并且不 <xref:System.OperationCanceledException> 会引发。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" /> 已取消。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="barrier.SignalAndWait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
        <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
        <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，使用 <see cref="T:System.TimeSpan" /> 对象测量时间间隔，同时观察取消标记。</summary>
        <returns>如果所有其他参与者已到达关卡，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" /> 已取消。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</exception>
        <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
        <related type="Article" href="/dotnet/standard/threading/barrier">屏障</related>
        <related type="Article" href="/dotnet/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier">如何：使用屏障来使并发操作保持同步</related>
      </Docs>
    </Member>
  </Members>
</Type>
