<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c39d73aba14d7928eba9f731d9d1148c91b7ff76" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86667639" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="52eb2-101">包含线程过程的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="52eb2-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="52eb2-102">表示在 <see cref="T:System.Threading.Thread" /> 上执行的方法。</span><span class="sxs-lookup"><span data-stu-id="52eb2-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52eb2-103">创建托管线程时，将通过以下方式表示在线程上执行的方法：</span><span class="sxs-lookup"><span data-stu-id="52eb2-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="52eb2-104"><xref:System.Threading.ThreadStart>传递给 <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> 构造函数的委托。</span><span class="sxs-lookup"><span data-stu-id="52eb2-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="52eb2-105">任何没有参数并且以 `void` c # 或返回的方法均为 `Sub` Visual Basic 中的过程可以表示委托。</span><span class="sxs-lookup"><span data-stu-id="52eb2-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="52eb2-106"><xref:System.Threading.ParameterizedThreadStart>传递给 <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> 构造函数的委托。</span><span class="sxs-lookup"><span data-stu-id="52eb2-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="52eb2-107">具有类型为和的单一参数的任何方法在 <xref:System.Object> c # 中返回 void，或者是 Visual Basic 可以表示委托的 Sub 过程。</span><span class="sxs-lookup"><span data-stu-id="52eb2-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="52eb2-108">在调用方法之前，不会开始执行线程 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52eb2-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="52eb2-109">在 <xref:System.Threading.ThreadStart> <xref:System.Threading.ParameterizedThreadStart> 线程上调用或委托，并在委托表示的方法的第一行开始执行。</span><span class="sxs-lookup"><span data-stu-id="52eb2-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="52eb2-110">对于 <xref:System.Threading.ParameterizedThreadStart> 委托，传递给方法的对象 <xref:System.Threading.Thread.Start%28System.Object%29> 将传递给委托。</span><span class="sxs-lookup"><span data-stu-id="52eb2-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52eb2-111">在创建线程时，Visual Basic 和 c # 用户可以省略 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="52eb2-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="52eb2-112">在 Visual Basic 中，在将 `AddressOf` 方法传递给构造函数时使用运算符 <xref:System.Threading.Thread.%23ctor%2A> ; 例如， `Dim t As New Thread(AddressOf ThreadProc)` 。</span><span class="sxs-lookup"><span data-stu-id="52eb2-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="52eb2-113">在 c # 中，只需指定线程过程的名称。</span><span class="sxs-lookup"><span data-stu-id="52eb2-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="52eb2-114">编译器选择正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="52eb2-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52eb2-115">在 <xref:System.Threading.ParameterizedThreadStart> c + + 中创建实例方法的委托时，该构造函数的第一个参数是实例变量。</span><span class="sxs-lookup"><span data-stu-id="52eb2-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="52eb2-116">对于静态方法，该构造函数的第一个参数为零。</span><span class="sxs-lookup"><span data-stu-id="52eb2-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="52eb2-117">对于静态方法，委托构造函数只需要一个参数：由类名限定的回调方法的地址。</span><span class="sxs-lookup"><span data-stu-id="52eb2-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="52eb2-118"><xref:System.Threading.ParameterizedThreadStart>委托和 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 方法重载使您可以轻松地将数据传递给线程过程，但此方法不是类型安全的，因为任何对象均可传递给 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="52eb2-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="52eb2-119">将数据传递给线程过程的一种更可靠的方法是将线程过程和数据字段放入辅助角色对象。</span><span class="sxs-lookup"><span data-stu-id="52eb2-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="52eb2-120">有关详细信息，请参阅 [在启动时创建线程和传递数据](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time)。</span><span class="sxs-lookup"><span data-stu-id="52eb2-120">For more information, see [Creating Threads and Passing Data at Start Time](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time).</span></span>  
  
 <span data-ttu-id="52eb2-121"><xref:System.Threading.ParameterizedThreadStart>委托仅支持一个参数。</span><span class="sxs-lookup"><span data-stu-id="52eb2-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="52eb2-122">可以通过将多个数据项的参数传递给，将其传递给 <xref:System.Threading.ParameterizedThreadStart> ：</span><span class="sxs-lookup"><span data-stu-id="52eb2-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="52eb2-123">一个数组。</span><span class="sxs-lookup"><span data-stu-id="52eb2-123">An array.</span></span>  
  
-   <span data-ttu-id="52eb2-124">集合类型，如果所有数据项的类型相同，则为。</span><span class="sxs-lookup"><span data-stu-id="52eb2-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="52eb2-125">元组类型，如 <xref:System.Tuple%602> 或 <xref:System.Tuple%604> 。</span><span class="sxs-lookup"><span data-stu-id="52eb2-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52eb2-126">下面的代码示例使用 <xref:System.Threading.ParameterizedThreadStart> 委托来执行静态方法和实例方法。</span><span class="sxs-lookup"><span data-stu-id="52eb2-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="52eb2-127">第一个 <xref:System.Threading.ParameterizedThreadStart> 委托由静态 `DoWork` 方法表示，第二个委托由实例 `DoMoreWork` 方法表示。</span><span class="sxs-lookup"><span data-stu-id="52eb2-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="52eb2-128">这两个方法都与 <xref:System.Threading.ParameterizedThreadStart> 委托签名匹配; 即，它们具有一个类型为的参数 <xref:System.Object> ，不会返回值。</span><span class="sxs-lookup"><span data-stu-id="52eb2-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52eb2-129">Visual Basic 和 c # 编译器 <xref:System.Threading.ParameterizedThreadStart> 从和方法的签名推断委托 `DoWork` `DoMoreWork` ，并调用正确的构造函数。</span><span class="sxs-lookup"><span data-stu-id="52eb2-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="52eb2-130">因此，在代码中没有显式构造函数调用。</span><span class="sxs-lookup"><span data-stu-id="52eb2-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time"><span data-ttu-id="52eb2-131">创建线程</span><span class="sxs-lookup"><span data-stu-id="52eb2-131">Creating Threads</span></span></related>
  </Docs>
</Type>
