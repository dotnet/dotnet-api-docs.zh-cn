<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5630c0bb59c8b6a0994c4b7c8988d18cebd9305" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83958072" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">包含线程过程的数据的对象。</param>
    <summary>表示在 <see cref="T:System.Threading.Thread" /> 上执行的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建托管线程时，将通过以下方式表示在线程上执行的方法：  
  
-   传递到 <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> 构造函数的 <xref:System.Threading.ThreadStart> 委托。  任何没有参数并且在或中C#返回 `void` 的方法都是 Visual Basic 可以表示委托的 `Sub` 过程。  
  
-   传递到 <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> 构造函数的 <xref:System.Threading.ParameterizedThreadStart> 委托。 任何具有 <xref:System.Object> 类型的参数且在或中C#返回 void 的方法都是 Visual Basic 可以表示该委托的子过程。  
  
 直到调用 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 方法，线程才会开始执行。 在线程上调用 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托，并在委托表示的方法的第一行开始执行。 对于 <xref:System.Threading.ParameterizedThreadStart> 委托，传递到 <xref:System.Threading.Thread.Start%28System.Object%29> 方法的对象将传递到委托。  
  
> [!NOTE]
>  Visual Basic 和C#用户在创建线程时可以省略 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托构造函数。 在 Visual Basic 中，将方法传递到 <xref:System.Threading.Thread.%23ctor%2A> 构造函数时使用 `AddressOf` 运算符;例如，`Dim t As New Thread(AddressOf ThreadProc)`。 在C#中，只需指定线程过程的名称。 编译器选择正确的委托构造函数。  
  
> [!NOTE]
>  为中C++的实例方法创建 <xref:System.Threading.ParameterizedThreadStart> 委托时，构造函数的第一个参数是实例变量。 对于静态方法，该构造函数的第一个参数为零。 对于静态方法，委托构造函数只需要一个参数：由类名限定的回调方法的地址。  
  
 <xref:System.Threading.ParameterizedThreadStart> 委托和 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 方法重载使您可以轻松地将数据传递给线程过程，但此方法不是类型安全的，因为任何对象都可以传递到 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>中。 将数据传递给线程过程的一种更可靠的方法是将线程过程和数据字段放入辅助角色对象。 有关详细信息，请参阅[在启动时创建线程和传递数据](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time)。  
  
 <xref:System.Threading.ParameterizedThreadStart> 委托仅支持一个参数。 可以通过将多个数据项传递到 <xref:System.Threading.ParameterizedThreadStart>，方法是使用以下参数之一：  
  
-   一个 数组。  
  
-   集合类型，如果所有数据项的类型相同，则为。  
  
-   元组类型，如 <xref:System.Tuple%602> 或 <xref:System.Tuple%604>。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Threading.ParameterizedThreadStart> 委托来执行静态方法和实例方法。 第一个 <xref:System.Threading.ParameterizedThreadStart> 委托由静态 `DoWork` 方法表示，第二个委托由实例 `DoMoreWork` 方法表示。 这两个方法都匹配 <xref:System.Threading.ParameterizedThreadStart> 委托签名;也就是说，它们具有一个类型 <xref:System.Object> 的参数，不会返回值。  
  
> [!NOTE]
>  Visual Basic 和C#编译器从 `DoWork` 和 `DoMoreWork` 方法的签名推断 <xref:System.Threading.ParameterizedThreadStart> 委托，并调用正确的构造函数。 因此，在代码中没有显式构造函数调用。  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time">创建线程</related>
  </Docs>
</Type>
