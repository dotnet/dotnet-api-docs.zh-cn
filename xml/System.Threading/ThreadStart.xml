<Type Name="ThreadStart" FullName="System.Threading.ThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ae0dbfe271e052698df93b4ea997a241a9f7f311" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94467267" /></Metadata><TypeSignature Language="C#" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ThreadStart()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="F#" Value="type ThreadStart = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Thread" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>表示在 <see cref="T:System.Threading.Thread" /> 上执行的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建托管线程时，在该线程上执行的方法由 <xref:System.Threading.ThreadStart> <xref:System.Threading.ParameterizedThreadStart> 传递给构造函数的委托或委托表示 <xref:System.Threading.Thread.%23ctor%2A> 。 在调用方法之前，不会开始执行线程 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 。 执行从或委托表示的方法的第一行开始 <xref:System.Threading.ThreadStart> <xref:System.Threading.ParameterizedThreadStart> 。  
  
> [!NOTE]
>  在创建线程时，Visual Basic 和 c # 用户可以省略 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托构造函数。 在 Visual Basic 中，在将 `AddressOf` 方法传递给构造函数时使用运算符 <xref:System.Threading.Thread.%23ctor%2A> ; 例如， `Dim t As New Thread(AddressOf ThreadProc)` 。 在 c # 中，只需指定线程过程的名称。 编译器选择正确的委托构造函数。  
>  
>  对于 c + +，从 .NET Framework 2.0 开始，为 <xref:System.Threading.ThreadStart> 静态方法创建委托只需要一个参数：由类名限定的回调方法的地址。 在早期版本中，为静态方法创建委托时需要两个参数：零 (null) 和方法地址。 对于实例方法，所有版本都需要两个参数：实例变量和方法地址。  
  
   
  
## Examples  
 下面的代码示例演示用于创建委托并将 <xref:System.Threading.ThreadStart> 委托与实例方法和静态方法一起使用的语法。  
  
 有关演示如何创建委托的另一个简单示例 <xref:System.Threading.ThreadStart> ，请参阅 <xref:System.Threading.Thread.Start?displayProperty=nameWithType> 方法重载。 有关创建线程的详细信息，请参阅 [在启动时创建线程和传递数据](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time)。  
  
 [!code-cpp[System.Threading.ThreadStart2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadStart2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadStart2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadStart2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ParameterizedThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time">启动时创建线程并传递数据</related>
  </Docs>
</Type>
