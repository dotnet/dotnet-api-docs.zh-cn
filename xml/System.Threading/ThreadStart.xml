<Type Name="ThreadStart" FullName="System.Threading.ThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e7eac3c5e7deb75c9b54ed92d2ca3399f7371fe4" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83967280" /></Metadata><TypeSignature Language="C#" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ThreadStart()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="F#" Value="type ThreadStart = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary><span data-ttu-id="4e1dc-101">表示在 <see cref="T:System.Threading.Thread" /> 上执行的方法。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-101">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e1dc-102">创建托管线程时，在该线程上执行的方法由 <xref:System.Threading.ThreadStart> 委托或传递到 <xref:System.Threading.Thread.%23ctor%2A> 构造函数的 <xref:System.Threading.ParameterizedThreadStart> 委托表示。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-102">When a managed thread is created, the method that executes on the thread is represented by a <xref:System.Threading.ThreadStart> delegate or a <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%2A> constructor.</span></span> <span data-ttu-id="4e1dc-103">直到调用 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 方法，线程才会开始执行。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-103">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="4e1dc-104">执行从 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托表示的方法的第一行开始。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-104">Execution begins at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e1dc-105">Visual Basic 和C#用户在创建线程时可以省略 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-105">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="4e1dc-106">在 Visual Basic 中，将方法传递到 <xref:System.Threading.Thread.%23ctor%2A> 构造函数时使用 `AddressOf` 运算符;例如，`Dim t As New Thread(AddressOf ThreadProc)`。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-106">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="4e1dc-107">在C#中，只需指定线程过程的名称。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-107">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="4e1dc-108">编译器选择正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-108">The compiler selects the correct delegate constructor.</span></span>  
>  
>  <span data-ttu-id="4e1dc-109">对于C++，从 .NET Framework 2.0 开始，为静态方法创建 <xref:System.Threading.ThreadStart> 委托只需要一个参数：由类名称限定的回调方法的地址。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-109">For C++, starting with .NET Framework 2.0, creating a <xref:System.Threading.ThreadStart> delegate for a static method requires only one parameter: the address of the callback method, qualified by the class name.</span></span> <span data-ttu-id="4e1dc-110">在早期版本中，为静态方法创建委托时需要两个参数：零（null）和方法地址。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-110">In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address.</span></span> <span data-ttu-id="4e1dc-111">对于实例方法，所有版本都需要两个参数：实例变量和方法地址。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-111">For an instance method, all versions require two parameters: the instance variable and the method address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e1dc-112">下面的代码示例演示用于创建和使用带有实例方法和静态方法的 <xref:System.Threading.ThreadStart> 委托的语法。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-112">The following code example shows the syntax for creating and using a <xref:System.Threading.ThreadStart> delegate with an instance method and with a static method.</span></span>  
  
 <span data-ttu-id="4e1dc-113">有关演示如何创建 <xref:System.Threading.ThreadStart> 委托的另一个简单示例，请参阅 <xref:System.Threading.Thread.Start?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-113">For another simple example that demonstrates how to create a <xref:System.Threading.ThreadStart> delegate, see the <xref:System.Threading.Thread.Start?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="4e1dc-114">有关创建线程的详细信息，请参阅[在启动时创建线程和传递数据](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time)。</span><span class="sxs-lookup"><span data-stu-id="4e1dc-114">For more information about thread creation, see [Creating Threads and Passing Data at Start Time](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time).</span></span>  
  
 [!code-cpp[System.Threading.ThreadStart2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadStart2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadStart2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadStart2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ParameterizedThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time"><span data-ttu-id="4e1dc-115">启动时创建线程并传递数据</span><span class="sxs-lookup"><span data-stu-id="4e1dc-115">Creating threads and passing data at start time</span></span></related>
  </Docs>
</Type>
