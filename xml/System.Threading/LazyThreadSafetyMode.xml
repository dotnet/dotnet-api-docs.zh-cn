<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb06932498cc7a29c8ed6e4d3517a73f6d6a46d1" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83530211" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>指定 <see cref="T:System.Lazy`1" /> 实例如何同步多个线程间的访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此枚举指定 <xref:System.Lazy%601> 构造函数的 `mode` 参数。 所有构造函数对线程同步的影响都可以根据此枚举进行描述，无论它们是否有 `mode` 参数。  
  
 <xref:System.Lazy%601> 实例通过用户指定的初始化方法或 `T`的无参数构造函数进行初始化。 初始化方法由 <xref:System.Lazy%601> 构造函数的 `valueFactory` 参数指定。 方法返回 `T`的实例，该实例是 <xref:System.Lazy%601>实例延迟实例化的类型。 如果构造函数没有 `valueFactory` 参数，则使用 `T` 的无参数构造函数来初始化 <xref:System.Lazy%601> 实例。 在任一情况下，第一次调用 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性时将发生初始化。  
  
 除了指定 <xref:System.Lazy%601> 实例的线程安全，此枚举还会影响异常缓存。 当缓存 <xref:System.Lazy%601> 实例的异常时，只会有一个机会初始化该实例。 如果第一次调用 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性时引发了异常，则会缓存该异常并在对 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性的所有后续调用中再次引发该异常。 缓存异常的优点是，即使发生错误，任何两个线程总是获得相同的结果。  
  
 指定 PublicationOnly 模式时，永远不会缓存异常。 如果指定 "无" 或 "ExecutionAndPublication"，则缓存取决于指定初始化方法还是允许使用无参数构造函数进行 `T`。 指定初始化方法可启用这两种模式的异常缓存。 初始化方法非常简单。 例如，它可能会调用 `T`的无参数构造函数： `new Lazy<Contents>(() => new Contents(), mode)` C#在中，或者在 Visual Basic 中 `New Lazy(Of Contents)(Function() New Contents())`。 如果你使用不指定初始化方法的构造函数，则不会缓存 `T` 的无参数构造函数引发的异常。 下表汇总了异常的缓存行为。  
  
|模式|使用初始化方法|使用无参数构造函数进行 `T`|  
|----------|---------------------------------|---------------------------------------|  
|无|Cached（缓存的请求）|未缓存|  
|PublicationOnly|未缓存|未缓存|  
|ExecutionAndPublication|Cached（缓存的请求）|未缓存|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>使用锁来确保只有一个线程可以在线程安全的方式下初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法（如果没有初始化方法，则为无参数构造函数）在内部使用锁，则可能会发生死锁。 如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在你首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。 如果使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 无参数构造函数引发的异常。 在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><see cref="T:System.Lazy`1" /> 实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。 仅应在高性能至关重要并且保证决不会从多个线程初始化 <see cref="T:System.Lazy`1" /> 实例时才使用该模式。 如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在你首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。 如果使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 无参数构造函数引发的异常。 在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>当多个线程尝试同时初始化一个 <see cref="T:System.Lazy`1" /> 实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则运行无参数构造函数）。 完成初始化的第一个线程设置 <see cref="T:System.Lazy`1" /> 实例的值。 该值将返回给同时运行初始化方法的其他所有线程，除非初始化方法对这些线程引发异常。 争用线程创建的任何 <paramref name="T" /> 实例都将被放弃。 如果初始化方法对任何线程引发异常，则该异常会从该线程上的 <see cref="P:System.Lazy`1.Value" /> 属性传播出去。 不缓存该异常。 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性的值仍然为 <see langword="false" />，并且随后通过其中引发异常的线程或通过其他线程对 <see cref="P:System.Lazy`1.Value" /> 属性的调用会导致初始化方法再次运行。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则不会引发异常。</summary>
      </Docs>
    </Member>
  </Members>
</Type>
