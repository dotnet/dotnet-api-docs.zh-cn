<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f345b3c4f22622f923cd1852db98b35a710a658" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83958131" /></Metadata><TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7c51c-101">提供延迟初始化例程。</span><span class="sxs-lookup"><span data-stu-id="7c51c-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c51c-102">这些例程避免了需要分配一个专用的迟缓初始化实例，而是使用引用来确保目标已在访问时进行了初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c51c-103">下面的示例演示如何使用 EnsureInitialized 来延迟初始化值，以使用布尔值来跟踪初始化是否已发生，并将对象用作互斥锁。</span><span class="sxs-lookup"><span data-stu-id="7c51c-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
bool _dataInitialized = false;  
object _dataLock = new object();  

//  ...  
  
ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="7c51c-104"><see cref="T:System.Threading.LazyInitializer" /> 的方法是线程安全的，可同时从多个线程调用。</span><span class="sxs-lookup"><span data-stu-id="7c51c-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="7c51c-105">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="7c51c-105">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7c51c-106">在服务尚未初始化的情况下，初始化目标类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-106">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7c51c-107">要初始化的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-107">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="7c51c-108">要初始化的引用（如果尚未初始化）。</span><span class="sxs-lookup"><span data-stu-id="7c51c-108">A reference to initialize if it has not already been initialized.</span></span> <span data-ttu-id="7c51c-109">如果是 <see langword="null" />，则将其视为未初始化；否则，将其视为已初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-109">If it is <see langword="null" />, it is considered not initialized; otherwise, it's considered initialized.</span></span></param>
        <summary><span data-ttu-id="7c51c-110">在目标引用或值类型尚未初始化的情况下，使用其类型的无参数构造函数初始化目标引用类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-110">Initializes a target reference type with the type's parameterless constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="7c51c-111">已初始化的对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-111">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c51c-112">此方法只能用于引用类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-112">This method may only be used on reference types.</span></span> <span data-ttu-id="7c51c-113">若要确保值类型的初始化，请参阅 `EnsureInitialized`的其他重载。</span><span class="sxs-lookup"><span data-stu-id="7c51c-113">To ensure initialization of value types, see other overloads of `EnsureInitialized`.</span></span>  
  
 <span data-ttu-id="7c51c-114">此方法可由多个线程同时用于初始化 `target`。</span><span class="sxs-lookup"><span data-stu-id="7c51c-114">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="7c51c-115">当多个线程同时访问此方法时，可能会创建 `T` 的多个实例，但只能将一个实例存储到 `target` 中并返回。</span><span class="sxs-lookup"><span data-stu-id="7c51c-115">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target` and returned.</span></span> <span data-ttu-id="7c51c-116">在这种情况下，此方法将不会释放未存储的对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-116">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="7c51c-117">如果必须释放此类对象，则使用重载，该重载采用 `valueFactory` 并释放对象（如果它未引用相同的存储对象）。</span><span class="sxs-lookup"><span data-stu-id="7c51c-117">If such objects must be disposed, use an overload that takes a `valueFactory` and dispose of the object if it does not reference the same stored object.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7c51c-118">缺少访问类型 <paramref name="T" /> 的构造函数的权限。</span><span class="sxs-lookup"><span data-stu-id="7c51c-118">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="7c51c-119"><paramref name="T" /> 类型没有无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="7c51c-119">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="7c51c-120">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="7c51c-120">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7c51c-121">要初始化的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-121">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="7c51c-122">要初始化的引用（如果尚未初始化）。</span><span class="sxs-lookup"><span data-stu-id="7c51c-122">The reference to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="7c51c-123">调用函数以初始化该引用。</span><span class="sxs-lookup"><span data-stu-id="7c51c-123">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="7c51c-124">在目标引用类型尚未初始化的情况下，使用指定函数初始化目标引用类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-124">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="7c51c-125">已初始化的对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-125">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c51c-126">此方法只能用于引用类型，`valueFactory` 可能不会返回空引用（在 Visual Basic 中为 Nothing）。</span><span class="sxs-lookup"><span data-stu-id="7c51c-126">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="7c51c-127">若要确保值类型的初始化或允许空引用类型，请参阅 EnsureInitialized 的其他重载。</span><span class="sxs-lookup"><span data-stu-id="7c51c-127">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="7c51c-128">此方法可由多个线程同时用于初始化 `target`。</span><span class="sxs-lookup"><span data-stu-id="7c51c-128">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="7c51c-129">当多个线程同时访问此方法时，可能会创建 `T` 的多个实例，但只能将一个实例存储到 `target`中。</span><span class="sxs-lookup"><span data-stu-id="7c51c-129">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="7c51c-130">在这种情况下，此方法将不会释放未存储的对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-130">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="7c51c-131">如果必须释放此类对象，则由调用方确定是否未使用对象，并适当地释放对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-131">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="7c51c-132"><paramref name="T" /> 类型没有无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="7c51c-132">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7c51c-133"><paramref name="valueFactory" /> 返回 null（在 Visual Basic 中为 Nothing）。</span><span class="sxs-lookup"><span data-stu-id="7c51c-133"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="7c51c-134">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="7c51c-134">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * bool * obj -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7c51c-135">要初始化的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-135">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="7c51c-136">在尚未初始化的情况下，要初始化的类型 <c>T</c> 的引用或值。</span><span class="sxs-lookup"><span data-stu-id="7c51c-136">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="7c51c-137">对布尔值的引用，该值确定目标是否已初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-137">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="7c51c-138">对用作相互排斥锁的对象的引用，用于初始化 <paramref name="target" />。</span><span class="sxs-lookup"><span data-stu-id="7c51c-138">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="7c51c-139">如果 <paramref name="syncLock" /> 为 <see langword="null" />，则新的对象将被实例化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-139">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="7c51c-140">在目标引用或值类型尚未初始化的情况下，使用其无参数构造函数对其进行初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-140">Initializes a target reference or value type with its parameterless constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="7c51c-141">已初始化的对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-141">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c51c-142">如果将 `initialized` 指定为 true，则不会进行进一步的初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-142">If `initialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7c51c-143">缺少访问类型 <paramref name="T" /> 的构造函数的权限。</span><span class="sxs-lookup"><span data-stu-id="7c51c-143">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="7c51c-144"><paramref name="T" /> 类型没有无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="7c51c-144">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="7c51c-145">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="7c51c-145">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * obj * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7c51c-146">要初始化的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-146">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="7c51c-147">要初始化的引用（如果尚未初始化）。</span><span class="sxs-lookup"><span data-stu-id="7c51c-147">A reference to initialize if it has not already been initialized.</span></span> <span data-ttu-id="7c51c-148">如果是 <see langword="null" />，则将其视为未初始化；否则，将其视为已初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-148">If it is <see langword="null" />, it is considered not initialized; otherwise, it's considered initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="7c51c-149">对用作相互排斥锁的对象的引用，用于初始化 <paramref name="target" />。</span><span class="sxs-lookup"><span data-stu-id="7c51c-149">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="7c51c-150">如果 <paramref name="syncLock" /> 为 <see langword="null" />，则新的对象将被实例化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-150">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="7c51c-151">为初始化 <paramref name="target" /> 而调用的方法。</span><span class="sxs-lookup"><span data-stu-id="7c51c-151">The method to invoke to initialize <paramref name="target" />.</span></span></param>
        <summary><span data-ttu-id="7c51c-152">在目标引用类型尚未初始化的情况下，使用指定函数初始化目标引用类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-152">Initializes a target reference type with a specified function if it has not already been initialized.</span></span></summary>
        <returns><span data-ttu-id="7c51c-153">已初始化的对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-153">The initialized object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * bool * obj * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7c51c-154">要初始化的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-154">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="7c51c-155">在尚未初始化的情况下，要初始化的类型 <c>T</c> 的引用或值。</span><span class="sxs-lookup"><span data-stu-id="7c51c-155">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="7c51c-156">对布尔值的引用，该值确定目标是否已初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-156">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="7c51c-157">对用作相互排斥锁的对象的引用，用于初始化 <paramref name="target" />。</span><span class="sxs-lookup"><span data-stu-id="7c51c-157">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="7c51c-158">如果 <paramref name="syncLock" /> 为 <see langword="null" />，则新的对象将被实例化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-158">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="7c51c-159">调用函数以初始化该引用或值。</span><span class="sxs-lookup"><span data-stu-id="7c51c-159">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="7c51c-160">在目标引用或值类型尚未初始化的情况下，使用指定函数初始化目标引用或值类型。</span><span class="sxs-lookup"><span data-stu-id="7c51c-160">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="7c51c-161">已初始化的对象。</span><span class="sxs-lookup"><span data-stu-id="7c51c-161">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c51c-162">如果将 `initialized` 指定为 true，则不会进行进一步的初始化。</span><span class="sxs-lookup"><span data-stu-id="7c51c-162">If `initialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="7c51c-163">缺少访问类型 <paramref name="T" /> 的构造函数的权限。</span><span class="sxs-lookup"><span data-stu-id="7c51c-163">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="7c51c-164"><paramref name="T" /> 类型没有无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="7c51c-164">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="7c51c-165">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="7c51c-165">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
