<Type Name="IAccessor" FullName="Microsoft.VisualBasic.Compatibility.VB6.IAccessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="faede42d24d5f17a59d02ed6f5073f5c4823f300" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86684008" /></Metadata><TypeSignature Language="C#" Value="public interface IAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAccessor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Compatibility.VB6.IAccessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAccessor" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAccessor" />
  <TypeSignature Language="F#" Value="type IAccessor = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("0c733a8c-2a1c-11ce-ade5-00aa0044773d")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("0c733a8c-2a1c-11ce-ade5-00aa0044773d")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 OLE DB <see langword="IAccessor" /> 接口的实现，以供从 Visual Basic 6.0 升级的应用程序使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddRefAccessor">
      <MemberSignature Language="C#" Value="public void AddRefAccessor (int hAccessor, out int cRefCount);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void AddRefAccessor([in]int32 hAccessor, [out] int32&amp; cRefCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRefAccessor (hAccessor As Integer, ByRef cRefCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRefAccessor(int hAccessor, [Runtime::InteropServices::Out] int % cRefCount);" />
      <MemberSignature Language="F#" Value="abstract member AddRefAccessor : int * int -&gt; unit" Usage="iAccessor.AddRefAccessor (hAccessor, cRefCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hAccessor" Type="System.Int32" />
        <Parameter Name="cRefCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="hAccessor">要递增其引用数的访问器句柄。</param>
        <param name="cRefCount">一个指向内存的指针，该内存用于返回访问器句柄的引用数。 如果 <paramref name="cRefCount" /> 为 null 指针，则不返回引用数。</param>
        <summary>向现有的访问器添加引用数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessor">
      <MemberSignature Language="C#" Value="public void CreateAccessor (int accessorFlags, int cBindings, Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[] bindings, int cbRowSize, out int hAccessor, IntPtr pBindStatus);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void CreateAccessor([in]int32 accessorFlags, [in]int32 cBindings, [in]valuetype Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[] bindings, [in]int32 cbRowSize, [out] int32&amp; hAccessor, [in]native int pBindStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor(System.Int32,System.Int32,Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[],System.Int32,System.Int32@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateAccessor (accessorFlags As Integer, cBindings As Integer, bindings As DBBINDING(), cbRowSize As Integer, ByRef hAccessor As Integer, pBindStatus As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateAccessor(int accessorFlags, int cBindings, cli::array &lt;Microsoft::VisualBasic::Compatibility::VB6::DBBINDING&gt; ^ bindings, int cbRowSize, [Runtime::InteropServices::Out] int % hAccessor, IntPtr pBindStatus);" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessor : int * int * Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[] * int * int * nativeint -&gt; unit" Usage="iAccessor.CreateAccessor (accessorFlags, cBindings, bindings, cbRowSize, hAccessor, pBindStatus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorFlags" Type="System.Int32" />
        <Parameter Name="cBindings" Type="System.Int32" />
        <Parameter Name="bindings" Type="Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[]" />
        <Parameter Name="cbRowSize" Type="System.Int32" />
        <Parameter Name="hAccessor" Type="System.Int32" RefType="out" />
        <Parameter Name="pBindStatus" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="accessorFlags">一个位掩码，说明访问器的属性及其使用方式。</param>
        <param name="cBindings">访问器中的绑定数。</param>
        <param name="bindings"><see cref="T:Microsoft.VisualBasic.Compatibility.VB6.DBBINDING" /> 结构的数组。</param>
        <param name="cbRowSize">在使用方的缓冲区中为一组参数或条件值分配的字节数。</param>
        <param name="hAccessor">一个指向内存的指针，该内存用于返回已创建的访问器的句柄。</param>
        <param name="pBindStatus">一个指向 <see langword="DBBINDSTATUS" /> 值的数组的指针。</param>
        <summary>从一组绑定创建访问器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public void GetBindings (int hAccessor, out int accessorFlags, out int cBindings, out IntPtr rgBindings);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void GetBindings([in]int32 hAccessor, [out] int32&amp; accessorFlags, [out] int32&amp; cBindings, [out] native int&amp; rgBindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings(System.Int32,System.Int32@,System.Int32@,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetBindings (hAccessor As Integer, ByRef accessorFlags As Integer, ByRef cBindings As Integer, ByRef rgBindings As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetBindings(int hAccessor, [Runtime::InteropServices::Out] int % accessorFlags, [Runtime::InteropServices::Out] int % cBindings, [Runtime::InteropServices::Out] IntPtr % rgBindings);" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : int * int * int * nativeint -&gt; unit" Usage="iAccessor.GetBindings (hAccessor, accessorFlags, cBindings, rgBindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hAccessor" Type="System.Int32" />
        <Parameter Name="accessorFlags" Type="System.Int32" RefType="out" />
        <Parameter Name="cBindings" Type="System.Int32" RefType="out" />
        <Parameter Name="rgBindings" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="hAccessor">要返回其绑定的访问器的句柄。</param>
        <param name="accessorFlags">一个指向内存的指针，该内存用于返回一个说明访问器的属性及其使用方式的位掩码。</param>
        <param name="cBindings">一个指向内存的指针，该内存用于返回访问器中的绑定数。</param>
        <param name="rgBindings">一个指向内存的指针，该内存用于返回 <see langword="DBBINDSTATUS" /> 结构的数组。</param>
        <summary>返回访问器中的绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAccessor">
      <MemberSignature Language="C#" Value="public void ReleaseAccessor (int hAccessor, out int cRefCount);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void ReleaseAccessor([in]int32 hAccessor, [out] int32&amp; cRefCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAccessor (hAccessor As Integer, ByRef cRefCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAccessor(int hAccessor, [Runtime::InteropServices::Out] int % cRefCount);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseAccessor : int * int -&gt; unit" Usage="iAccessor.ReleaseAccessor (hAccessor, cRefCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hAccessor" Type="System.Int32" />
        <Parameter Name="cRefCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="hAccessor">要释放的访问器的句柄。</param>
        <param name="cRefCount">一个指向内存的指针，该内存用于返回访问器句柄的剩余引用数。</param>
        <summary>释放访问器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
