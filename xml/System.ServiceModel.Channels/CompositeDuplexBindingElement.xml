<Type Name="CompositeDuplexBindingElement" FullName="System.ServiceModel.Channels.CompositeDuplexBindingElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f4a1828b1f9f7587610c908cb024452b7e3a6dd" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86748239" /></Metadata><TypeSignature Language="C#" Value="public sealed class CompositeDuplexBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CompositeDuplexBindingElement extends System.ServiceModel.Channels.BindingElement implements class System.ServiceModel.Description.IPolicyExportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.CompositeDuplexBindingElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CompositeDuplexBindingElement&#xA;Inherits BindingElement&#xA;Implements IPolicyExportExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositeDuplexBindingElement sealed : System::ServiceModel::Channels::BindingElement, System::ServiceModel::Description::IPolicyExportExtension" />
  <TypeSignature Language="F#" Value="type CompositeDuplexBindingElement = class&#xA;    inherit BindingElement&#xA;    interface IPolicyExportExtension" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.BindingElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Description.IPolicyExportExtension</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="6b848-101">表示一个绑定元素，客户端在必须公开一个终结点以使服务可以将消息发送回客户端时使用。</span><span class="sxs-lookup"><span data-stu-id="6b848-101">Represents the binding element that is used when the client must expose an endpoint for the service to send messages back to the client.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-102">它通常与本身不允许进行双工通信的传输（例如，HTTP）一起使用。</span><span class="sxs-lookup"><span data-stu-id="6b848-102">This is commonly used with transports, such as HTTP, that do not allow duplex communications natively.</span></span> <span data-ttu-id="6b848-103">与此相反，TCP 本身允许进行双工通信，因此不要求服务在将消息发送回客户端时使用此绑定元素。</span><span class="sxs-lookup"><span data-stu-id="6b848-103">TCP, by contrast, does allow duplex communications natively and so does not require the use of this binding element for the service to send messages back to a client.</span></span>  
  
 <span data-ttu-id="6b848-104">客户端必须公开一个地址，使服务能以该地址与其进行联系，并在服务与客户端之间建立连接。</span><span class="sxs-lookup"><span data-stu-id="6b848-104">The client must expose an address at which the service can contact it to establish a connection from the service to the client.</span></span> <span data-ttu-id="6b848-105">此客户端地址由 <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> 属性提供。</span><span class="sxs-lookup"><span data-stu-id="6b848-105">This client address is provided by the <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> property.</span></span> <span data-ttu-id="6b848-106">请注意，Windows Communication Foundation (WCF) 自动生成一个 <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> ，如果用户未显式设置一个。</span><span class="sxs-lookup"><span data-stu-id="6b848-106">Note that Windows Communication Foundation (WCF) auto-generates a <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> if one is not explicitly set by the user.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeDuplexBindingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositeDuplexBindingElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6b848-107">初始化 <see cref="T:System.ServiceModel.Channels.CompositeDuplexBindingElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="6b848-107">Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CompositeDuplexBindingElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt; BuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelFactory`1&lt;!!TChannel&gt; BuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildChannelFactory(Of TChannel) (context As BindingContext) As IChannelFactory(Of TChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; override System::ServiceModel::Channels::IChannelFactory&lt;TChannel&gt; ^ BuildChannelFactory(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.BuildChannelFactory : System.ServiceModel.Channels.BindingContext -&gt; System.ServiceModel.Channels.IChannelFactory&lt;'Channel&gt;" Usage="compositeDuplexBindingElement.BuildChannelFactory context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="6b848-108">工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-108">The <see cref="T:System.ServiceModel.Channels.IChannel" /> that the factory produces.</span></span></typeparam>
        <param name="context"><span data-ttu-id="6b848-109">用于提供生成通道工厂所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-109">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides the context required to build the channel factory.</span></span></param>
        <summary><span data-ttu-id="6b848-110">返回一个通道工厂，该通道工厂可以创建一个复合双工通道。</span><span class="sxs-lookup"><span data-stu-id="6b848-110">Returns a channel factory that can create a composite duplex channel.</span></span></summary>
        <returns><span data-ttu-id="6b848-111">一个 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，可以创建 <paramref name="TChannel" /> 类型的复合双工通道。</span><span class="sxs-lookup"><span data-stu-id="6b848-111">A <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> that creates a composite duplex channel of type <paramref name="TChannel" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-112">生成上下文需要 <xref:System.ServiceModel.Channels.IOutputChannel> 的 `TChannel`。</span><span class="sxs-lookup"><span data-stu-id="6b848-112">The build context requires an <xref:System.ServiceModel.Channels.IOutputChannel> for the `TChannel`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6b848-113"><paramref name="context" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-113"><paramref name="context" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6b848-114"><paramref name="TChannel" /> 的类型不为 <see cref="T:System.ServiceModel.Channels.IOutputChannel" />，不受支持。</span><span class="sxs-lookup"><span data-stu-id="6b848-114">The <paramref name="TChannel" /> is not of type <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> and is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelListener&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt; BuildChannelListener&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelListener`1&lt;!!TChannel&gt; BuildChannelListener&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildChannelListener(Of TChannel As {Class, IChannel}) (context As BindingContext) As IChannelListener(Of TChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; where TChannel : class, System::ServiceModel::Channels::IChannel override System::ServiceModel::Channels::IChannelListener&lt;TChannel&gt; ^ BuildChannelListener(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.BuildChannelListener : System.ServiceModel.Channels.BindingContext -&gt; System.ServiceModel.Channels.IChannelListener&lt;'Channel (requires 'Channel : null and 'Channel :&gt; System.ServiceModel.Channels.IChannel)&gt; (requires 'Channel : null and 'Channel :&gt; System.ServiceModel.Channels.IChannel)" Usage="compositeDuplexBindingElement.BuildChannelListener context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="6b848-115">侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-115">The <see cref="T:System.ServiceModel.Channels.IChannel" /> that the listener accepts.</span></span></typeparam>
        <param name="context"><span data-ttu-id="6b848-116">用于提供生成通道侦听器所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-116">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides the context required to build the channel listener.</span></span></param>
        <summary><span data-ttu-id="6b848-117">返回一个通道侦听器，该通道侦听器可以接受复合双工通道。</span><span class="sxs-lookup"><span data-stu-id="6b848-117">Returns a channel listener that can accept a composite duplex channel.</span></span></summary>
        <returns><span data-ttu-id="6b848-118">一个 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，可以接受 <paramref name="TChannel" /> 类型的复合双工通道。</span><span class="sxs-lookup"><span data-stu-id="6b848-118">An <see cref="T:System.ServiceModel.Channels.IChannelListener`1" /> that accepts a composite duplex channel of type <paramref name="TChannel" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-119">生成上下文需要 <xref:System.ServiceModel.Channels.IInputChannel> 的 `TChannel`。</span><span class="sxs-lookup"><span data-stu-id="6b848-119">The build context requires an <xref:System.ServiceModel.Channels.IInputChannel> for the `TChannel`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6b848-120"><paramref name="context" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-120"><paramref name="context" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6b848-121"><paramref name="TChannel" /> 的类型不为 <see cref="T:System.ServiceModel.Channels.IInputChannel" />，不受支持。</span><span class="sxs-lookup"><span data-stu-id="6b848-121">The <paramref name="TChannel" /> is not of type <see cref="T:System.ServiceModel.Channels.IInputChannel" /> and is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanBuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override bool CanBuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanBuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanBuildChannelFactory(Of TChannel) (context As BindingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; override bool CanBuildChannelFactory(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.CanBuildChannelFactory : System.ServiceModel.Channels.BindingContext -&gt; bool" Usage="compositeDuplexBindingElement.CanBuildChannelFactory context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="6b848-122">通道工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-122">The <see cref="T:System.ServiceModel.Channels.IChannel" /> that the channel factory produces.</span></span></typeparam>
        <param name="context"><span data-ttu-id="6b848-123">用于提供生成通道侦听器所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-123">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides the context required to build the channel listener.</span></span></param>
        <summary><span data-ttu-id="6b848-124">返回一个值，该值指示绑定是否可以创建能够生成符合上下文需要的特定类型通道的通道工厂。</span><span class="sxs-lookup"><span data-stu-id="6b848-124">Returns a value that indicates whether the binding can build the channel factory that produces a specific type of channel that satisfies the context requirements.</span></span></summary>
        <returns><span data-ttu-id="6b848-125">如果绑定可以生成通道工厂，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-125"><see langword="true" /> if the binding can build the channel factory; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-126">`true`如果 `TChannel`  ==  <xref:System.ServiceModel.Channels.IOutputChannel> 和内部绑定也可以生成， <xref:System.ServiceModel.Channels.IOutputChannel> 则为; 否则为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="6b848-126">`true` if `TChannel` == <xref:System.ServiceModel.Channels.IOutputChannel> and the inner binding can also build <xref:System.ServiceModel.Channels.IOutputChannel>; otherwise, `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6b848-127"><paramref name="context" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-127"><paramref name="context" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanBuildChannelListener&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override bool CanBuildChannelListener&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanBuildChannelListener&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanBuildChannelListener(Of TChannel As {Class, IChannel}) (context As BindingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; where TChannel : class, System::ServiceModel::Channels::IChannel override bool CanBuildChannelListener(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.CanBuildChannelListener : System.ServiceModel.Channels.BindingContext -&gt; bool (requires 'Channel : null and 'Channel :&gt; System.ServiceModel.Channels.IChannel)" Usage="compositeDuplexBindingElement.CanBuildChannelListener context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="6b848-128">侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-128">The <see cref="T:System.ServiceModel.Channels.IChannel" /> that the listener accepts.</span></span></typeparam>
        <param name="context"><span data-ttu-id="6b848-129">用于提供生成通道侦听器所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-129">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides the context required to build the channel listener.</span></span></param>
        <summary><span data-ttu-id="6b848-130">返回一个值，该值指示绑定是否可以生成通道侦听器，且该通道侦听器能够接受符合上下文需要的特定类型的通道。</span><span class="sxs-lookup"><span data-stu-id="6b848-130">Returns a value that indicates whether the binding can build the channel listener that accepts a specific type of channel that satisfies the context requirements.</span></span></summary>
        <returns><span data-ttu-id="6b848-131">如果可以生成接受特定类型通道所需的通道侦听器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-131"><see langword="true" /> if the channel listener can be built for the build required to accept the specified type of channel; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-132">`true`如果 `TChannel`  ==  <xref:System.ServiceModel.Channels.IInputChannel> 和内部绑定也可以生成， <xref:System.ServiceModel.Channels.IInputChannel> 则为; 否则为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="6b848-132">`true` if `TChannel` == <xref:System.ServiceModel.Channels.IInputChannel> and the inner binding can also build <xref:System.ServiceModel.Channels.IInputChannel>; otherwise, `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6b848-133"><paramref name="context" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-133"><paramref name="context" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ClientBaseAddress">
      <MemberSignature Language="C#" Value="public Uri ClientBaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ClientBaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientBaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ ClientBaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientBaseAddress : Uri with get, set" Usage="System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b848-134">获取或设置客户端的基址。</span><span class="sxs-lookup"><span data-stu-id="6b848-134">Gets or sets the base address for the client.</span></span></summary>
        <value><span data-ttu-id="6b848-135">一个包含客户端基址的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-135">A <see cref="T:System.Uri" /> that contains the base address for the client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-136">该属性提供一个地址，服务可以通过这个地址与客户端取得联系。</span><span class="sxs-lookup"><span data-stu-id="6b848-136">This property provides an address at which the service can contact the client.</span></span> <span data-ttu-id="6b848-137">`null` 值导致系统自动生成一个客户端基址。</span><span class="sxs-lookup"><span data-stu-id="6b848-137">A `null` value causes the system to automatically generate a client base address.</span></span>  
  
 <span data-ttu-id="6b848-138">这是一个基址，并不是绝对地址。</span><span class="sxs-lookup"><span data-stu-id="6b848-138">This is a base address, not an absolute address.</span></span> <span data-ttu-id="6b848-139">从该绑定生成客户端终结点时，GUID 会追加到基址。</span><span class="sxs-lookup"><span data-stu-id="6b848-139">A GUID is appended to the base address when generating client endpoints from this binding.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElement Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElement Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone () As BindingElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Channels::BindingElement ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.ServiceModel.Channels.BindingElement" Usage="compositeDuplexBindingElement.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6b848-140">返回当前绑定元素的深层克隆。</span><span class="sxs-lookup"><span data-stu-id="6b848-140">Returns a deep clone of the current binding element.</span></span></summary>
        <returns><span data-ttu-id="6b848-141">一个 <see cref="T:System.ServiceModel.Channels.CompositeDuplexBindingElement" />，它是当前绑定元素的深层克隆。</span><span class="sxs-lookup"><span data-stu-id="6b848-141">A <see cref="T:System.ServiceModel.Channels.CompositeDuplexBindingElement" /> that is a deep clone of the current binding element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-142">通过返回克隆，运行时将能够支持多个自定义绑定共用一个自定义绑定元素的情况。</span><span class="sxs-lookup"><span data-stu-id="6b848-142">Returning a clone enables the runtime to support the case in which multiple custom bindings share a custom binding element.</span></span> <span data-ttu-id="6b848-143">如果未返回克隆，则运行时行为将不可确定。</span><span class="sxs-lookup"><span data-stu-id="6b848-143">If a clone is not returned, the run-time behavior is undefined.</span></span>  
  
 <span data-ttu-id="6b848-144">对象的深层克隆创建对象的副本以及该对象直接或间接引用的所有内容的副本。</span><span class="sxs-lookup"><span data-stu-id="6b848-144">A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</span></span> <span data-ttu-id="6b848-145"> (这也称为复制整个对象图。与此相反，) 对象的浅表克隆只是对象的副本。</span><span class="sxs-lookup"><span data-stu-id="6b848-145">(This is also called copying the entire object graph.) A shallow clone of an object, by contrast, is a copy of the object only.</span></span> <span data-ttu-id="6b848-146">如果对象包含对其他对象的引用，则浅表复制不创建所引用对象的副本，而是仅复制对原始对象的引用。</span><span class="sxs-lookup"><span data-stu-id="6b848-146">If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects.</span></span> <span data-ttu-id="6b848-147">尤其是，<xref:System.ServiceModel.Channels.CompositeDuplexBindingElement> 的深层副本会复制完 <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> 值。</span><span class="sxs-lookup"><span data-stu-id="6b848-147">In particular, a deep copy of <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement> copies over the <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T GetProperty&lt;T&gt; (System.ServiceModel.Channels.BindingContext context) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T GetProperty&lt;class T&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperty(Of T As Class) (context As BindingContext) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class override T GetProperty(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.GetProperty : System.ServiceModel.Channels.BindingContext -&gt; 'T (requires 'T : null)" Usage="compositeDuplexBindingElement.GetProperty context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6b848-148">正在测试其支持性的类型化对象。</span><span class="sxs-lookup"><span data-stu-id="6b848-148">The typed object whose support is being tested.</span></span></typeparam>
        <param name="context"><span data-ttu-id="6b848-149">用于提供生成通道所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-149">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides the context required to build the channel.</span></span></param>
        <summary><span data-ttu-id="6b848-150">返回其中一个通道堆栈的适当层所请求的类型化对象。</span><span class="sxs-lookup"><span data-stu-id="6b848-150">Returns a typed object requested from the appropriate layer in one of the channel stacks.</span></span></summary>
        <returns><span data-ttu-id="6b848-151">如果受支持，则为所请求的类型化对象 <paramref name="T" />；否则，为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-151">The typed object <paramref name="T" /> requested if it is supported; or <see langword="null" /> if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-152">使用此方法可从堆栈绑定的适当层请求一个类型化对象，如用于设置属性或获取状态的接口。</span><span class="sxs-lookup"><span data-stu-id="6b848-152">Use this to request a typed object, such as an interface for setting properties or getting status, from the appropriate layer in the stacked binding.</span></span> <span data-ttu-id="6b848-153">如果某个层支持返回所请求的对象，则该层会返回对象。</span><span class="sxs-lookup"><span data-stu-id="6b848-153">If a layer supports returning the requested object, it returns it.</span></span> <span data-ttu-id="6b848-154">如果不支持，则该层会将调用委托给堆栈中的下一层。</span><span class="sxs-lookup"><span data-stu-id="6b848-154">If not, it delegates the call down to the next layer in the stack.</span></span> <span data-ttu-id="6b848-155">如果到达堆栈底部仍然没有层支持所请求的对象，则向调用方返回 `null` 值。</span><span class="sxs-lookup"><span data-stu-id="6b848-155">If it gets to the bottom of the stack and no layer supports getting the requested object then the caller is returned a `null` value.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6b848-156"><paramref name="context" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-156"><paramref name="context" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy">
      <MemberSignature Language="C#" Value="void IPolicyExportExtension.ExportPolicy (System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(class System.ServiceModel.Description.MetadataExporter exporter, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Sub ExportPolicy (exporter As MetadataExporter, context As PolicyConversionContext) Implements IPolicyExportExtension.ExportPolicy" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System::ServiceModel::Description::MetadataExporter ^ exporter, System::ServiceModel::Description::PolicyConversionContext ^ context) = System::ServiceModel::Description::IPolicyExportExtension::ExportPolicy;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy : System.ServiceModel.Description.MetadataExporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit&#xA;override this.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy : System.ServiceModel.Description.MetadataExporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit" Usage="compositeDuplexBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy (exporter, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exporter" Type="System.ServiceModel.Description.MetadataExporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" />
      </Parameters>
      <Docs>
        <param name="exporter"><span data-ttu-id="6b848-157">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-157">The <see cref="T:System.ServiceModel.Description.MetadataExporter" /> that you can use to modify the exporting process.</span></span></param>
        <param name="context"><span data-ttu-id="6b848-158">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-158">The <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> that you can use to insert your custom policy assertion.</span></span></param>
        <summary><span data-ttu-id="6b848-159">导出关于绑定的自定义策略断言，该自定义断言表示在绑定中出现复合双工。</span><span class="sxs-lookup"><span data-stu-id="6b848-159">Exports custom policy assertions about bindings that represent the presence of composite duplex in the binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b848-160">有关详细信息，请参阅 <xref:System.ServiceModel.Description.IPolicyExportExtension>。</span><span class="sxs-lookup"><span data-stu-id="6b848-160">For more information, see <xref:System.ServiceModel.Description.IPolicyExportExtension>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6b848-161"><paramref name="context" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6b848-161"><paramref name="context" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
