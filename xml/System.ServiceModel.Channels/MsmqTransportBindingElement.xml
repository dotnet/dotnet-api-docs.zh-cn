<Type Name="MsmqTransportBindingElement" FullName="System.ServiceModel.Channels.MsmqTransportBindingElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="612b7d37de5a6198af9728435ee476f378bea6fd" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86575352" /></Metadata><TypeSignature Language="C#" Value="public sealed class MsmqTransportBindingElement : System.ServiceModel.Channels.MsmqBindingElementBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MsmqTransportBindingElement extends System.ServiceModel.Channels.MsmqBindingElementBase" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.MsmqTransportBindingElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MsmqTransportBindingElement&#xA;Inherits MsmqBindingElementBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MsmqTransportBindingElement sealed : System::ServiceModel::Channels::MsmqBindingElementBase" />
  <TypeSignature Language="F#" Value="type MsmqTransportBindingElement = class&#xA;    inherit MsmqBindingElementBase" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.MsmqBindingElementBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="18cac-101">表示绑定元素，该绑定元素用于为使用本机消息队列 (MSMQ) 协议的 Windows Communication Foundation (WCF) 服务指定队列通信属性。</span><span class="sxs-lookup"><span data-stu-id="18cac-101">Represents the binding element used to specify the queuing communication properties for a Windows Communication Foundation (WCF) service that uses the native Message Queuing (MSMQ) protocol.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18cac-102">使用 <xref:System.ServiceModel.Channels.MsmqTransportBindingElement>，用户可以设置排队信道的属性。</span><span class="sxs-lookup"><span data-stu-id="18cac-102">The <xref:System.ServiceModel.Channels.MsmqTransportBindingElement> enables the user to set the properties of the queued communication channel.</span></span> <span data-ttu-id="18cac-103">排队信道使用消息队列进行传输。</span><span class="sxs-lookup"><span data-stu-id="18cac-103">The queued communication channel uses Message Queuing for its transport.</span></span>  
  
 <span data-ttu-id="18cac-104">此绑定元素是消息队列标准绑定 (<xref:System.ServiceModel.NetMsmqBinding>) 所用的默认绑定元素。</span><span class="sxs-lookup"><span data-stu-id="18cac-104">This binding element is the default binding element used by the Message Queuing standard binding (<xref:System.ServiceModel.NetMsmqBinding>).</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/service.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsmqTransportBindingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MsmqTransportBindingElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MsmqTransportBindingElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18cac-105">初始化 <see cref="T:System.ServiceModel.Channels.MsmqTransportBindingElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18cac-105">Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MsmqTransportBindingElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/service.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt; BuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelFactory`1&lt;!!TChannel&gt; BuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MsmqTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildChannelFactory(Of TChannel) (context As BindingContext) As IChannelFactory(Of TChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; override System::ServiceModel::Channels::IChannelFactory&lt;TChannel&gt; ^ BuildChannelFactory(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.BuildChannelFactory : System.ServiceModel.Channels.BindingContext -&gt; System.ServiceModel.Channels.IChannelFactory&lt;'Channel&gt;" Usage="msmqTransportBindingElement.BuildChannelFactory context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="18cac-106">一个 <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 类。</span><span class="sxs-lookup"><span data-stu-id="18cac-106">A <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" /> or a <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> class.</span></span></typeparam>
        <param name="context"><span data-ttu-id="18cac-107">用以生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-107">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel factory.</span></span></param>
        <summary><span data-ttu-id="18cac-108">使用提供的上下文生成通道工厂。</span><span class="sxs-lookup"><span data-stu-id="18cac-108">Builds a channel factory using the context provided.</span></span></summary>
        <returns><span data-ttu-id="18cac-109">一个消息队列 (MSMQ) 通道工厂，用于创建可向现有消息队列应用程序发送消息的通道。</span><span class="sxs-lookup"><span data-stu-id="18cac-109">A Message Queuing (MSMQ) channel factory that can be used to create channels to send messages to existing Message Queuing applications.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18cac-110">通道工厂是使用绑定元素中设置的属性创建并初始化的。</span><span class="sxs-lookup"><span data-stu-id="18cac-110">A channel factory is created and initialized using the properties that have been set in the binding element.</span></span> <span data-ttu-id="18cac-111">然后，已初始化的通道工厂用于创建输出通道，这些通道可用于向消息队列发送消息。</span><span class="sxs-lookup"><span data-stu-id="18cac-111">The initialized channel factory is then used to create output channels that can be used to send messages to a message queue.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="18cac-112">上下文值为 null。</span><span class="sxs-lookup"><span data-stu-id="18cac-112">The context value is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18cac-113">TChannel 不为 IOutputChannel 或 IOutputSessionChannel。</span><span class="sxs-lookup"><span data-stu-id="18cac-113">The TChannel is not IOutputChannel or IOutputSessionChannel.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18cac-114">ExactlyOnce 为 true，而 Durable 为 false。</span><span class="sxs-lookup"><span data-stu-id="18cac-114">ExactlyOnce is true and Durable is false.</span></span>

<span data-ttu-id="18cac-115">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-115">-or-</span></span>

<span data-ttu-id="18cac-116">UseActiveDirectory 为 true，而 QueueTransferProtocol 不为 Native。</span><span class="sxs-lookup"><span data-stu-id="18cac-116">UseActiveDirectory is true and QueueTransferProtocol is not Native.</span></span>

<span data-ttu-id="18cac-117">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-117">-or-</span></span>

<span data-ttu-id="18cac-118">CustomDeadLetterQueue 不为 null，DeadLetterQueue 不为 Custom。</span><span class="sxs-lookup"><span data-stu-id="18cac-118">CustomDeadLetterQueue is not null and DeadLetterQueue is not Custom.</span></span>

<span data-ttu-id="18cac-119">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-119">-or-</span></span>

<span data-ttu-id="18cac-120">在 Windows 2003/XP 中，DeadLetterQueue 设置为 Custom。</span><span class="sxs-lookup"><span data-stu-id="18cac-120">DeadLetterQueue is set to Custom on Windows 2003/XP.</span></span>

<span data-ttu-id="18cac-121">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-121">-or-</span></span>

<span data-ttu-id="18cac-122">ExactlyOnce 为 false，而 DeadLetterQueue 为 Custom。</span><span class="sxs-lookup"><span data-stu-id="18cac-122">ExactlyOnce is false and DeadLetterQueue is Custom.</span></span>

<span data-ttu-id="18cac-123">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-123">-or-</span></span>

<span data-ttu-id="18cac-124">设置了 CustomDeadLetterQueue，但是对队列没有写权限或队列不存在。</span><span class="sxs-lookup"><span data-stu-id="18cac-124">CustomDeadLetterQueue is set and either there is no write permission to write to the queue, or the queue does not exist.</span></span>

<span data-ttu-id="18cac-125">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-125">-or-</span></span>

<span data-ttu-id="18cac-126">CustomDeadLetterQueue 是非事务性的。</span><span class="sxs-lookup"><span data-stu-id="18cac-126">CustomDeadLetterQueue is non-transactional.</span></span>

<span data-ttu-id="18cac-127">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-127">-or-</span></span>

<span data-ttu-id="18cac-128">MsmqTransportSecurity.MsmqAuthenticationMode 设置为 WindowsDomain，而 MSMQ 是在没有 ActiveDirectory 集成的情况下安装的。</span><span class="sxs-lookup"><span data-stu-id="18cac-128">MsmqTransportSecurity.MsmqAuthenticationMode is set to WindowsDomain and MSMQ is installed without ActiveDirectory integration.</span></span>

<span data-ttu-id="18cac-129">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-129">-or-</span></span>

<span data-ttu-id="18cac-130">MsmqTransportSecurity.MsmqAuthenticationMode 为 None，而 MsmqTransportSecurity.MsmqProtectionLevel 不为 None。</span><span class="sxs-lookup"><span data-stu-id="18cac-130">MsmqTransportSecurity.MsmqAuthenticationMode is None and MsmqTransportSecurity.MsmqProtectionLevel is not None.</span></span>

<span data-ttu-id="18cac-131">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-131">-or-</span></span>

<span data-ttu-id="18cac-132">MsmqTransportSecurity.MsmqAuthenticationMode 为 Certificate 或 WindowsDomain，而 MsmqTransportSecurity.MsmqProtectionLevel 为 None。</span><span class="sxs-lookup"><span data-stu-id="18cac-132">MsmqTransportSecurity.MsmqAuthenticationMode is Certificate or WindowsDomain and MsmqTransportSecurity.MsmqProtectionLevel is None.</span></span>

<span data-ttu-id="18cac-133">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-133">-or-</span></span>

<span data-ttu-id="18cac-134">MsmqTransportSecurity.MsmqProtectionLevel 为 EncryptAndSign，而 UseActiveDirectory 为 false。</span><span class="sxs-lookup"><span data-stu-id="18cac-134">MsmqTransportSecurity.MsmqProtectionLevel is EncryptAndSign and UseActiveDirectory is false.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelListener&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt; BuildChannelListener&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelListener`1&lt;!!TChannel&gt; BuildChannelListener&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MsmqTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildChannelListener(Of TChannel As {Class, IChannel}) (context As BindingContext) As IChannelListener(Of TChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; where TChannel : class, System::ServiceModel::Channels::IChannel override System::ServiceModel::Channels::IChannelListener&lt;TChannel&gt; ^ BuildChannelListener(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.BuildChannelListener : System.ServiceModel.Channels.BindingContext -&gt; System.ServiceModel.Channels.IChannelListener&lt;'Channel (requires 'Channel : null and 'Channel :&gt; System.ServiceModel.Channels.IChannel)&gt; (requires 'Channel : null and 'Channel :&gt; System.ServiceModel.Channels.IChannel)" Usage="msmqTransportBindingElement.BuildChannelListener context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="18cac-135">用于生成通道侦听器的通道类型。</span><span class="sxs-lookup"><span data-stu-id="18cac-135">The channel type to be used to build the channel listener.</span></span> <span data-ttu-id="18cac-136">允许使用的通道类型为 <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IInputChannel" /> 类。</span><span class="sxs-lookup"><span data-stu-id="18cac-136">Permitted channel types are <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" /> or a <see cref="T:System.ServiceModel.Channels.IInputChannel" /> class.</span></span></typeparam>
        <param name="context"><span data-ttu-id="18cac-137">用以生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-137">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel listener.</span></span></param>
        <summary><span data-ttu-id="18cac-138">使用提供的上下文生成通道侦听器。</span><span class="sxs-lookup"><span data-stu-id="18cac-138">Builds a channel listener using the context provided.</span></span></summary>
        <returns><span data-ttu-id="18cac-139">一个消息队列 (MSMQ) 通道侦听器，用于创建可从现有 MSMQ 应用程序接收消息的通道。</span><span class="sxs-lookup"><span data-stu-id="18cac-139">A Message Queuing (MSMQ) channel listener that can be used to create channels to receive messages from existing MSMQ applications.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="18cac-140">上下文值为 null。</span><span class="sxs-lookup"><span data-stu-id="18cac-140">The context value is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="18cac-141">TChannel 不为 IInputChannel 或 IInputSessionChannel。</span><span class="sxs-lookup"><span data-stu-id="18cac-141">The TChannel is not IInputChannel or IInputSessionChannel.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18cac-142">ExactlyOnce 为 true，而 Durable 为 false。</span><span class="sxs-lookup"><span data-stu-id="18cac-142">ExactlyOnce is true and Durable is false.</span></span>

<span data-ttu-id="18cac-143">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-143">-or-</span></span>

<span data-ttu-id="18cac-144">不可读队列。</span><span class="sxs-lookup"><span data-stu-id="18cac-144">Queue not readable.</span></span>

<span data-ttu-id="18cac-145">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-145">-or-</span></span>

<span data-ttu-id="18cac-146">ExactlyOnce 为 true，而队列是非事务性的。</span><span class="sxs-lookup"><span data-stu-id="18cac-146">ExactlyOnce is true and queue is non-transactional.</span></span>

<span data-ttu-id="18cac-147">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-147">-or-</span></span>

<span data-ttu-id="18cac-148">ExactlyOnce 为 false，而队列是事务性的。</span><span class="sxs-lookup"><span data-stu-id="18cac-148">ExactlyOnce is false and queue is transactional.</span></span>

<span data-ttu-id="18cac-149">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-149">-or-</span></span>

<span data-ttu-id="18cac-150">在 Windows Vista 中，ReceiveErrorHandling 设置为 Move，而队列名称中包含一个“;”。</span><span class="sxs-lookup"><span data-stu-id="18cac-150">ReceiveErrorHandling is set to Move and queue name contains a ";" in Windows Vista.</span></span>

<span data-ttu-id="18cac-151">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-151">-or-</span></span>

<span data-ttu-id="18cac-152">在 Windows Vista 中，ExactlyOnce 设置为 true，但是不能打开重试子队列。</span><span class="sxs-lookup"><span data-stu-id="18cac-152">ExactlyOnce is set to true and cannot open retry sub-queue in Windows Vista.</span></span>

<span data-ttu-id="18cac-153">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-153">-or-</span></span>

<span data-ttu-id="18cac-154">ReceiveErrorHandling 设置为 Reject 或 Move，而平台是 Windows Vista。</span><span class="sxs-lookup"><span data-stu-id="18cac-154">ReceiveErrorHandling is set to Reject or Move and the platform is Windows Vista.</span></span>

<span data-ttu-id="18cac-155">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-155">-or-</span></span>

<span data-ttu-id="18cac-156">MsmqTransportSecurity.MsmqAuthenticationMode 设置为 WindowsDomain，而 MSMQ 是在没有 ActiveDirectory 集成的情况下安装的。</span><span class="sxs-lookup"><span data-stu-id="18cac-156">MsmqTransportSecurity.MsmqAuthenticationMode is set to WindowsDomain and MSMQ is installed without ActiveDirectory integration.</span></span>

<span data-ttu-id="18cac-157">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-157">-or-</span></span>

<span data-ttu-id="18cac-158">MsmqTransportSecurity.MsmqAuthenticationMode 为 None，而 MsmqTransportSecurity.MsmqProtectionLevel 不为 None。</span><span class="sxs-lookup"><span data-stu-id="18cac-158">MsmqTransportSecurity.MsmqAuthenticationMode is None and MsmqTransportSecurity.MsmqProtectionLevel is not None.</span></span>

<span data-ttu-id="18cac-159">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18cac-159">-or-</span></span>

<span data-ttu-id="18cac-160">MsmqTransportSecurity.MsmqAuthenticationMode 为 Certificate 或 WindowsDomain，而 MsmqTransportSecurity.MsmqProtectionLevel 为 None。</span><span class="sxs-lookup"><span data-stu-id="18cac-160">MsmqTransportSecurity.MsmqAuthenticationMode is Certificate or WindowsDomain and MsmqTransportSecurity.MsmqProtectionLevel is None.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanBuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override bool CanBuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanBuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MsmqTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanBuildChannelFactory(Of TChannel) (context As BindingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; override bool CanBuildChannelFactory(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.CanBuildChannelFactory : System.ServiceModel.Channels.BindingContext -&gt; bool" Usage="msmqTransportBindingElement.CanBuildChannelFactory context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="18cac-161">用于生成通道侦听器的通道类型。</span><span class="sxs-lookup"><span data-stu-id="18cac-161">The channel type to be used to build the channel listener.</span></span> <span data-ttu-id="18cac-162">允许使用的通道类型为 <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 类。</span><span class="sxs-lookup"><span data-stu-id="18cac-162">Permitted channel types are <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" /> or a <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> class.</span></span></typeparam>
        <param name="context"><span data-ttu-id="18cac-163">用以生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-163">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel factory.</span></span></param>
        <summary><span data-ttu-id="18cac-164">返回一个布尔值，该值指示是否能够使用提供的上下文生成通道工厂。</span><span class="sxs-lookup"><span data-stu-id="18cac-164">Returns a Boolean value that indicates whether you can build a channel factory with the context provided.</span></span></summary>
        <returns><span data-ttu-id="18cac-165">如果利用所提供的上下文可生成通道工厂，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-165"><see langword="true" /> if you can build a channel factory with the context provided; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18cac-166">仅当 <see langword="true" /> 为 <paramref name="TChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 时，绑定元素才返回 <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-166">The binding element returns <see langword="true" /> only when <paramref name="TChannel" /> is <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> or <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBuildChannelListener&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override bool CanBuildChannelListener&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanBuildChannelListener&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MsmqTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanBuildChannelListener(Of TChannel As {Class, IChannel}) (context As BindingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; where TChannel : class, System::ServiceModel::Channels::IChannel override bool CanBuildChannelListener(System::ServiceModel::Channels::BindingContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.CanBuildChannelListener : System.ServiceModel.Channels.BindingContext -&gt; bool (requires 'Channel : null and 'Channel :&gt; System.ServiceModel.Channels.IChannel)" Usage="msmqTransportBindingElement.CanBuildChannelListener context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="18cac-167">用于生成通道侦听器的通道类型。</span><span class="sxs-lookup"><span data-stu-id="18cac-167">The channel type to be used to build the channel listener.</span></span> <span data-ttu-id="18cac-168">允许使用的通道类型为 <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IInputChannel" /> 类。</span><span class="sxs-lookup"><span data-stu-id="18cac-168">Permitted channel types are <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" /> or a <see cref="T:System.ServiceModel.Channels.IInputChannel" /> class.</span></span></typeparam>
        <param name="context"><span data-ttu-id="18cac-169">用以生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-169">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel listener.</span></span></param>
        <summary><span data-ttu-id="18cac-170">返回一个布尔值，该值指示是否能够使用提供的上下文生成通道侦听器。</span><span class="sxs-lookup"><span data-stu-id="18cac-170">Returns a Boolean value that indicates whether you can build a channel listener with the context provided.</span></span></summary>
        <returns><span data-ttu-id="18cac-171">如果利用所提供的上下文可生成通道侦听器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-171"><see langword="true" /> if you can build a channel listener with the context provided; otherwise, <see langword="false" />.</span></span>  
  
<span data-ttu-id="18cac-172">仅当 <see langword="true" /> 为 <paramref name="TChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IInputChannel" /> 时，绑定元素才返回 <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-172">The binding returns <see langword="true" /> only when <paramref name="TChannel" /> is <see cref="T:System.ServiceModel.Channels.IInputChannel" /> or <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElement Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElement Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.MsmqTransportBindingElement.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone () As BindingElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Channels::BindingElement ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.ServiceModel.Channels.BindingElement" Usage="msmqTransportBindingElement.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18cac-173">返回绑定元素的复本。</span><span class="sxs-lookup"><span data-stu-id="18cac-173">Returns a clone of the binding element.</span></span></summary>
        <returns><span data-ttu-id="18cac-174">绑定元素的复本。</span><span class="sxs-lookup"><span data-stu-id="18cac-174">A clone of the binding element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolSize">
      <MemberSignature Language="C#" Value="public int MaxPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxPoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.MsmqTransportBindingElement.MaxPoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxPoolSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxPoolSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxPoolSize : int with get, set" Usage="System.ServiceModel.Channels.MsmqTransportBindingElement.MaxPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18cac-175">获取或设置一个整数，该整数指定包含内部消息队列 (MSMQ) 消息对象的池的最大大小。</span><span class="sxs-lookup"><span data-stu-id="18cac-175">Gets or sets an integer that specifies the maximum size of the pool that contains internal Message Queuing (MSMQ) message objects.</span></span></summary>
        <value><span data-ttu-id="18cac-176">一个整数，它指定包含内部消息队列消息对象的池的最大大小。</span><span class="sxs-lookup"><span data-stu-id="18cac-176">An integer that specifies the maximum size of the pool that contains internal Message Queuing message objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18cac-177">内部消息队列消息对象池用于在发送和接收消息时避免分配这些对象。</span><span class="sxs-lookup"><span data-stu-id="18cac-177">The internal Message Queuing message object pool is used to avoid allocations of these objects when sending and receiving messages.</span></span> <span data-ttu-id="18cac-178">最大池大小是一个性能优化参数。</span><span class="sxs-lookup"><span data-stu-id="18cac-178">The maximum pool size is a performance-tuning parameter.</span></span> <span data-ttu-id="18cac-179">默认值为 8。</span><span class="sxs-lookup"><span data-stu-id="18cac-179">The default value is 8.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="18cac-180">值小于零。</span><span class="sxs-lookup"><span data-stu-id="18cac-180">The value is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="QueueTransferProtocol">
      <MemberSignature Language="C#" Value="public System.ServiceModel.QueueTransferProtocol QueueTransferProtocol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.QueueTransferProtocol QueueTransferProtocol" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.MsmqTransportBindingElement.QueueTransferProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Property QueueTransferProtocol As QueueTransferProtocol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::QueueTransferProtocol QueueTransferProtocol { System::ServiceModel::QueueTransferProtocol get(); void set(System::ServiceModel::QueueTransferProtocol value); };" />
      <MemberSignature Language="F#" Value="member this.QueueTransferProtocol : System.ServiceModel.QueueTransferProtocol with get, set" Usage="System.ServiceModel.Channels.MsmqTransportBindingElement.QueueTransferProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.QueueTransferProtocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18cac-181">获取或设置一个枚举值，该值指示此绑定使用的排队信道传输。</span><span class="sxs-lookup"><span data-stu-id="18cac-181">Gets or sets an enumeration value that indicates the queued communication channel transport that this binding uses.</span></span></summary>
        <value><span data-ttu-id="18cac-182">一个 <see cref="T:System.ServiceModel.QueueTransferProtocol" /> 枚举值，该值指示在队列管理器之间用于消息传递的传输。</span><span class="sxs-lookup"><span data-stu-id="18cac-182">A <see cref="T:System.ServiceModel.QueueTransferProtocol" /> enumeration value that indicates the transport used for message delivery between queue managers.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18cac-183">使用 SOAP 可靠消息传递协议 (SRMP) 时，消息队列 (MSMQ) 不支持 Active Directory 寻址，因此当 <xref:System.ServiceModel.Channels.MsmqTransportBindingElement.QueueTransferProtocol%2A> 设置为 <xref:System.ServiceModel.QueueTransferProtocol.Srmp> 时，不要将 <xref:System.ServiceModel.QueueTransferProtocol.Srmp> 设置为 <xref:System.ServiceModel.Channels.MsmqTransportBindingElement.UseActiveDirectory%2A> 或 `true`。</span><span class="sxs-lookup"><span data-stu-id="18cac-183">Message Queuing (MSMQ) does not support Active Directory addressing when using SOAP Reliable Messaging Protocol (SRMP), so do not set <xref:System.ServiceModel.Channels.MsmqTransportBindingElement.QueueTransferProtocol%2A> to <xref:System.ServiceModel.QueueTransferProtocol.Srmp> or <xref:System.ServiceModel.QueueTransferProtocol.Srmp> when <xref:System.ServiceModel.Channels.MsmqTransportBindingElement.UseActiveDirectory%2A> is set to `true`.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="18cac-184">该值不是 <see cref="T:System.ServiceModel.QueueTransferProtocol" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18cac-184">The value is not one of the <see cref="T:System.ServiceModel.QueueTransferProtocol" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.MsmqTransportBindingElement.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheme : string" Usage="System.ServiceModel.Channels.MsmqTransportBindingElement.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18cac-185">返回一个 <see cref="T:System.String" />，它包含此传输绑定元素所用的寻址方案。</span><span class="sxs-lookup"><span data-stu-id="18cac-185">Returns a <see cref="T:System.String" /> that contains the addressing scheme that is used by this transport binding element.</span></span></summary>
        <value><span data-ttu-id="18cac-186">一个 <see cref="T:System.String" />，它包含此传输绑定元素所用的寻址方案。</span><span class="sxs-lookup"><span data-stu-id="18cac-186">A <see cref="T:System.String" /> that contains the addressing scheme that is used by this transport binding element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18cac-187"><xref:System.ServiceModel.Channels.MsmqTransportBindingElement.Scheme%2A> 属性返回字符串“net.msmq”。</span><span class="sxs-lookup"><span data-stu-id="18cac-187">The <xref:System.ServiceModel.Channels.MsmqTransportBindingElement.Scheme%2A> property returns the string "net.msmq".</span></span>  
  
 <span data-ttu-id="18cac-188">消息队列 (MSMQ) 排队传输支持多种寻址方案，包括 net.msmq。</span><span class="sxs-lookup"><span data-stu-id="18cac-188">The Message Queuing (MSMQ) queued transport supports several addressing schemes, including net.msmq.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseActiveDirectory">
      <MemberSignature Language="C#" Value="public bool UseActiveDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseActiveDirectory" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.MsmqTransportBindingElement.UseActiveDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property UseActiveDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseActiveDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseActiveDirectory : bool with get, set" Usage="System.ServiceModel.Channels.MsmqTransportBindingElement.UseActiveDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18cac-189">返回一个布尔值，该值指示是否应该使用 Active Directory 来转换队列地址。</span><span class="sxs-lookup"><span data-stu-id="18cac-189">Returns a Boolean value that indicates whether queue addresses should be converted using Active Directory.</span></span></summary>
        <value><span data-ttu-id="18cac-190">如果应该使用 Active Directory 转换队列地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18cac-190"><see langword="true" /> if queue addresses should be converted using Active Directory; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18cac-191">消息队列 (MSMQ) 队列地址可由路径名或直接格式名组成。</span><span class="sxs-lookup"><span data-stu-id="18cac-191">Message Queuing (MSMQ) queue addresses can consist of path names or direct format names.</span></span> <span data-ttu-id="18cac-192">对于直接格式名，MSMQ 会使用 DNS、NetBIOS 或 IP 解析队列名。</span><span class="sxs-lookup"><span data-stu-id="18cac-192">With a direct format name, MSMQ resolves the queue name using DNS, NetBIOS, or IP.</span></span> <span data-ttu-id="18cac-193">对于路径名，MSMQ 会使用 Active Directory 解析队列名。</span><span class="sxs-lookup"><span data-stu-id="18cac-193">With a path name, MSMQ resolves the queue name using Active Directory.</span></span>  
  
 <span data-ttu-id="18cac-194">默认情况下，Windows Communication Foundation (WCF) 排队传输会将消息队列的 URI 转换为直接格式名。</span><span class="sxs-lookup"><span data-stu-id="18cac-194">By default, the Windows Communication Foundation (WCF) queued transport converts the URI of a message queue to a direct format name.</span></span> <span data-ttu-id="18cac-195">通过将 <xref:System.ServiceModel.Channels.MsmqTransportBindingElement.UseActiveDirectory%2A> 属性设置为 `true`，应用程序可以指定排队传输应使用 Active Directory 而不是 DNS、NetBIOS 或 IP 解析计算机名称。</span><span class="sxs-lookup"><span data-stu-id="18cac-195">By setting the <xref:System.ServiceModel.Channels.MsmqTransportBindingElement.UseActiveDirectory%2A> property to `true`, an application can specify that the queued transport should resolve the computer name using Active Directory rather than DNS, NetBIOS, or IP.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UE_ImperativeNetMsmq#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_imperativenetmsmq/cs/snippets.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
