<Type Name="IChannelFactory&lt;TChannel&gt;" FullName="System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c91272466379c0fa4155ae20d6fa76f7d996175e" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86344602" /></Metadata><TypeSignature Language="C#" Value="public interface IChannelFactory&lt;TChannel&gt; : System.ServiceModel.Channels.IChannelFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelFactory`1&lt;TChannel&gt; implements class System.ServiceModel.Channels.IChannelFactory, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IChannelFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChannelFactory(Of TChannel)&#xA;Implements IChannelFactory" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TChannel&gt;&#xA;public interface class IChannelFactory : System::ServiceModel::Channels::IChannelFactory" />
  <TypeSignature Language="F#" Value="type IChannelFactory&lt;'Channel&gt; = interface&#xA;    interface IChannelFactory&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TChannel" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannelFactory</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TChannel"><span data-ttu-id="957e8-101">通道工厂创建的通道的类型。</span><span class="sxs-lookup"><span data-stu-id="957e8-101">The type of channel that the channel factory creates.</span></span></typeparam>
    <summary><span data-ttu-id="957e8-102">定义必须由创建特定类型通道的通道工厂实现的接口。</span><span class="sxs-lookup"><span data-stu-id="957e8-102">Defines the interface that must be implemented by channel factories that create type-specific channels.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="957e8-103">通过实现 <xref:System.ServiceModel.Channels.IChannelFactory%601> 协定，用户可以创建具有某种给定类型的多个通道，而不必每次都指定通道类型。</span><span class="sxs-lookup"><span data-stu-id="957e8-103">Implementing the <xref:System.ServiceModel.Channels.IChannelFactory%601> contract allows users to create multiple channels of a given type without having to specify the channel type each time.</span></span> <span data-ttu-id="957e8-104">换言之，将通道类型定义为实现 <xref:System.ServiceModel.Channels.IChannelFactory%601> 接口的通道工厂的泛型参数，意味着无需将该类型传入 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="957e8-104">In other words, defining the channel type as a generic parameter for the channel factory implementing the <xref:System.ServiceModel.Channels.IChannelFactory%601> interface means that it is not necessary to pass the type into the <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%2A> methods.</span></span> <span data-ttu-id="957e8-105">如果用户希望创建不同的通道类型，则可以为所需要的每个通道类型创建其他通道工厂。</span><span class="sxs-lookup"><span data-stu-id="957e8-105">If users want to create different channel types, they can create additional channel factories for each type of channel required.</span></span> <span data-ttu-id="957e8-106">利用 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> 重载可以区分最初消息要发送到的地址与最终目标。</span><span class="sxs-lookup"><span data-stu-id="957e8-106">The <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> overload allows you to distinguish the address to which the message is initially sent from the ultimate destination.</span></span> <span data-ttu-id="957e8-107">有关寻址的讨论，请参阅 [地址](/dotnet/framework/wcf/feature-details/endpoint-addresses) 主题。</span><span class="sxs-lookup"><span data-stu-id="957e8-107">For a discussion of addressing, see the [Addresses](/dotnet/framework/wcf/feature-details/endpoint-addresses) topic.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateChannel">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="957e8-108">创建到指定终结点地址的指定类型的通道。</span><span class="sxs-lookup"><span data-stu-id="957e8-108">Creates a channel of a specified type to a specified endpoint address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="957e8-109">利用 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> 重载区分最初消息要发送到的地址与希望进行手动路由时的最终目标。</span><span class="sxs-lookup"><span data-stu-id="957e8-109">Use the <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> overload to distinguish the address to which the message is initially sent from the ultimate destination when you want to do manual routing.</span></span> <span data-ttu-id="957e8-110">请注意，当此通道工厂关闭时，此通道工厂创建的任何通道也将关闭。</span><span class="sxs-lookup"><span data-stu-id="957e8-110">Note that any channels created by this channel factory are closed when the channel factory is closed.</span></span> <span data-ttu-id="957e8-111">有关寻址的讨论，请参阅 [地址](/dotnet/framework/wcf/feature-details/endpoint-addresses) 主题。</span><span class="sxs-lookup"><span data-stu-id="957e8-111">For a discussion of addressing, see the [Addresses](/dotnet/framework/wcf/feature-details/endpoint-addresses) topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateChannel (to As EndpointAddress) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel CreateChannel(System::ServiceModel::EndpointAddress ^ to);" />
      <MemberSignature Language="F#" Value="abstract member CreateChannel : System.ServiceModel.EndpointAddress -&gt; 'Channel" Usage="iChannelFactory.CreateChannel to" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="to"><span data-ttu-id="957e8-112">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="957e8-112">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</span></span></param>
        <summary><span data-ttu-id="957e8-113">创建到指定终结点地址的指定类型的通道。</span><span class="sxs-lookup"><span data-stu-id="957e8-113">Creates a channel of a specified type to a specified endpoint address.</span></span></summary>
        <returns><span data-ttu-id="957e8-114">到指定终结点地址的类型为 <paramref name="TChannel" /> 的通道。</span><span class="sxs-lookup"><span data-stu-id="957e8-114">A channel of type <paramref name="TChannel" /> to the specified endpoint address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="957e8-115">利用 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> 重载区分最初消息要发送到的地址与希望进行手动路由时的最终目标。</span><span class="sxs-lookup"><span data-stu-id="957e8-115">Use the <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> overload to distinguish the address to which the message is initially sent from the ultimate destination when you want to do manual routing.</span></span> <span data-ttu-id="957e8-116">请注意，当此通道工厂关闭时，此通道工厂创建的任何通道也将关闭。</span><span class="sxs-lookup"><span data-stu-id="957e8-116">Note that any channels created by this channel factory are closed when the channel factory is closed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to, Uri via);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to, class System.Uri via) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateChannel (to As EndpointAddress, via As Uri) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel CreateChannel(System::ServiceModel::EndpointAddress ^ to, Uri ^ via);" />
      <MemberSignature Language="F#" Value="abstract member CreateChannel : System.ServiceModel.EndpointAddress * Uri -&gt; 'Channel" Usage="iChannelFactory.CreateChannel (to, via)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="via" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="to"><span data-ttu-id="957e8-117">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="957e8-117">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</span></span></param>
        <param name="via"><span data-ttu-id="957e8-118"><see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</span><span class="sxs-lookup"><span data-stu-id="957e8-118">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</span></span></param>
        <summary><span data-ttu-id="957e8-119">创建指定类型的通道，该通道通向消息要发送到的指定终结点地址和传输地址。</span><span class="sxs-lookup"><span data-stu-id="957e8-119">Creates a channel of a specified type to a specified endpoint address and transport address to which messages are sent.</span></span></summary>
        <returns><span data-ttu-id="957e8-120">到指定终结点地址和传输地址的 <paramref name="TChannel" /> 类型的通道。</span><span class="sxs-lookup"><span data-stu-id="957e8-120">A channel of type <paramref name="TChannel" /> to the specified endpoint address and transport address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="957e8-121">`via` 指定的传输地址是消息在发送到由 `to` 指定的服务所在的某个其他远程地址的途中，最初应发送到的位置。</span><span class="sxs-lookup"><span data-stu-id="957e8-121">The transport address specified by the `via` is the location to which a message should initially be sent on its way to some other remote address specified by the `to` at which the service is located.</span></span> <span data-ttu-id="957e8-122">在大多数 Internet 方案中，`via` URI 和服务的最终 <xref:System.ServiceModel.EndpointAddress.Uri%2A> 地址的 `to` 相同。</span><span class="sxs-lookup"><span data-stu-id="957e8-122">In most Internet scenarios, the `via` URI is the same as the <xref:System.ServiceModel.EndpointAddress.Uri%2A> of the final `to` address of the service.</span></span> <span data-ttu-id="957e8-123">您只在进行某种手动路由时才区分这两个地址。</span><span class="sxs-lookup"><span data-stu-id="957e8-123">You only distinguish between these two addresses when you want to do some kind of manual routing.</span></span> <span data-ttu-id="957e8-124">请注意，当此通道工厂关闭时，此通道工厂创建的任何通道也将关闭。</span><span class="sxs-lookup"><span data-stu-id="957e8-124">Note that any channels created by this channel factory are closed when the channel factory is closed.</span></span> <span data-ttu-id="957e8-125">有关寻址的讨论，请参阅 [地址](/dotnet/framework/wcf/feature-details/endpoint-addresses) 主题。</span><span class="sxs-lookup"><span data-stu-id="957e8-125">For a discussion of addressing, see the [Addresses](/dotnet/framework/wcf/feature-details/endpoint-addresses) topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
