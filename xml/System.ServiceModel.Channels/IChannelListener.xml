<Type Name="IChannelListener" FullName="System.ServiceModel.Channels.IChannelListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5c30596a59fa9e0dc9fa9c51b353098dd4b0b33d" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70695469" /></Metadata><TypeSignature Language="C#" Value="public interface IChannelListener : System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelListener implements class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IChannelListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChannelListener&#xA;Implements ICommunicationObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IChannelListener : System::ServiceModel::ICommunicationObject" />
  <TypeSignature Language="F#" Value="type IChannelListener = interface&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="fb397-101">定义必须由通道侦听器实现来接受通道的接口。</span><span class="sxs-lookup"><span data-stu-id="fb397-101">Defines the interface that must be implemented by a channel listener to accept channels.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb397-102"><xref:System.ServiceModel.Channels.IChannelListener> 接口表示通道侦听器的基接口。</span><span class="sxs-lookup"><span data-stu-id="fb397-102">The <xref:System.ServiceModel.Channels.IChannelListener> interface represents the base interface for channel listeners.</span></span>  
  
 <span data-ttu-id="fb397-103">通道侦听器及其关联通道通常由接收客户端启动的通信的服务使用。</span><span class="sxs-lookup"><span data-stu-id="fb397-103">Channel listeners and their associated channels are generally used by services that receive communications initiated by clients.</span></span> <span data-ttu-id="fb397-104">与此相反，实现 <xref:System.ServiceModel.Channels.IChannelFactory> 接口的通道工厂则提供一些机制用于创建通道，与服务的通信是通过这些通道启动的。</span><span class="sxs-lookup"><span data-stu-id="fb397-104">Channel factories that implement the <xref:System.ServiceModel.Channels.IChannelFactory> interface, by contrast, provide the mechanisms used to create the channels through which communication with a service is initiated.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginWaitForChannel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForChannel (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForChannel(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.BeginWaitForChannel(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForChannel (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForChannel(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForChannel : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iChannelListener.BeginWaitForChannel (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="fb397-105"><see cref="T:System.TimeSpan" />，指定在超时前可用于完成等待通道操作的时间长度。</span><span class="sxs-lookup"><span data-stu-id="fb397-105">The <see cref="T:System.TimeSpan" /> that specifies how long the wait for a channel operation has to complete before timing out.</span></span></param>
        <param name="callback"><span data-ttu-id="fb397-106">接收异步等待通道操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="fb397-106">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous completion of the wait for a channel operation.</span></span></param>
        <param name="state"><span data-ttu-id="fb397-107">一个由应用程序指定的对象，它包含与异步等待通道操作相关联的状态信息。</span><span class="sxs-lookup"><span data-stu-id="fb397-107">An object, specified by the application, that contains state information associated with the asynchronous wait for a channel operation.</span></span></param>
        <summary><span data-ttu-id="fb397-108">开始一个等待通道到达的异步操作，此操作必须在指定时间间隔内完成。</span><span class="sxs-lookup"><span data-stu-id="fb397-108">Begins an asynchronous operation to wait for a channel to arrive that must be completed within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="fb397-109">引用异步等待通道操作的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="fb397-109">The <see cref="T:System.IAsyncResult" /> that references the asynchronous wait for a channel operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForChannel">
      <MemberSignature Language="C#" Value="public bool EndWaitForChannel (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForChannel(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForChannel (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForChannel(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForChannel : IAsyncResult -&gt; bool" Usage="iChannelListener.EndWaitForChannel result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="fb397-110">通过调用 <see cref="T:System.IAsyncResult" /> 方法返回的 <see cref="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)" />。</span><span class="sxs-lookup"><span data-stu-id="fb397-110">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)" /> method.</span></span></param>
        <summary><span data-ttu-id="fb397-111">完成一个等待通道到达的异步操作。</span><span class="sxs-lookup"><span data-stu-id="fb397-111">Completes an asynchronous operation to wait for channels to arrive.</span></span></summary>
        <returns><span data-ttu-id="fb397-112">如果消息已到达，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fb397-112"><see langword="true" /> if a message arrived; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetProperty&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T GetProperty&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.GetProperty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T GetProperty();" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : unit -&gt; 'T (requires 'T : null)" Usage="iChannelListener.GetProperty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="fb397-113">方法正在查询的类型化对象。</span><span class="sxs-lookup"><span data-stu-id="fb397-113">The typed object for which the method is querying.</span></span></typeparam>
        <summary><span data-ttu-id="fb397-114">从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</span><span class="sxs-lookup"><span data-stu-id="fb397-114">Returns a typed object requested, if present, from the appropriate layer in the channel stack.</span></span></summary>
        <returns><span data-ttu-id="fb397-115">如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fb397-115">The typed object <paramref name="T" /> requested, if it is present or <see langword="null" /> if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb397-116">使用此方法可请求从通道堆栈的适当层返回一个类型化对象，如用于设置属性或获取状态的接口。</span><span class="sxs-lookup"><span data-stu-id="fb397-116">Use this method to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack.</span></span> <span data-ttu-id="fb397-117">如果某个层支持返回所请求的对象，则该层会返回对象。</span><span class="sxs-lookup"><span data-stu-id="fb397-117">If a layer supports returning the requested object, it returns it.</span></span> <span data-ttu-id="fb397-118">如果不支持，则该层会将调用委托给堆栈中的下一层。</span><span class="sxs-lookup"><span data-stu-id="fb397-118">If not, it delegates the call down to the next layer in the stack.</span></span> <span data-ttu-id="fb397-119">如果到达堆栈底部仍然没有通道层支持所请求的对象，则该方法返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="fb397-119">If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IChannelListener.Uri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Uri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Uri { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="System.ServiceModel.Channels.IChannelListener.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fb397-120">获取工厂生成的侦听器进行侦听的 URI。</span><span class="sxs-lookup"><span data-stu-id="fb397-120">Gets the URI on which the listeners that are generated by the factory listen.</span></span></summary>
        <value><span data-ttu-id="fb397-121">工厂生成的侦听器进行侦听的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="fb397-121">The <see cref="T:System.Uri" /> on which the listeners that are generated by the factory listen.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb397-122">此 URI 表示 <xref:System.ServiceModel.Channels.IChannelListener> 为消息侦听的传输地址。</span><span class="sxs-lookup"><span data-stu-id="fb397-122">This URI represents the transport address on which the <xref:System.ServiceModel.Channels.IChannelListener> is listening for messages.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForChannel">
      <MemberSignature Language="C#" Value="public bool WaitForChannel (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForChannel(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener.WaitForChannel(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChannel (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForChannel(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForChannel : TimeSpan -&gt; bool" Usage="iChannelListener.WaitForChannel timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="fb397-123"><see cref="T:System.TimeSpan" />，指定在超时前可用于完成等待通道操作的时间长度。</span><span class="sxs-lookup"><span data-stu-id="fb397-123">The <see cref="T:System.TimeSpan" /> that specifies how long the wait for a channel operation has to complete before timing out.</span></span></param>
        <summary><span data-ttu-id="fb397-124">等待通道到达。</span><span class="sxs-lookup"><span data-stu-id="fb397-124">Waits for a channel to arrive.</span></span></summary>
        <returns><span data-ttu-id="fb397-125">如果通道在 <paramref name="timeout" /> 指定的时间间隔内到达，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fb397-125"><see langword="true" /> if a channel arrived before the interval of time specified by the <paramref name="timeout" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
