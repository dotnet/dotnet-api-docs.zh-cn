<Type Name="IBindingRuntimePreferences" FullName="System.ServiceModel.Channels.IBindingRuntimePreferences">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dcc679b1133127b4f86e81a32af13a2bf4add33b" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83933959" /></Metadata><TypeSignature Language="C#" Value="public interface IBindingRuntimePreferences" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBindingRuntimePreferences" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBindingRuntimePreferences" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBindingRuntimePreferences" />
  <TypeSignature Language="F#" Value="type IBindingRuntimePreferences = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义可选的协定，绑定通过实现该协定，可以指定传入请求是由服务同步处理还是异步处理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些情况下，绑定使用同步 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 或 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 方法处理消息可能更加有效。 <xref:System.ServiceModel.Channels.Binding> 类可以选择实现 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences>，从而指示调用方这是优先选择。  
  
 如果绑定未实现 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences>，则 Windows Communication Foundation （WCF）服务模型运行时层默认为使用 `Receive` 和 `Request` 方法的异步版本。 如果绑定确实实现 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences>，WCF 服务模型运行时层会检查 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A> 的值，并使用它来确定是否调用这些方法（<xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 或 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>）或异步版本（<xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 和 <xref:System.ServiceModel.Channels.IInputChannel.EndReceive%28System.IAsyncResult%29> 或 <xref:System.ServiceModel.Channels.IRequestChannel.BeginRequest%2A> 和 <xref:System.ServiceModel.Channels.IRequestChannel.EndRequest%28System.IAsyncResult%29>的同步版本。 如果绑定实现 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences> 并从 `true` 属性返回 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A>，则建议使用同步的 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 和 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 方法从通道接收消息。 如果绑定不实现 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences>，或从 `false` 属性返回 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A>，则建议使用异步的 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 和 <xref:System.ServiceModel.Channels.IInputChannel.EndReceive%28System.IAsyncResult%29> 或 <xref:System.ServiceModel.Channels.IRequestChannel.BeginRequest%2A> 和 <xref:System.ServiceModel.Channels.IRequestChannel.EndRequest%28System.IAsyncResult%29> 方法。  
  
 无论 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A> 属性返回什么值，所有绑定仍然必须为所实现的特定通道类型提供 `Receive` 方法同步版本和异步版本的有效实现。 有关实现自定义通道的详细信息，请参阅[开发渠道](/dotnet/framework/wcf/extending/developing-channels)。  
  
   
  
## Examples  
 下面的示例演示实现 <xref:System.ServiceModel.Channels.IBindingRuntimePreferences> 接口的绑定是如何实现的。 此代码取自[块区通道](/dotnet/framework/wcf/samples/chunking-channel)示例：  
  
 [!code-csharp[S_UE_ChunkingChannel#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_chunkingchannel/cs/tcpchunkingbinding.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ReceiveSynchronously">
      <MemberSignature Language="C#" Value="public bool ReceiveSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReceiveSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReceiveSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReceiveSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveSynchronously : bool" Usage="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示传入请求是由同步处理更加有效还是异步处理更加有效。</summary>
        <value>如果可以同步地处理请求，则 <see langword="true" />;否则 <see langword="false" />。 默认值为 <see langword="false" />，即异步处理请求。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows Communication Foundation （WCF）提供的标准（系统提供）绑定已实现此接口，并且在某些情况下，会重写默认值以同步处理传入消息。  
  
   
  
## Examples  
 [!code-csharp[S_UE_ChunkingChannel#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_chunkingchannel/cs/tcpchunkingbinding.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
