<Type Name="IRequestChannel" FullName="System.ServiceModel.Channels.IRequestChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d9f9ab869abe6b9870fec1b513bcfe716211796" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83523152" /></Metadata><TypeSignature Language="C#" Value="public interface IRequestChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRequestChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IRequestChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRequestChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRequestChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IRequestChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ddc87-101">定义一个协定，通道必须实现该协定，才能成为消息传递终结点之间的请求-回复通信的请求端。</span><span class="sxs-lookup"><span data-stu-id="ddc87-101">Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="ddc87-102"><xref:System.ServiceModel.Channels.IRequestChannel> 定义返回响应消息的 <xref:System.ServiceModel.ClientBase%601.ChannelBase%601.System%23ServiceModel%23Channels%23IRequestChannel%23Request%2A> 方法的同步和异步版本。</span><span class="sxs-lookup"><span data-stu-id="ddc87-102">The <xref:System.ServiceModel.Channels.IRequestChannel> defines synchronous and asynchronous variants of a <xref:System.ServiceModel.ClientBase%601.ChannelBase%601.System%23ServiceModel%23Channels%23IRequestChannel%23Request%2A> method that returns a response message.</span></span> <span data-ttu-id="ddc87-103">它还提供了 <xref:System.ServiceModel.Channels.IRequestChannel.RemoteAddress%2A> 和 <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> 属性来检索请求消息所发送到的终结点地址和 URI。</span><span class="sxs-lookup"><span data-stu-id="ddc87-103">It also provides a <xref:System.ServiceModel.Channels.IRequestChannel.RemoteAddress%2A> and <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> properties to retrieve the endpoint address and URI to which the request message is sent.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ddc87-104">开始一个异步操作，将请求消息传送到请求-回复消息交换的回复端。</span><span class="sxs-lookup"><span data-stu-id="ddc87-104">Begins an asynchronous operation to transmit a request message to the reply side of a request-reply message exchange.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRequest (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRequest(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginRequest (message As Message, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginRequest(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRequest : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRequestChannel.BeginRequest (message, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ddc87-105">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-105">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <param name="callback"><span data-ttu-id="ddc87-106"><see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</span><span class="sxs-lookup"><span data-stu-id="ddc87-106">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</span></span></param>
        <param name="state"><span data-ttu-id="ddc87-107">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</span><span class="sxs-lookup"><span data-stu-id="ddc87-107">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</span></span></param>
        <summary><span data-ttu-id="ddc87-108">开始一个异步操作，将请求消息传送到请求-回复消息交换的回复端。</span><span class="sxs-lookup"><span data-stu-id="ddc87-108">Begins an asynchronous operation to transmit a request message to the reply side of a request-reply message exchange.</span></span></summary>
        <returns><span data-ttu-id="ddc87-109">引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-109">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc87-110">如果请求消息大于使用的绑定所允许的最大消息大小，则将引发 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-110">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ddc87-111">最大消息大小由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 属性设置。</span><span class="sxs-lookup"><span data-stu-id="ddc87-111">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ddc87-112">默认值为 65536 个字节。</span><span class="sxs-lookup"><span data-stu-id="ddc87-112">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddc87-113">下面的代码演示如何实现此方法。</span><span class="sxs-lookup"><span data-stu-id="ddc87-113">The following code shows how to implement this method.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRequest (System.ServiceModel.Channels.Message message, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRequest(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginRequest (message As Message, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginRequest(System::ServiceModel::Channels::Message ^ message, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRequest : System.ServiceModel.Channels.Message * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRequestChannel.BeginRequest (message, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ddc87-114">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-114">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <param name="timeout"><span data-ttu-id="ddc87-115">指定时间间隔的 <see cref="T:System.TimeSpan" />，在此时间间隔内必须收到响应。</span><span class="sxs-lookup"><span data-stu-id="ddc87-115">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</span></span></param>
        <param name="callback"><span data-ttu-id="ddc87-116"><see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</span><span class="sxs-lookup"><span data-stu-id="ddc87-116">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</span></span></param>
        <param name="state"><span data-ttu-id="ddc87-117">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</span><span class="sxs-lookup"><span data-stu-id="ddc87-117">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</span></span></param>
        <summary><span data-ttu-id="ddc87-118">开始一个异步操作，在指定时间间隔内将请求消息传送到请求-回复消息交换的回复端。</span><span class="sxs-lookup"><span data-stu-id="ddc87-118">Begins an asynchronous operation to transmit a request message to the reply side of a request-reply message exchange within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="ddc87-119">引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-119">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc87-120">如果请求消息大于使用的绑定所允许的最大消息大小，则应引发 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-120">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> should be thrown.</span></span> <span data-ttu-id="ddc87-121">最大消息大小由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 属性设置。</span><span class="sxs-lookup"><span data-stu-id="ddc87-121">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ddc87-122">默认值为 65536 个字节。</span><span class="sxs-lookup"><span data-stu-id="ddc87-122">The default value is 65536 bytes.</span></span>  
  
 <span data-ttu-id="ddc87-123">如果在调用该函数时传入了 `timeout`，则使用该值。</span><span class="sxs-lookup"><span data-stu-id="ddc87-123">If a `timeout` is passed while calling the function then that value is used.</span></span> <span data-ttu-id="ddc87-124">如果在绑定上设置了 <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A>，那么，若是在调用该函数时未指定 `timeout`，则使用绑定上的该值。</span><span class="sxs-lookup"><span data-stu-id="ddc87-124">If the <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A> is set on the binding, then the value on the binding is used if no `timeout` is specified while calling the function.</span></span>  
  
 <span data-ttu-id="ddc87-125">如果在绑定上以及在调用该函数时未指定超时值，则使用 <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-125">The <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A> is used if no timeout is specified on either the binding or while calling the function.</span></span> <span data-ttu-id="ddc87-126">此默认值为 1 分钟。</span><span class="sxs-lookup"><span data-stu-id="ddc87-126">This default value is 1 minute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddc87-127">下面的代码演示如何实现此方法：</span><span class="sxs-lookup"><span data-stu-id="ddc87-127">The following code shows how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ddc87-128">如果在操作完成前超出指定的 <see cref="T:System.TimeoutException" />，则此操作应引发 <paramref name="timeout" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-128">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndRequest (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndRequest : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.EndRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="ddc87-129">通过调用 <see cref="T:System.IAsyncResult" /> 方法返回的 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-129">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span></span></param>
        <summary><span data-ttu-id="ddc87-130">完成异步操作以向传送的请求返回基于消息的响应。</span><span class="sxs-lookup"><span data-stu-id="ddc87-130">Completes an asynchronous operation to return a message-based response to a transmitted request.</span></span></summary>
        <returns><span data-ttu-id="ddc87-131">在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-131">The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc87-132">如果请求消息大于使用的绑定所允许的最大消息大小，则将引发 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-132">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ddc87-133">最大消息大小由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 属性设置。</span><span class="sxs-lookup"><span data-stu-id="ddc87-133">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ddc87-134">默认值为 65536 个字节。</span><span class="sxs-lookup"><span data-stu-id="ddc87-134">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddc87-135">下面的代码演示如何实现此方法。</span><span class="sxs-lookup"><span data-stu-id="ddc87-135">The following code shows how to implement this method.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress RemoteAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ RemoteAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IRequestChannel.RemoteAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ddc87-136">获取请求通道将消息发送到的远程地址。</span><span class="sxs-lookup"><span data-stu-id="ddc87-136">Gets the remote address to which the request channel sends messages.</span></span></summary>
        <value><span data-ttu-id="ddc87-137">请求通道将消息发送到的 <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-137">The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc87-138">如果未指定 <xref:System.ServiceModel.EndpointAddress>，<xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> 将用作最终目标和物理地址。</span><span class="sxs-lookup"><span data-stu-id="ddc87-138">The <xref:System.ServiceModel.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is not specified.</span></span> <span data-ttu-id="ddc87-139">如果已指定 <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>，则此地址为消息将要发送至的实际物理地址，且消息必须通过此地址到达目标。</span><span class="sxs-lookup"><span data-stu-id="ddc87-139">If the <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddc87-140">下面的代码演示如何实现此属性。</span><span class="sxs-lookup"><span data-stu-id="ddc87-140">The following code shows how to implement this property.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Request">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ddc87-141">发送一个基于消息的请求，并返回相关的基于消息的响应。</span><span class="sxs-lookup"><span data-stu-id="ddc87-141">Sends a message-based request and returns the correlated message-based response.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Request (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Request(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function Request (message As Message) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Request(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Request : System.ServiceModel.Channels.Message -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.Request message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ddc87-142">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-142">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <summary><span data-ttu-id="ddc87-143">发送一个基于消息的请求，并返回相关的基于消息的响应。</span><span class="sxs-lookup"><span data-stu-id="ddc87-143">Sends a message-based request and returns the correlated message-based response.</span></span></summary>
        <returns><span data-ttu-id="ddc87-144">在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-144">The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc87-145"><xref:System.ServiceModel.Channels.IRequestChannel> 的实现确保响应消息与请求消息相关联。</span><span class="sxs-lookup"><span data-stu-id="ddc87-145">Implementations of <xref:System.ServiceModel.Channels.IRequestChannel> ensure that the response message is correlated with the request message.</span></span>  
  
 <span data-ttu-id="ddc87-146">通常，如果 <xref:System.ServiceModel.Channels.IRequestChannel> 的实现收到与未处理的请求无关联的消息，则丢弃该消息。</span><span class="sxs-lookup"><span data-stu-id="ddc87-146">Generally, if an implementation of <xref:System.ServiceModel.Channels.IRequestChannel> receives a message that is not correlated to an outstanding request, it is dropped.</span></span>  
  
 <span data-ttu-id="ddc87-147">多个线程可并发调用 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ddc87-147">The <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> method can be called concurrently across multiple threads.</span></span>  
  
 <span data-ttu-id="ddc87-148">将消息传入请求通道将使该消息被访问。</span><span class="sxs-lookup"><span data-stu-id="ddc87-148">Passing the message into the request channel causes the message to be accessed.</span></span> <span data-ttu-id="ddc87-149">在调用 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 后，就再也不能检查消息或对消息调用 <xref:System.ServiceModel.Channels.Message.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-149">After you call <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>, you can no longer inspect the message or call <xref:System.ServiceModel.Channels.Message.Close%2A> on the message.</span></span>  
  
 <span data-ttu-id="ddc87-150">如果请求消息大于使用的绑定所允许的最大消息大小，则将引发 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-150">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ddc87-151">最大消息大小由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 属性设置。</span><span class="sxs-lookup"><span data-stu-id="ddc87-151">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ddc87-152">默认值为 65536 个字节。</span><span class="sxs-lookup"><span data-stu-id="ddc87-152">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddc87-153">下面的代码演示如何实现此方法：</span><span class="sxs-lookup"><span data-stu-id="ddc87-153">The following code shows how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Request (System.ServiceModel.Channels.Message message, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Request(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Request (message As Message, timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Request(System::ServiceModel::Channels::Message ^ message, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Request : System.ServiceModel.Channels.Message * TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.Request (message, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ddc87-154">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-154">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <param name="timeout"><span data-ttu-id="ddc87-155">指定时间间隔的 <see cref="T:System.TimeSpan" />，在此时间间隔内必须收到响应。</span><span class="sxs-lookup"><span data-stu-id="ddc87-155">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</span></span></param>
        <summary><span data-ttu-id="ddc87-156">发送一个基于消息的请求，并在指定的时间间隔内返回相关的基于消息的响应。</span><span class="sxs-lookup"><span data-stu-id="ddc87-156">Sends a message-based request and returns the correlated message-based response within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="ddc87-157">在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-157">The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc87-158"><xref:System.ServiceModel.Channels.IRequestChannel> 的实现确保响应消息与请求消息相关联。</span><span class="sxs-lookup"><span data-stu-id="ddc87-158">Implementations of <xref:System.ServiceModel.Channels.IRequestChannel> ensure that the response message is correlated with the request message.</span></span>  
  
 <span data-ttu-id="ddc87-159">通常，如果 <xref:System.ServiceModel.Channels.IRequestChannel> 的实现收到与未处理的请求无关联的消息，则丢弃该消息。</span><span class="sxs-lookup"><span data-stu-id="ddc87-159">Generally, if an implementation of <xref:System.ServiceModel.Channels.IRequestChannel> receives a message that is not correlated to an outstanding request, it is dropped.</span></span>  
  
 <span data-ttu-id="ddc87-160">多个线程可并发调用 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ddc87-160">The <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> method can be called concurrently across multiple threads.</span></span>  
  
 <span data-ttu-id="ddc87-161">将消息传入请求通道将使该消息被访问。</span><span class="sxs-lookup"><span data-stu-id="ddc87-161">Passing the message into the request channel causes the message to be accessed.</span></span> <span data-ttu-id="ddc87-162">在调用 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 后，就再也不能检查消息或对消息调用 <xref:System.ServiceModel.Channels.Message.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-162">After you call <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>, you can no longer inspect the message or call <xref:System.ServiceModel.Channels.Message.Close%2A> on the message.</span></span>  
  
 <span data-ttu-id="ddc87-163">如果请求消息大于使用的绑定所允许的最大消息大小，则将引发 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-163">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ddc87-164">最大消息大小由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 属性设置。</span><span class="sxs-lookup"><span data-stu-id="ddc87-164">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ddc87-165">默认值为 65536 个字节。</span><span class="sxs-lookup"><span data-stu-id="ddc87-165">The default value is 65536 bytes.</span></span>  
  
 <span data-ttu-id="ddc87-166">如果在调用该函数时传入了 `timeout`，则使用该值。</span><span class="sxs-lookup"><span data-stu-id="ddc87-166">If a `timeout` is passed while calling the function then that value is used.</span></span> <span data-ttu-id="ddc87-167">如果在绑定上设置了 <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A>，那么，若是在调用该函数时未指定 `timeout`，则使用绑定上的该值。</span><span class="sxs-lookup"><span data-stu-id="ddc87-167">If the <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A> is set on the binding, then the value on the binding is used if no `timeout` is specified while calling the function.</span></span>  
  
 <span data-ttu-id="ddc87-168">如果在绑定上以及在调用该函数时未指定超时值，则使用 <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A>。</span><span class="sxs-lookup"><span data-stu-id="ddc87-168">The <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A> is used if no timeout is specified on either the binding or while calling the function.</span></span> <span data-ttu-id="ddc87-169">此默认值为 1 分钟。</span><span class="sxs-lookup"><span data-stu-id="ddc87-169">This default value is 1 minute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddc87-170">下面的代码演示如何实现此方法。</span><span class="sxs-lookup"><span data-stu-id="ddc87-170">The following code shows how to implement this method.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ddc87-171">如果在操作完成前超出指定的 <see cref="T:System.TimeoutException" />，则此操作应引发 <paramref name="timeout" />。</span><span class="sxs-lookup"><span data-stu-id="ddc87-171">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Via">
      <MemberSignature Language="C#" Value="public Uri Via { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Via" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IRequestChannel.Via" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Via As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Via { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Via : Uri" Usage="System.ServiceModel.Channels.IRequestChannel.Via" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ddc87-172">获取发送请求的目标传输地址。</span><span class="sxs-lookup"><span data-stu-id="ddc87-172">Gets the transport address to which the request is send.</span></span></summary>
        <value><span data-ttu-id="ddc87-173"><see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</span><span class="sxs-lookup"><span data-stu-id="ddc87-173">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc87-174">如果未指定 <xref:System.ServiceModel.EndpointAddress>，<xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> 将用作最终目标和物理地址。</span><span class="sxs-lookup"><span data-stu-id="ddc87-174">The <xref:System.ServiceModel.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is not specified.</span></span> <span data-ttu-id="ddc87-175">如果已指定 <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>，则此地址为消息将要发送至的实际物理地址，且消息必须通过此地址到达目标。</span><span class="sxs-lookup"><span data-stu-id="ddc87-175">If the <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddc87-176">下面的代码演示如何实现此属性。</span><span class="sxs-lookup"><span data-stu-id="ddc87-176">The following code shows how to implement this property.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
