<Type Name="StreamUpgradeInitiator" FullName="System.ServiceModel.Channels.StreamUpgradeInitiator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1b308793915841eac5a328bb25b0aa31880bb3ea" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89925129" /></Metadata><TypeSignature Language="C#" Value="public abstract class StreamUpgradeInitiator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit StreamUpgradeInitiator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.StreamUpgradeInitiator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StreamUpgradeInitiator" />
  <TypeSignature Language="C++ CLI" Value="public ref class StreamUpgradeInitiator abstract" />
  <TypeSignature Language="F#" Value="type StreamUpgradeInitiator = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="97c8d-101">若要实现自定义升级发起方，请从此 <see langword="abstract" /> 基类继承。</span><span class="sxs-lookup"><span data-stu-id="97c8d-101">To implement a custom upgrade initiator, inherit from this <see langword="abstract" /> base class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97c8d-102">流升级的一个示例是直接在传输流之上生成压缩流。</span><span class="sxs-lookup"><span data-stu-id="97c8d-102">An example of a stream upgrade is to build a compression stream directly on top of the transport stream.</span></span> <span data-ttu-id="97c8d-103">此类同 <xref:System.ServiceModel.Channels.StreamUpgradeAcceptor> 和 <xref:System.ServiceModel.Channels.StreamUpgradeProvider> 一起用于实现自定义流升级。</span><span class="sxs-lookup"><span data-stu-id="97c8d-103">This class is used with <xref:System.ServiceModel.Channels.StreamUpgradeAcceptor> and <xref:System.ServiceModel.Channels.StreamUpgradeProvider> to implement a custom stream upgrade.</span></span>  
  
 <span data-ttu-id="97c8d-104">有关升级过程的详细说明，请参见 <xref:System.ServiceModel.Channels.StreamUpgradeProvider>。</span><span class="sxs-lookup"><span data-stu-id="97c8d-104">For a detailed description of the upgrade process, see <xref:System.ServiceModel.Channels.StreamUpgradeProvider>.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/wcf/extending/custom-stream-upgrades"><span data-ttu-id="97c8d-105">自定义流升级</span><span class="sxs-lookup"><span data-stu-id="97c8d-105">Custom Stream Upgrades</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StreamUpgradeInitiator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.StreamUpgradeInitiator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StreamUpgradeInitiator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97c8d-106">初始化 <see cref="T:System.ServiceModel.Channels.StreamUpgradeInitiator" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="97c8d-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.StreamUpgradeInitiator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInitiateUpgrade">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginInitiateUpgrade (System.IO.Stream stream, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInitiateUpgrade(class System.IO.Stream stream, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginInitiateUpgrade (stream As Stream, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginInitiateUpgrade(System::IO::Stream ^ stream, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginInitiateUpgrade : System.IO.Stream * AsyncCallback * obj -&gt; IAsyncResult" Usage="streamUpgradeInitiator.BeginInitiateUpgrade (stream, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="97c8d-107">要升级的流。</span><span class="sxs-lookup"><span data-stu-id="97c8d-107">The stream to be upgraded.</span></span></param>
        <param name="callback"><span data-ttu-id="97c8d-108">在 <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)" /> 完成后要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="97c8d-108">The method to call when the <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)" /> has completed.</span></span></param>
        <param name="state"><span data-ttu-id="97c8d-109">有关异步调用状态的状态信息。</span><span class="sxs-lookup"><span data-stu-id="97c8d-109">State information about the status of the asynchronous call.</span></span></param>
        <summary><span data-ttu-id="97c8d-110">可实现此 <see langword="abstract" /> 方法以进行发起升级的异步处理。</span><span class="sxs-lookup"><span data-stu-id="97c8d-110">This <see langword="abstract" /> method can be implemented to do asynchronous processing that initiates an upgrade.</span></span></summary>
        <returns><span data-ttu-id="97c8d-111">返回要传入 <see cref="T:System.IAsyncResult" /> 方法的 <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)" />。</span><span class="sxs-lookup"><span data-stu-id="97c8d-111">Returns an <see cref="T:System.IAsyncResult" /> to be passed into the <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97c8d-112">此方法调用 <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A> 并返回。</span><span class="sxs-lookup"><span data-stu-id="97c8d-112">This method calls <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A> and returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInitiateUpgrade">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream EndInitiateUpgrade (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream EndInitiateUpgrade(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndInitiateUpgrade (result As IAsyncResult) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ EndInitiateUpgrade(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInitiateUpgrade : IAsyncResult -&gt; System.IO.Stream" Usage="streamUpgradeInitiator.EndInitiateUpgrade result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="97c8d-113">从 <see langword="IAsyncResult" /> 方法返回的 <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="97c8d-113">The <see langword="IAsyncResult" /> returned from the <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="97c8d-114">此方法是在 <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)" /> 完成后调用的异步回调方法。</span><span class="sxs-lookup"><span data-stu-id="97c8d-114">This method is the asynchronous callback method that is called after <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)" /> has completed.</span></span></summary>
        <returns><span data-ttu-id="97c8d-115">返回升级后的流。</span><span class="sxs-lookup"><span data-stu-id="97c8d-115">Returns the upgraded stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97c8d-116">有关使用此方法的更多信息，请参见 <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A> 中的备注。</span><span class="sxs-lookup"><span data-stu-id="97c8d-116">For more information about using this method, see the remarks in <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextUpgrade">
      <MemberSignature Language="C#" Value="public abstract string GetNextUpgrade ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetNextUpgrade() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextUpgrade () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetNextUpgrade();" />
      <MemberSignature Language="F#" Value="abstract member GetNextUpgrade : unit -&gt; string" Usage="streamUpgradeInitiator.GetNextUpgrade " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97c8d-117">返回要执行的下一个升级的内容类型。</span><span class="sxs-lookup"><span data-stu-id="97c8d-117">Returns the content type of the next upgrade to be performed.</span></span></summary>
        <returns><span data-ttu-id="97c8d-118">返回下一个升级的内容类型。</span><span class="sxs-lookup"><span data-stu-id="97c8d-118">Returns the content type of the next upgrade.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97c8d-119">此方法返回升级提供程序所支持的一组升级内容类型，并以它们的预期执行顺序返回。</span><span class="sxs-lookup"><span data-stu-id="97c8d-119">This method returns a set of upgrade content types supported by the upgrade provider in the order in which they are expected.</span></span> <span data-ttu-id="97c8d-120">支持单个升级的升级提供程序只返回单个值。</span><span class="sxs-lookup"><span data-stu-id="97c8d-120">Upgrade providers that support a single upgrade return only a single value.</span></span> <span data-ttu-id="97c8d-121">支持多个升级的升级提供程序按顺序返回多个值（例如，压缩内容类型后面是安全内容类型）。</span><span class="sxs-lookup"><span data-stu-id="97c8d-121">Upgrade providers that support multiple upgrades return the values in order (for example, compression content type followed by the security content type).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitiateUpgrade">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream InitiateUpgrade (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream InitiateUpgrade(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InitiateUpgrade (stream As Stream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ InitiateUpgrade(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member InitiateUpgrade : System.IO.Stream -&gt; System.IO.Stream" Usage="streamUpgradeInitiator.InitiateUpgrade stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="97c8d-122">要升级的流。</span><span class="sxs-lookup"><span data-stu-id="97c8d-122">The stream to be upgraded.</span></span></param>
        <summary><span data-ttu-id="97c8d-123">通过请求流连接的另一端升级通道传输层，启动流的升级。</span><span class="sxs-lookup"><span data-stu-id="97c8d-123">Initiates the upgrade of the stream by requesting the other end of its connection to upgrade the channel transport layer.</span></span></summary>
        <returns><span data-ttu-id="97c8d-124">返回升级后的流。</span><span class="sxs-lookup"><span data-stu-id="97c8d-124">Returns the upgraded stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97c8d-125">对于升级提供程序所支持的每个升级，可多次调用此方法。</span><span class="sxs-lookup"><span data-stu-id="97c8d-125">This method can be called multiple times for each upgrade supported by the upgrade provider.</span></span> <span data-ttu-id="97c8d-126">例如，支持压缩和安全性的升级提供程序将两次调用此方法：第一次升级默认传输流以进行压缩，第二次升级安全性。</span><span class="sxs-lookup"><span data-stu-id="97c8d-126">For example, an upgrade provider that supports compression and security would call this method twice: first to upgrade the default transport streaming for compression, and second to upgrade the security.</span></span> <span data-ttu-id="97c8d-127">对此方法的后续调用应传入来自前一个调用的升级流。</span><span class="sxs-lookup"><span data-stu-id="97c8d-127">Subsequent calls to this method should pass in the upgrade stream from the previous call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
