<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1e358eaf65c15d7d66f5ea413bb70ffd2bfdeab" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86659371" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9c19b-101">定义连接点对象，该对象允许服务器控件作为使用者，以建立与提供者的连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-101">Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c19b-102">在两个服务器控件之间的每个 Web 部件连接中，每个控件都必须具有) 关联连接点对象的其他要求 (，使其能够连接到其他控件并提供或使用数据，具体取决于控件是否被指定为连接的提供者或使用者。</span><span class="sxs-lookup"><span data-stu-id="9c19b-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="9c19b-103"><xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象通常包含有关控件如何连接到其他控件的详细信息以及它可以共享的数据类型的详细信息。</span><span class="sxs-lookup"><span data-stu-id="9c19b-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="9c19b-104">对于在连接中充当使用者的控件，其连接点必须是 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象。</span><span class="sxs-lookup"><span data-stu-id="9c19b-104">For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span> <span data-ttu-id="9c19b-105">有关 Web 部件连接和连接点的详细信息，请阅读下面的 "另请参阅" 部分中列出的主题。</span><span class="sxs-lookup"><span data-stu-id="9c19b-105">For details on Web Parts connections and connection points, read the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="9c19b-106">若要创建 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象，需要执行多个步骤：</span><span class="sxs-lookup"><span data-stu-id="9c19b-106">To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="9c19b-107">允许使用者控件引用接口实例。</span><span class="sxs-lookup"><span data-stu-id="9c19b-107">Enable a consumer control to reference an interface instance.</span></span> <span data-ttu-id="9c19b-108"><xref:System.Web.UI.WebControls.WebParts.WebPart>或其他服务器控件 (将添加到区域的任何服务器控件类型， <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>) 必须能够使用特定接口实例中的数据。</span><span class="sxs-lookup"><span data-stu-id="9c19b-108">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance.</span></span> <span data-ttu-id="9c19b-109">控件无需实现接口;只有提供程序必须实现它。</span><span class="sxs-lookup"><span data-stu-id="9c19b-109">The control need not implement the interface; only the provider must implement it.</span></span> <span data-ttu-id="9c19b-110">使用者可以使用提供程序提供的准确接口类型，如果不是，则 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 可以使用对象将数据从提供程序的接口类型转换为使用者识别的类型。</span><span class="sxs-lookup"><span data-stu-id="9c19b-110">The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer.</span></span> <span data-ttu-id="9c19b-111">启用使用者的典型方法是声明私有字段，使其包含对所需接口类型的引用。</span><span class="sxs-lookup"><span data-stu-id="9c19b-111">A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.</span></span>  
  
2.  <span data-ttu-id="9c19b-112">标识回调方法。</span><span class="sxs-lookup"><span data-stu-id="9c19b-112">Identify a callback method.</span></span> <span data-ttu-id="9c19b-113">必须将使用者中的方法标识为回调方法，以便与提供程序建立连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-113">A method in the consumer must be identified as the callback method to establish a connection with the provider.</span></span> <span data-ttu-id="9c19b-114">此方法检索提供程序实现的接口实例，并将其分配给 (例如) 第一步中创建的私有字段。</span><span class="sxs-lookup"><span data-stu-id="9c19b-114">This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step.</span></span> <span data-ttu-id="9c19b-115">用于标识使用者中的回调方法的 Web 部件方法是将 `ConnectionConsumer` 类定义的元数据属性 (<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>) 添加到接收接口实例的方法。</span><span class="sxs-lookup"><span data-stu-id="9c19b-115">The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance.</span></span> <span data-ttu-id="9c19b-116">添加属性后，唯一必需的参数是用于使用者连接点的显示名称。</span><span class="sxs-lookup"><span data-stu-id="9c19b-116">When the attribute is added, the only required parameter is a display name to use for the consumer connection point.</span></span> <span data-ttu-id="9c19b-117">还可以添加可选参数，例如 ID。</span><span class="sxs-lookup"><span data-stu-id="9c19b-117">Optional parameters can also be added, such as an ID.</span></span>  
  
3.  <span data-ttu-id="9c19b-118">处理并输出接口实例中的数据。</span><span class="sxs-lookup"><span data-stu-id="9c19b-118">Process and output the data from the interface instance.</span></span> <span data-ttu-id="9c19b-119">根据需要对数据执行任何内部处理，通常使用者控件会将数据呈现到页面。</span><span class="sxs-lookup"><span data-stu-id="9c19b-119">Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page.</span></span> <span data-ttu-id="9c19b-120">执行此操作的常见方法是重写控件的 <xref:System.Web.UI.Control.OnPreRender%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9c19b-120">A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9c19b-121">在同步请求期间，使用者应在事件之后或之后立即直接从提供程序请求数据 <xref:System.Web.UI.Control.PreRender> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-121">During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event.</span></span> <span data-ttu-id="9c19b-122">在异步请求期间，如果在呈现过程中没有调用提供程序的回调方法，开发人员可以假定未向使用者发送任何数据。</span><span class="sxs-lookup"><span data-stu-id="9c19b-122">During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.</span></span>  
  
 <span data-ttu-id="9c19b-123">将控件作为使用者提供后，该控件可以参与连接 (假定提供程序控件也已配备并且) 可用。</span><span class="sxs-lookup"><span data-stu-id="9c19b-123">After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available).</span></span> <span data-ttu-id="9c19b-124">若要在网页的标记中创建静态的声明性连接，开发人员可以使用 `<asp:webpartconnection>` 元素。</span><span class="sxs-lookup"><span data-stu-id="9c19b-124">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="9c19b-125">如果用于 `ConnectionConsumer` 标识回调方法的使用者源代码中的属性指定了连接点的 ID，则必须将该值分配给 `ConsumerConnectionPointID` 页面上的元素中的属性 `<asp:webpartconnection>` 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-125">If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="9c19b-126">如果使用者控件中定义了多个连接点，开发人员可能为使用者连接点指定 ID 的原因。</span><span class="sxs-lookup"><span data-stu-id="9c19b-126">A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control.</span></span> <span data-ttu-id="9c19b-127">如果没有为使用者控件中的使用者连接点指定 ID，则无需将值分配给 `ConsumerConnectionPointID` 页中的属性，因为将使用从该字段获取的默认值创建连接 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-127">If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="9c19b-128">若要在代码中创建连接，开发人员必须 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 通过调用 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 方法并向其传递使用者控件的 id 或使用者控件中定义的对象的 id 或索引，来创建一个新的对象 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-128">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control.</span></span> <span data-ttu-id="9c19b-129">返回的 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象以及对使用者控件的引用、对提供程序控件的引用以及对应的 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 对象都将传递给 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 方法以创建新的 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 对象。</span><span class="sxs-lookup"><span data-stu-id="9c19b-129">The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="9c19b-130">尽管开发人员可以使用使用者连接点作为以声明方式或以编程方式建立连接的一部分，但用户也可以与使用者连接点进行交互，以便通过用户界面 (UI) 建立连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-130">Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="9c19b-131">如果开发人员在网页上声明了一个 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 控件，则该控件将提供运行时 UI，使用户能够创建连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-131">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="9c19b-132">如果用户选择提供程序控件作为建立连接的起始点，则单击其连接谓词即可 (他们也可以选择使用者;生成的连接) 没有差别，在 UI 中，他们将看到一个下拉列表控件，其中包含可用的使用者连接点的显示名称 (或点（如果提供程序可以将数据发送到多个) 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-132">If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to.</span></span> <span data-ttu-id="9c19b-133">用户必须选择一个使用者连接点以建立连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-133">Users must select a consumer connection point to establish a connection.</span></span>  
  
 <span data-ttu-id="9c19b-134"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象直接与特定使用者控件关联，并将有关连接的详细信息存储在它从基类继承的属性中 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-134">A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="9c19b-135">例如，在继承的 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 属性中，使用者连接点保留其所使用的接口类型。</span><span class="sxs-lookup"><span data-stu-id="9c19b-135">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses.</span></span> <span data-ttu-id="9c19b-136">如果连接中的提供者和使用者都理解接口类型，则这些控件是兼容的，并且能够形成直接连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-136">If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="9c19b-137">如果提供程序和使用者无法使用同一接口类型，则它们是不兼容的，并且必须使用 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 对象将提供程序连接点的 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 属性转换为使用者可以使用的类型。</span><span class="sxs-lookup"><span data-stu-id="9c19b-137">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with.</span></span> <span data-ttu-id="9c19b-138">另一个重要的继承属性是 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 属性，它提供在用户界面中显示的友好名称，用户可以在创建连接时选择使用者连接点。</span><span class="sxs-lookup"><span data-stu-id="9c19b-138">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections.</span></span> <span data-ttu-id="9c19b-139">当开发人员将 `ConnectionConsumer` 属性添加到使用者控件中的回调方法时，显示名称是必需的参数。</span><span class="sxs-lookup"><span data-stu-id="9c19b-139">The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control.</span></span> <span data-ttu-id="9c19b-140"><xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>正如上面所述，继承的属性也很有用，因为当使用者具有多个连接点时，它为使用者连接点提供唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="9c19b-140">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points.</span></span> <span data-ttu-id="9c19b-141">使用者可以 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 在其中定义多个对象，在这种情况下，当开发人员将 `ConnectionConsumer` 属性添加到方法时，它们应该指定一个 ID 值以区分每个连接点。</span><span class="sxs-lookup"><span data-stu-id="9c19b-141">A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="9c19b-142">另一个值得注意的继承属性是 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 属性，该属性指示使用者连接点是否可以同时连接到多个提供程序。</span><span class="sxs-lookup"><span data-stu-id="9c19b-142">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers.</span></span> <span data-ttu-id="9c19b-143">`false`默认情况下， (使用者连接点的属性值，而 `true` 对于提供程序连接点) ，默认值为。</span><span class="sxs-lookup"><span data-stu-id="9c19b-143">This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).</span></span>  
  
 <span data-ttu-id="9c19b-144"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类将几个唯一方法添加到它从类继承的成员 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-144">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="9c19b-145"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>方法调用使用者自己定义的回调方法从提供程序中检索接口实例。</span><span class="sxs-lookup"><span data-stu-id="9c19b-145">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider.</span></span> <span data-ttu-id="9c19b-146"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法返回一个布尔值，该值指示连接点能否根据关联的使用者控件的当前状态建立连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-146">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c19b-147">下面的代码示例演示了使用使用者连接点的每种情况下，以声明方式、编程方式或通过 UI 创建连接的简单方法。</span><span class="sxs-lookup"><span data-stu-id="9c19b-147">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.</span></span>  
  
 <span data-ttu-id="9c19b-148">该示例包含四个部分：</span><span class="sxs-lookup"><span data-stu-id="9c19b-148">The example has four parts:</span></span>  
  
-   <span data-ttu-id="9c19b-149">允许您在页上更改 Web 部件显示模式的用户控件。</span><span class="sxs-lookup"><span data-stu-id="9c19b-149">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="9c19b-150">接口的源代码和两个用作 <xref:System.Web.UI.WebControls.WebParts.WebPart> 连接的提供者和使用者的控件。</span><span class="sxs-lookup"><span data-stu-id="9c19b-150">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="9c19b-151">承载所有控件并运行代码示例的网页。</span><span class="sxs-lookup"><span data-stu-id="9c19b-151">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="9c19b-152">有关如何运行 "示例" 页的说明。</span><span class="sxs-lookup"><span data-stu-id="9c19b-152">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="9c19b-153">此代码示例的第一部分是用户控件，该控件使用户能够更改网页上的显示模式。</span><span class="sxs-lookup"><span data-stu-id="9c19b-153">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="9c19b-154">将以下源代码保存到 .ascx 文件，并为其提供分配给 `Src` 此用户控件的指令属性的文件名，该属性 `Register` 位于宿主网页的顶部附近。</span><span class="sxs-lookup"><span data-stu-id="9c19b-154">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="9c19b-155">有关显示模式的详细信息以及此控件中源代码的说明，请参阅 [演练：在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。</span><span class="sxs-lookup"><span data-stu-id="9c19b-155">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="9c19b-156">此代码示例的第二部分是接口和控件的源代码。</span><span class="sxs-lookup"><span data-stu-id="9c19b-156">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="9c19b-157">源文件包含一个名为的简单接口 `IZipCode` 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-157">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="9c19b-158">还有一个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 名为的类 `ZipCodeWebPart` ，该类实现接口并充当提供程序控件。</span><span class="sxs-lookup"><span data-stu-id="9c19b-158">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="9c19b-159">其他 <xref:System.Web.UI.WebControls.WebParts.WebPart> 类命名为 `WeatherWebPart` ，它充当连接的使用者。</span><span class="sxs-lookup"><span data-stu-id="9c19b-159">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="9c19b-160">此类具有一个名为 `GetZipCode` 的方法，该方法 `IZipCode` 从提供程序控件获取接口的实例。</span><span class="sxs-lookup"><span data-stu-id="9c19b-160">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="9c19b-161">请注意，此方法 `ConnectionConsumer` 在其元数据中被标记为使用者的连接点方法和属性。</span><span class="sxs-lookup"><span data-stu-id="9c19b-161">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="9c19b-162">这是用于标识使用者控件中的连接点方法的机制。</span><span class="sxs-lookup"><span data-stu-id="9c19b-162">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="9c19b-163">要使代码示例运行，必须编译此源代码。</span><span class="sxs-lookup"><span data-stu-id="9c19b-163">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="9c19b-164">可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。</span><span class="sxs-lookup"><span data-stu-id="9c19b-164">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="9c19b-165">或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。</span><span class="sxs-lookup"><span data-stu-id="9c19b-165">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="9c19b-166">此代码示例使用动态编译。</span><span class="sxs-lookup"><span data-stu-id="9c19b-166">This code example uses dynamic compilation.</span></span> <span data-ttu-id="9c19b-167">有关演示如何编译的演练，请参阅 [演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。</span><span class="sxs-lookup"><span data-stu-id="9c19b-167">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="9c19b-168">此代码示例的第三部分是网页。</span><span class="sxs-lookup"><span data-stu-id="9c19b-168">The third part of the code example is the Web page.</span></span> <span data-ttu-id="9c19b-169">顶部附近是 `Register` 注册构成连接的自定义控件的指令，以及允许用户在页面上更改显示模式的用户控件。</span><span class="sxs-lookup"><span data-stu-id="9c19b-169">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="9c19b-170">连接本身是在页面上的元素中以声明方式创建的 `<staticconnections>` 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-170">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="9c19b-171">这说明了创建连接的一种方法--请注意 `ConsumerConnectionPointID` 元素中的属性 `<asp:webpartconnection>` 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-171">This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="9c19b-172">还可以通过编程方式创建连接;用于执行此操作的代码位于 `Button1_Click` 方法中。</span><span class="sxs-lookup"><span data-stu-id="9c19b-172">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="9c19b-173">在这种情况下，将 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 创建一个对象，然后将该对象传递给创建实际连接的方法。</span><span class="sxs-lookup"><span data-stu-id="9c19b-173">In this case, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="9c19b-174">无论连接是以声明方式创建还是以编程方式创建，都必须始终为提供程序和使用者指定连接点。</span><span class="sxs-lookup"><span data-stu-id="9c19b-174">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="9c19b-175">`Button2_Click`方法访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 提供程序和使用者的对象，并将其一些属性值写入页中的标签。</span><span class="sxs-lookup"><span data-stu-id="9c19b-175">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="9c19b-176">在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮。</span><span class="sxs-lookup"><span data-stu-id="9c19b-176">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="9c19b-177">此时将显示有关在声明性连接中建立的提供者和使用者连接点的信息。</span><span class="sxs-lookup"><span data-stu-id="9c19b-177">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="9c19b-178">接下来，使用 " **显示模式** " 下拉控件将页面切换到连接模式。</span><span class="sxs-lookup"><span data-stu-id="9c19b-178">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="9c19b-179">在**邮政编码提供程序**控件的谓词菜单上 <xref:System.Web.UI.WebControls.WebParts.WebPart> (由标题栏中的向下箭头表示) 中，单击 "连接" 谓词。</span><span class="sxs-lookup"><span data-stu-id="9c19b-179">On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="9c19b-180">连接 UI 随即出现，由 `<asp:connectionszone>` 页面中声明的控件自动创建。</span><span class="sxs-lookup"><span data-stu-id="9c19b-180">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="9c19b-181">这是通过 UI) 创建连接 (的另一种方式，还包括前面讨论的声明性和编程方法。</span><span class="sxs-lookup"><span data-stu-id="9c19b-181">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="9c19b-182">单击 " **断开连接** " 按钮以终止现有静态连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-182">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="9c19b-183">单击 " **创建使用者连接** " 链接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-183">Click the **Create a Connection to a Consumer** link.</span></span> <span data-ttu-id="9c19b-184">UI 现在会显示一个下拉列表控件，其中列出了使用者连接点显示名称。</span><span class="sxs-lookup"><span data-stu-id="9c19b-184">The UI now displays a drop-down control that lists the consumer connection point display name.</span></span> <span data-ttu-id="9c19b-185">在下拉列表中选择连接点，然后单击 " **连接** " 以完成连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-185">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="9c19b-186">接下来，再次单击 " **断开** "。</span><span class="sxs-lookup"><span data-stu-id="9c19b-186">Next, click **Disconnect** again.</span></span> <span data-ttu-id="9c19b-187">单击 " **动态连接** " 按钮以编程方式创建连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-187">Click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="9c19b-188">使用 " **显示模式** " 控件将页面返回到浏览模式。</span><span class="sxs-lookup"><span data-stu-id="9c19b-188">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="9c19b-189">再次单击 " **连接点详细信息** " 按钮，以指示有关使用者连接点对象的详细信息。</span><span class="sxs-lookup"><span data-stu-id="9c19b-189">Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.</span></span>  
  
 <span data-ttu-id="9c19b-190">该示例演示了如何建立连接并以三种方式使用使用者连接点：在网页标记中声明的静态连接;在使用对象的代码中创建的连接; 通过连接 UI 创建的连接 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-190">The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="9c19b-191">ASP.NET Web 部件控件</span><span class="sxs-lookup"><span data-stu-id="9c19b-191">ASP.NET Web Parts Controls</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)"><span data-ttu-id="9c19b-192">Web 部件连接概述</span><span class="sxs-lookup"><span data-stu-id="9c19b-192">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="9c19b-193">使用者控件中的方法，该方法将接口实例返回给使用者以建立连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-193">The method in the consumer control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="9c19b-194">使用者从提供者接收的接口的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-194">The <see cref="T:System.Type" /> of the interface that the consumer receives from a provider.</span></span></param>
        <param name="controlType"><span data-ttu-id="9c19b-195">使用者连接点所关联的使用者控件的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-195">The <see cref="T:System.Type" /> of the consumer control with which the consumer connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="9c19b-196">在连接用户界面 (UI) 中向用户显示的使用者连接点的友好显示名称。</span><span class="sxs-lookup"><span data-stu-id="9c19b-196">A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="9c19b-197">使用者连接点的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="9c19b-197">A unique identifier for the consumer connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="9c19b-198">一个布尔值，指示使用者连接点是否可同时拥有与提供者的多个连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-198">A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.</span></span></param>
        <summary><span data-ttu-id="9c19b-199">初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9c19b-199">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c19b-200"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>类的构造函数 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 只调用基构造函数，并向其传递各种参数和初始化基类。</span><span class="sxs-lookup"><span data-stu-id="9c19b-200">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="9c19b-201">基类构造函数检查连接点的多个参数，并可能引发多个异常。</span><span class="sxs-lookup"><span data-stu-id="9c19b-201">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="9c19b-202">有关可能的异常的列表，请参阅异常部分。</span><span class="sxs-lookup"><span data-stu-id="9c19b-202">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="9c19b-203">您可以调用 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> 构造函数来创建您自己的类的实例 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-203">You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="9c19b-204">但是，如果你只是建立连接而不是扩展类，则应调用 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 方法从提供程序返回连接点对象。</span><span class="sxs-lookup"><span data-stu-id="9c19b-204">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c19b-205">下面的代码示例演示如何从 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 类派生以创建自定义提供程序连接点。</span><span class="sxs-lookup"><span data-stu-id="9c19b-205">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="9c19b-206">此代码示例包含三个部分：</span><span class="sxs-lookup"><span data-stu-id="9c19b-206">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="9c19b-207">一个源文件，其中包含提供程序 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件、使用者 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件和自定义 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象。</span><span class="sxs-lookup"><span data-stu-id="9c19b-207">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="9c19b-208">承载静态连接中的控件的网页。</span><span class="sxs-lookup"><span data-stu-id="9c19b-208">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="9c19b-209">说明如何运行示例代码。</span><span class="sxs-lookup"><span data-stu-id="9c19b-209">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="9c19b-210">此代码示例的第一部分是提供程序和使用者控件的源以及 <xref:System.Web.UI.WebControls.WebParts.WebPart> 一个名为的自定义 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 类 `TableConsumerConnectionPoint` 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-210">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`.</span></span> <span data-ttu-id="9c19b-211">请注意，类的构造函数 `TableConsumerConnectionPoint` 调用基构造函数，并向其传递所需的参数（如 parameters 节中所述）。</span><span class="sxs-lookup"><span data-stu-id="9c19b-211">Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="9c19b-212">另请注意，在 `TableConsumer` 类中， `SetConnectionInterface` 方法被指定为连接的回调方法，而特性将 `ConnectionConsumer` 自定义声明 `TableConsumerConnectionPoint` 为参数。</span><span class="sxs-lookup"><span data-stu-id="9c19b-212">Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter.</span></span> <span data-ttu-id="9c19b-213">这说明了如何创建自定义使用者连接点，然后将其与使用者控件相关联。</span><span class="sxs-lookup"><span data-stu-id="9c19b-213">This demonstrates how to create a custom consumer connection point and then associate it with a consumer control.</span></span> <span data-ttu-id="9c19b-214">此示例假设源代码是动态编译的，因此应将源代码文件放在 Web 应用程序的 App_Code 子文件夹中。</span><span class="sxs-lookup"><span data-stu-id="9c19b-214">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="9c19b-215">此代码示例的第二部分是承载静态 Web 部件连接中的自定义控件的网页。</span><span class="sxs-lookup"><span data-stu-id="9c19b-215">The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection.</span></span> <span data-ttu-id="9c19b-216">页面顶部是一个 `Register` 指令，用于声明自定义控件的前缀和命名空间。</span><span class="sxs-lookup"><span data-stu-id="9c19b-216">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="9c19b-217">通过使用元素来声明连接 `<asp:webpartconnection>` ，并在元素中声明提供程序和使用者控件 `<asp:webpartzone>` 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-217">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="9c19b-218">在浏览器中加载页面。</span><span class="sxs-lookup"><span data-stu-id="9c19b-218">Load the page in a browser.</span></span> <span data-ttu-id="9c19b-219">控件之间的连接已存在，使用者将显示来自提供程序的数据，因为连接已在页中声明为静态连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-219">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c19b-220"><paramref name="callbackMethod" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-220"><paramref name="callbackMethod" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9c19b-221">- 或 -</span><span class="sxs-lookup"><span data-stu-id="9c19b-221">-or-</span></span> 
 <span data-ttu-id="9c19b-222"><paramref name="interfaceType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-222"><paramref name="interfaceType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9c19b-223">- 或 -</span><span class="sxs-lookup"><span data-stu-id="9c19b-223">-or-</span></span> 
 <span data-ttu-id="9c19b-224"><paramref name="controlType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-224"><paramref name="controlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9c19b-225">- 或 -</span><span class="sxs-lookup"><span data-stu-id="9c19b-225">-or-</span></span> 
 <span data-ttu-id="9c19b-226"><paramref name="displayName" /> 为 <see langword="null" /> 或空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="9c19b-226"><paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c19b-227"><paramref name="controlType" /> 与使用者控件（或从使用者控件派生的有效类）的类型不同。</span><span class="sxs-lookup"><span data-stu-id="9c19b-227"><paramref name="controlType" /> is not the same type as the consumer control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="9c19b-228">ASP.NET Web 部件控件</span><span class="sxs-lookup"><span data-stu-id="9c19b-228">ASP.NET Web Parts Controls</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetObject (control As Control, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="9c19b-229">与使用者连接点相关联的使用者控件。</span><span class="sxs-lookup"><span data-stu-id="9c19b-229">The consumer control associated with a consumer connection point.</span></span></param>
        <param name="data"><span data-ttu-id="9c19b-230">从提供者控件返回的接口实例。</span><span class="sxs-lookup"><span data-stu-id="9c19b-230">The interface instance returned from a provider control.</span></span></param>
        <summary><span data-ttu-id="9c19b-231">调用使用者控件中的回调方法，并从提供者控件检索接口实例。</span><span class="sxs-lookup"><span data-stu-id="9c19b-231">Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c19b-232">此方法接收包含使用者控件的数据的提供程序的接口实例。</span><span class="sxs-lookup"><span data-stu-id="9c19b-232">This method receives an interface instance from a provider that contains data for the consumer control.</span></span>  
  
 <span data-ttu-id="9c19b-233"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 当连接处于激活状态时，对象将调用方法。</span><span class="sxs-lookup"><span data-stu-id="9c19b-233">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="9c19b-234">这是启动连接并使两个控件可以共享数据的一个重要步骤。</span><span class="sxs-lookup"><span data-stu-id="9c19b-234">This is a critical step that is part of initiating a connection and enabling two controls to share data.</span></span>  
  
 <span data-ttu-id="9c19b-235">连接中的使用者控件必须能够使用与提供程序相同的接口类型。</span><span class="sxs-lookup"><span data-stu-id="9c19b-235">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="9c19b-236">如果不是，则控件不兼容，并且 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 必须使用对象来建立连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-236">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c19b-237"><paramref name="control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-237"><paramref name="control" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsConnection (control As Control, secondaryInterfaces As ConnectionInterfaceCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="9c19b-238">与 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 相关联的使用者控件。</span><span class="sxs-lookup"><span data-stu-id="9c19b-238">The consumer control associated with the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</span></span></param>
        <param name="secondaryInterfaces"><span data-ttu-id="9c19b-239">参与连接的任何辅助接口的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-239">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of any secondary interfaces that participate in a connection.</span></span></param>
        <summary><span data-ttu-id="9c19b-240">确定使用者连接点当前能否建立连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-240">Determines whether a consumer connection point is currently capable of establishing a connection.</span></span></summary>
        <returns><span data-ttu-id="9c19b-241">如果连接点当前可建立连接，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-241"><see langword="true" /> if a connection point can currently establish a connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9c19b-242">默认为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9c19b-242">The default is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c19b-243"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>实现的方法始终返回 `true` 类的所有事例 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。</span><span class="sxs-lookup"><span data-stu-id="9c19b-243">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="9c19b-244">此方法的目的是让它在某些关键点上检查和的状态， `control` `secondaryInterfaces` 以确定 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象目前是否能够创建连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-244">The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.</span></span>  
  
 <span data-ttu-id="9c19b-245">在某些情况下，可能会出现这样的情况：无法 `control` 建立连接，或者必须在何处才能 `secondaryInterfaces` 形成连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-245">There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed.</span></span> <span data-ttu-id="9c19b-246">在这种情况下，开发人员可以从 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 类继承并重写 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> 方法，并提供自定义实现来确定连接点何时可支持连接。</span><span class="sxs-lookup"><span data-stu-id="9c19b-246">In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
