<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1e358eaf65c15d7d66f5ea413bb70ffd2bfdeab" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89908784" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义连接点对象，该对象允许服务器控件作为使用者，以建立与提供者的连接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在两个服务器控件之间的每个 Web 部件连接中，每个控件都必须具有) 关联连接点对象的其他要求 (，使其能够连接到其他控件并提供或使用数据，具体取决于控件是否被指定为连接的提供者或使用者。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象通常包含有关控件如何连接到其他控件的详细信息以及它可以共享的数据类型的详细信息。 对于在连接中充当使用者的控件，其连接点必须是 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象。 有关 Web 部件连接和连接点的详细信息，请阅读下面的 "另请参阅" 部分中列出的主题。  
  
 若要创建 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象，需要执行多个步骤：  
  
1.  允许使用者控件引用接口实例。 <xref:System.Web.UI.WebControls.WebParts.WebPart>或其他服务器控件 (将添加到区域的任何服务器控件类型， <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>) 必须能够使用特定接口实例中的数据。 控件无需实现接口;只有提供程序必须实现它。 使用者可以使用提供程序提供的准确接口类型，如果不是，则 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 可以使用对象将数据从提供程序的接口类型转换为使用者识别的类型。 启用使用者的典型方法是声明私有字段，使其包含对所需接口类型的引用。  
  
2.  标识回调方法。 必须将使用者中的方法标识为回调方法，以便与提供程序建立连接。 此方法检索提供程序实现的接口实例，并将其分配给 (例如) 第一步中创建的私有字段。 用于标识使用者中的回调方法的 Web 部件方法是将 `ConnectionConsumer` 类定义的元数据属性 (<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>) 添加到接收接口实例的方法。 添加属性后，唯一必需的参数是用于使用者连接点的显示名称。 还可以添加可选参数，例如 ID。  
  
3.  处理并输出接口实例中的数据。 根据需要对数据执行任何内部处理，通常使用者控件会将数据呈现到页面。 执行此操作的常见方法是重写控件的 <xref:System.Web.UI.Control.OnPreRender%2A> 方法。  
  
    > [!NOTE]
    >  在同步请求期间，使用者应在事件之后或之后立即直接从提供程序请求数据 <xref:System.Web.UI.Control.PreRender> 。 在异步请求期间，如果在呈现过程中没有调用提供程序的回调方法，开发人员可以假定未向使用者发送任何数据。  
  
 将控件作为使用者提供后，该控件可以参与连接 (假定提供程序控件也已配备并且) 可用。 若要在网页的标记中创建静态的声明性连接，开发人员可以使用 `<asp:webpartconnection>` 元素。 如果用于 `ConnectionConsumer` 标识回调方法的使用者源代码中的属性指定了连接点的 ID，则必须将该值分配给 `ConsumerConnectionPointID` 页面上的元素中的属性 `<asp:webpartconnection>` 。 如果使用者控件中定义了多个连接点，开发人员可能为使用者连接点指定 ID 的原因。 如果没有为使用者控件中的使用者连接点指定 ID，则无需将值分配给 `ConsumerConnectionPointID` 页中的属性，因为将使用从该字段获取的默认值创建连接 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 。  
  
 若要在代码中创建连接，开发人员必须 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 通过调用 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 方法并向其传递使用者控件的 id 或使用者控件中定义的对象的 id 或索引，来创建一个新的对象 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 返回的 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象以及对使用者控件的引用、对提供程序控件的引用以及对应的 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 对象都将传递给 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 方法以创建新的 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 对象。  
  
 尽管开发人员可以使用使用者连接点作为以声明方式或以编程方式建立连接的一部分，但用户也可以与使用者连接点进行交互，以便通过用户界面 (UI) 建立连接。 如果开发人员在网页上声明了一个 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 控件，则该控件将提供运行时 UI，使用户能够创建连接。 如果用户选择提供程序控件作为建立连接的起始点，则单击其连接谓词即可 (他们也可以选择使用者;生成的连接) 没有差别，在 UI 中，他们将看到一个下拉列表控件，其中包含可用的使用者连接点的显示名称 (或点（如果提供程序可以将数据发送到多个) 。 用户必须选择一个使用者连接点以建立连接。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象直接与特定使用者控件关联，并将有关连接的详细信息存储在它从基类继承的属性中 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。 例如，在继承的 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 属性中，使用者连接点保留其所使用的接口类型。 如果连接中的提供者和使用者都理解接口类型，则这些控件是兼容的，并且能够形成直接连接。 如果提供程序和使用者无法使用同一接口类型，则它们是不兼容的，并且必须使用 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 对象将提供程序连接点的 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 属性转换为使用者可以使用的类型。 另一个重要的继承属性是 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 属性，它提供在用户界面中显示的友好名称，用户可以在创建连接时选择使用者连接点。 当开发人员将 `ConnectionConsumer` 属性添加到使用者控件中的回调方法时，显示名称是必需的参数。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>正如上面所述，继承的属性也很有用，因为当使用者具有多个连接点时，它为使用者连接点提供唯一标识符。 使用者可以 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 在其中定义多个对象，在这种情况下，当开发人员将 `ConnectionConsumer` 属性添加到方法时，它们应该指定一个 ID 值以区分每个连接点。 另一个值得注意的继承属性是 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 属性，该属性指示使用者连接点是否可以同时连接到多个提供程序。 `false`默认情况下， (使用者连接点的属性值，而 `true` 对于提供程序连接点) ，默认值为。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类将几个唯一方法添加到它从类继承的成员 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>方法调用使用者自己定义的回调方法从提供程序中检索接口实例。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法返回一个布尔值，该值指示连接点能否根据关联的使用者控件的当前状态建立连接。  
  
   
  
## Examples  
 下面的代码示例演示了使用使用者连接点的每种情况下，以声明方式、编程方式或通过 UI 创建连接的简单方法。  
  
 该示例包含四个部分：  
  
-   允许您在页上更改 Web 部件显示模式的用户控件。  
  
-   接口的源代码和两个用作 <xref:System.Web.UI.WebControls.WebParts.WebPart> 连接的提供者和使用者的控件。  
  
-   承载所有控件并运行代码示例的网页。  
  
-   有关如何运行 "示例" 页的说明。  
  
 此代码示例的第一部分是用户控件，该控件使用户能够更改网页上的显示模式。 将以下源代码保存到 .ascx 文件，并为其提供分配给 `Src` 此用户控件的指令属性的文件名，该属性 `Register` 位于宿主网页的顶部附近。 有关显示模式的详细信息以及此控件中源代码的说明，请参阅 [演练：在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 此代码示例的第二部分是接口和控件的源代码。 源文件包含一个名为的简单接口 `IZipCode` 。 还有一个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 名为的类 `ZipCodeWebPart` ，该类实现接口并充当提供程序控件。 其他 <xref:System.Web.UI.WebControls.WebParts.WebPart> 类命名为 `WeatherWebPart` ，它充当连接的使用者。 此类具有一个名为 `GetZipCode` 的方法，该方法 `IZipCode` 从提供程序控件获取接口的实例。 请注意，此方法 `ConnectionConsumer` 在其元数据中被标记为使用者的连接点方法和属性。 这是用于标识使用者控件中的连接点方法的机制。  
  
 要使代码示例运行，必须编译此源代码。 可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。 此代码示例使用动态编译。 有关演示如何编译的演练，请参阅 [演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 此代码示例的第三部分是网页。 顶部附近是 `Register` 注册构成连接的自定义控件的指令，以及允许用户在页面上更改显示模式的用户控件。 连接本身是在页面上的元素中以声明方式创建的 `<staticconnections>` 。 这说明了创建连接的一种方法--请注意 `ConsumerConnectionPointID` 元素中的属性 `<asp:webpartconnection>` 。 还可以通过编程方式创建连接;用于执行此操作的代码位于 `Button1_Click` 方法中。 在这种情况下，将 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 创建一个对象，然后将该对象传递给创建实际连接的方法。 无论连接是以声明方式创建还是以编程方式创建，都必须始终为提供程序和使用者指定连接点。 `Button2_Click`方法访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 提供程序和使用者的对象，并将其一些属性值写入页中的标签。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮。 此时将显示有关在声明性连接中建立的提供者和使用者连接点的信息。 接下来，使用 " **显示模式** " 下拉控件将页面切换到连接模式。 在**邮政编码提供程序**控件的谓词菜单上 <xref:System.Web.UI.WebControls.WebParts.WebPart> (由标题栏中的向下箭头表示) 中，单击 "连接" 谓词。 连接 UI 随即出现，由 `<asp:connectionszone>` 页面中声明的控件自动创建。 这是通过 UI) 创建连接 (的另一种方式，还包括前面讨论的声明性和编程方法。 单击 " **断开连接** " 按钮以终止现有静态连接。 单击 " **创建使用者连接** " 链接。 UI 现在会显示一个下拉列表控件，其中列出了使用者连接点显示名称。 在下拉列表中选择连接点，然后单击 " **连接** " 以完成连接。 接下来，再次单击 " **断开** "。 单击 " **动态连接** " 按钮以编程方式创建连接。 使用 " **显示模式** " 控件将页面返回到浏览模式。 再次单击 " **连接点详细信息** " 按钮，以指示有关使用者连接点对象的详细信息。  
  
 该示例演示了如何建立连接并以三种方式使用使用者连接点：在网页标记中声明的静态连接;在使用对象的代码中创建的连接; 通过连接 UI 创建的连接 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Web 部件连接概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">使用者控件中的方法，该方法将接口实例返回给使用者以建立连接。</param>
        <param name="interfaceType">使用者从提供者接收的接口的 <see cref="T:System.Type" />。</param>
        <param name="controlType">使用者连接点所关联的使用者控件的 <see cref="T:System.Type" />。</param>
        <param name="displayName">在连接用户界面 (UI) 中向用户显示的使用者连接点的友好显示名称。</param>
        <param name="id">使用者连接点的唯一标识符。</param>
        <param name="allowsMultipleConnections">一个布尔值，指示使用者连接点是否可同时拥有与提供者的多个连接。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>类的构造函数 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 只调用基构造函数，并向其传递各种参数和初始化基类。  
  
 基类构造函数检查连接点的多个参数，并可能引发多个异常。 有关可能的异常的列表，请参阅异常部分。  
  
 您可以调用 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> 构造函数来创建您自己的类的实例 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 但是，如果你只是建立连接而不是扩展类，则应调用 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 方法从提供程序返回连接点对象。  
  
   
  
## Examples  
 下面的代码示例演示如何从 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 类派生以创建自定义提供程序连接点。  
  
 此代码示例包含三个部分：  
  
-   一个源文件，其中包含提供程序 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件、使用者 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件和自定义 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象。  
  
-   承载静态连接中的控件的网页。  
  
-   说明如何运行示例代码。  
  
 此代码示例的第一部分是提供程序和使用者控件的源以及 <xref:System.Web.UI.WebControls.WebParts.WebPart> 一个名为的自定义 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 类 `TableConsumerConnectionPoint` 。 请注意，类的构造函数 `TableConsumerConnectionPoint` 调用基构造函数，并向其传递所需的参数（如 parameters 节中所述）。 另请注意，在 `TableConsumer` 类中， `SetConnectionInterface` 方法被指定为连接的回调方法，而特性将 `ConnectionConsumer` 自定义声明 `TableConsumerConnectionPoint` 为参数。 这说明了如何创建自定义使用者连接点，然后将其与使用者控件相关联。 此示例假设源代码是动态编译的，因此应将源代码文件放在 Web 应用程序的 App_Code 子文件夹中。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 此代码示例的第二部分是承载静态 Web 部件连接中的自定义控件的网页。 页面顶部是一个 `Register` 指令，用于声明自定义控件的前缀和命名空间。 通过使用元素来声明连接 `<asp:webpartconnection>` ，并在元素中声明提供程序和使用者控件 `<asp:webpartzone>` 。  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 在浏览器中加载页面。 控件之间的连接已存在，使用者将显示来自提供程序的数据，因为连接已在页中声明为静态连接。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="interfaceType" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="controlType" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="displayName" /> 为 <see langword="null" /> 或空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> 与使用者控件（或从使用者控件派生的有效类）的类型不同。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetObject (control As Control, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">与使用者连接点相关联的使用者控件。</param>
        <param name="data">从提供者控件返回的接口实例。</param>
        <summary>调用使用者控件中的回调方法，并从提供者控件检索接口实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法接收包含使用者控件的数据的提供程序的接口实例。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 当连接处于激活状态时，对象将调用方法。 这是启动连接并使两个控件可以共享数据的一个重要步骤。  
  
 连接中的使用者控件必须能够使用与提供程序相同的接口类型。 如果不是，则控件不兼容，并且 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 必须使用对象来建立连接。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsConnection (control As Control, secondaryInterfaces As ConnectionInterfaceCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">与 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 相关联的使用者控件。</param>
        <param name="secondaryInterfaces">参与连接的任何辅助接口的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</param>
        <summary>确定使用者连接点当前能否建立连接。</summary>
        <returns>如果连接点当前可建立连接，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>实现的方法始终返回 `true` 类的所有事例 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 此方法的目的是让它在某些关键点上检查和的状态， `control` `secondaryInterfaces` 以确定 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象目前是否能够创建连接。  
  
 在某些情况下，可能会出现这样的情况：无法 `control` 建立连接，或者必须在何处才能 `secondaryInterfaces` 形成连接。 在这种情况下，开发人员可以从 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 类继承并重写 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> 方法，并提供自定义实现来确定连接点何时可支持连接。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
