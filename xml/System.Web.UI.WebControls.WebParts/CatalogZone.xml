<Type Name="CatalogZone" FullName="System.Web.UI.WebControls.WebParts.CatalogZone">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a45dbe5674b006e6ff295440a6e2e9edbe7544c2" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89964518" /></Metadata><TypeSignature Language="C#" Value="public class CatalogZone : System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatalogZone extends System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZone" />
  <TypeSignature Language="VB.NET" Value="Public Class CatalogZone&#xA;Inherits CatalogZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogZone : System::Web::UI::WebControls::WebParts::CatalogZoneBase" />
  <TypeSignature Language="F#" Value="type CatalogZone = class&#xA;    inherit CatalogZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.SupportsEventValidation]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.SupportsEventValidation&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>用作 Web 部件控件集内的主控件，用于在网页中承载 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 部件控件集内，区域是包含 Web 部件控件的网页上的一个区域。 Web 部件区域是通过区域控件创建的，它是一种 <xref:System.Web.UI.WebControls.CompositeControl> 用于包含其他控件的类型。 区域的主要功能是布局其包含的控件，并为这些控件提供 (UI) 的通用用户界面。 有关区域及其在 Web 部件应用程序中的使用方式的一般信息，请参阅基类 <xref:System.Web.UI.WebControls.WebParts.WebZone> 和 [Web 部件控制集概述](https://docs.microsoft.com/previous-versions/aspnet/k3w2y2tf(v=vs.100))。  
  
 Web 部件控件的一项重要功能是，它们允许最终用户根据自己的喜好修改 (或个性化) 网页，并保存其个性化设置以供将来的浏览器会话使用。 修改 Web 部件页面的一个方面包括将 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件或其他服务器控件添加到 Web 部件页的功能。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件提供用户可添加到页面的控件列表或目录。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件是 Web 部件控件集中的一项基本控件。 它派生自 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 类，并且它的大多数行为都继承自该类。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>类实质上是将区域模板添加到基类，后者是接口的实现 <xref:System.Web.UI.ITemplate> 。 区域模板使开发人员能够以声明方式将 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 控件添加到页持久性格式的区域中。  
  
> [!IMPORTANT]
>  <xref:System.Web.UI.WebControls.WebParts.CatalogZone>区域只能包含 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 控件，相反， <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 控件只能驻留在派生自类的区域中 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ，例如 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>仅当用户将网页切换到目录显示模式 () 时，控件才变为可见 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> 。 目录可以包含多个控件类型 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 。 每个 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 控件都是一个容器类型，包含用户可添加到页面中的服务器控件。 <xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件的不同之处在于它们所包含的服务器控件的来源。 下表汇总了 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 随 Web 部件控件集提供的控件，以及每个控件所包含的服务器控件的类型。  
  
|控制|说明|  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|维护对页面上已关闭的控件的引用。 您可以重新打开这些控件， (添加回用户) 的页面。|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|包含对在网页的标记中的 Web 部件目录中声明的控件的引用。 用户可以将这些控件添加到网页。|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|为用户提供 UI，以将定义文件 (的 XML 文件上传到。WebPart 扩展和一个指定的格式，其中包含对某个目录的控件) 的状态信息，以便可以将该控件添加到网页中。|  
  
 因为 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 类只会将一个区域模板添加到其基类的行为中，所以它有很少的成员。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A>构造函数是一个无参数的构造函数; 使用该构造函数可以初始化类的新实例 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>属性获取或设置对 <xref:System.Web.UI.ITemplate> 包含区域控件的对象的引用。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法非常重要。 它重写基方法，以创建 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 区域模板中包含的所有控件的集合。  
  
> [!NOTE]
>  UI 中的按钮 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 需要客户端脚本才能正常工作。 如果在浏览器中禁用了脚本，则用户将无法通过 UI 执行操作 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 。  
  
## <a name="accessibility"></a>可访问性  
 默认情况下，为此控件呈现的标记可能不符合辅助功能标准，例如 Web 内容可访问性准则 1.0 (WCAG) 优先级1指导原则。 有关此控件的辅助功能支持的详细信息，请参阅 [ASP.NET 控件和辅助功能](https://docs.microsoft.com/previous-versions/ms227996(v=vs.140))。  
  
   
  
## Examples  
 下面的代码示例演示如何以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件。 此代码示例包含四个部分：  
  
-   使您能够更改网页上的显示模式的用户控件。  
  
-   一个文件，其中包含自定义控件的源代码 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> ，以及 <xref:System.Web.UI.WebControls.WebParts.WebPart> 由目录导入并添加到网页中的自定义控件。  
  
-   声明用户控件和自定义控件的网页 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 。  
  
-   有关如何运行该示例的说明。  
  
 此代码示例的第一部分是用户控件，该控件使用户能够更改网页上的显示模式。 有关显示模式的详细信息以及此控件中源代码的说明，请参阅 [演练：在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/displaymodemenucs.ascx#7)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/displaymodemenuvb.ascx#7)]  
  
 此代码示例的第二部分包含自定义 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件和控件的代码 <xref:System.Web.UI.WebControls.WebParts.WebPart> 。 控件的代码 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 演示如何从 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 类继承并通过在构造函数中设置某些默认属性值来自定义其属性。 源代码还演示了如何创建名为的自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 类 `TextDisplayWebPart` 。 这是与关联的控件。将作为此代码示例的一部分导入的 WebPart 说明文件。 使用网页上的控件导入说明文件后 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> ，可以将该 `TextDisplayWebPart` 控件添加到页面，并在说明文件中指定完全预配置。  
  
 要使代码示例运行，必须编译此源代码。 可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。 此代码示例使用动态编译，因此，如果要以这种方式运行此示例，请将源代码文件命名为，并将其添加到 Web 应用程序根目录的 App_Code 子文件夹中。 有关演示两种编译方法的演练，请参阅 [演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 此代码示例的第三部分是包含控件的网页。 它包含 `Register` 用户控件的指令，以及带有自定义控件的源文件的指令。 请注意，在第二个指令中，它不会命名程序集，因为该示例不使用程序集，因此它使用动态编译，并将源代码放在 App_Code 子文件夹中。 网页声明一个 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 控件，并在其子元素中 `<zonetemplate>` 声明一个 <xref:System.Web.UI.WebControls.BulletedList> 控件。 虽然这是标准的 ASP.NET 控件，但在运行时它将具有完全 Web 部件功能，因为该 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 控件包装与对象一起放置在中的任何服务器控件 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> ，以便其他服务器控件可以参与 Web 部件应用程序。 还在此区域中声明为自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件 `TextDisplayWebPart` 。 请注意，此控件有一个 `ExportMode="All"` 在其上声明的属性。 这使你能够导出。WebPart 说明文件，其中包含控件的属性值，其他用户可以导入该文件以将预配置控件添加到其他网页。  
  
> [!NOTE]
>  若要允许 Web 部件应用程序的用户导出控件的说明文件 <xref:System.Web.UI.WebControls.WebParts.WebPart> ，还必须在 Web 应用程序中启用导出功能，方法 `enableExport="true"` 是将属性添加到元素中， `<webParts>` (该元素是 `<system.web>` Web.config 文件中) 元素的子元素。 默认情况下，导出处于禁用状态，因此，如果尚未对应用程序启用导出功能，请编辑 Web.config 文件并立即执行此操作。  
  
 该网页还声明自定义 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件，并在其中声明一个 `<zonetemplate>` 包含控件的元素 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 。 用户将在运行时使用此控件导入。自定义控件的 WebPart 说明文件 <xref:System.Web.UI.WebControls.WebParts.WebPart> 。  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogzonevb.aspx#2)]  
  
 现在运行代码示例。 在浏览器中加载网页。 第一步是导出。控件的 WebPart 说明文件 `TextDisplayWebPart` 。 单击自定义控件上的谓词菜单 (由标题栏中的向下箭头) ，然后单击 " **导出**"。 按照说明保存控件的描述文件。 打开。Web 部件说明文件在编辑器中进行编辑，并编辑 "标题" 属性文本的值。 查找 `<property>` 具有属性的元素 `name="Title"` ，然后编辑在开始标记和结束标记之间包含的标题文本 `<property>` 。 现在关闭网页，并在编辑器中编辑页面源。 删除 `<aspSample:TextDisplayWebPart>` 控件声明元素，然后保存并关闭该文件。  
  
 再次在浏览器中加载网页。 `TextDisplayWebPart`控件不应出现，因为已将其删除。 使用 " **显示模式** " 下拉列表控件并选择 " **目录** "，将页面切换到目录模式。 请注意，自定义 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件与控件一起显示 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 。 单击 " **浏览** " 按钮查找。为控件导出的 WebPart 说明文件 `TextDisplayWebPart` 。 您可以单击 " **上载**"，选中导入的控件旁边的复选框，然后单击 " **添加** " 将其添加到页面中。 单击 " **关闭目录** " 将页面恢复到正常浏览模式。 导入的控件现在应显示在页面中，并且在控件的标题栏中显示的标题应该是添加到中的标题文本。WebPart 说明文件。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />如果希望更好地控制目录 UI 的呈现和行为，则可以创建自定义类。 如果不需要为控件的用户提供以 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 声明方式添加控件的功能，则可以直接从 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 类继承。 如果确实要启用以声明方式添加的控件，simples 方法是从 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 类继承，因为它提供了基本区域模板。  
  
如果从 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 类继承，则可以重写方法， <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" /> 并使用方法将自定义控件添加 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 到 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> ，前提是需要更大的编程控制将自定义 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件添加到区域。</para></block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/k3w2y2tf(v=vs.100)">Web 部件控制集概述</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/z36h8be9(v=vs.100)">Web 部件个性化概述</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件实现了区域模板，因此通常以声明方式使用它，您几乎不需要使用构造函数创建类的新实例 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> 。 但是，如果从 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 类继承以创建自定义区域，你可能希望使用构造函数来初始化其某些属性值并自定义其外观。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> 在自定义控件中使用构造函数 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 。 构造函数用于初始化控件的某些默认属性值。 下面的代码演示了 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 具有在顶部附近声明的构造函数的自定义类。 有关设置和运行示例所需的完整代码和说明，请参阅类概述中的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 。  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateCatalogParts () As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CreateCatalogParts();" />
      <MemberSignature Language="F#" Value="override this.CreateCatalogParts : unit -&gt; System.Web.UI.WebControls.WebParts.CatalogPartCollection" Usage="catalogZone.CreateCatalogParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建区域中声明的每个 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 类型的实例。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />，引用区域中所有的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>此方法是一种关键方法，因为当用户将页面切换到目录显示模式时，此方法将创建 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 组成 Web 部件目录的所有控件。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 与 Web 部件控件集一起提供的类中的方法可创建从类继承的任何服务器控件 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 。 因此，如果您创建一个自定义 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 控件并在控件内的某个页面上将其声明 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> ，则当用户将该页面切换到目录模式时，此方法将创建您的控件。  
  
 然而，出于各种原因，你可能需要控制 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 方法。 你可能希望它仅创建某些 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 控件。 例如，假设您创建一组自定义 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 控件，这些控件具有一致的外观，并且属于单个产品或组织。 如果希望页开发人员限制为在目录中使用这些自定义控件，则应从 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 类继承，重写 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 方法，并允许方法仅创建与自定义控件具有相同类型的控件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件没有 ID。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ZoneTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.CatalogZone))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.CatalogZone))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个模板，用于在 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 控件中以页持久性格式包含子控件。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，作为区域中子控件的容器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>属性引用类型的模板 <xref:System.Web.UI.ITemplate> ，该模板用于包含 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 区域中的控件。 区域模板使页面开发人员能够声明 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 他们希望使用持久性格式的控件，而无需以编程方式创建所有控件。  
  
 属性的 set 访问器 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> 调用 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> 方法，该方法强制 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 刷新在页面上区域模板中声明的控件的集合。 这可确保每当用户更改在页面上的模板中实际声明的控件时，区域引用的控件的集合仍保持为最新。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果你想要创建自定义 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 区域，但计划以 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 编程方式创建控件，而不是允许页开发人员声明这些控件，则无需区域模板支持，你可以直接从类继承 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 。</para></block>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
  </Members>
</Type>
