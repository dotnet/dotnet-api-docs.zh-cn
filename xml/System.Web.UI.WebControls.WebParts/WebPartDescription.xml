<Type Name="WebPartDescription" FullName="System.Web.UI.WebControls.WebParts.WebPartDescription">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aaefc7ea430954120e28b5c4f5e925c404e06126" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89726036" /></Metadata><TypeSignature Language="C#" Value="public class WebPartDescription" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebPartDescription extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartDescription" />
  <TypeSignature Language="VB.NET" Value="Public Class WebPartDescription" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartDescription" />
  <TypeSignature Language="F#" Value="type WebPartDescription = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的有关信息，该控件无需创建实例即可显示在 Web 部件控件目录中。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件显示在用户可添加到页面的控件目录中时，需要有关每个控件的一些基本信息。 例如，具有控件的标题和说明是非常有用的，因此，当用户查看目录时，它们有足够的信息来决定是否向页面添加控件。 不过，控件目录可能 <xref:System.Web.UI.WebControls.WebParts.WebPart> 包含许多控件，如果必须创建每个控件的实例 <xref:System.Web.UI.WebControls.WebParts.WebPart> 以提取要在目录中显示的信息，则它可能会影响应用程序的性能。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>类存在，因此不需要创建控件的实例 <xref:System.Web.UI.WebControls.WebParts.WebPart> 来检索控件目录中显示的控件的相关信息。 在 Web 部件控件集中， <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 当页处于目录显示模式时，还会将对象与各种控件结合使用。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>类具有其构造函数的两个重载，一个在 <xref:System.Web.UI.WebControls.WebParts.WebPart> 实例可 (构造) 函数时采用控件作为参数， <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%2A> 而另一个采用包含控件相关信息的多个字符串作为参数 (<xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%2A> 构造函数) 。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>类还具有多个属性，这些属性旨在包含控件的说明信息 <xref:System.Web.UI.WebControls.WebParts.WebPart> 。 下表汇总了 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 属性以及每个属性在控件中对应的属性 <xref:System.Web.UI.WebControls.WebParts.WebPart> 。  
  
|Description 属性|相关部件控件属性|  
|--------------------------|-----------------------------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartDescription.ID%2A>|<xref:System.Web.UI.Control.ID%2A>|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Title%2A>|<xref:System.Web.UI.WebControls.WebParts.Part.Title%2A>|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Description%2A>|<xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl%2A>|<xref:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl%2A>|  
  
   
  
## Examples  
 下面的代码示例演示如何以编程方式使用 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 类。 通常，此类型主要由 Web 部件控件集使用，但此代码示例只显示主说明属性的基本编程使用情况。  
  
 此代码示例包含四个部分：  
  
-   使用户能够更改网页上的显示模式的用户控件。  
  
-   自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。  
  
-   承载其他控件的网页。  
  
-   对代码示例的工作方式的说明。  
  
 此代码示例的第一部分是用户控件。 该用户控件的源代码来自其他主题。 有关用户控件的详细信息，请参阅主题 [演练：更改 Web 部件页上的显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_WebPartDescription_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_WebPartDescription_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/VB/DisplayModeMenuVB.ascx#7)]  
  
 此代码示例的第二部分是自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。 要使代码示例运行，必须编译此源代码。 可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。 此代码示例使用动态编译的方法。 有关演示如何编译的演练，请参阅 [演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_WebPartDescription_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_WebPartDescription_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/VB/textdisplaywebpart.vb#3)]  
  
 此代码示例的第三部分是网页。 顶部附近有两个 `Register` 指令：一个注册用户控件，另一个用于注册自定义控件，该 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的源文件位于您网站的 App_Code 文件夹中。 页面包含一个 `<asp:catalogzone>` 元素，该元素又包含对两个控件的声明性引用： <xref:System.Web.UI.WebControls.WebParts.WebPart> 名为的自定义控件 `TextDisplayWebPart` ，以及 <xref:System.Web.UI.WebControls.BulletedList> 将在运行时被视为控件的 Web 服务器控件， <xref:System.Web.UI.WebControls.WebParts.WebPart> 因为 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 控件将使用对象将其包装 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 。 请注意，在方法的代码中 `Button1_Click` ，将 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> <xref:System.Web.UI.WebControls.WebParts.WebPart> 使用方法检索目录中控件的可用对象 <xref:System.Web.UI.WebControls.WebParts.CatalogPart.GetAvailableWebPartDescriptions%2A> ，然后将说明详细信息全部写出到页面。  
  
 [!code-aspx-csharp[WebParts_WebPartDescription_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/CS/wpDescriptioncs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartDescription_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/VB/wpDescriptionvb.aspx#1)]  
  
 在浏览器中加载页面后，使用 " **显示模式** " 下拉列表控件并选择 " **目录** " 将页面更改为目录显示模式。 在目录中，应会看到可添加到页面中的两个控件。 单击 " **列出 WebPartDescription 信息** " 按钮，代码会将所有可用对象的值写出 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 到页面。 这说明你可以检索目录中控件的说明详细信息， <xref:System.Web.UI.WebControls.WebParts.WebPart> 而无需创建控件本身的实例。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogPart.GetAvailableWebPartDescriptions" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化包含特定 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件有关信息的类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数的重载 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%2A> 每个都返回类的新实例 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> ，该实例包含特定控件的相关信息 <xref:System.Web.UI.WebControls.WebParts.WebPart> 。 重载之间的区别在于创建新实例的方案。 在某些情况下，当应用程序具有控件的可用实例时 <xref:System.Web.UI.WebControls.WebParts.WebPart> ，将 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%2A> 使用构造函数。 当应用程序没有控件实例时，如果通过控件导入控件说明文件 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> ，则 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%2A> 使用构造函数。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogPart.GetAvailableWebPartDescriptions" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartDescription (System.Web.UI.WebControls.WebParts.WebPart part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.WebParts.WebPart part) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartDescription.#ctor(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (part As WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartDescription(System::Web::UI::WebControls::WebParts::WebPart ^ part);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.WebPartDescription : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.WebPartDescription" Usage="new System.Web.UI.WebControls.WebParts.WebPartDescription part" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="part" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="part"><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件，其信息包含在 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> 中。</param>
        <summary>如果 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件实例可用，则初始化类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%2A>构造函数用于 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 基于现有控件创建新的对象 <xref:System.Web.UI.WebControls.WebParts.WebPart> 。 此构造函数只调用另一个重载，即 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> 构造函数，从参数的属性中获取所需的参数值 `part` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="part" /> 的 <see cref="P:System.Web.UI.Control.ID" /> 属性为 <see langword="null" /> 或空字符串 ("")。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartDescription (string id, string title, string description, string imageUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string id, string title, string description, string imageUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartDescription.#ctor(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (id As String, title As String, description As String, imageUrl As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartDescription(System::String ^ id, System::String ^ title, System::String ^ description, System::String ^ imageUrl);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.WebPartDescription : string * string * string * string -&gt; System.Web.UI.WebControls.WebParts.WebPartDescription" Usage="new System.Web.UI.WebControls.WebParts.WebPartDescription (id, title, description, imageUrl)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="imageUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要赋给 <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDescription.ID" /> 的值。</param>
        <param name="title">要赋给 <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDescription.Title" /> 的值。</param>
        <param name="description">要赋给 <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDescription.Description" /> 的值。</param>
        <param name="imageUrl">要赋给 <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl" /> 的值。</param>
        <summary>使用几个包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件说明信息的字符串初始化类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.%23ctor%2A>当控件不可用时，构造函数用于创建类的新实例 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> <xref:System.Web.UI.WebControls.WebParts.WebPart> 。 例如，在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件为控件导入说明文件时，会发生这种情况 <xref:System.Web.UI.WebControls.WebParts.WebPart> 。 它获取 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 直接从说明文件创建对象所需的信息，并且 <xref:System.Web.UI.WebControls.WebParts.WebPart> 不存在实例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 或 <paramref name="title" /> 为 <see langword="null" /> 或空字符串 ("")。</exception>
      </Docs>
    </Member>
    <Member MemberName="CatalogIconImageUrl">
      <MemberSignature Language="C#" Value="public string CatalogIconImageUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogIconImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CatalogIconImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CatalogIconImageUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CatalogIconImageUrl : string" Usage="System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 URL，该 URL 包含用作 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件图标的图像的路径。</summary>
        <value>包含 URL 的字符串；默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl%2A>属性直接与属性相对应 <xref:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl%2A?displayProperty=nameWithType> 。 如果对控件设置了该属性 <xref:System.Web.UI.WebControls.WebParts.WebPart> ，则相应对象中的属性 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 也将具有值。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl%2A>仅当页处于目录显示模式并且 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件在控件目录中显示时，此属性才适用。 如果在属性值中为控件分配了图标，则该图标将出现在目录旁边的控件中。  
  
   
  
## Examples  
 下面的代码示例演示如何以编程方式使用 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl%2A> 属性。 有关运行此代码示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。  
  
 网页的方法中的以下代码 `Button1_Click` 演示了如何 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 使用方法获取目录中的对象集合 <xref:System.Web.UI.WebControls.WebParts.CatalogPart.GetAvailableWebPartDescriptions%2A> ，然后 <xref:System.Web.UI.WebControls.WebParts.WebPart> 通过循环遍历对象来显示目录中每个控件的详细信息 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。 请注意，将 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl%2A> 在以下代码中检索属性值。  
  
 [!code-csharp[WebParts_WebPartDescription_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/CS/wpDescriptioncs.aspx#2)]
 [!code-vb[WebParts_WebPartDescription_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/VB/wpDescriptionvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartDescription.Description" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Web.UI.WebControls.WebParts.WebPartDescription.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的说明文本。</summary>
        <value>包含 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件说明的字符串；默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Description%2A>属性直接与属性相对应 <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A?displayProperty=nameWithType> 。 如果对控件设置了该属性 <xref:System.Web.UI.WebControls.WebParts.WebPart> ，则相应对象中的属性 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 也将具有值。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Description%2A>仅当页处于目录显示模式并且 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件在控件目录中显示时，此属性才适用。 如果为控件指定了说明，则说明将在目录中显示为控件上的工具提示。  
  
   
  
## Examples  
 下面的代码示例演示如何以编程方式使用 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Description%2A> 属性。 有关运行此代码示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。  
  
 网页的方法中的以下代码 `Button1_Click` 演示了如何 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 使用方法获取目录中的对象集合 <xref:System.Web.UI.WebControls.WebParts.CatalogPart.GetAvailableWebPartDescriptions%2A> ，然后 <xref:System.Web.UI.WebControls.WebParts.WebPart> 通过循环遍历对象来显示目录中每个控件的详细信息 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。 请注意，将 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Description%2A> 在以下代码中检索属性值。  
  
 [!code-csharp[WebParts_WebPartDescription_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/CS/wpDescriptioncs.aspx#2)]
 [!code-vb[WebParts_WebPartDescription_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/VB/wpDescriptionvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.Part.Description" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartDescription.ID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ID : string" Usage="System.Web.UI.WebControls.WebParts.WebPartDescription.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取相应 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的 ID。</summary>
        <value>包含控件 ID 的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.ID%2A> 不能为 `null` ; 它必须始终具有值。 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.ID%2A>属性直接与属性相对应 <xref:System.Web.UI.Control.ID%2A?displayProperty=nameWithType> 。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.ID%2A>仅当页处于目录显示模式并且 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件在控件目录中显示时，此属性才适用。  
  
   
  
## Examples  
 下面的代码示例演示如何以编程方式使用 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.ID%2A> 属性。 有关运行此代码示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。  
  
 网页的方法中的以下代码 `Button1_Click` 演示了如何 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 使用方法获取目录中的对象集合 <xref:System.Web.UI.WebControls.WebParts.CatalogPart.GetAvailableWebPartDescriptions%2A> ，然后 <xref:System.Web.UI.WebControls.WebParts.WebPart> 通过循环遍历对象来显示目录中每个控件的详细信息 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。 请注意，将 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.ID%2A> 在以下代码中检索属性值。  
  
 [!code-csharp[WebParts_WebPartDescription_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/CS/wpDescriptioncs.aspx#2)]
 [!code-vb[WebParts_WebPartDescription_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/VB/wpDescriptionvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartDescription.Title" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Title : string" Usage="System.Web.UI.WebControls.WebParts.WebPartDescription.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取相应 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的标题文本。</summary>
        <value>字符串，包含相应控件的标题。 默认值是一个计算出的字符串，由 .NET Framework 提供。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Title%2A> 直接对应于 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A?displayProperty=nameWithType> 属性。 如果相应的 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件具有其属性的任何 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A> 值，则将成为属性的值 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Title%2A> ; 否则，该标题为计算值。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Title%2A>仅当页处于目录显示模式并且 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件在控件目录中显示时，此属性才适用。 分配给控件的任何标题 <xref:System.Web.UI.WebControls.WebParts.WebPart> 将显示在目录中该控件的旁边。  
  
   
  
## Examples  
 下面的代码示例演示如何以编程方式使用 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Title%2A> 属性。 有关运行此代码示例所需的完整代码，请参阅类概述主题的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。  
  
 网页的方法中的以下代码 `Button1_Click` 演示了如何 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 使用方法获取目录中的对象集合 <xref:System.Web.UI.WebControls.WebParts.CatalogPart.GetAvailableWebPartDescriptions%2A> ，然后 <xref:System.Web.UI.WebControls.WebParts.WebPart> 通过循环遍历对象来显示目录中每个控件的详细信息 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 。 请注意，将 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription.Title%2A> 在以下代码中检索属性值。  
  
 [!code-csharp[WebParts_WebPartDescription_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/CS/wpDescriptioncs.aspx#2)]
 [!code-vb[WebParts_WebPartDescription_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartDescription_Overview/VB/wpDescriptionvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
  </Members>
</Type>
