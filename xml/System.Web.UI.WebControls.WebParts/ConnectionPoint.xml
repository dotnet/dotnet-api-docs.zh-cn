<Type Name="ConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b6c63ca61d8d2b7cbc5fd99ed5f981cdda9952a" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89908819" /></Metadata><TypeSignature Language="C#" Value="public abstract class ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConnectionPoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConnectionPoint abstract" />
  <TypeSignature Language="F#" Value="type ConnectionPoint = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>用作定义连接点对象的基类，这些对象使 Web 部件连接中的使用者控件和提供者控件可以共享数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个 Web 部件连接包含共享数据的两个服务器控件：一个控件是使用者，另一个控件是提供程序。 如要讨论 Web 部件连接的基本组件以及连接对象本身，请参阅 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 类概述。 每个 Web 部件连接都需要连接点。 提供程序和使用者控件都必须至少有一个已定义 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 的对象 (它们都可以有多个连接点) ，其中包含有关控件如何连接到其他控件的详细信息以及它可以共享的数据类型的详细信息。 在实际连接中，提供程序具有其自己的连接点对象类型 (派生自基类 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>) 、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 实例和使用者具有其自己的对象（ <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 实例）。  
  
 若要创建提供程序连接点，开发人员必须向提供程序添加回调方法，该方法会将实现的接口实例返回给使用者。 它们必须使用代码属性在源代码中标记回拨方法 `ConnectionProvider` (请参阅 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 类) 。 同样，若要创建使用者连接点，开发人员必须向接收接口实例的使用者添加方法，并且必须使用特性标记该方法 `ConnectionConsumer` (参见 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 类) 。  
  
 当开发人员在网页上创建连接时，可以将其创建为静态或动态连接。 静态连接在网页的标记中声明。 声明静态连接后，开发人员可以通过将值分配给 `ProviderConnectionPointID` `ConsumerConnectionPointID` 元素标记中的和属性，来指定使用者和提供者的连接点 `<asp:webpartconnection>` 。 如果使用者和提供者控件中定义了多个连接点，则此方法特别有用，因为它允许静态连接识别要用于连接的连接点。  
  
 动态连接是通过开发人员的代码以编程方式创建的，也可以通过用户界面 (UI) 由控件提供 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 。 若要在代码中创建连接，开发人员必须 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 通过对控件调用方法来获取对象的实例 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 。 开发人员必须先引用使用者和提供者服务器控件及其各自的连接点对象，然后才能调用此方法。 若要获取对提供者和使用者控件的连接点的引用，开发人员首先 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 调用 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 控件上的和方法 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 。 这些方法将返回相应的连接点对象，然后可以将这些对象传递给方法以创建连接。  
  
 当提供程序和使用者的连接点对象都适用于同一类型的接口时，它们是兼容的，并且可以形成直接连接来共享数据。 如果它们不适用于同一接口类型，则 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 必须使用对象将提供程序中的接口实例转换为使用者可以使用的类型。  
  
 抽象 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 类提供使用者控件和提供者控件共享的连接点的基本详细信息。 几个属性包含这些详细信息。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性指示连接点是否可以一次参与多个连接。 默认情况下，提供程序连接点可以加入多个连接，并且使用者连接点不能。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性指示与连接点关联的服务器控件的类型。 请注意，不仅 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件可以形成连接; 任何服务器控件（无论是 ASP.NET 控件、自定义控件还是用户控件）都可以启用以加入到区域中的连接 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性提供连接点的友好名称，该名称可在 UI 中显示，以帮助创建连接的用户。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性用作连接点对象本身的字符串标识符。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性指示连接点识别哪种类型的接口实例。 给定的连接点是提供还是使用该接口的实例取决于它是 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 或 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类有一种方法。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法返回一个布尔值，指示连接点当前是否能够参与连接。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>该类还具有一个公共字段 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 。 此字段包含一个值，该值用于标识连接中的默认连接点。  
  
> [!NOTE]
>  用于指定连接点方法的属性只有一个必需参数， `displayName` 因此，可以创建默认连接点属性，而无需指定 ID。 在这种情况下， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 字段提供了要使用的基础值。  
  
   
  
## Examples  
 下面的代码示例演示如何创建 Web 部件连接，其中包括所需的 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 对象。 因为 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 类是抽象基类，所以其子类的实例（- <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 和 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> ）是用于形成连接的实际对象。  
  
 该示例包含四个部分：  
  
-   允许您在页上更改 Web 部件显示模式的用户控件。  
  
-   接口的源代码和两个用作 <xref:System.Web.UI.WebControls.WebParts.WebPart> 连接的提供者和使用者的控件。  
  
-   承载所有控件并运行代码示例的网页。  
  
-   有关如何运行 "示例" 页的说明。  
  
 此代码示例的第一部分是用户控件，该控件使用户能够更改网页上的显示模式。 将以下源代码保存到 .ascx 文件，并为其提供分配给 `Src` 此用户控件的指令属性的文件名，该属性 `Register` 位于宿主网页的顶部附近。 有关显示模式的详细信息以及此控件中源代码的说明，请参阅 [演练：在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 此代码示例的第二部分是接口和控件的源代码。 源文件包含一个名为的简单接口 `IZipCode` 。 还有一个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 名为的类 `ZipCodeWebPart` ，该类实现接口并充当提供程序控件。 它 `ProvideIZipCode` 的方法是实现接口的唯一成员的回调方法。 方法只返回接口的实例。 请注意，该方法 `ConnectionProvider` 在其元数据中用特性标记。 这是将方法标识为提供程序连接点的回调方法的机制。 其他 <xref:System.Web.UI.WebControls.WebParts.WebPart> 类命名为 `WeatherWebPart` ，它充当连接的使用者。 此类具有一个名为 `GetZipCode` 的方法，该方法 `IZipCode` 从提供程序控件获取接口的实例。 请注意，此方法 `ConnectionConsumer` 在其元数据中被标记为使用者的连接点方法和属性。 这是用于标识使用者控件中的连接点方法的机制。  
  
 要使代码示例运行，必须编译此源代码。 可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。 此代码示例使用动态编译。 有关演示如何编译的演练，请参阅 [演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 此代码示例的第三部分是网页。 顶部附近是 `Register` 注册构成连接的自定义控件的指令，以及允许用户在页面上更改显示模式的用户控件。 连接本身是在页面上的元素中以声明方式创建的 `<staticconnections>` 。 还可以通过编程方式创建连接;用于执行的代码包含在 `Button1_Click` 方法中。 无论连接是以声明方式创建还是以编程方式创建，都必须始终为提供程序和使用者指定连接点。 `Button2_Click`方法访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 提供程序和使用者的对象，并将其一些属性值写入页中的标签。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮。 此时将显示有关在声明性连接中建立的提供者和使用者连接点的信息。 接下来，使用 " **显示模式** " 下拉控件将页面切换到连接模式。 在其中一个控件的谓词菜单 <xref:System.Web.UI.WebControls.WebParts.WebPart> (用标题栏中的向下箭头表示) 中，单击 "连接" 谓词。 连接 UI 随即出现，由 `<asp:connectionszone>` 页面中声明的控件自动创建。 单击 " **断开连接** " 按钮以终止现有连接。 使用 " **显示模式** " 控件将页面返回到浏览模式。 接下来，单击 " **动态连接** " 按钮以编程方式创建连接。 再次单击 " **连接点详细信息** " 按钮，以指示关于两个连接点对象的详细信息。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Web 部件连接概述</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
  </Docs>
  <Members>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowsMultipleConnections As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsMultipleConnections { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowsMultipleConnections : bool" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示连接点是否支持多个并发连接的值。</summary>
        <value>如果连接点支持多个连接，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint><xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>类) ，对象的属性值设置为 `true` (<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> ，因为默认情况下 Web 部件控件启用了提供程序连接点以形成到多个使用者的连接。  
  
 与此相反， <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 对象的 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 属性值设置为 `false` 由 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 类)  (，因为默认情况下 Web 部件控件设置允许使用者连接点一次只与一个提供程序建立连接。  
  
 您可以通过将不同的值分配给提供程序的属性 (来更改与多个连接有关的默认行为， <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType>) 或为 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType> 连接属性所用的两个类上的使用者的属性 () <xref:System.Attribute> 。 如果允许使用者连接点同时连接到多个提供程序，则代码必须处理任何产生的同步问题。  
  
   
  
## Examples  
 下面的代码示例演示如何在 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 和对象上使用属性 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 此代码示例仅显示包含用于访问属性的代码的网页;有关运行此示例所需的完整代码，请参阅类概述的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。  
  
 网页的方法中的代码可 `Button2_Click` 访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 每个连接点对象的属性，并将每个值写入一个标签。 在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮以执行该代码。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ControlType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ControlType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取连接点与之关联的服务器控件的 <see cref="T:System.Type" />。</summary>
        <value>表示控件类型的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 通常是 <xref:System.Web.UI.WebControls.WebParts.WebPart> 类型。 但是，由于任何类型的用户控件或服务器控件在已正确启用并放置在某个区域中时都可以参与连接 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ，因此， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 属性也可以返回这些其他服务器控件类型之一。  
  
 当不是控件的服务器控件 <xref:System.Web.UI.WebControls.WebParts.WebPart> 放置在某个区域中时 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ，它们会 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 在运行时使用对象进行包装，以便它们可以作为 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件并参与连接。 但在连接中涉及此类控件时， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 属性值不会返回 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 类型; 它返回 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 对象的子控件的类型，即服务器或用户控件的类型。  
  
   
  
## Examples  
 下面的代码示例演示如何在 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 和对象上使用属性 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 此代码示例仅显示包含用于访问属性的代码的网页;有关运行此示例所需的完整代码，请参阅类概述的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。  
  
 网页的方法中的代码可 `Button2_Click` 访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 每个连接点对象的属性，并将每个值写入一个标签。 在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮以执行该代码。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultID">
      <MemberSignature Language="C#" Value="public static readonly string DefaultID;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultID As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ DefaultID;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示一个字符串，该字符串用于标识与服务器控件关联的连接点集合中的默认连接点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建连接点时，可以 <xref:System.Web.UI.WebControls.WebParts.WebPart> 使用或属性为使用者或提供者控件的源代码中的连接点指定 ID <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 。 但是，将属性添加到源代码中的连接点时，该 `ID` 参数是可选的。 如果未在属性中指定 ID，则 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 字段提供用于标识默认连接点的字符串。  
  
 如果使用者或提供者控件中定义了多个连接点，则必须为每个连接点指定一个 ID，以便在创建连接时可以区分连接点。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，该字符串用作在用户界面 (UI) 中表示连接点的友好显示名称。</summary>
        <value>一个字符串，包含 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> 对象的友好显示名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要创建 Web 部件连接，连接的提供者和使用者控件必须每个指定至少一个连接点，这是使其能够与数据进行通信和共享的方法。 为了识别这些连接点方法，开发人员可以在所选方法上指定属性。 在提供程序中， `ConnectionProvider` 特性是在所选的回调方法上设置的，在使用者中，将在 `ConnectionConsumer` 接收包含提供程序中的数据的接口实例的方法上设置特性。 对于这两个属性，无论声明哪个重载来创建属性，都是一个始终需要的参数，它是 `displayName` 参数。 开发人员必须分配一个字符串，将其用作连接点的友好显示名称，该字符串将成为属性的值 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>用户创建连接时，属性值显示在网页的 UI 中。 例如，将 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 控件添加到页面时，它会创建用户界面，供用户在控件之间创建连接。 用户将页面切换为连接显示模式并在控件上单击连接谓词后 <xref:System.Web.UI.WebControls.WebParts.WebPart> ，将显示连接 UI。 可以参与连接的每个控件都列在 UI 中，每个控件旁边是一个下拉列表控件，用于显示其可用连接点的友好名称。 用户必须至少选择一个连接点以建立连接。 连接点列表中显示的值是从属性获取的 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 。 如果开发人员生成用于创建连接的自定义 UI，则他们可以通过 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 类似方式使用属性来提供表示连接点的友好名称。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnabled">
      <MemberSignature Language="C#" Value="public virtual bool GetEnabled (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetEnabled(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnabled (control As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GetEnabled(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetEnabled : System.Web.UI.Control -&gt; bool&#xA;override this.GetEnabled : System.Web.UI.Control -&gt; bool" Usage="connectionPoint.GetEnabled control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">一个与连接点关联的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 或其他服务器控件。</param>
        <summary>返回一个指示连接点是否可以参与连接的值。</summary>
        <returns>如果控件可以创建连接点来参与连接，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>基类中的方法 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 始终返回 `true` ，但派生的类可以重写方法 `true` ，以便根据的状态返回或 `false` 在不同的时间进行返回 `control` 。  
  
   
  
## Examples  
 下面的代码示例演示如何在 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> 和对象上使用方法 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 此代码示例仅显示包含用于访问属性的代码的网页;有关运行此示例所需的完整代码，请参阅类概述的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。  
  
 网页的方法中的代码可 `Button2_Click` 访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> 每个连接点对象上的方法，并将每个值写入一个标签。 在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮以执行该代码。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含连接点的标识符的字符串。</summary>
        <value>包含连接点的标识符的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当开发人员在 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 控件的源代码中声明某个方法的或特性时，使该方法可用作连接点，则无需为该 `ID` 连接点属性声明参数。 唯一必需的属性是 `displayName` 参数。 使用字段中的值向连接点分配默认 ID <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 。  
  
 如果控件中只有一个方法用作连接点，则无需指定连接点的 ID。 如果有多个方法指定为连接点，则必须为每个方法指定一个 ID;否则，将引发异常。 通过为每个连接点分配 ID，还可以指定在网页中声明连接时使用的连接点，或在代码中创建连接。  
  
   
  
## Examples  
 下面的代码示例演示如何在 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 和对象上使用属性 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 此代码示例仅显示包含用于访问属性的代码的网页;有关运行此示例所需的完整代码，请参阅类概述的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。  
  
 网页的方法中的代码可 `Button2_Click` 访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 每个连接点对象的属性，并将每个值写入一个标签。 在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮以执行该代码。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="InterfaceType">
      <MemberSignature Language="C#" Value="public Type InterfaceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterfaceType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InterfaceType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ InterfaceType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InterfaceType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取连接点所使用的接口的类型。</summary>
        <value>与控件所提供或使用的接口类型相对应的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性指示连接点使用哪种类型的接口。 这可以帮助确定两个控件是否兼容并能够形成连接。 如果提供程序连接点的与 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 使用者连接点的不同 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> ，则这两个控件是不兼容的 (这意味着它们不能直接连接而无需转换器) ， <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 必须使用对象来建立连接。  
  
   
  
## Examples  
 下面的代码示例演示如何在 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 和对象上使用属性 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 。 此代码示例仅显示包含用于访问属性的代码的网页;有关运行此示例所需的完整代码，请参阅类概述的 "示例" 部分 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 。  
  
 网页的方法中的代码可 `Button2_Click` 访问 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 每个连接点对象的属性，并将每个值写入一个标签。 在浏览器中加载页面后，单击 " **连接点详细信息** " 按钮以执行该代码。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
  </Members>
</Type>
