<Type Name="IWebPartField" FullName="System.Web.UI.WebControls.WebParts.IWebPartField">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33afb8f6041594bb9feb62847562a8e12e08d2f0" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69395208" /></Metadata><TypeSignature Language="C#" Value="public interface IWebPartField" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWebPartField" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IWebPartField" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWebPartField" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWebPartField" />
  <TypeSignature Language="F#" Value="type IWebPartField = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="354df-101">定义使用单个字段数据连接两个服务器控件的提供者接口。</span><span class="sxs-lookup"><span data-stu-id="354df-101">Defines a provider interface for connecting two server controls using a single field of data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354df-102">此接口设计为与 Web 部件连接一起使用。</span><span class="sxs-lookup"><span data-stu-id="354df-102">This interface is designed to be used with Web Parts connections.</span></span> <span data-ttu-id="354df-103">在 Web 部件连接中，位于区域中的两个服务器控件 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 建立连接并共享数据，其中一个控件充当使用者，另一个控件充当提供者。</span><span class="sxs-lookup"><span data-stu-id="354df-103">In a Web Parts connection, two server controls that reside in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone establish a connection and share data, with one control acting as the consumer and the other control acting as a provider.</span></span> <span data-ttu-id="354df-104">在 Web 部件连接中共享数据的机制是接口实例，提供程序通过回调方法向使用者提供服务。</span><span class="sxs-lookup"><span data-stu-id="354df-104">The mechanism for sharing data in a Web Parts connection is an interface instance, which the provider serves to the consumer by means of a callback method.</span></span> <span data-ttu-id="354df-105">若要建立连接，使用者和提供程序都必须使用相同的接口类型来共享数据。</span><span class="sxs-lookup"><span data-stu-id="354df-105">To establish a connection, the consumer and provider must both work with the same interface type for sharing data.</span></span> <span data-ttu-id="354df-106">如果使用者不能识别提供程序发送的接口类型，仍可以通过转换器（对象）连接控件，将 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 访问接口实例发送到使用者识别的类型。</span><span class="sxs-lookup"><span data-stu-id="354df-106">If the consumer does not recognize the interface type sent by the provider, it is still possible to connect the controls by means of a transformer (a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object) that translates the interface instance sent by the provider into a type that the consumer recognizes.</span></span> <span data-ttu-id="354df-107">有关连接的详细信息，请参阅 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 和[Web 部件连接概述](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="354df-107">For details on connections, see <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> and [Web Parts Connections Overview](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)).</span></span>  
  
 <span data-ttu-id="354df-108"><xref:System.Web.UI.WebControls.WebParts.IWebPartField>接口是包含在 Web 部件控件集的提供程序接口，它是一个标准接口，用于基于数据字段创建连接。</span><span class="sxs-lookup"><span data-stu-id="354df-108">The <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface is a provider interface included with the Web Parts control set as a standard interface for creating connections based on a data field.</span></span> <span data-ttu-id="354df-109">你还可以创建自定义接口以与 Web 部件连接一起使用，但在许多数据驱动的 Web 应用程序中，可以使用接口基于公共行（有关详细信息，请参阅 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> 接口）、表（有关详细信息、查看 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable> 接口）或数据源中的字段创建连接 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 。</span><span class="sxs-lookup"><span data-stu-id="354df-109">You can also create custom interfaces to use with Web Parts connections, but in many data-driven Web applications, it is useful to create connections based on a common row (for details, see the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> interface), table (for details, see the <xref:System.Web.UI.WebControls.WebParts.IWebPartTable> interface), or field from the data source, using the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface.</span></span> <span data-ttu-id="354df-110">在典型连接中， <xref:System.Web.UI.WebControls.WebParts.WebPart> 作为提供者的控件将实现 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 接口，并向使用者提供一个特殊的回调方法的接口实例。</span><span class="sxs-lookup"><span data-stu-id="354df-110">In a typical connection, a <xref:System.Web.UI.WebControls.WebParts.WebPart> control acting as a provider would implement the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface and provide an instance of the interface to consumers in a special callback method.</span></span> <span data-ttu-id="354df-111">例如，提供程序可以 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 为用户信息表中包含 Web 用户的邮政编码数据的字段实现接口。</span><span class="sxs-lookup"><span data-stu-id="354df-111">For example, the provider might implement an <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface for a field in your user information table that contains a Web user's postal code data.</span></span> <span data-ttu-id="354df-112"><xref:System.Web.UI.WebControls.WebParts.WebPart>作为使用者的另一个控件将定义接收接口实例的特殊方法，然后可以提取邮政编码数据，并根据邮政编码查找并显示天气信息。</span><span class="sxs-lookup"><span data-stu-id="354df-112">Another <xref:System.Web.UI.WebControls.WebParts.WebPart> control acting as a consumer would define a special method to receive the interface instance, and could then extract the postal code data, and look up and display weather information based on the postal code.</span></span>  
  
 <span data-ttu-id="354df-113"><xref:System.Web.UI.WebControls.WebParts.IWebPartField>接口有两个公开的成员。</span><span class="sxs-lookup"><span data-stu-id="354df-113">The <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface has two exposed members.</span></span> <span data-ttu-id="354df-114"><xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A>属性返回有关封装在对象中的数据字段的架构信息 <xref:System.ComponentModel.PropertyDescriptor> 。</span><span class="sxs-lookup"><span data-stu-id="354df-114">The <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> property returns schema information about the data field encapsulated in a <xref:System.ComponentModel.PropertyDescriptor> object.</span></span> <span data-ttu-id="354df-115">此 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> 方法声明一个方法，当调用回调方法时，实现程序（如提供程序控件）使用该方法检索接口实例的字段数据。</span><span class="sxs-lookup"><span data-stu-id="354df-115">The <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method declares a method that an implementer (such as a provider control) uses to retrieve the interface instance's field data when the callback method is invoked.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354df-116">下面的代码示例演示如何使用接口在两个控件之间创建静态连接 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 。</span><span class="sxs-lookup"><span data-stu-id="354df-116">The following code example demonstrates how to create a static connection between two controls using the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface.</span></span> <span data-ttu-id="354df-117">此代码示例包含三个部分：</span><span class="sxs-lookup"><span data-stu-id="354df-117">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="354df-118"><xref:System.Web.UI.WebControls.WebParts.WebPart>可使用接口形成连接的两个自定义控件的源代码 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> ，其中一个控件充当提供者，另一个控件充当使用者。</span><span class="sxs-lookup"><span data-stu-id="354df-118">Source code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection using the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface, with one control acting as the provider, the other acting as the consumer.</span></span>  
  
-   <span data-ttu-id="354df-119">承载控件并以持久性格式声明静态连接的网页。</span><span class="sxs-lookup"><span data-stu-id="354df-119">A Web page that hosts the controls and declares the static connection in persistence format.</span></span>  
  
-   <span data-ttu-id="354df-120">示例代码运行时所发生的情况的说明。</span><span class="sxs-lookup"><span data-stu-id="354df-120">A description of what happens when the example code runs.</span></span>  
  
 <span data-ttu-id="354df-121">此代码示例的第一部分是两个自定义控件的源代码。</span><span class="sxs-lookup"><span data-stu-id="354df-121">The first part of the code example is the source code for the two custom controls.</span></span> <span data-ttu-id="354df-122">首先是实现接口的提供程序的代码 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 。</span><span class="sxs-lookup"><span data-stu-id="354df-122">First is the code for the provider, which implements the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface.</span></span> <span data-ttu-id="354df-123">为简单起见，在本示例中，提供程序创建了包含一些数据的表，而不是连接到数据库。</span><span class="sxs-lookup"><span data-stu-id="354df-123">For simplicity in the example, the provider creates a table with some data rather than connecting to a database.</span></span> <span data-ttu-id="354df-124">`GetConnectionInterface`方法用作提供程序的连接点，后者是将接口实例返回给使用者的回调方法。</span><span class="sxs-lookup"><span data-stu-id="354df-124">The `GetConnectionInterface` method serves as the provider's connection point, the callback method that returns the interface instance to the consumer.</span></span> <span data-ttu-id="354df-125">对于使用者，它会在名为的方法中从提供程序中检索接口实例 `SetConnectionInterface` ，该实例使用 `ConnectionConsumer` 特性进行标记。</span><span class="sxs-lookup"><span data-stu-id="354df-125">As for the consumer, it retrieves the interface instance from the provider in its method named `SetConnectionInterface`, which is marked with a `ConnectionConsumer` attribute.</span></span> <span data-ttu-id="354df-126">检索接口的实例后，使用者在其 `OnPreRender` 方法中调用 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> 提供程序中方法的实现来检索实际数据。</span><span class="sxs-lookup"><span data-stu-id="354df-126">After retrieving the instance of the interface, the consumer, in its `OnPreRender` method, calls the implementation of the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method in the provider, to retrieve the actual data.</span></span>  
  
 <span data-ttu-id="354df-127">要使代码示例运行，必须编译此源代码。</span><span class="sxs-lookup"><span data-stu-id="354df-127">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="354df-128">可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。</span><span class="sxs-lookup"><span data-stu-id="354df-128">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="354df-129">或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。</span><span class="sxs-lookup"><span data-stu-id="354df-129">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="354df-130">此代码示例使用动态编译。</span><span class="sxs-lookup"><span data-stu-id="354df-130">This code example uses dynamic compilation.</span></span> <span data-ttu-id="354df-131">有关演示如何编译的演练，请参阅[演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。</span><span class="sxs-lookup"><span data-stu-id="354df-131">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_IWebPartField_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/IFieldSample.cs#2)]
 [!code-vb[WebParts_IWebPartField_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/IFieldSample.vb#2)]  
  
 <span data-ttu-id="354df-132">此代码示例的第二部分是声明静态连接并承载控件的网页。</span><span class="sxs-lookup"><span data-stu-id="354df-132">The second part of the code example is the Web page that declares the static connection and hosts the controls.</span></span> <span data-ttu-id="354df-133">页面顶部附近是 `Register` 声明 App_Code 目录中包含的源代码的命名空间的指令。</span><span class="sxs-lookup"><span data-stu-id="354df-133">Near the top of the page is a `Register` directive that declares the namespace of the source code contained in the App_Code directory.</span></span> <span data-ttu-id="354df-134">使用元素声明连接 `<asp:webpartconnection>` 。</span><span class="sxs-lookup"><span data-stu-id="354df-134">The connection is declared using an `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="354df-135">自定义使用者和提供程序控件是在元素内的元素中声明的，在元素中 `<zonetemplate>` `<asp:webpartzone>` ，这是必需的，它们必须位于继承自类的区域内 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 。</span><span class="sxs-lookup"><span data-stu-id="354df-135">The custom consumer and provider controls are declared in a `<zonetemplate>` element within an `<asp:webpartzone>` element, which is required for them to be able to connect (they must reside within a zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> class).</span></span>  
  
 [!code-aspx-csharp[WebParts_IWebPartField_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPartField_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/Defaultvb.aspx#1)]  
  
 <span data-ttu-id="354df-136">在浏览器中加载页面。</span><span class="sxs-lookup"><span data-stu-id="354df-136">Load the page in a browser.</span></span> <span data-ttu-id="354df-137">使用者控件显示从指定字段提供的数据，提供程序通过接口的实例提供该数据 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 。</span><span class="sxs-lookup"><span data-stu-id="354df-137">The consumer control displays the data provided from the specified field, which the provider makes available through an instance of the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.IWebPartRow" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.IWebPartTable" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="354df-138">ASP.NET Web 部件控件</span><span class="sxs-lookup"><span data-stu-id="354df-138">ASP.NET Web Parts Controls</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)"><span data-ttu-id="354df-139">Web 部件连接概述</span><span class="sxs-lookup"><span data-stu-id="354df-139">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetFieldValue">
      <MemberSignature Language="C#" Value="public void GetFieldValue (System.Web.UI.WebControls.WebParts.FieldCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFieldValue(class System.Web.UI.WebControls.WebParts.FieldCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetFieldValue (callback As FieldCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetFieldValue(System::Web::UI::WebControls::WebParts::FieldCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member GetFieldValue : System.Web.UI.WebControls.WebParts.FieldCallback -&gt; unit" Usage="iWebPartField.GetFieldValue callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Web.UI.WebControls.WebParts.FieldCallback" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="354df-140">一个 <see cref="T:System.Web.UI.WebControls.WebParts.FieldCallback" /> 委托，包含接收数据的方法的地址。</span><span class="sxs-lookup"><span data-stu-id="354df-140">A <see cref="T:System.Web.UI.WebControls.WebParts.FieldCallback" /> delegate that contains the address of a method that receives the data.</span></span></param>
        <summary><span data-ttu-id="354df-141">返回字段的值，该字段由接口用作两个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件之间的连接基础。</span><span class="sxs-lookup"><span data-stu-id="354df-141">Returns the value of the field that is being used by the interface as the basis of a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354df-142">使用此方法可检索接口传递的数据字段值。</span><span class="sxs-lookup"><span data-stu-id="354df-142">Use this method to retrieve the data field values passed by the interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354df-143">下面的代码示例演示方法的实现和使用 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="354df-143">The following code example shows the implementation and use of the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method.</span></span> <span data-ttu-id="354df-144">完整的示例显示在接口的类概述中 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 。</span><span class="sxs-lookup"><span data-stu-id="354df-144">The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface.</span></span> <span data-ttu-id="354df-145">提供程序控件实现 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> 方法，并返回数据表中特定字段的值。</span><span class="sxs-lookup"><span data-stu-id="354df-145">The provider control implements the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method, returning the value of a particular field in the data table.</span></span> <span data-ttu-id="354df-146">使用者控件 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> 在其方法中调用方法 `OnPreRender` ，以便可以将数据的值写入页面。</span><span class="sxs-lookup"><span data-stu-id="354df-146">The consumer control calls the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method in its `OnPreRender` method, so that the value of the data can be written to the page.</span></span>  
  
 [!code-csharp[WebParts_IWebPartField_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/IFieldSample.cs#2)]
 [!code-vb[WebParts_IWebPartField_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/IFieldSample.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptor Schema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor Schema" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPartField.Schema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schema As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::PropertyDescriptor ^ Schema { System::ComponentModel::PropertyDescriptor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Schema : System.ComponentModel.PropertyDescriptor" Usage="System.Web.UI.WebControls.WebParts.IWebPartField.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="354df-147">获取用于在两个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件之间共享数据的数据字段的架构信息。</span><span class="sxs-lookup"><span data-stu-id="354df-147">Gets the schema information for a data field that is used to share data between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls.</span></span></summary>
        <value><span data-ttu-id="354df-148"><see cref="T:System.ComponentModel.PropertyDescriptor" />，描述该数据字段的架构信息。</span><span class="sxs-lookup"><span data-stu-id="354df-148">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that describes the schema information for the data field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354df-149">此属性为接口传递的数据提供属性信息。</span><span class="sxs-lookup"><span data-stu-id="354df-149">This property provides property information for the data passed by the interface.</span></span> <span data-ttu-id="354df-150">转换器和使用者控件可以查询此属性，以获取有关 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 提供程序发送的接口实例中包含的字段的类型、内容和其他详细信息的信息。</span><span class="sxs-lookup"><span data-stu-id="354df-150">Transformer and consumer controls can query this property to get information about the type, contents, and other details of the field contained in the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface instance sent by a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354df-151">下面的代码示例演示如何实现和使用 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="354df-151">The following code example shows the implementation and use of the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> property.</span></span> <span data-ttu-id="354df-152">完整的示例显示在接口的类概述中 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 。</span><span class="sxs-lookup"><span data-stu-id="354df-152">The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface.</span></span> <span data-ttu-id="354df-153">提供程序控件实现 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="354df-153">The provider control implements the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> property.</span></span> <span data-ttu-id="354df-154">然后，在其 `GetFieldValue` 方法中使用属性来检索字段值。</span><span class="sxs-lookup"><span data-stu-id="354df-154">Then, in its `GetFieldValue` method, it uses the property to retrieve the field value.</span></span>  
  
 [!code-csharp[WebParts_IWebPartField_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/IFieldSample.cs#2)]
 [!code-vb[WebParts_IWebPartField_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/IFieldSample.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
  </Members>
</Type>
