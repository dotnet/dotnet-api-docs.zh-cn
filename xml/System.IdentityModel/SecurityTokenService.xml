<Type Name="SecurityTokenService" FullName="System.IdentityModel.SecurityTokenService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c9dd88b7bbe62bc27050f76bfefc9e3a64f3d9b0" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89993928" /></Metadata><TypeSignature Language="C#" Value="public abstract class SecurityTokenService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.SecurityTokenService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenService" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenService abstract" />
  <TypeSignature Language="F#" Value="type SecurityTokenService = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f1d9c-101">定义安全令牌服务 (STS) 的属性和方法的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-101">The abstract base class that defines the properties and methods of a security token service (STS).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-102">若要创建 STS，必须从类派生 <xref:System.IdentityModel.SecurityTokenService> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-102">To create an STS you must derive from the <xref:System.IdentityModel.SecurityTokenService> class.</span></span> <span data-ttu-id="f1d9c-103">在自定义类中，你至少必须重写 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 和 <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-103">In your custom class you must, at a minimum, override the <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> and <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> methods.</span></span> <span data-ttu-id="f1d9c-104">使用这些替代，使用类中定义的所有其他方法的默认实现创建的 STS 能够颁发安全令牌，以响应 (RST) 的安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-104">With these overrides, the STS created using the default implementation of all the other methods defined in the class is capable of issuing security tokens in response to security token requests (RST).</span></span> <span data-ttu-id="f1d9c-105">也就是说，实现 WS-TRUST 规范中定义的问题绑定。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-105">That is, the Issue binding defined in the WS-Trust specification is implemented.</span></span> <span data-ttu-id="f1d9c-106">此绑定是在方法中实现的 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-106">This binding is implemented in the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span> <span data-ttu-id="f1d9c-107">在默认情况下，不会执行任何其他 WS-TRUST 绑定 (续订、取消和验证) ，如果遇到与这些绑定之一相对应的 RST，则会向调用方返回相应的错误。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-107">None of the other WS-Trust bindings (Renew, Cancel, and Validate) are implemented in the default case and an appropriate fault is returned to the caller if an RST that corresponds to one of these bindings is encountered.</span></span> <span data-ttu-id="f1d9c-108">当然，您可以重写适当的方法 (<xref:System.IdentityModel.SecurityTokenService.Renew%2A> 、 <xref:System.IdentityModel.SecurityTokenService.Cancel%2A> 和 <xref:System.IdentityModel.SecurityTokenService.Validate%2A>) 来实现 STS 中的这些绑定。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-108">You can, of course, override the appropriate methods (<xref:System.IdentityModel.SecurityTokenService.Renew%2A>, <xref:System.IdentityModel.SecurityTokenService.Cancel%2A>, and <xref:System.IdentityModel.SecurityTokenService.Validate%2A>) to implement these bindings in your STS.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1d9c-109">实现生产就绪的 STS 需要认真规划和大量资源，以减轻公开此类服务时所固有的潜在安全风险。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-109">Implementing a production-ready STS entails careful planning and considerable resources to mitigate the potential security risks inherent in exposing such a service.</span></span> <span data-ttu-id="f1d9c-110">大多数使用 Windows Identity Foundation (WIF) 的开发人员将开发将标识管理外包给 STS 的应用程序，而不是开发 STS 本身。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-110">Most developers using Windows Identity Foundation (WIF) will be developing applications that outsource identity management to an STS, rather than developing an STS itself.</span></span> <span data-ttu-id="f1d9c-111">WIF 提供 Visual Studio 扩展，即 Visual Studio 2012 的标识和访问工具，帮助开发人员在开发环境中测试解决方案。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-111">WIF provides a Visual Studio extension, the Identity and Access Tool for Visual Studio 2012, to help developers test solutions in the development environment.</span></span> <span data-ttu-id="f1d9c-112">此工具包括一个 STS， `LocalSTS` 你可以将其配置为向你正在开发的应用程序提供特定的声明。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-112">This tool includes an STS, `LocalSTS`, that you can configure to serve specific claims to the application that you are developing.</span></span> <span data-ttu-id="f1d9c-113">有关标识和访问工具的详细信息，请参阅 [Visual Studio 2012 的标识和访问工具](/dotnet/framework/security/identity-and-access-tool-for-vs)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-113">For more information about the Identity and Access tool, see [Identity and Access Tool for Visual Studio 2012](/dotnet/framework/security/identity-and-access-tool-for-vs).</span></span> <span data-ttu-id="f1d9c-114">在某些情况下， `LocalSTS` 可能不提供充分测试您的应用程序所需的功能; 例如，在涉及开发自定义令牌处理程序以供应用程序使用的方案中。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-114">In some scenarios, `LocalSTS` may not provide the functionality necessary to adequately test your application; for example, in a scenario that involves developing a custom token handler for use by an application.</span></span> <span data-ttu-id="f1d9c-115">在这些情况下，可以从派生， <xref:System.IdentityModel.SecurityTokenService> 以创建一个或多个可在开发环境中部署并可用于在应用程序中测试此类功能的简单 sts。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-115">In these cases, you can derive from <xref:System.IdentityModel.SecurityTokenService> to create one or more simple STSs that can be deployed in your development environment and that can be used to test such features in your application.</span></span> <span data-ttu-id="f1d9c-116">本部分的其余部分重点介绍类公开的方法 <xref:System.IdentityModel.SecurityTokenService> ，使你能够实现一个简单的 STS 并扩展令牌颁发管道。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-116">The rest of this section focuses on the methods exposed by the <xref:System.IdentityModel.SecurityTokenService> class that enable you to implement a simple STS and extend the token issuance pipeline.</span></span>  
  
 <span data-ttu-id="f1d9c-117">下面的列表简要介绍了开发人员在测试或开发环境中的主要重要性方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-117">The following list provides a brief overview of the methods of primary importance to the developer for use in a test or development environment.</span></span>  
  
-   <span data-ttu-id="f1d9c-118"><xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-118">The <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> method.</span></span> <span data-ttu-id="f1d9c-119">此方法返回一个 <xref:System.IdentityModel.Scope> 对象，其中包含有关 RP 的信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-119">This method returns a <xref:System.IdentityModel.Scope> object that contains information about the RP.</span></span> <span data-ttu-id="f1d9c-120">此对象用于令牌颁发管道的其余部分，其中包含有关要在响应中使用的签名和加密凭据的信息，以及 `AppliesTo` 和 `ReplyTo` (（如果需要) 地址）。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-120">This object is used in the rest of the token issuance pipeline and includes information about the signing and encrypting credentials to use in the response, as well as the `AppliesTo` and `ReplyTo` (if required) addresses.</span></span> <span data-ttu-id="f1d9c-121">必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-121">You must override this method.</span></span>  
  
-   <span data-ttu-id="f1d9c-122"><xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-122">The <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> method.</span></span> <span data-ttu-id="f1d9c-123">此方法返回一个 <xref:System.Security.Claims.ClaimsIdentity> 对象，该对象包含要返回到 RP 的声明。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-123">This method returns an <xref:System.Security.Claims.ClaimsIdentity> object that contains the claims to return to the RP.</span></span> <span data-ttu-id="f1d9c-124">必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-124">You must override this method.</span></span>  
  
-   <span data-ttu-id="f1d9c-125"><xref:System.IdentityModel.SecurityTokenService.Issue%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-125">The <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span> <span data-ttu-id="f1d9c-126">此方法实现令牌请求管道，该管道处理 (RST) 的传入安全令牌请求，并将响应 (RSTR) 返回给调用方，其中包含可用于向 RP 进行身份验证的令牌。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-126">This method implements the token request pipeline, which processes an incoming security token request (RST) and returns a response (RSTR) to the caller that contains a token that can be used to authenticate with an RP.</span></span> <span data-ttu-id="f1d9c-127">类中定义的许多其他方法 <xref:System.IdentityModel.SecurityTokenService> 都从此方法调用，包括 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 和 <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-127">Many of the other methods defined in the <xref:System.IdentityModel.SecurityTokenService> class are called from this method, including the <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> and <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> methods.</span></span> <span data-ttu-id="f1d9c-128">您不必重写此方法，但了解它实现的令牌请求管道可能会很有帮助。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-128">You do not have to override this method, but an understanding of the token request pipeline it implements may be helpful.</span></span>  
  
 <span data-ttu-id="f1d9c-129">通过类配置 STS <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-129">An STS is configured through the <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1d9c-130">本主题中使用的代码示例 <xref:System.IdentityModel.SecurityTokenService> 摘自 `Custom Token` 示例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-130">The code examples that are used in the <xref:System.IdentityModel.SecurityTokenService> topics are taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f1d9c-131">此示例提供了一些自定义类，使你能够处理 (SWT) 的简单 Web 令牌，并包括能够为 SWT 令牌提供服务的被动 STS 的实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-131">This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token.</span></span> <span data-ttu-id="f1d9c-132">有关如何实现活动 STS 的示例，请参阅 `Federation Metadata` 示例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-132">For an example of how to implement an active STS, you can see the `Federation Metadata` sample.</span></span> <span data-ttu-id="f1d9c-133">有关这些示例以及可用于 WIF 的其他示例以及要从何处下载这些示例和其他示例的信息，请参阅 [WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-133">For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index).</span></span> <span data-ttu-id="f1d9c-134">下面的代码演示如何使用类实现被动 STS <xref:System.IdentityModel.SecurityTokenService> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-134">The following code shows the implementation of a passive STS using the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 [!code-csharp[WIFCustomTokenSTS#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#3)]  
  
 <span data-ttu-id="f1d9c-135">下面的代码演示如何通过 <xref:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessRequest%28System.Web.HttpRequest%2CSystem.Security.Claims.ClaimsPrincipal%2CSystem.IdentityModel.SecurityTokenService%2CSystem.Web.HttpResponse%29?displayProperty=nameWithType> 从文件中的代码调用方法来调用自定义被动 STS 来处理 WS 联合身份验证请求 `default.aspx.cs` 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-135">The following code shows how to invoke a custom passive STS to process a WS-Federation request by calling the <xref:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessRequest%28System.Web.HttpRequest%2CSystem.Security.Claims.ClaimsPrincipal%2CSystem.IdentityModel.SecurityTokenService%2CSystem.Web.HttpResponse%29?displayProperty=nameWithType> method from the code behind in the `default.aspx.cs` file.</span></span>  
  
 [!code-csharp[WIFCustomTokenSTS#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/default.aspx.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="f1d9c-136">必须重写 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 和 <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-136">You must override both the <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> and the <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> methods.</span></span></para></block>
    <altmember cref="T:System.IdentityModel.Scope" />
    <altmember cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />
    <altmember cref="T:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenService (System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (securityTokenServiceConfiguration As SecurityTokenServiceConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenService(System::IdentityModel::Configuration::SecurityTokenServiceConfiguration ^ securityTokenServiceConfiguration);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.SecurityTokenService : System.IdentityModel.Configuration.SecurityTokenServiceConfiguration -&gt; System.IdentityModel.SecurityTokenService" Usage="new System.IdentityModel.SecurityTokenService securityTokenServiceConfiguration" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="securityTokenServiceConfiguration" Type="System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />
      </Parameters>
      <Docs>
        <param name="securityTokenServiceConfiguration"><span data-ttu-id="f1d9c-137">一个 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />，包含 STS 设置。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-137">A <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> that contains the settings for the STS.</span></span></param>
        <summary><span data-ttu-id="f1d9c-138">已从派生的类中调用，以使用指定的配置设置初始化 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-138">Called from derived classes to initialize the <see cref="T:System.IdentityModel.SecurityTokenService" /> class using the specified configuration settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-139">使用此构造函数初始化范围提供程序和令牌颁发者证书。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-139">Use this constructor to initialize scope provider and token issuer certificate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1d9c-140"><paramref name="securityTokenServiceConfiguration" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-140"><paramref name="securityTokenServiceConfiguration" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginCancel">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginCancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginCancel(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginCancel (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginCancel(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginCancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginCancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginCancel (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-141">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-141">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-142">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-142">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-143">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-143">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <param name="callback"><span data-ttu-id="f1d9c-144">接收异步取消操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-144">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous cancel operation.</span></span></param>
        <param name="state"><span data-ttu-id="f1d9c-145">一个包含与异步取消操作关联的状态信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-145">An object that contains state information associated with the asynchronous cancel operation.</span></span></param>
        <summary><span data-ttu-id="f1d9c-146">在派生类中重写时，开始异步 WS 信任取消请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-146">When overridden in a derived class, begins an asynchronous WS-Trust Cancel request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-147">引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous cancel operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-148">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-148">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetOutputClaimsIdentity">
      <MemberSignature Language="C#" Value="protected virtual IAsyncResult BeginGetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IAsyncResult BeginGetOutputClaimsIdentity(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function BeginGetOutputClaimsIdentity (principal As ClaimsPrincipal, request As RequestSecurityToken, scope As Scope, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IAsyncResult ^ BeginGetOutputClaimsIdentity(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginGetOutputClaimsIdentity : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginGetOutputClaimsIdentity : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginGetOutputClaimsIdentity (principal, request, scope, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-149">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-149">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-150">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-150">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-151">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-151">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <param name="scope"><span data-ttu-id="f1d9c-152">包含与请求相关的依赖放的信息的 <see cref="T:System.IdentityModel.Scope" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-152">The <see cref="T:System.IdentityModel.Scope" /> that contains information about the relying party associated with the request.</span></span></param>
        <param name="callback"><span data-ttu-id="f1d9c-153">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-153">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="f1d9c-154">一个包含与异步操作关联的状态信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-154">An object that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f1d9c-155">当在派生类中重写时，开始对 <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> 方法的异步调用。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-155">When overridden in a derived class, begins an asynchronous call to the <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> method.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-156">引用异步操作的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-156">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-157">此方法的默认实现将引发 <xref:System.NotImplementedException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-157">The default implementation of this method throws a <xref:System.NotImplementedException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetScope">
      <MemberSignature Language="C#" Value="protected virtual IAsyncResult BeginGetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IAsyncResult BeginGetScope(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function BeginGetScope (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IAsyncResult ^ BeginGetScope(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginGetScope : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginGetScope : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginGetScope (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-158">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-158">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-159">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-159">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-160">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-160">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <param name="callback"><span data-ttu-id="f1d9c-161">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-161">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="f1d9c-162">一个包含与异步操作关联的状态信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-162">An object that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="f1d9c-163">当在派生类中重写时，开始对 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 方法的异步调用。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-163">When overridden in a derived class, begins an asynchronous call for the <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> method.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-164">引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-164">The <see cref="T:System.IAsyncResult" /> that references the asynchronous cancel operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-165">此方法的默认实现将引发 <xref:System.NotImplementedException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-165">The default implementation of this method throws a <xref:System.NotImplementedException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginIssue">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginIssue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginIssue(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginIssue (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginIssue(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginIssue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginIssue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginIssue (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-166">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-166">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-167">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-167">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-168">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-168">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <param name="callback"><span data-ttu-id="f1d9c-169">接收异步问题操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-169">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous issue operation.</span></span></param>
        <param name="state"><span data-ttu-id="f1d9c-170">一个包含与异步发布操作关联的状态信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-170">An object that contains state information associated with the asynchronous issue operation.</span></span></param>
        <summary><span data-ttu-id="f1d9c-171">在派生类中重写时，开始异步 WS 信任发布请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-171">When overridden in a derived class, begins an asynchronous WS-Trust Issue request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-172">引用异步问题操作的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-172">The <see cref="T:System.IAsyncResult" /> that references the asynchronous issue operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-173">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-173">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRenew">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginRenew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRenew(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginRenew (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginRenew(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRenew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginRenew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginRenew (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-174">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-174">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-175">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-175">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-176">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-176">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <param name="callback"><span data-ttu-id="f1d9c-177">接收异步续预定操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-177">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous renew operation.</span></span></param>
        <param name="state"><span data-ttu-id="f1d9c-178">一个包含与异步续订操作关联的状态信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-178">An object that contains state information associated with the asynchronous renew operation.</span></span></param>
        <summary><span data-ttu-id="f1d9c-179">在派生类中重写时，开始异步 WS 信任更新请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-179">When overridden in a derived class, begins an asynchronous WS-Trust Renew request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-180">引用异步续订操作的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-180">The <see cref="T:System.IAsyncResult" /> that references the asynchronous renew operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-181">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-181">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginValidate">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginValidate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginValidate(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginValidate (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginValidate(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginValidate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginValidate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginValidate (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-182">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-182">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-183">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-183">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-184">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-184">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <param name="callback"><span data-ttu-id="f1d9c-185">可接收异步验证操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-185">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous validate operation.</span></span></param>
        <param name="state"><span data-ttu-id="f1d9c-186">一个包含与异步验证操作关联的状态信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-186">An object that contains state information associated with the asynchronous validate operation.</span></span></param>
        <summary><span data-ttu-id="f1d9c-187">在派生类中重写时，开始异步 WS 信任验证请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-187">When overridden in a derived class, begins an asynchronous WS-Trust Validate request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-188">引用异步验证操作的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-188">The <see cref="T:System.IAsyncResult" /> that references the asynchronous validate operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-189">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-189">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Cancel (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Cancel(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Cancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Cancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Cancel (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-190">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-190">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-191">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-191">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-192">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-192">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <summary><span data-ttu-id="f1d9c-193">在派生类中重写时，处理 WS 信任取消请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-193">When overridden in a derived class, processes a WS-Trust Cancel request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-194">表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-194">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-195">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-195">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenDescriptor">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.SecurityTokenDescriptor CreateSecurityTokenDescriptor (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityTokenDescriptor CreateSecurityTokenDescriptor(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateSecurityTokenDescriptor (request As RequestSecurityToken, scope As Scope) As SecurityTokenDescriptor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::SecurityTokenDescriptor ^ CreateSecurityTokenDescriptor(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope);" />
      <MemberSignature Language="F#" Value="abstract member CreateSecurityTokenDescriptor : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.SecurityTokenDescriptor&#xA;override this.CreateSecurityTokenDescriptor : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.SecurityTokenDescriptor" Usage="securityTokenService.CreateSecurityTokenDescriptor (request, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f1d9c-196">传入令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-196">The incoming token request.</span></span></param>
        <param name="scope"><span data-ttu-id="f1d9c-197">从 <see cref="P:System.IdentityModel.SecurityTokenService.Scope" /> 中返回的 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 对象.</span><span class="sxs-lookup"><span data-stu-id="f1d9c-197">The <see cref="P:System.IdentityModel.SecurityTokenService.Scope" /> object returned from <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />.</span></span></param>
        <summary><span data-ttu-id="f1d9c-198">创建 <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-198">Creates an instance of a <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-199"><see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" /></span><span class="sxs-lookup"><span data-stu-id="f1d9c-199">The <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-200">在令牌颁发过程中在之后调用 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-200">Invoked during token issuance after <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1d9c-201"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-201"><paramref name="request" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f1d9c-202">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1d9c-202">-or-</span></span> 
 <span data-ttu-id="f1d9c-203"><paramref name="scope" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-203"><paramref name="scope" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndCancel">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndCancel (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndCancel(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndCancel (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndCancel(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndCancel : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndCancel : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndCancel result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f1d9c-204"><see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-204">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="f1d9c-205">在派生类中重写时，完成异步 WS 信任取消请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-205">When overridden in a derived class, completes the asynchronous WS-Trust Cancel request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-206">表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-206">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-207">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-207">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetOutputClaimsIdentity">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Claims.ClaimsIdentity EndGetOutputClaimsIdentity (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Claims.ClaimsIdentity EndGetOutputClaimsIdentity(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EndGetOutputClaimsIdentity (result As IAsyncResult) As ClaimsIdentity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Security::Claims::ClaimsIdentity ^ EndGetOutputClaimsIdentity(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndGetOutputClaimsIdentity : IAsyncResult -&gt; System.Security.Claims.ClaimsIdentity&#xA;override this.EndGetOutputClaimsIdentity : IAsyncResult -&gt; System.Security.Claims.ClaimsIdentity" Usage="securityTokenService.EndGetOutputClaimsIdentity result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f1d9c-208"><see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> 方法的调用返回。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-208">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="f1d9c-209">当在派生类中重写时，完成对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> 方法的异步调用。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-209">When overridden in a derived class, completes the asynchronous call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-210"><see cref="T:System.Security.Claims.ClaimsIdentity" /> 包含放置在发布的安全标志上的声明的集合。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-210">A <see cref="T:System.Security.Claims.ClaimsIdentity" /> that contains the collection of claims that will be placed in the issued security token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-211">此方法的默认实现将引发 <xref:System.NotImplementedException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-211">The default implementation of this method throws a <xref:System.NotImplementedException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetScope">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Scope EndGetScope (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Scope EndGetScope(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EndGetScope (result As IAsyncResult) As Scope" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Scope ^ EndGetScope(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndGetScope : IAsyncResult -&gt; System.IdentityModel.Scope&#xA;override this.EndGetScope : IAsyncResult -&gt; System.IdentityModel.Scope" Usage="securityTokenService.EndGetScope result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Scope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f1d9c-212"><see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-212">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="f1d9c-213">当在派生类中重写时，完成对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的异步调用。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-213">When overridden in a derived class, completes the asynchronous call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-214"><see cref="T:System.IdentityModel.Scope" /> 封装在对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用中指定的与请求 (RST) 关联的依赖方 (RP) 信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-214">A <see cref="T:System.IdentityModel.Scope" /> that encapsulates the relying party (RP) information associated with the request (RST) specified in the call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-215">此方法的默认实现将引发 <xref:System.NotImplementedException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-215">The default implementation of this method throws a <xref:System.NotImplementedException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIssue">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndIssue (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndIssue(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndIssue (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndIssue(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndIssue : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndIssue : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndIssue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f1d9c-216"><see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-216">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="f1d9c-217">在派生类中重写时，完成异步 WS 信任发布请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-217">When overridden in a derived class, completes the asynchronous WS-Trust Issue request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-218">表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-218">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-219">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-219">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRenew">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndRenew (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndRenew(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndRenew (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndRenew(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndRenew : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndRenew : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndRenew result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f1d9c-220"><see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-220">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="f1d9c-221">在派生类中重写时，完成异步 WS 信任更新请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-221">When overridden in a derived class, completes the asynchronous WS-Trust Renew request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-222">表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-222">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-223">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-223">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndValidate">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndValidate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndValidate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndValidate (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndValidate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndValidate : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndValidate : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndValidate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f1d9c-224"><see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-224">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="f1d9c-225">在派生类中重写时，完成异步 WS 信任验证请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-225">When overridden in a derived class, completes the asynchronous WS-Trust Validate request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-226">表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-226">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-227">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-227">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="protected virtual string GetIssuerName ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetIssuerName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetIssuerName" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetIssuerName () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetIssuerName();" />
      <MemberSignature Language="F#" Value="abstract member GetIssuerName : unit -&gt; string&#xA;override this.GetIssuerName : unit -&gt; string" Usage="securityTokenService.GetIssuerName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1d9c-228">获取或设置安全标记服务的 （STS） 的名称。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-228">Gets the name of the security token service (STS).</span></span></summary>
        <returns><span data-ttu-id="f1d9c-229">发行人名称。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-229">The issuer name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-230">此方法是从方法中实现的默认标记颁发管道调用的 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-230">This method is called from the default token issuance pipeline implemented in the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span>  
  
 <span data-ttu-id="f1d9c-231">默认实现返回 <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName%2A> 通过属性访问的配置的属性 <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-231">The default implementation returns the <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName%2A> property from configuration accessed through the <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetOutputClaimsIdentity">
      <MemberSignature Language="C#" Value="protected abstract System.Security.Claims.ClaimsIdentity GetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Claims.ClaimsIdentity GetOutputClaimsIdentity(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetOutputClaimsIdentity (principal As ClaimsPrincipal, request As RequestSecurityToken, scope As Scope) As ClaimsIdentity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Security::Claims::ClaimsIdentity ^ GetOutputClaimsIdentity(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputClaimsIdentity : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.Security.Claims.ClaimsIdentity" Usage="securityTokenService.GetOutputClaimsIdentity (principal, request, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-232">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-232">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-233">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-233">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-234">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-234">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <param name="scope"><span data-ttu-id="f1d9c-235">包含与请求相关的依赖放的信息的 <see cref="T:System.IdentityModel.Scope" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-235">The <see cref="T:System.IdentityModel.Scope" /> that contains information about the relying party associated with the request.</span></span> <span data-ttu-id="f1d9c-236">作为 <see cref="T:System.IdentityModel.Scope" /> 方法的 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />参数返回的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-236">This is the <see cref="T:System.IdentityModel.Scope" /> object that was returned by the <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> method.</span></span></param>
        <summary><span data-ttu-id="f1d9c-237">当在派生类中重写时，此方法将返回要包括在颁发令牌中的输出主题的集合。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-237">When overridden in a derived class, this method returns a collection of output subjects to be included in the issued token.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-238"><see cref="T:System.Security.Claims.ClaimsIdentity" /> 包含放置在发布的安全标志上的声明的集合。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-238">A <see cref="T:System.Security.Claims.ClaimsIdentity" /> that contains the collection of claims that will be placed in the issued security token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-239"><xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>方法是从令牌颁发管道调用的，该管道由 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 方法实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-239">The <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> method is called from the token issuance pipeline, which is implemented by the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span> <span data-ttu-id="f1d9c-240">它将返回一个 <xref:System.Security.Claims.ClaimsIdentity> ，该对象包含要包含在已颁发的安全令牌中的声明，这些声明基于参数的请求者 (`principal` 参数) 、参数) 的传入 RST (`request` ，以及令牌的目标信赖方 (`scope` 参数) 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-240">It returns an <xref:System.Security.Claims.ClaimsIdentity> that contains the claims to include in the issued security token based on the requestor of the token (the `principal` parameter), the incoming RST (the `request` parameter), and the relying party for which the token is intended (the `scope` parameter).</span></span> <span data-ttu-id="f1d9c-241">此方法中的逻辑主要涉及回答以下问题：</span><span class="sxs-lookup"><span data-stu-id="f1d9c-241">The logic in this method is primarily concerned with answering the following questions:</span></span>  
  
-   <span data-ttu-id="f1d9c-242">**哪些声明类型应包含在响应中基于它的目标 RP？**</span><span class="sxs-lookup"><span data-stu-id="f1d9c-242">**Which claim types should be included in the response based on the RP for which it is intended?**</span></span> <span data-ttu-id="f1d9c-243">通常，根据每个 rp 所需的声明类型的列表或按请求，通过检查请求的属性，来确定这一点 <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-243">Typically this is decided on a per-RP basis from lists of claim types required for each RP or on a per-request basis by examining the <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims%2A> property of the request.</span></span> <span data-ttu-id="f1d9c-244">不过，确定要包括在响应中的声明的逻辑和详细信息完全取决于你的实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-244">However, the logic and details for determining the claims to include in the response is completely up to your implementation.</span></span>  
  
-   <span data-ttu-id="f1d9c-245">**应将哪些声明值分配给响应中的声明？**</span><span class="sxs-lookup"><span data-stu-id="f1d9c-245">**Which claim values should be assigned to the claims in the response?**</span></span> <span data-ttu-id="f1d9c-246">对于 (IP-HTTPS) 的标识提供程序，这通常意味着使用参数) 提供的请求者的 (中的一个或多个声明 <xref:System.Security.Claims.ClaimsPrincipal> `principal` 访问存储 (或其他实体) 来返回所需声明类型的值。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-246">For an Identity Provider (IP-STS) this typically means using one or more claims in the requestor's <xref:System.Security.Claims.ClaimsPrincipal> (provided by the `principal` parameter) to access a store (or other entity) to return values for the required claim types.</span></span> <span data-ttu-id="f1d9c-247">对于 (R-STS 的联合身份验证提供程序) 这通常意味着在请求者的传入声明上执行某种类型的处理来满足请求;可能对请求者提供的某些声明执行筛选或转换，同时通过未修改的方式传递其他声明。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-247">For a Federation Provider (R-STS) this typically means performing some kind of processing on the requestor's incoming claims to fulfill the request; perhaps performing filtering or transformation on some claims presented by the requestor, while passing others through unmodified.</span></span> <span data-ttu-id="f1d9c-248">当然，正如确定要包含在响应中的声明，如何确定这些声明的值的详细信息和逻辑都取决于您的实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-248">Of course, as in the case of deciding which claims to include in the response, the details and logic of how to determine the values of these claims is up to your implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1d9c-249">本主题中使用的代码示例摘自 `Custom Token` 示例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-249">The code example that is used in this topic is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f1d9c-250">此示例提供了一些自定义类，使你能够处理 (SWT) 的简单 Web 令牌，并包括能够为 SWT 令牌提供服务的被动 STS 的实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-250">This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token.</span></span> <span data-ttu-id="f1d9c-251">有关如何实现活动 STS 的示例，请参阅 `Federation Metadata` 示例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-251">For an example of how to implement an active STS, you can see the `Federation Metadata` sample.</span></span> <span data-ttu-id="f1d9c-252">有关这些示例以及可用于 WIF 的其他示例以及要从何处下载这些示例和其他示例的信息，请参阅 [WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-252">For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index).</span></span> <span data-ttu-id="f1d9c-253">下面的代码演示如何重写 <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> 方法以返回 STS 的声明。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-253">The following code shows how to override the <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> method to return claims for your STS.</span></span> <span data-ttu-id="f1d9c-254">在此示例中，将忽略请求安全令牌 (RST) 消息，并返回基于在 STS 进行身份验证的用户的声明的集合。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-254">In this example, the Request Security Token (RST) message is ignored and a collection of claims based on the user as authenticated at the STS is returned.</span></span>  
  
 [!code-csharp[WIFCustomTokenSTS#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f1d9c-255">实现该 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类时，必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-255">You must override this method in your implementation of the <see cref="T:System.IdentityModel.SecurityTokenService" /> class.</span></span></para></block>
        <altmember cref="T:System.IdentityModel.Scope" />
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetProofToken">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.ProofDescriptor GetProofToken (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.ProofDescriptor GetProofToken(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetProofToken (request As RequestSecurityToken, scope As Scope) As ProofDescriptor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::ProofDescriptor ^ GetProofToken(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope);" />
      <MemberSignature Language="F#" Value="abstract member GetProofToken : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.ProofDescriptor&#xA;override this.GetProofToken : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.ProofDescriptor" Usage="securityTokenService.GetProofToken (request, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.ProofDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f1d9c-256"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示传入标记请求 (RST)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-256">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the incoming token request (RST).</span></span></param>
        <param name="scope"><span data-ttu-id="f1d9c-257">封装有关该依赖的一方的信息的 <see cref="T:System.IdentityModel.Scope" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-257">The <see cref="T:System.IdentityModel.Scope" /> instance that encapsulates information about the relying party.</span></span></param>
        <summary><span data-ttu-id="f1d9c-258">获取要包含在响应（RETR) 内的证明标记。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-258">Gets the proof token to be included in the response (RSTR).</span></span></summary>
        <returns><span data-ttu-id="f1d9c-259">一个 <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" />，表示新建的证明说明符。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-259">A <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" /> that represents the newly created proof descriptor.</span></span> <span data-ttu-id="f1d9c-260">在持有者令牌情况下，证明描述符可以是非对称证明描述符、一个对称证明描述符或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-260">The proof descriptor can be an asymmetric proof descriptor, a symmetric proof descriptor, or <see langword="null" /> in the bearer token case.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-261">此方法是从方法中实现的默认标记颁发管道调用的 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-261">This method is called from the default token issuance pipeline implemented in the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span>  
  
 <span data-ttu-id="f1d9c-262">默认实现返回证明描述符，或引发相应的异常。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-262">The default implementation returns a proof descriptor or throws an appropriate exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1d9c-263"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-263"><paramref name="request" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f1d9c-264">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1d9c-264">-or-</span></span> 
 <span data-ttu-id="f1d9c-265"><paramref name="scope" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-265"><paramref name="scope" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetRequestorProofEncryptingCredentials">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.EncryptingCredentials GetRequestorProofEncryptingCredentials (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.EncryptingCredentials GetRequestorProofEncryptingCredentials(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetRequestorProofEncryptingCredentials (request As RequestSecurityToken) As EncryptingCredentials" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::EncryptingCredentials ^ GetRequestorProofEncryptingCredentials(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetRequestorProofEncryptingCredentials : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Tokens.EncryptingCredentials&#xA;override this.GetRequestorProofEncryptingCredentials : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Tokens.EncryptingCredentials" Usage="securityTokenService.GetRequestorProofEncryptingCredentials request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.EncryptingCredentials</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f1d9c-266"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示传入标记请求 (RST)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-266">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the incoming token request (RST).</span></span></param>
        <summary><span data-ttu-id="f1d9c-267">获取请求者的标记加密凭据。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-267">Gets the requestor's proof encrypting credentials.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-268">表示请求者的加密凭据的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-268">An <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> object that represents the requestor's encrypting credentials.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-269">此方法是从方法中调用的 <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-269">This method is called from the <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A> method.</span></span>  
  
 <span data-ttu-id="f1d9c-270">默认实现如下所示。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-270">The default implementation does the following.</span></span> <span data-ttu-id="f1d9c-271">`null`如果在请求中未指定 (<xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption%2A?displayProperty=nameWithType>) 属性，则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-271">Returns `null` if there is no encryption token specified in the request (the <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption%2A?displayProperty=nameWithType> property is `null`).</span></span> <span data-ttu-id="f1d9c-272">否则，如果它可以将令牌作为获取 <xref:System.IdentityModel.Tokens.X509SecurityToken> ，它将基于该令牌返回凭据。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-272">Otherwise, if it can get the token as an <xref:System.IdentityModel.Tokens.X509SecurityToken>, it returns credentials based on that token.</span></span> <span data-ttu-id="f1d9c-273">如果无法将令牌解析为，则 <xref:System.IdentityModel.Tokens.X509SecurityToken> <xref:System.IdentityModel.RequestFailedException> 会引发。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-273">If it cannot resolve the token as an <xref:System.IdentityModel.Tokens.X509SecurityToken>, a <xref:System.IdentityModel.RequestFailedException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1d9c-274"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-274"><paramref name="request" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetResponse">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse GetResponse (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse GetResponse(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetResponse (request As RequestSecurityToken, tokenDescriptor As SecurityTokenDescriptor) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ GetResponse(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="abstract member GetResponse : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.GetResponse : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.GetResponse (request, tokenDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f1d9c-275">包含令牌请求的 RST。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-275">The RST that contains the token request.</span></span></param>
        <param name="tokenDescriptor"><span data-ttu-id="f1d9c-276">令牌描述符包含要用于颁发的令牌的信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-276">The token descriptor that contains the information to use for the issued token.</span></span></param>
        <summary><span data-ttu-id="f1d9c-277">创建响应 (RSTR)，它包含使用指定请求 (RST) 和安全令牌描述符颁发的令牌。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-277">Creates the response (RSTR) that contains the issued token by using the specified request (RST) and security token descriptor.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-278">响应 (RSTR) 或 <see langword="null" />（如果无法从指定请求和令牌描述符创建响应）。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-278">The response (RSTR) or <see langword="null" /> if a response cannot be created from the specified request and token descriptor.</span></span> <span data-ttu-id="f1d9c-279">默认实现返回 <see langword="null" />（如果 <paramref name="tokenDescriptor" /> 参数为 <see langword="null" />）。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-279">The default implementation returns <see langword="null" /> if the <paramref name="tokenDescriptor" /> parameter is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-280">此 <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> 方法被称为令牌颁发管道中的最后一个步骤，该步骤由 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 方法实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-280">The <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> method is called as the last step from the token issuance pipeline, which is implemented by the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span> <span data-ttu-id="f1d9c-281">它通过使用原始传入请求 (RST) 以及在令牌颁发管道中前面步骤中生成的令牌描述符，创建并返回 (RSTR) 的响应。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-281">It creates and returns the response (RSTR) by using the original incoming request (RST) and the token descriptor that was built up during previous steps in the token issuance pipeline.</span></span>  
  
 <span data-ttu-id="f1d9c-282">默认实现通过将 request 参数中指定的 RST 传递给构造函数来创建 RSTR <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.%23ctor%28System.IdentityModel.Protocols.WSTrust.WSTrustMessage%29?displayProperty=nameWithType> ，对 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo%2A?displayProperty=nameWithType> 传入的令牌描述符调用方法，以 <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> 将其属性应用到新创建的 RSTR， <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo%2A> 并使用标记描述符上的属性设置 RSTR 上的属性 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A> ，最后 <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> 按照下表设置 RSTR 上的属性：</span><span class="sxs-lookup"><span data-stu-id="f1d9c-282">The default implementation creates the RSTR by passing the RST specified in the request parameter to the <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.%23ctor%28System.IdentityModel.Protocols.WSTrust.WSTrustMessage%29?displayProperty=nameWithType> constructor, invoking the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo%2A?displayProperty=nameWithType> method on the token descriptor passed into <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> to apply its properties to the newly created RSTR, setting the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo%2A> property on the RSTR by using the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A> property on the token descriptor, and finally setting the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> property on the RSTR according to the following table:</span></span>  
  
|<span data-ttu-id="f1d9c-283">`RST.ReplyTo` 属性</span><span class="sxs-lookup"><span data-stu-id="f1d9c-283">`RST.ReplyTo` property</span></span>|<span data-ttu-id="f1d9c-284"><xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-284"><xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=nameWithType> property.</span></span>|<span data-ttu-id="f1d9c-285">`RSTR.ReplyTo` 属性</span><span class="sxs-lookup"><span data-stu-id="f1d9c-285">`RSTR.ReplyTo` property</span></span>|  
|----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|  
|<span data-ttu-id="f1d9c-286">设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-286">Set</span></span>|<span data-ttu-id="f1d9c-287">未设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-287">Not Set</span></span>|<span data-ttu-id="f1d9c-288">未设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-288">Not Set</span></span>|  
|<span data-ttu-id="f1d9c-289">设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-289">Set</span></span>|<span data-ttu-id="f1d9c-290">设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-290">Set</span></span>|<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f1d9c-291">未设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-291">Not Set</span></span>|<span data-ttu-id="f1d9c-292">设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-292">Set</span></span>|<span data-ttu-id="f1d9c-293">未设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-293">Not Set</span></span>|  
|<span data-ttu-id="f1d9c-294">未设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-294">Not Set</span></span>|<span data-ttu-id="f1d9c-295">未设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-295">Not Set</span></span>|<span data-ttu-id="f1d9c-296">未设置</span><span class="sxs-lookup"><span data-stu-id="f1d9c-296">Not Set</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetScope">
      <MemberSignature Language="C#" Value="protected abstract System.IdentityModel.Scope GetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Scope GetScope(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetScope (principal As ClaimsPrincipal, request As RequestSecurityToken) As Scope" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IdentityModel::Scope ^ GetScope(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetScope : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Scope" Usage="securityTokenService.GetScope (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Scope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-297">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示客户发出请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-297">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the client making the request.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-298"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示传入请求 (RST)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-298">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the incoming request (RST).</span></span></param>
        <summary><span data-ttu-id="f1d9c-299">获取包含与指定请求（RST）关联的依赖方（RP）信息的 <see cref="T:System.IdentityModel.Scope" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-299">Gets a <see cref="T:System.IdentityModel.Scope" /> object that contains information about the relying party (RP) associated with the specified request (RST).</span></span> <span data-ttu-id="f1d9c-300">实现该 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类时，必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-300">You must override this method in your implementation of the <see cref="T:System.IdentityModel.SecurityTokenService" /> class.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-301"><see cref="T:System.IdentityModel.Scope" /> 封装与请求关联的 RP 信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-301">A <see cref="T:System.IdentityModel.Scope" /> that encapsulates the RP information associated with the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-302"><xref:System.IdentityModel.SecurityTokenService.GetScope%2A>方法在方法之后从令牌颁发管道调用 <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> ，并且应返回 <xref:System.IdentityModel.Scope> 为传入请求配置的对象。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-302">The <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> method is called from the token issuance pipeline after the <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> method and should return a <xref:System.IdentityModel.Scope> object configured for the incoming request.</span></span> <span data-ttu-id="f1d9c-303"> (令牌颁发管道是在方法中实现的 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 。 ) <xref:System.IdentityModel.Scope> 对象封装与安全令牌请求关联的 RP (RST) 的信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-303">(The token issuance pipeline is implemented in the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.) The <xref:System.IdentityModel.Scope> object encapsulates information about the RP associated with the security token request (RST).</span></span> <span data-ttu-id="f1d9c-304">这包括有关要与 RP 一起使用的加密和签名凭据以及是否在响应中加密任何已颁发的令牌和/或对称密钥的信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-304">This includes information about the encrypting and signing credentials to be used with the RP and whether or not to encrypt any issued tokens and/or symmetric keys in the response.</span></span> <span data-ttu-id="f1d9c-305">在方法中执行的一些典型任务 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 是：</span><span class="sxs-lookup"><span data-stu-id="f1d9c-305">Some typical tasks performed in the <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> method are:</span></span>  
  
-   <span data-ttu-id="f1d9c-306">确定用于令牌的 RP 是否为可识别的 RP。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-306">Determine whether the RP for which the token is intended is a recognized RP.</span></span> <span data-ttu-id="f1d9c-307">完成此操作的方式取决于你的实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-307">How this is accomplished depends on your implementation.</span></span> <span data-ttu-id="f1d9c-308">如果目标 RP 不是此 STS 的有效 RP，此方法应引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-308">If the intended RP is not a valid RP for this STS, then the method should throw an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
-   <span data-ttu-id="f1d9c-309">确定要在响应中使用的签名凭据 (RSTR) 并 <xref:System.IdentityModel.Scope.SigningCredentials%2A> 相应地设置该属性。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-309">Determine the signing credentials to be used in the response (RSTR) and set the <xref:System.IdentityModel.Scope.SigningCredentials%2A> property accordingly.</span></span>  
  
-   <span data-ttu-id="f1d9c-310">确定是否应加密响应和/或任何包含的对称密钥以及要用于加密的凭据。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-310">Determine whether the response and/or any included symmetrical keys should be encrypted and the credentials to be used for encryption.</span></span> <span data-ttu-id="f1d9c-311">相应设置 <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> 、 <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> 和 <xref:System.IdentityModel.Scope.EncryptingCredentials%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-311">Set the <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>, <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>, and <xref:System.IdentityModel.Scope.EncryptingCredentials%2A> properties accordingly.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f1d9c-312">默认情况下， <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> 和 <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> 属性设置 `true` 为阻止 STS 颁发不安全的令牌。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-312">By default, the <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> and <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> properties are set `true` to prevent the STS from issuing tokens that are not secure.</span></span> <span data-ttu-id="f1d9c-313">建议不要 `false` 在生产环境中将这些属性设置为。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-313">It is recommended that these properties never be set to `false` in a production environment.</span></span>  
  
-   <span data-ttu-id="f1d9c-314">确定应该将响应返回到的地址。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-314">Determine the address to which the response should be returned.</span></span> <span data-ttu-id="f1d9c-315">请 <xref:System.IdentityModel.Scope.AppliesToAddress%2A> <xref:System.IdentityModel.Scope.ReplyToAddress%2A> 相应地设置或属性。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-315">Set either the <xref:System.IdentityModel.Scope.AppliesToAddress%2A> or <xref:System.IdentityModel.Scope.ReplyToAddress%2A> property accordingly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1d9c-316">本主题中使用的代码示例摘自 `Custom Token` 示例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-316">The code example that is used in this topic is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f1d9c-317">此示例提供了一些自定义类，使你能够处理 (SWT) 的简单 Web 令牌，并包括能够为 SWT 令牌提供服务的被动 STS 的实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-317">This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token.</span></span> <span data-ttu-id="f1d9c-318">有关如何实现活动 STS 的示例，请参阅 `Federation Metadata` 示例。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-318">For an example of how to implement an active STS, you can see the `Federation Metadata` sample.</span></span> <span data-ttu-id="f1d9c-319">有关这些示例以及可用于 WIF 的其他示例以及要从何处下载这些示例和其他示例的信息，请参阅 [WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-319">For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index).</span></span>  
  
 <span data-ttu-id="f1d9c-320">下面的代码示例演示 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-320">The following code example shows an implementation of the <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> method.</span></span> <span data-ttu-id="f1d9c-321">此实现将验证 RP 是否被 STS 识别，验证 <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> 请求中的地址并 <xref:System.IdentityModel.Scope.ReplyToAddress%2A?displayProperty=nameWithType> 相应地设置属性，并根据文件中硬编码的证书设置用于 RP 的签名和加密凭据。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-321">This implementation verifies that the RP is recognized by the STS, validates the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> address in the request and sets the <xref:System.IdentityModel.Scope.ReplyToAddress%2A?displayProperty=nameWithType> property accordingly, and sets the signing and encrypting credentials to use with the RP based on certificates that are hard-coded in the file.</span></span>  
  
 [!code-csharp[WIFCustomTokenSTS#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#4)]  
[!code-csharp[WIFCustomTokenSTS#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#5)]  
[!code-csharp[WIFCustomTokenSTS#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f1d9c-322">实现该 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类时，必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-322">You must override this method in your implementation of the <see cref="T:System.IdentityModel.SecurityTokenService" /> class.</span></span></para></block>
        <altmember cref="T:System.IdentityModel.Scope" />
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetSecurityTokenHandler">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.SecurityTokenHandler GetSecurityTokenHandler (string requestedTokenType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityTokenHandler GetSecurityTokenHandler(string requestedTokenType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSecurityTokenHandler (requestedTokenType As String) As SecurityTokenHandler" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::SecurityTokenHandler ^ GetSecurityTokenHandler(System::String ^ requestedTokenType);" />
      <MemberSignature Language="F#" Value="abstract member GetSecurityTokenHandler : string -&gt; System.IdentityModel.Tokens.SecurityTokenHandler&#xA;override this.GetSecurityTokenHandler : string -&gt; System.IdentityModel.Tokens.SecurityTokenHandler" Usage="securityTokenService.GetSecurityTokenHandler requestedTokenType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestedTokenType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestedTokenType"><span data-ttu-id="f1d9c-323">一个字符串，其中包含请求的令牌类型 URI。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-323">A string that contains the requested token type URI.</span></span></param>
        <summary><span data-ttu-id="f1d9c-324">获取适合保护指定类型的安全令牌的安全令牌处理程序。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-324">Gets the appropriate security token handler for issuing a security token of the specified type.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-325">表示用于创建发布的安全标志的标志处理程序的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-325">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that represents the token handler to be used for creating the issued security token.</span></span> <span data-ttu-id="f1d9c-326">如果请求的标记类型不受支持（没有为指定的标记类型配置处理程序），则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-326">Returns <see langword="null" /> if the requested token type is not supported (there is no handler configured for the specified token type).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-327">如果 `requestedTokenType` 是或空字符串，则在默认实现中 `null` ，将使用来自配置的默认标记类型。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-327">In the default implementation if `requestedTokenType` is `null` or an empty string, the default token type from configuration is used.</span></span> <span data-ttu-id="f1d9c-328">这由通过 <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType%2A> 属性访问的 STS 配置对象的属性指定 <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-328">This is specified by the <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType%2A> property of the STS configuration object accessed through the <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> property.</span></span>  
  
 <span data-ttu-id="f1d9c-329">此方法是从方法中实现的默认标记颁发管道调用的 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-329">This method is called from the default token issuance pipeline implemented in the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetTokenLifetime">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Protocols.WSTrust.Lifetime GetTokenLifetime (System.IdentityModel.Protocols.WSTrust.Lifetime requestLifetime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.Lifetime GetTokenLifetime(class System.IdentityModel.Protocols.WSTrust.Lifetime requestLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTokenLifetime (requestLifetime As Lifetime) As Lifetime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Protocols::WSTrust::Lifetime ^ GetTokenLifetime(System::IdentityModel::Protocols::WSTrust::Lifetime ^ requestLifetime);" />
      <MemberSignature Language="F#" Value="abstract member GetTokenLifetime : System.IdentityModel.Protocols.WSTrust.Lifetime -&gt; System.IdentityModel.Protocols.WSTrust.Lifetime&#xA;override this.GetTokenLifetime : System.IdentityModel.Protocols.WSTrust.Lifetime -&gt; System.IdentityModel.Protocols.WSTrust.Lifetime" Usage="securityTokenService.GetTokenLifetime requestLifetime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.Lifetime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestLifetime" Type="System.IdentityModel.Protocols.WSTrust.Lifetime" />
      </Parameters>
      <Docs>
        <param name="requestLifetime"><span data-ttu-id="f1d9c-330">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" />，表示所请求的生存周期。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-330">A <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> that represents the requested lifetime.</span></span></param>
        <summary><span data-ttu-id="f1d9c-331">获取颁发的令牌的生存期。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-331">Gets the lifetime for the issued token.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-332">一个表示授予生存期的 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-332">A <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> that represents the granted lifetime.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-333">此方法通常在到达 RST 的生存期内调用。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-333">This method is normally called with the lifetime that arrived in the RST.</span></span> <span data-ttu-id="f1d9c-334">在默认实现中，根据下表计算令牌生存期。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-334">In the default implementation, the token lifetime is calculated according to the following table.</span></span>  
  
|<span data-ttu-id="f1d9c-335">已在) 中创建 (</span><span class="sxs-lookup"><span data-stu-id="f1d9c-335">Created (in)</span></span>|<span data-ttu-id="f1d9c-336">) 过期 (</span><span class="sxs-lookup"><span data-stu-id="f1d9c-336">Expires (in)</span></span>|<span data-ttu-id="f1d9c-337">已在) 中创建 (</span><span class="sxs-lookup"><span data-stu-id="f1d9c-337">Created (in)</span></span>|<span data-ttu-id="f1d9c-338">) 过期 (</span><span class="sxs-lookup"><span data-stu-id="f1d9c-338">Expires (out)</span></span>|  
|--------------------|--------------------|--------------------|---------------------|  
|`null`|`null`|<xref:System.DateTime.UtcNow%2A?displayProperty=nameWithType>|<xref:System.DateTime.UtcNow%2A?displayProperty=nameWithType> + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f1d9c-339">C</span><span class="sxs-lookup"><span data-stu-id="f1d9c-339">C</span></span>|`null`|<span data-ttu-id="f1d9c-340">C</span><span class="sxs-lookup"><span data-stu-id="f1d9c-340">C</span></span>|<span data-ttu-id="f1d9c-341">C + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f1d9c-341">C + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=nameWithType></span></span>|  
|`null`|<span data-ttu-id="f1d9c-342">E</span><span class="sxs-lookup"><span data-stu-id="f1d9c-342">E</span></span>|<xref:System.DateTime.UtcNow%2A?displayProperty=nameWithType>|<span data-ttu-id="f1d9c-343">E</span><span class="sxs-lookup"><span data-stu-id="f1d9c-343">E</span></span>|  
|<span data-ttu-id="f1d9c-344">C</span><span class="sxs-lookup"><span data-stu-id="f1d9c-344">C</span></span>|<span data-ttu-id="f1d9c-345">E</span><span class="sxs-lookup"><span data-stu-id="f1d9c-345">E</span></span>|<span data-ttu-id="f1d9c-346">C</span><span class="sxs-lookup"><span data-stu-id="f1d9c-346">C</span></span>|<span data-ttu-id="f1d9c-347">E</span><span class="sxs-lookup"><span data-stu-id="f1d9c-347">E</span></span>|  
  
 <span data-ttu-id="f1d9c-348">此方法是从方法中实现的默认标记颁发管道调用的 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-348">This method is called from the default token issuance pipeline implemented in the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="Issue">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Issue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Issue(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Issue (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Issue(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Issue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Issue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Issue (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-349">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-349">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-350">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-350">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-351">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-351">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <summary><span data-ttu-id="f1d9c-352">发出安全令牌。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-352">Issues a security token.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-353">包含发布的安全标识的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-353">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that contains the issued security token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-354">此方法实现 WS-TRUST 规范中定义的问题绑定。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-354">This method implements the Issue binding defined in the WS-Trust specification.</span></span> <span data-ttu-id="f1d9c-355">方法的默认实现将 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 处理传入请求 (RST) 通过令牌颁发) 管道 (，并返回一个包含安全令牌的响应 (RSTR) ，其中包含具有相应声明的安全令牌，用来对请求者进行身份验证，并提供相应的例外。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-355">The default implementation of the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method processes the incoming request (RST) through a token issuance (claims issuance) pipeline and returns either a response (RSTR) that contains a security token with the appropriate claims to authenticate the requestor with the RP or an appropriate exception.</span></span> <span data-ttu-id="f1d9c-356">默认实现中的令牌颁发管道包含对类)  (的以下方法的调用 <xref:System.IdentityModel.SecurityTokenService> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-356">The token issuance pipeline in the default implementation consists of calls to the following methods (of the <xref:System.IdentityModel.SecurityTokenService> class).</span></span>  
  
1.  <span data-ttu-id="f1d9c-357"><xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>用于验证请求 (RST) 的方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-357">The <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> method to validate the request (RST).</span></span>  
  
2.  <span data-ttu-id="f1d9c-358"><xref:System.IdentityModel.SecurityTokenService.GetScope%2A>用于获取 <xref:System.IdentityModel.Scope> 对象的方法，该对象包含与请求关联的依赖方 (RP) 相关信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-358">The <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> method to get a <xref:System.IdentityModel.Scope> object that contains information about the relying party (RP) associated with the request.</span></span> <span data-ttu-id="f1d9c-359">必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-359">You must override this method.</span></span> <span data-ttu-id="f1d9c-360">如果 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 返回 `null` ， <xref:System.InvalidOperationException> 将引发。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-360">If <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> returns `null`, a <xref:System.InvalidOperationException> is thrown.</span></span>  
  
3.  <span data-ttu-id="f1d9c-361">方法，该 <xref:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor%2A> 方法基于 RST 和 <xref:System.IdentityModel.Scope> 上一步中返回的对象返回安全令牌说明符。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-361">The <xref:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor%2A> method to return a security token descriptor based on the RST and the <xref:System.IdentityModel.Scope> object returned in the previous step.</span></span> <span data-ttu-id="f1d9c-362">安全令牌描述符 (<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>) 包含有关可由标记处理程序使用的窗体中的请求的信息。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-362">The security token descriptor (<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>) contains information about the request in a form that can be used by a token handler.</span></span> <span data-ttu-id="f1d9c-363"><xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor%2A?displayProperty=nameWithType>属性设置为调用返回的描述符。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-363">The <xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor%2A?displayProperty=nameWithType> property is set to the descriptor returned by the call.</span></span> <span data-ttu-id="f1d9c-364">如果 `null` 返回，或者描述符的 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials%2A> 属性为 `null` ，则 <xref:System.InvalidOperationException> 会引发。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-364">If `null` is returned or if the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials%2A> property of the descriptor is `null`, an <xref:System.InvalidOperationException> is thrown.</span></span> <span data-ttu-id="f1d9c-365">如果 <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A?displayProperty=nameWithType> 属性为， `true` 但 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials%2A> 返回的描述符的属性为，则也会引发异常 `null` 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-365">The exception is also thrown if the <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A?displayProperty=nameWithType> property is `true` but the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials%2A> property on the returned descriptor is `null`.</span></span>  
  
4.  <span data-ttu-id="f1d9c-366"><xref:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler%2A>用于基于请求的令牌种类获取适当标记处理程序的方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-366">The <xref:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler%2A> method to get the appropriate token handler based on the kind of token requested.</span></span> <span data-ttu-id="f1d9c-367">如果 `null` 返回，将 <xref:System.NotImplementedException> 引发。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-367">If `null` is returned, a <xref:System.NotImplementedException> is thrown.</span></span>  
  
5.  <span data-ttu-id="f1d9c-368"><xref:System.IdentityModel.SecurityTokenService.GetIssuerName%2A>用于获取令牌的颁发者名称的方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-368">The <xref:System.IdentityModel.SecurityTokenService.GetIssuerName%2A> method to get the issuer name for the token.</span></span> <span data-ttu-id="f1d9c-369"><xref:System.InvalidOperationException>如果名称为或空，则引发 `null` ; 否则，将在 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName%2A> 描述符上设置属性。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-369">Throws an <xref:System.InvalidOperationException> if the name is `null` or empty; otherwise sets the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName%2A> property on the descriptor.</span></span>  
  
6.  <span data-ttu-id="f1d9c-370"><xref:System.IdentityModel.SecurityTokenService.GetTokenLifetime%2A>用于获取令牌生存期并在描述符上设置属性的方法 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-370">The <xref:System.IdentityModel.SecurityTokenService.GetTokenLifetime%2A> method to get the lifetime for the token and sets the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A> property on the descriptor.</span></span>  
  
7.  <span data-ttu-id="f1d9c-371"><xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>用于获取要包含在已颁发令牌中的证明令牌并在 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof%2A> 描述符上设置属性的方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-371">The <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A> method to get the proof token to include in the issued token and sets the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof%2A> property on the descriptor.</span></span>  
  
8.  <span data-ttu-id="f1d9c-372"><xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>用于获取要包含在已颁发令牌中的声明并在 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A> 描述符上设置属性的方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-372">The <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> method to get the claims to include in the issued token and sets the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A> property on the descriptor.</span></span> <span data-ttu-id="f1d9c-373">必须重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-373">You must override this method.</span></span>  
  
9. <span data-ttu-id="f1d9c-374"><xref:System.IdentityModel.SecurityTokenService.GetResponse%2A>用于创建响应 (RSTR) 的方法，其中包含已颁发的令牌。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-374">The <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> method to create a response (RSTR) that contains the issued token.</span></span>  
  
 <span data-ttu-id="f1d9c-375">您可以重写 <xref:System.IdentityModel.SecurityTokenService.Issue%2A> 方法以实现自定义令牌颁发管道; 但是，在开发和测试环境中通常不需要这样做 <xref:System.IdentityModel.SecurityTokenService> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-375">You can override the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method to implement a custom token issuance pipeline; however this is typically not necessary in the development and test environments for which most custom implementations of the <xref:System.IdentityModel.SecurityTokenService> class are intended.</span></span> <span data-ttu-id="f1d9c-376">在许多情况下，重写 <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> 和 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> 方法，并选择性地重写 <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> 方法，以便为你的环境提供可维护的 STS。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-376">In many of these cases you override the <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> and <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> methods and optionally override the <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> method  to provide a serviceable STS for your environment.</span></span> <span data-ttu-id="f1d9c-377">如果需要进一步的自定义，则通常可以通过重写方法来提供此方法，这些方法可实现上面列出的默认令牌颁发管道的每个阶段。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-377">If further customization is necessary you can often provide it by overriding the methods that implement each stage of the default token issuance pipeline listed above.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Principal">
      <MemberSignature Language="C#" Value="public System.Security.Claims.ClaimsPrincipal Principal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Claims.ClaimsPrincipal Principal" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.Principal" />
      <MemberSignature Language="VB.NET" Value="Public Property Principal As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Claims::ClaimsPrincipal ^ Principal { System::Security::Claims::ClaimsPrincipal ^ get(); void set(System::Security::Claims::ClaimsPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Principal : System.Security.Claims.ClaimsPrincipal with get, set" Usage="System.IdentityModel.SecurityTokenService.Principal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1d9c-378">获取或设置与当前实例关联的主体。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-378">Gets or sets the principal associated with the current instance.</span></span></summary>
        <value><span data-ttu-id="f1d9c-379">表示当前主体的 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-379">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the current principal.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Renew">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Renew (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Renew(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Renew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Renew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Renew (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-380">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-380">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-381">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-381">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-382">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-382">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <summary><span data-ttu-id="f1d9c-383">在派生类中重写时，处理 WS 信任续订请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-383">When overridden in a derived class, processes a WS-Trust Renew request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-384">表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-384">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-385">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-385">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Protocols.WSTrust.RequestSecurityToken Request { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken Request" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.Request" />
      <MemberSignature Language="VB.NET" Value="Public Property Request As RequestSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ Request { System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ get(); void set(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Request : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken with get, set" Usage="System.IdentityModel.SecurityTokenService.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1d9c-386">获取或设置要与当前实例关联的安全性标记请求 （RST) 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-386">Gets or sets the security token request (RST) associated with the current instance.</span></span></summary>
        <value><span data-ttu-id="f1d9c-387">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，包含请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-387">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that contains the request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scope">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Scope Scope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Scope Scope" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.Scope" />
      <MemberSignature Language="VB.NET" Value="Public Property Scope As Scope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Scope ^ Scope { System::IdentityModel::Scope ^ get(); void set(System::IdentityModel::Scope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Scope : System.IdentityModel.Scope with get, set" Usage="System.IdentityModel.SecurityTokenService.Scope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Scope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1d9c-388">获取或设置与当前实例关联的范围。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-388">Gets or sets the scope associated with the current instance.</span></span></summary>
        <value><span data-ttu-id="f1d9c-389"><see cref="T:System.IdentityModel.Scope" /> 表示令牌颁发请求的配置。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-389">A <see cref="T:System.IdentityModel.Scope" /> that represents the configuration for the token issuance request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityTokenDescriptor">
      <MemberSignature Language="C#" Value="protected System.IdentityModel.Tokens.SecurityTokenDescriptor SecurityTokenDescriptor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenDescriptor SecurityTokenDescriptor" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />
      <MemberSignature Language="VB.NET" Value="Protected Property SecurityTokenDescriptor As SecurityTokenDescriptor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::IdentityModel::Tokens::SecurityTokenDescriptor ^ SecurityTokenDescriptor { System::IdentityModel::Tokens::SecurityTokenDescriptor ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityTokenDescriptor : System.IdentityModel.Tokens.SecurityTokenDescriptor with get, set" Usage="System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1d9c-390">获取或设置与当前 <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> 实例关联的数据。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-390">Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> associated with the current instance.</span></span></summary>
        <value><span data-ttu-id="f1d9c-391">与当前实例关联的安全性标记请求 （RST) 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-391">The security token descriptor that is associated with the current instance.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1d9c-392">尝试将该属性设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-392">An attempt to set the property to <see langword="null" /> occurs.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SecurityTokenServiceConfiguration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityTokenServiceConfiguration As SecurityTokenServiceConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Configuration::SecurityTokenServiceConfiguration ^ SecurityTokenServiceConfiguration { System::IdentityModel::Configuration::SecurityTokenServiceConfiguration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityTokenServiceConfiguration : System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" Usage="System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Configuration.SecurityTokenServiceConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1d9c-393">获取实例所有者的配置。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-393">Gets the owner configuration instance.</span></span></summary>
        <value><span data-ttu-id="f1d9c-394">一个 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />，包含当前实例的配置。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-394">A <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> that contains the configuration for the current instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Validate (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Validate(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Validate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Validate (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="f1d9c-395">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-395">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</span></span></param>
        <param name="request"><span data-ttu-id="f1d9c-396">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-396">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request.</span></span> <span data-ttu-id="f1d9c-397">这包括请求消息和其他客户端相关信息，如授权上下文。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-397">This includes the request message as well as other client related information such as authorization context.</span></span></param>
        <summary><span data-ttu-id="f1d9c-398">在派生类中重写时，处理 WS 信任验证请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-398">When overridden in a derived class, processes a WS-Trust Validate request.</span></span></summary>
        <returns><span data-ttu-id="f1d9c-399">表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-399">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-400">此方法的默认实现将引发 <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-400">The default implementation of this method throws an <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateRequest">
      <MemberSignature Language="C#" Value="protected virtual void ValidateRequest (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateRequest(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateRequest (request As RequestSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateRequest(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member ValidateRequest : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; unit&#xA;override this.ValidateRequest : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; unit" Usage="securityTokenService.ValidateRequest request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f1d9c-401">一个表示请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-401">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the request.</span></span></param>
        <summary><span data-ttu-id="f1d9c-402">确认该事例 (RST) 封装的安全标记的请求。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-402">Validates the security token request (RST) encapsulated by this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1d9c-403"><xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>方法从令牌颁发管道调用， (<xref:System.IdentityModel.SecurityTokenService.Issue%2A> 方法) 验证传入的 RST。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-403">The <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> method is called from the token issuance pipeline (the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method) to validate the incoming RST.</span></span> <span data-ttu-id="f1d9c-404">根据 STS (策略) 的要求对 RST 进行验证，如果无效，则会引发相应的异常。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-404">The RST is validated against the requirements (policy) of the STS and an appropriate exception is thrown if it is not valid.</span></span>  
  
 <span data-ttu-id="f1d9c-405">类的默认实现 <xref:System.IdentityModel.SecurityTokenService> 仅支持 RST RSTR 模式，并且只有 ws-trust 规范的问题绑定 (<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType%2A> 必须将请求的属性设置为 <xref:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue?displayProperty=nameWithType>) 。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-405">The default implementation of the <xref:System.IdentityModel.SecurityTokenService> class supports only the RST-RSTR pattern and only the Issue binding of the WS-Trust specification (the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType%2A> property of the request must be set to <xref:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="f1d9c-406">此方法的默认实现将强制执行这些要求 (，并在) 的异常部分中注明。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-406">The default implementation of this method enforces these requirements (and others noted in the exceptions section).</span></span> <span data-ttu-id="f1d9c-407">如果必须为自定义 STS 强制执行不同的验证要求，则可以重写此方法。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-407">You can override this method if you must enforce different validation requirements for your custom STS.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException"><span data-ttu-id="f1d9c-408"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-408"><paramref name="request" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f1d9c-409">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1d9c-409">-or-</span></span> 
<span data-ttu-id="f1d9c-410">请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType" /> 属性未设置为 <see cref="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue" />。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-410">The <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType" /> property of the request is not set to <see cref="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue" />.</span></span>  
  
<span data-ttu-id="f1d9c-411">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1d9c-411">-or-</span></span> 
<span data-ttu-id="f1d9c-412">请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> 属性不是在 <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> 类中定义的 <see langword="null" /> 或某个常数。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-412">The <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> property of the request is not <see langword="null" /> or one of the constants defined in the <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> class.</span></span>  
  
<span data-ttu-id="f1d9c-413">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1d9c-413">-or-</span></span> 
<span data-ttu-id="f1d9c-414">请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> 是 <see cref="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer" />，并且 <see langword="KeySize" /> 元素存在，但其值不为零。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-414">The <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> of the request is <see cref="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer" /> and the <see langword="KeySize" /> element is present, but its value is not equal to zero.</span></span></exception>
        <exception cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException"><span data-ttu-id="f1d9c-415">STS 不支持请求令牌的类型 (基于请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType" /> 属性的值)。</span><span class="sxs-lookup"><span data-stu-id="f1d9c-415">The STS does not support the request token type (based on the value of the <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType" /> property of the request).</span></span></exception>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
  </Members>
</Type>
