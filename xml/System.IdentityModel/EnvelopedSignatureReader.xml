<Type Name="EnvelopedSignatureReader" FullName="System.IdentityModel.EnvelopedSignatureReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0d33741c968a49e886a0e0f95e1c2a1cb28d9697" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78701806" /></Metadata><TypeSignature Language="C#" Value="public sealed class EnvelopedSignatureReader : System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnvelopedSignatureReader extends System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.EnvelopedSignatureReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnvelopedSignatureReader&#xA;Inherits DelegatingXmlDictionaryReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnvelopedSignatureReader sealed : System::IdentityModel::DelegatingXmlDictionaryReader" />
  <TypeSignature Language="F#" Value="type EnvelopedSignatureReader = class&#xA;    inherit DelegatingXmlDictionaryReader" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.DelegatingXmlDictionaryReader</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="82a4c-101">对指向被包封签名的 XML 的读者进行包装，以提供可用以读取内容的读取器，而不必处理该签名。</span><span class="sxs-lookup"><span data-stu-id="82a4c-101">Wraps a reader that is pointing to enveloped signed XML to provide a reader that can be used to read the content without having to process the signature.</span></span> <span data-ttu-id="82a4c-102">当信封的最后一个元素读取时，该签名自动验证。</span><span class="sxs-lookup"><span data-stu-id="82a4c-102">The signature is automatically validated when the last element of the envelope is read.</span></span> <span data-ttu-id="82a4c-103">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="82a4c-103">This class cannot be inherited.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82a4c-104">初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82a4c-104">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader, securityTokenSerializer As SecurityTokenSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="82a4c-105">指向被包封签名的 XML 的读者。</span><span class="sxs-lookup"><span data-stu-id="82a4c-105">A reader that is pointing to the enveloped signed XML.</span></span></param>
        <param name="securityTokenSerializer"><span data-ttu-id="82a4c-106">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</span><span class="sxs-lookup"><span data-stu-id="82a4c-106">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</span></span></param>
        <summary><span data-ttu-id="82a4c-107">使用指定读取器和标记程序初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82a4c-107">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader and security token serializer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82a4c-108"><xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>用以下附加参数调用构造函数：</span><span class="sxs-lookup"><span data-stu-id="82a4c-108">The <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor is invoked with the following additional parameters:</span></span>  
  
|<span data-ttu-id="82a4c-109">参数名称</span><span class="sxs-lookup"><span data-stu-id="82a4c-109">Parameter Name</span></span>|<span data-ttu-id="82a4c-110">“值”</span><span class="sxs-lookup"><span data-stu-id="82a4c-110">Value</span></span>|  
|--------------------|-----------|  
|`signingTokenResolver`|`null`|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82a4c-111"><paramref name="reader" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-111"><paramref name="reader" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82a4c-112">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82a4c-112">-or-</span></span> 
 <span data-ttu-id="82a4c-113"><paramref name="securityTokenSerializer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-113"><paramref name="securityTokenSerializer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader, securityTokenSerializer As SecurityTokenSerializer, signingTokenResolver As SecurityTokenResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer, signingTokenResolver)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="82a4c-114">指向被包封签名的 XML 的读者。</span><span class="sxs-lookup"><span data-stu-id="82a4c-114">A reader that is pointing to the enveloped signed XML.</span></span></param>
        <param name="securityTokenSerializer"><span data-ttu-id="82a4c-115">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</span><span class="sxs-lookup"><span data-stu-id="82a4c-115">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</span></span></param>
        <param name="signingTokenResolver"><span data-ttu-id="82a4c-116">标记解析器被用于解决签名令牌。</span><span class="sxs-lookup"><span data-stu-id="82a4c-116">The token resolver to be used to resolve the signing token.</span></span> <span data-ttu-id="82a4c-117"><see langword="null" /> 指定应使用默认安全令牌解析器。</span><span class="sxs-lookup"><span data-stu-id="82a4c-117"><see langword="null" /> specifies that a default security token resolver should be used.</span></span></param>
        <summary><span data-ttu-id="82a4c-118">使用指定读取器、安全令牌序列化程序和令牌解析器初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82a4c-118">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader, security token serializer, and token resolver.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82a4c-119"><xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>用以下附加参数调用构造函数：</span><span class="sxs-lookup"><span data-stu-id="82a4c-119">The <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor is invoked with the following additional parameters:</span></span>  
  
|<span data-ttu-id="82a4c-120">参数名称</span><span class="sxs-lookup"><span data-stu-id="82a4c-120">Parameter Name</span></span>|<span data-ttu-id="82a4c-121">“值”</span><span class="sxs-lookup"><span data-stu-id="82a4c-121">Value</span></span>|  
|--------------------|-----------|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82a4c-122"><paramref name="reader" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-122"><paramref name="reader" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82a4c-123">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82a4c-123">-or-</span></span> 
 <span data-ttu-id="82a4c-124"><paramref name="securityTokenSerializer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-124"><paramref name="securityTokenSerializer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader, securityTokenSerializer As SecurityTokenSerializer, signingTokenResolver As SecurityTokenResolver, requireSignature As Boolean, automaticallyReadSignature As Boolean, resolveIntrinsicSigningKeys As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer * System.IdentityModel.Selectors.SecurityTokenResolver * bool * bool * bool -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer, signingTokenResolver, requireSignature, automaticallyReadSignature, resolveIntrinsicSigningKeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
        <Parameter Name="requireSignature" Type="System.Boolean" />
        <Parameter Name="automaticallyReadSignature" Type="System.Boolean" />
        <Parameter Name="resolveIntrinsicSigningKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="82a4c-125">指向被包封签名的 XML 的读者。</span><span class="sxs-lookup"><span data-stu-id="82a4c-125">A reader that is pointing to the enveloped signed XML.</span></span></param>
        <param name="securityTokenSerializer"><span data-ttu-id="82a4c-126">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</span><span class="sxs-lookup"><span data-stu-id="82a4c-126">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</span></span></param>
        <param name="signingTokenResolver"><span data-ttu-id="82a4c-127">标记解析器被用于解决签名令牌。</span><span class="sxs-lookup"><span data-stu-id="82a4c-127">The token resolver to be used to resolve the signing token.</span></span> <span data-ttu-id="82a4c-128"><see langword="null" /> 指定应使用默认安全令牌解析器。</span><span class="sxs-lookup"><span data-stu-id="82a4c-128"><see langword="null" /> specifies that a default security token resolver should be used.</span></span></param>
        <param name="requireSignature"><span data-ttu-id="82a4c-129">如果该签名是必需的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-129"><see langword="true" /> if the signature is required; otherwise, <see langword="false" />.</span></span></param>
        <param name="automaticallyReadSignature"><span data-ttu-id="82a4c-130">如果应读取前面，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-130"><see langword="true" /> if the signature should be read; otherwise, <see langword="false" />.</span></span></param>
        <param name="resolveIntrinsicSigningKeys"><span data-ttu-id="82a4c-131">如果应解决内部签名密钥，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-131"><see langword="true" /> if intrinsic signing keys should be resolved; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="82a4c-132">使用指定读取器、安全令牌序列化程序、令牌解析器和行为初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82a4c-132">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader, security token serializer, token resolver, and behavior.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82a4c-133"><paramref name="reader" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-133"><paramref name="reader" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82a4c-134">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82a4c-134">-or-</span></span> 
 <span data-ttu-id="82a4c-135"><paramref name="securityTokenSerializer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-135"><paramref name="securityTokenSerializer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="envelopedSignatureReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="envelopedSignatureReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82a4c-136">从流中读取下一个节点。</span><span class="sxs-lookup"><span data-stu-id="82a4c-136">Reads the next node from the stream.</span></span></summary>
        <returns><span data-ttu-id="82a4c-137">如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-137"><see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82a4c-138">如果在 `requireSignature` 构造函数中指定了参数，则检查是否已到达信封的末尾并验证签名 `true` 。</span><span class="sxs-lookup"><span data-stu-id="82a4c-138">Checks whether the end of the envelope is reached and validates the signature if the `requireSignature` parameter was specified `true` in the constructor.</span></span> <span data-ttu-id="82a4c-139">如果读取器定位在某个 `<Signature>` 元素上，则在 `automaticallyReadSignature` `true` 构造函数中指定该参数时，将读取整个签名。</span><span class="sxs-lookup"><span data-stu-id="82a4c-139">If the reader gets positioned on a `<Signature>` element, the whole signature is read in if the `automaticallyReadSignature` parameter was specified `true` in the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningCredentials">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SigningCredentials SigningCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.EnvelopedSignatureReader.SigningCredentials" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SigningCredentials As SigningCredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SigningCredentials ^ SigningCredentials { System::IdentityModel::Tokens::SigningCredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SigningCredentials : System.IdentityModel.Tokens.SigningCredentials" Usage="System.IdentityModel.EnvelopedSignatureReader.SigningCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SigningCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82a4c-140">获取所用的署名，该信封使用后该署名认证时的签名凭据。</span><span class="sxs-lookup"><span data-stu-id="82a4c-140">Gets the signing credentials that are used in the signature, after the envelope is consumed and when the signature is validated.</span></span></summary>
        <value><span data-ttu-id="82a4c-141">签名凭据。</span><span class="sxs-lookup"><span data-stu-id="82a4c-141">The signing credentials.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadSignature">
      <MemberSignature Language="C#" Value="public bool TryReadSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.TryReadSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadSignature();" />
      <MemberSignature Language="F#" Value="member this.TryReadSignature : unit -&gt; bool" Usage="envelopedSignatureReader.TryReadSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82a4c-142">如果读者正在读取 <see langword="&lt;Signature&gt;" /> 元素，则读取签名。</span><span class="sxs-lookup"><span data-stu-id="82a4c-142">Reads the signature if the reader is currently positioned at a <see langword="&lt;Signature&gt;" /> element.</span></span></summary>
        <returns><span data-ttu-id="82a4c-143">如果该前面已成功读取，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82a4c-143"><see langword="true" /> if the signature was successfully read; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82a4c-144">如果读取器当前定位在某个 `<Signature>` 元素上，则调用 <xref:System.IdentityModel.EnvelopedSignatureReader.Read%2A> 方法来读取签名。</span><span class="sxs-lookup"><span data-stu-id="82a4c-144">If the reader is currently positioned on a `<Signature>` element, invokes the <xref:System.IdentityModel.EnvelopedSignatureReader.Read%2A> method to read the signature.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
