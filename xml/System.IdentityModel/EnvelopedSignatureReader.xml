<Type Name="EnvelopedSignatureReader" FullName="System.IdentityModel.EnvelopedSignatureReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0d33741c968a49e886a0e0f95e1c2a1cb28d9697" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78701806" /></Metadata><TypeSignature Language="C#" Value="public sealed class EnvelopedSignatureReader : System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnvelopedSignatureReader extends System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.EnvelopedSignatureReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnvelopedSignatureReader&#xA;Inherits DelegatingXmlDictionaryReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnvelopedSignatureReader sealed : System::IdentityModel::DelegatingXmlDictionaryReader" />
  <TypeSignature Language="F#" Value="type EnvelopedSignatureReader = class&#xA;    inherit DelegatingXmlDictionaryReader" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.DelegatingXmlDictionaryReader</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>对指向被包封签名的 XML 的读者进行包装，以提供可用以读取内容的读取器，而不必处理该签名。 当信封的最后一个元素读取时，该签名自动验证。 此类不能被继承。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader, securityTokenSerializer As SecurityTokenSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
      </Parameters>
      <Docs>
        <param name="reader">指向被包封签名的 XML 的读者。</param>
        <param name="securityTokenSerializer">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</param>
        <summary>使用指定读取器和标记程序初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>用以下附加参数调用构造函数：  
  
|参数名称|“值”|  
|--------------------|-----------|  
|`signingTokenResolver`|`null`|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="securityTokenSerializer" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader, securityTokenSerializer As SecurityTokenSerializer, signingTokenResolver As SecurityTokenResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer, signingTokenResolver)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">指向被包封签名的 XML 的读者。</param>
        <param name="securityTokenSerializer">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</param>
        <param name="signingTokenResolver">标记解析器被用于解决签名令牌。 <see langword="null" /> 指定应使用默认安全令牌解析器。</param>
        <summary>使用指定读取器、安全令牌序列化程序和令牌解析器初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>用以下附加参数调用构造函数：  
  
|参数名称|“值”|  
|--------------------|-----------|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="securityTokenSerializer" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader, securityTokenSerializer As SecurityTokenSerializer, signingTokenResolver As SecurityTokenResolver, requireSignature As Boolean, automaticallyReadSignature As Boolean, resolveIntrinsicSigningKeys As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer * System.IdentityModel.Selectors.SecurityTokenResolver * bool * bool * bool -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer, signingTokenResolver, requireSignature, automaticallyReadSignature, resolveIntrinsicSigningKeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
        <Parameter Name="requireSignature" Type="System.Boolean" />
        <Parameter Name="automaticallyReadSignature" Type="System.Boolean" />
        <Parameter Name="resolveIntrinsicSigningKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">指向被包封签名的 XML 的读者。</param>
        <param name="securityTokenSerializer">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</param>
        <param name="signingTokenResolver">标记解析器被用于解决签名令牌。 <see langword="null" /> 指定应使用默认安全令牌解析器。</param>
        <param name="requireSignature">如果该签名是必需的，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="automaticallyReadSignature">如果应读取前面，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="resolveIntrinsicSigningKeys">如果应解决内部签名密钥，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>使用指定读取器、安全令牌序列化程序、令牌解析器和行为初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="securityTokenSerializer" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="envelopedSignatureReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="envelopedSignatureReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从流中读取下一个节点。</summary>
        <returns>如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在 `requireSignature` 构造函数中指定了参数，则检查是否已到达信封的末尾并验证签名 `true` 。 如果读取器定位在某个 `<Signature>` 元素上，则在 `automaticallyReadSignature` `true` 构造函数中指定该参数时，将读取整个签名。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningCredentials">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SigningCredentials SigningCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.EnvelopedSignatureReader.SigningCredentials" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SigningCredentials As SigningCredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SigningCredentials ^ SigningCredentials { System::IdentityModel::Tokens::SigningCredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SigningCredentials : System.IdentityModel.Tokens.SigningCredentials" Usage="System.IdentityModel.EnvelopedSignatureReader.SigningCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SigningCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取所用的署名，该信封使用后该署名认证时的签名凭据。</summary>
        <value>签名凭据。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadSignature">
      <MemberSignature Language="C#" Value="public bool TryReadSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.TryReadSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadSignature();" />
      <MemberSignature Language="F#" Value="member this.TryReadSignature : unit -&gt; bool" Usage="envelopedSignatureReader.TryReadSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果读者正在读取 <see langword="&lt;Signature&gt;" /> 元素，则读取签名。</summary>
        <returns>如果该前面已成功读取，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果读取器当前定位在某个 `<Signature>` 元素上，则调用 <xref:System.IdentityModel.EnvelopedSignatureReader.Read%2A> 方法来读取签名。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
