<Type Name="ManagementObjectCollection" FullName="System.Management.ManagementObjectCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c13ceaa9141ae86d5d43b95b0cb5cb6e6a367bb" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953968" /></Metadata><TypeSignature Language="C#" Value="public class ManagementObjectCollection : IDisposable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManagementObjectCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Management.ManagementObjectCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ManagementObjectCollection&#xA;Implements ICollection, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementObjectCollection : IDisposable, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ManagementObjectCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Management</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="850a4-101">表示通过 WMI 检索到的管理对象的不同集合。</span><span class="sxs-lookup"><span data-stu-id="850a4-101">Represents different collections of management objects retrieved through WMI.</span></span> <span data-ttu-id="850a4-102">此集合中的对象为从 <see cref="T:System.Management.ManagementBaseObject" /> 派生的类型，包括 <see cref="T:System.Management.ManagementObject" /> 和 <see cref="T:System.Management.ManagementClass" />。</span><span class="sxs-lookup"><span data-stu-id="850a4-102">The objects in this collection are of <see cref="T:System.Management.ManagementBaseObject" />-derived types, including <see cref="T:System.Management.ManagementObject" /> and <see cref="T:System.Management.ManagementClass" />.</span></span> <span data-ttu-id="850a4-103">通过 <see cref="T:System.Management.ManagementObjectSearcher" /> 对象执行 WMI 查询，或者通过表示指定类型的 <see cref="T:System.Management.ManagementClass" /> 检索该类型管理对象的枚举，可得到此集合。</span><span class="sxs-lookup"><span data-stu-id="850a4-103">The collection can be the result of a WMI query executed through a <see cref="T:System.Management.ManagementObjectSearcher" />, or an enumeration of management objects of a specified type retrieved through a <see cref="T:System.Management.ManagementClass" /> representing that type.</span></span> <span data-ttu-id="850a4-104">此外，这也可能是以指定方式与特定管理对象相关的管理对象集合 — 在这种情况下，此集合可以通过诸如 <see cref="M:System.Management.ManagementObject.GetRelated" /> 之类的方法检索到。</span><span class="sxs-lookup"><span data-stu-id="850a4-104">In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <see cref="M:System.Management.ManagementObject.GetRelated" />.</span></span> <span data-ttu-id="850a4-105">此集合可以通过 <see cref="T:System.Management.ManagementObjectCollection.ManagementObjectEnumerator" /> 遍历，并且能够针对各种管理任务对集合中的对象进行检查或操作。</span><span class="sxs-lookup"><span data-stu-id="850a4-105">The collection can be walked using the <see cref="T:System.Management.ManagementObjectCollection.ManagementObjectEnumerator" /> and objects in it can be inspected or manipulated for various management tasks.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="850a4-106">将集合复制到数组。</span><span class="sxs-lookup"><span data-stu-id="850a4-106">Copies the collection to an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="managementObjectCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="850a4-107">要复制到的数组。</span><span class="sxs-lookup"><span data-stu-id="850a4-107">An array to copy to.</span></span></param>
        <param name="index"><span data-ttu-id="850a4-108">从其开始的索引。</span><span class="sxs-lookup"><span data-stu-id="850a4-108">The index to start from.</span></span></param>
        <summary><span data-ttu-id="850a4-109">将集合复制到数组。</span><span class="sxs-lookup"><span data-stu-id="850a4-109">Copies the collection to an array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-110">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-110">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-111">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-111">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-112">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-112">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-113">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-113">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Management.ManagementBaseObject[] objectCollection, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Management.ManagementBaseObject[] objectCollection, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (objectCollection As ManagementBaseObject(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Management::ManagementBaseObject ^&gt; ^ objectCollection, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Management.ManagementBaseObject[] * int -&gt; unit" Usage="managementObjectCollection.CopyTo (objectCollection, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectCollection" Type="System.Management.ManagementBaseObject[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectCollection"><span data-ttu-id="850a4-114">目标数组。</span><span class="sxs-lookup"><span data-stu-id="850a4-114">The target array.</span></span></param>
        <param name="index"><span data-ttu-id="850a4-115">从其开始的索引。</span><span class="sxs-lookup"><span data-stu-id="850a4-115">The index to start from.</span></span></param>
        <summary><span data-ttu-id="850a4-116">将集合中的项复制到一个 <see cref="T:System.Management.ManagementBaseObject" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="850a4-116">Copies the items in the collection to a <see cref="T:System.Management.ManagementBaseObject" /> array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-117">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-117">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-118">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-118">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-119">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-119">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-120">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-120">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Management.ManagementObjectCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Management.ManagementObjectCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="850a4-121">获取指示集合中的对象数的值。</span><span class="sxs-lookup"><span data-stu-id="850a4-121">Gets a value indicating the number of objects in the collection.</span></span></summary>
        <value><span data-ttu-id="850a4-122">集合中 对象的数目。</span><span class="sxs-lookup"><span data-stu-id="850a4-122">The number of objects in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850a4-123">此属性的成本非常高，需要对集合的所有成员进行枚举。</span><span class="sxs-lookup"><span data-stu-id="850a4-123">This property is very expensive - it requires that all members of the collection be enumerated.</span></span>  
  
## <a name="property-value"></a><span data-ttu-id="850a4-124">属性值</span><span class="sxs-lookup"><span data-stu-id="850a4-124">Property Value</span></span>  
 <span data-ttu-id="850a4-125">集合中 对象的数目。</span><span class="sxs-lookup"><span data-stu-id="850a4-125">The number of objects in the collection.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-126">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-126">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-127">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-127">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-128">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-128">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-129">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-129">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="managementObjectCollection.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="850a4-130">释放与该对象关联的资源。</span><span class="sxs-lookup"><span data-stu-id="850a4-130">Releases resources associated with this object.</span></span> <span data-ttu-id="850a4-131">调用该方法后，尝试使用该对象将导致引发 <see cref="T:System.ObjectDisposedException" />。</span><span class="sxs-lookup"><span data-stu-id="850a4-131">After this method has been called, an attempt to use this object will result in an <see cref="T:System.ObjectDisposedException" /> being thrown.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-132">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-132">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-133">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-133">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-134">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-134">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-135">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-135">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IDisposable.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ManagementObjectCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ManagementObjectCollection ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="managementObjectCollection.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="850a4-136">处置对象所保留的资源。</span><span class="sxs-lookup"><span data-stu-id="850a4-136">Disposes of resources the object is holding.</span></span> <span data-ttu-id="850a4-137">这是该对象的析构函数。</span><span class="sxs-lookup"><span data-stu-id="850a4-137">This is the destructor for the object.</span></span> <span data-ttu-id="850a4-138">使用析构函数语法表示终结器。</span><span class="sxs-lookup"><span data-stu-id="850a4-138">Finalizers are expressed using destructor syntax.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-139">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-139">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-140">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-140">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-141">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-141">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-142">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-142">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Management.ManagementObjectCollection.ManagementObjectEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.ManagementObjectCollection/ManagementObjectEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ManagementObjectCollection.ManagementObjectEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Management::ManagementObjectCollection::ManagementObjectEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Management.ManagementObjectCollection.ManagementObjectEnumerator" Usage="managementObjectCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.ManagementObjectCollection+ManagementObjectEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="850a4-143">返回集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="850a4-143">Returns the enumerator for the collection.</span></span></summary>
        <returns><span data-ttu-id="850a4-144">一个可用于遍历集合的<see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="850a4-144">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850a4-145">只能通过只进枚举器一次来循环访问（就像C#在 Visual Basic .net `For Each` 语句或 `For` 语句中）。</span><span class="sxs-lookup"><span data-stu-id="850a4-145">You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time.</span></span> <span data-ttu-id="850a4-146">包含实例的内存由 WMI 释放，因此无法倒带枚举器。</span><span class="sxs-lookup"><span data-stu-id="850a4-146">The memory containing the instances is released by WMI so that the enumerator cannot be rewound.</span></span> <span data-ttu-id="850a4-147">因此，不能使用 <xref:System.Management.ManagementObjectCollection.Count%2A> 方法，因为它需要倒带枚举器。</span><span class="sxs-lookup"><span data-stu-id="850a4-147">Therefore, the <xref:System.Management.ManagementObjectCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.</span></span>  
  
 <span data-ttu-id="850a4-148">与传统枚举器相比，只进枚举器的速度要快得多，使用的内存更少，但它们不允许调用 <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>。</span><span class="sxs-lookup"><span data-stu-id="850a4-148">Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>.</span></span>  
  
 <span data-ttu-id="850a4-149">如果枚举数为可回退，则集合中的对象将可供多个枚举使用。</span><span class="sxs-lookup"><span data-stu-id="850a4-149">If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-150">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-150">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-151">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-151">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-152">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-152">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-153">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-153">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Management.ManagementObjectCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Management.ManagementObjectCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="850a4-154">获取一个值，它指示对象是否已同步（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="850a4-154">Gets a value that indicates whether the object is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="850a4-155"><see langword="true" /> 如果对象已同步，则为; 否则为。否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="850a4-155"><see langword="true" /> if the object is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="property-value"></a><span data-ttu-id="850a4-156">属性值</span><span class="sxs-lookup"><span data-stu-id="850a4-156">Property Value</span></span>  
 <span data-ttu-id="850a4-157">`true`，如果对象已同步，则为; 否则 `false`。</span><span class="sxs-lookup"><span data-stu-id="850a4-157">`true`, if the object is synchronized, otherwise `false`.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-158">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-158">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-159">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-159">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-160">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-160">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-161">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-161">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Management.ManagementObjectCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Management.ManagementObjectCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="850a4-162">获取要用于同步的对象。</span><span class="sxs-lookup"><span data-stu-id="850a4-162">Gets the object to be used for synchronization.</span></span></summary>
        <value><span data-ttu-id="850a4-163">可用于同步的对象。</span><span class="sxs-lookup"><span data-stu-id="850a4-163">An object that can be used for synchronization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="property-value"></a><span data-ttu-id="850a4-164">属性值</span><span class="sxs-lookup"><span data-stu-id="850a4-164">Property Value</span></span>  
 <span data-ttu-id="850a4-165">要用于同步的对象。</span><span class="sxs-lookup"><span data-stu-id="850a4-165">The object to be used for synchronization.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="850a4-166">.NET Framework 安全性</span><span class="sxs-lookup"><span data-stu-id="850a4-166">.NET Framework Security</span></span>  
 <span data-ttu-id="850a4-167">对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="850a4-167">Full trust for the immediate caller.</span></span> <span data-ttu-id="850a4-168">部分信任的程式碼無法使用此成員。</span><span class="sxs-lookup"><span data-stu-id="850a4-168">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="850a4-169">有关详细信息，请参阅[从部分受信任的代码使用库](/dotnet/framework/misc/using-libraries-from-partially-trusted-code)。</span><span class="sxs-lookup"><span data-stu-id="850a4-169">For more information, see [Using Libraries from Partially Trusted Code](/dotnet/framework/misc/using-libraries-from-partially-trusted-code).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="managementObjectCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="850a4-170">返回循环访问 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Management.ManagementObjectCollection" />。</span><span class="sxs-lookup"><span data-stu-id="850a4-170">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Management.ManagementObjectCollection" />.</span></span></summary>
        <returns><span data-ttu-id="850a4-171">一个针对 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Management.ManagementObjectCollection" />。</span><span class="sxs-lookup"><span data-stu-id="850a4-171">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Management.ManagementObjectCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850a4-172">[Visual Basic， C# ]</span><span class="sxs-lookup"><span data-stu-id="850a4-172">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="850a4-173">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="850a4-173">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="850a4-174">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="850a4-174">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="850a4-175">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="850a4-175">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="850a4-176">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="850a4-176">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="850a4-177"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="850a4-177"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="850a4-178">在此位置，调用 <xref:System.Collections.IEnumerator.Current%2A> 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="850a4-178">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="850a4-179">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="850a4-179">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="850a4-180">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="850a4-180"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="850a4-181"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="850a4-181"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="850a4-182">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="850a4-182">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="850a4-183">当枚举器位于此位置时，对 <xref:System.Collections.IEnumerator.MoveNext%2A> 的后续调用也将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="850a4-183">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="850a4-184">如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则调用 <xref:System.Collections.IEnumerator.Current%2A> 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="850a4-184">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="850a4-185">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="850a4-185">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="850a4-186">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="850a4-186">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="850a4-187">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="850a4-187">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="850a4-188">如果在 <xref:System.Collections.IEnumerator.MoveNext%2A> 和 <xref:System.Collections.IEnumerator.Current%2A>之间修改集合，<xref:System.Collections.IEnumerator.Current%2A> 将返回其设置为的元素，即使枚举器已失效。</span><span class="sxs-lookup"><span data-stu-id="850a4-188">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="850a4-189">该枚举数不具有独占访问集合的权限；因此，枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="850a4-189">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="850a4-190">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="850a4-190">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="850a4-191">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="850a4-191">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="850a4-192">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="850a4-192">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
