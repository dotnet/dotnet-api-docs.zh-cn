<Type Name="FilterElement" FullName="System.ServiceModel.Routing.Configuration.FilterElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f3f5c3988cd44f98081ee20d6422481fd293e3c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89965148" /></Metadata><TypeSignature Language="C#" Value="public class FilterElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Routing.Configuration.FilterElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterElement : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type FilterElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Routing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示定义筛选器元素的配置元素。 此元素用于定义筛选器的类型，以及筛选器所需的任何支持数据或参数。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.Configuration.FilterElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.Routing.Configuration.FilterElement" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomType">
      <MemberSignature Language="C#" Value="public string CustomType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Routing.Configuration.FilterElement.CustomType" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomType : string with get, set" Usage="System.ServiceModel.Routing.Configuration.FilterElement.CustomType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Configuration.ConfigurationProperty("customType", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Configuration.ConfigurationProperty("customType", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用作筛选器的自定义类型的完全限定类型名称。</summary>
        <value>完全限定类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.ServiceModel.Routing.Configuration.FilterElement.FilterType%2A> 设置为 Custom，则 <xref:System.ServiceModel.Routing.Configuration.FilterElement.CustomType%2A> 为要创建的类的完全限定类型名称。 <xref:System.ServiceModel.Routing.Configuration.FilterElement.FilterData%2A> 还可以包含在计算 <xref:System.ServiceModel.Routing.Configuration.FilterElement.CustomType%2A> 筛选器的过程中要使用的值。 <xref:System.ServiceModel.Routing.Configuration.FilterElement.CustomType%2A> 必须实现一个构造函数，该构造函数接受一个包含 <xref:System.ServiceModel.Routing.Configuration.FilterElement.FilterData%2A> 信息的字符串值。  
  
 有关详细信息，请参阅 <xref:System.ServiceModel.Routing.Configuration.FilterElement.FilterData%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter1">
      <MemberSignature Language="C#" Value="public string Filter1 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter1" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Routing.Configuration.FilterElement.Filter1" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter1 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter1 { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter1 : string with get, set" Usage="System.ServiceModel.Routing.Configuration.FilterElement.Filter1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Configuration.ConfigurationProperty("filter1", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Configuration.ConfigurationProperty("filter1", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此配置元素的 filter1 数据。 此值仅在 <see cref="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterType" /> 设置为 And 时使用。</summary>
        <value>此元素的 filter1 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Routing.Configuration.FilterElement.Filter1%2A> 的内容仅在计算 AND 筛选器的过程中使用。 有关详细信息，请参阅 <xref:System.ServiceModel.Routing.Configuration.FilterElement.FilterData%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter2">
      <MemberSignature Language="C#" Value="public string Filter2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter2" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Routing.Configuration.FilterElement.Filter2" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter2 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter2 { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter2 : string with get, set" Usage="System.ServiceModel.Routing.Configuration.FilterElement.Filter2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Configuration.ConfigurationProperty("filter2", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Configuration.ConfigurationProperty("filter2", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此配置元素的 filter2 数据。 此值仅在 <see cref="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterType" /> 设置为 AND 时使用。</summary>
        <value>此元素的 filter2 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Routing.Configuration.FilterElement.Filter2%2A> 的内容仅在计算 AND 筛选器的过程中使用。 有关详细信息，请参阅 <xref:System.ServiceModel.Routing.Configuration.FilterElement.FilterData%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterData">
      <MemberSignature Language="C#" Value="public string FilterData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterData" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterData" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterData As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterData { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterData : string with get, set" Usage="System.ServiceModel.Routing.Configuration.FilterElement.FilterData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Configuration.ConfigurationProperty("filterData", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Configuration.ConfigurationProperty("filterData", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此配置元素的筛选数据。</summary>
        <value>此元素的筛选数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表描述基于 <xref:System.ServiceModel.Routing.Configuration.FilterElement.FilterData%2A> 的值的 <xref:System.ServiceModel.Routing.Configuration.FilterType> 的含义。  
  
|筛选器类型|说明|筛选器数据含义|示例筛选器|  
|------------------|-----------------|-------------------------|--------------------|  
|操作|使用 WCF 附带的 ActionMessageFilter。|筛选器基于的操作。|`<filter name="action1" filterType="Action" filterData="http://ACTION" />`|  
|地址|使用 WCF 附带的 EndpointAddressMessageFilter，并忽略主机名。|筛选器基于的地址（在 To 标头中）。|`<filter name="address1" filterType="Address" filterData="http://host/vdir/s.svc/b" />`|  
|AddressPrefix|使用 WCF 附带的 PrefixEndpointAddressMessageFilter，并忽略主机名。|筛选器基于的地址（使用最长的前缀匹配项）。|`<filter name="prefix1" filterType="AddressPrefix" filterData="http://host" />`|  
|StrictAnd|一个自定义 AndMessageFilter，它总是在返回前同时计算两个条件。|不使用 filterData，而 filter1 和 filter2 具有相应的消息筛选器的名称（也在表中），应用 AND 将它们连接起来。|`<filter name="and1" filterType="And" filter1="address1" filter2="action1" />`|  
|“自定义”|一个用户定义的类型，此类型扩展 MessageFilter 并具有采用字符串的构造函数。|customType 特性是要创建的类的完全限定类型名称，filterData 是在创建筛选器时要传递给构造函数的字符串。|`<filter name="custom1" filterType="Custom" customType="CustomAssembly.CustomMsgFilter, CustomAssembly" filterData="Custom Data" />`|  
|EndpointName|一个在路由服务中单独使用的自定义消息筛选器，它将基于服务终结点的名称来筛选消息。|服务终结点的名称，例如： "serviceEndpoint1"。  该终结点应为在路由服务上公开的终结点之一。|`<filter name="stock1" filterType="Endpoint" filterData="SvcEndpoint" />`|  
|MatchAll|使用 WCF 附带的 MatchAllMessageFilter。|不可用|`<filter name="matchAll1" filterType="MatchAll" />`|  
|XPath|使用 WCF 附带的 XPathMessageFilter。|在匹配消息时要使用的 XPath 查询。|`<filter name="XPath1" filterType="XPath" filterData="//ns:element" />`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterType">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Routing.Configuration.FilterType FilterType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.Routing.Configuration.FilterType FilterType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterType" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterType As FilterType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Routing::Configuration::FilterType FilterType { System::ServiceModel::Routing::Configuration::FilterType get(); void set(System::ServiceModel::Routing::Configuration::FilterType value); };" />
      <MemberSignature Language="F#" Value="member this.FilterType : System.ServiceModel.Routing.Configuration.FilterType with get, set" Usage="System.ServiceModel.Routing.Configuration.FilterElement.FilterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Configuration.ConfigurationProperty("filterType", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Configuration.ConfigurationProperty("filterType", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.IsRequired)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Routing.Configuration.FilterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此配置元素的 <see cref="T:System.ServiceModel.Routing.Configuration.FilterType" />。</summary>
        <value>此元素的筛选器类型。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Routing.Configuration.FilterElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.Routing.Configuration.FilterElement.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Configuration.ConfigurationProperty("name", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Configuration.ConfigurationProperty("name", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此配置元素的名称。</summary>
        <value>此配置元素的唯一名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
