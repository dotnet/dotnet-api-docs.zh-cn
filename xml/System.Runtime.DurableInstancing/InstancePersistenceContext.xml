<Type Name="InstancePersistenceContext" FullName="System.Runtime.DurableInstancing.InstancePersistenceContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3f85cd67d2ad45a8b6a00bb27768f0c23327949" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89954255" /></Metadata><TypeSignature Language="C#" Value="public sealed class InstancePersistenceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InstancePersistenceContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.DurableInstancing.InstancePersistenceContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InstancePersistenceContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstancePersistenceContext sealed" />
  <TypeSignature Language="F#" Value="type InstancePersistenceContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e988b-101">表示在执行永久性命令时的执行状态信息。</span><span class="sxs-lookup"><span data-stu-id="e988b-101">Represents execution state information while a persistence command is being executed.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-102">此类的一个实例将传递到永久性提供程序实现的 TryCommand 方法。</span><span class="sxs-lookup"><span data-stu-id="e988b-102">An instance of this class is passed to the TryCommand method of persistence provider implementations.</span></span> <span data-ttu-id="e988b-103">永久性提供程序使用此类来检查实例的内存中视图，并指示对外部存储的操作的结果，这些结果可能影响该视图或其他内存中上下文。</span><span class="sxs-lookup"><span data-stu-id="e988b-103">Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AssociatedInstanceKey">
      <MemberSignature Language="C#" Value="public void AssociatedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociatedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociatedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociatedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.AssociatedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.AssociatedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e988b-104">已关联的键的实例键标识符。</span><span class="sxs-lookup"><span data-stu-id="e988b-104">The instance key identifier  for the key that has been associated.</span></span> <span data-ttu-id="e988b-105">不得是 Guid.Empty。</span><span class="sxs-lookup"><span data-stu-id="e988b-105">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="e988b-106">指示永久性提供程序已经成功将某个键与实例存储中的当前实例关联。</span><span class="sxs-lookup"><span data-stu-id="e988b-106">Indicates that the persistence provider has successfully associated a key to the current instance in the instance store.</span></span> <span data-ttu-id="e988b-107">该键的标识符将指定为参数。</span><span class="sxs-lookup"><span data-stu-id="e988b-107">The identifier of the key is specified as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-108">实例键必须是非关联的。</span><span class="sxs-lookup"><span data-stu-id="e988b-108">The instance key must be unassociated.</span></span> <span data-ttu-id="e988b-109">当前实例句柄必须绑定到某个实例以及该实例上的锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-109">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginBindReclaimedLock">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginBindReclaimedLock (long instanceVersion, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginBindReclaimedLock(int64 instanceVersion, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginBindReclaimedLock (instanceVersion As Long, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginBindReclaimedLock(long instanceVersion, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginBindReclaimedLock : int64 * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instancePersistenceContext.BeginBindReclaimedLock (instanceVersion, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="e988b-110">对实例所持有的锁的版本，或为零（如果永久性提供程序不实现锁版本管理）。</span><span class="sxs-lookup"><span data-stu-id="e988b-110">The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <param name="timeout"><span data-ttu-id="e988b-111">异步操作的超时时间。</span><span class="sxs-lookup"><span data-stu-id="e988b-111">The timeout period for the asynchronous operation.</span></span></param>
        <param name="callback"><span data-ttu-id="e988b-112">操作完成时将要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="e988b-112">The method to be called when the operation is completed.</span></span></param>
        <param name="state"><span data-ttu-id="e988b-113">与异步操作关联的状态信息。</span><span class="sxs-lookup"><span data-stu-id="e988b-113">The state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="e988b-114">开始异步操作以将实例上的现有锁绑定到当前实例句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-114">Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle.</span></span> <span data-ttu-id="e988b-115">现有锁的版本将作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="e988b-115">The version of the existing lock is passed as a parameter.</span></span></summary>
        <returns><span data-ttu-id="e988b-116">异步操作的状态。</span><span class="sxs-lookup"><span data-stu-id="e988b-116">The status of an asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-117">尝试获取锁时，永久性提供程序可确定当前实例已在当前存储中锁定。</span><span class="sxs-lookup"><span data-stu-id="e988b-117">When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.</span></span> <span data-ttu-id="e988b-118">如果锁定标记与当前句柄的锁定标记匹配，则永久性提供程序可尝试通过检查其版本并将其传递到 BeginBindReclaimedLock 来回收锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-118">If the lock token matches the current handle's lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock.</span></span> <span data-ttu-id="e988b-119">在锁得以成功回收之前，永久性提供程序不得更改实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-119">The persistence provider must not make changes to the instance until the lock is successfully reclaimed.</span></span> <span data-ttu-id="e988b-120">如果没有其他句柄绑定到锁，则 BeginBindReclaimedLock 操作将成功执行并且当前句柄将绑定到锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-120">If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock.</span></span> <span data-ttu-id="e988b-121">否则，BeginBindReclaimedLock 或 BeginBindReclaimedLock 将引发 InstanceHandleConflictException。</span><span class="sxs-lookup"><span data-stu-id="e988b-121">Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException.</span></span> <span data-ttu-id="e988b-122">如果正在对其他句柄执行命令，则该操作要等待那些命令的结果以确定是否可回收锁，因而无法完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-122">If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.</span></span>  
  
 <span data-ttu-id="e988b-123">当前实例句柄必须绑定到一个实例和一个锁所有者。</span><span class="sxs-lookup"><span data-stu-id="e988b-123">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="e988b-124">该实例不得已完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-124">The instance must not be completed.</span></span> <span data-ttu-id="e988b-125">与锁的所有者关联的锁定标记用于标识锁的所有者。</span><span class="sxs-lookup"><span data-stu-id="e988b-125">The lock token associated with the lock owner is used to identify the owner of the lock.</span></span>  
  
 <span data-ttu-id="e988b-126">一旦一个锁绑定到一个句柄，它就会在该句柄的整个生存期中一直与之绑定。</span><span class="sxs-lookup"><span data-stu-id="e988b-126">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="e988b-127">锁定标记和实例版本都不可更改。</span><span class="sxs-lookup"><span data-stu-id="e988b-127">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginExecute">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecute(class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecute (command As InstancePersistenceCommand, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecute(System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginExecute : System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instancePersistenceContext.BeginExecute (command, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="e988b-128">要执行的永久性命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-128">The persistence command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="e988b-129">此操作的超时值。</span><span class="sxs-lookup"><span data-stu-id="e988b-129">The time-out value for the operation.</span></span></param>
        <param name="callback"><span data-ttu-id="e988b-130">该委托接收请求操作完成的异步接收的通知。</span><span class="sxs-lookup"><span data-stu-id="e988b-130">The delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="e988b-131">状态信息。</span><span class="sxs-lookup"><span data-stu-id="e988b-131">The state information.</span></span></param>
        <summary><span data-ttu-id="e988b-132">开始异步执行永久性命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-132">Begins executing a persistence command asynchronously.</span></span></summary>
        <returns><span data-ttu-id="e988b-133">异步操作的状态。</span><span class="sxs-lookup"><span data-stu-id="e988b-133">The status of an asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-134">永久性提供程序可使用此方法将子命令作为命令的一部分执行。</span><span class="sxs-lookup"><span data-stu-id="e988b-134">A persistence provider can use this method to execute sub-commands as part of a command.</span></span> <span data-ttu-id="e988b-135">子命令将使用 BeginTryCommand 执行，类似于传递到 InstanceStore.BeginExecute 的命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-135">The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute.</span></span> <span data-ttu-id="e988b-136">命令可以嵌套，但是一个命令不能同时执行多个子命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-136">Commands can be nested, but a command must not execute more than one sub-command at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindAcquiredLock">
      <MemberSignature Language="C#" Value="public void BindAcquiredLock (long instanceVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindAcquiredLock(int64 instanceVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindAcquiredLock (instanceVersion As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindAcquiredLock(long instanceVersion);" />
      <MemberSignature Language="F#" Value="member this.BindAcquiredLock : int64 -&gt; unit" Usage="instancePersistenceContext.BindAcquiredLock instanceVersion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="e988b-137">对该实例所获取的锁的版本，或为零（如果永久性提供程序不实现锁版本管理）。</span><span class="sxs-lookup"><span data-stu-id="e988b-137">Version of the lock acquired on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <summary><span data-ttu-id="e988b-138">将对某个实例新获取的锁绑定到当前实例句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-138">Binds a newly acquired lock on an instance to the current instance handle.</span></span> <span data-ttu-id="e988b-139">获取的锁的版本将作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="e988b-139">The version of the acquired lock is passed as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-140">如果永久性提供程序实现锁版本管理，则每次获取该实例上的锁时，外部存储中其版本都必须增加 1。</span><span class="sxs-lookup"><span data-stu-id="e988b-140">If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store.</span></span> <span data-ttu-id="e988b-141">首次锁定实例时，版本应为 1。</span><span class="sxs-lookup"><span data-stu-id="e988b-141">The first time the instance is locked, the version should be 1.</span></span> <span data-ttu-id="e988b-142">每次获取锁时都会使上一个锁失效。</span><span class="sxs-lookup"><span data-stu-id="e988b-142">Each lock acquisition invalidates the previous lock.</span></span> <span data-ttu-id="e988b-143">当前实例句柄必须绑定到一个实例和一个锁所有者。</span><span class="sxs-lookup"><span data-stu-id="e988b-143">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="e988b-144">该实例不得已完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-144">The instance must not be completed.</span></span> <span data-ttu-id="e988b-145">与锁的所有者关联的锁定标记用于标识锁的所有者</span><span class="sxs-lookup"><span data-stu-id="e988b-145">The lock token associated with the lock owner is used to identify the owner of the lock</span></span>  
  
 <span data-ttu-id="e988b-146">一旦一个锁绑定到一个句柄，它就会在该句柄的整个生存期中一直与之绑定。</span><span class="sxs-lookup"><span data-stu-id="e988b-146">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="e988b-147">锁定标记和实例版本都不可更改。</span><span class="sxs-lookup"><span data-stu-id="e988b-147">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindEvent">
      <MemberSignature Language="C#" Value="public void BindEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindEvent(class System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindEvent (persistenceEvent As InstancePersistenceEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindEvent(System::Runtime::DurableInstancing::InstancePersistenceEvent ^ persistenceEvent);" />
      <MemberSignature Language="F#" Value="member this.BindEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent -&gt; unit" Usage="instancePersistenceContext.BindEvent persistenceEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistenceEvent" Type="System.Runtime.DurableInstancing.InstancePersistenceEvent" />
      </Parameters>
      <Docs>
        <param name="persistenceEvent"><span data-ttu-id="e988b-148">一个包含有关事件的信息的 <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e988b-148">An <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> object containing information about the event.</span></span></param>
        <summary><span data-ttu-id="e988b-149">将 <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> 绑定到实例句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-149">Binds an <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> to an instance handle.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindInstance">
      <MemberSignature Language="C#" Value="public void BindInstance (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindInstance(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindInstance (instanceId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindInstance(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.BindInstance : Guid -&gt; unit" Usage="instancePersistenceContext.BindInstance instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><span data-ttu-id="e988b-150">一个实例标识符。</span><span class="sxs-lookup"><span data-stu-id="e988b-150">An instance identifier.</span></span> <span data-ttu-id="e988b-151">不得是 Guid.Empty。</span><span class="sxs-lookup"><span data-stu-id="e988b-151">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="e988b-152">绑定一个实例，其标识符指定为当前实例句柄的参数。</span><span class="sxs-lookup"><span data-stu-id="e988b-152">Binds an instance whose identifier is specified as a parameter to the current instance handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-153">一旦一个实例绑定到一个句柄，它就会在该句柄的整个生存期中一直与之绑定。</span><span class="sxs-lookup"><span data-stu-id="e988b-153">Once an instance is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="e988b-154">其他任何实例都无法绑定到该句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-154">No other instance can ever be bound to the handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindInstanceOwner">
      <MemberSignature Language="C#" Value="public void BindInstanceOwner (Guid instanceOwnerId, Guid lockToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindInstanceOwner(valuetype System.Guid instanceOwnerId, valuetype System.Guid lockToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindInstanceOwner (instanceOwnerId As Guid, lockToken As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindInstanceOwner(Guid instanceOwnerId, Guid lockToken);" />
      <MemberSignature Language="F#" Value="member this.BindInstanceOwner : Guid * Guid -&gt; unit" Usage="instancePersistenceContext.BindInstanceOwner (instanceOwnerId, lockToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceOwnerId" Type="System.Guid" />
        <Parameter Name="lockToken" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceOwnerId"><span data-ttu-id="e988b-155">实例所有者的标识符。</span><span class="sxs-lookup"><span data-stu-id="e988b-155">The identifier for the instance owner.</span></span></param>
        <param name="lockToken"><span data-ttu-id="e988b-156">实例所有者的锁定标记。</span><span class="sxs-lookup"><span data-stu-id="e988b-156">The lock token of the instance owner.</span></span> <span data-ttu-id="e988b-157">永久性提供程序可以选择对实例所有者标识符和该所有者的锁定标记使用相同的值。</span><span class="sxs-lookup"><span data-stu-id="e988b-157">A persistence provider may choose to use the same value for the instance owner identifier and the owner's lock token.</span></span></param>
        <summary><span data-ttu-id="e988b-158">将一个实例所有者绑定到当前实例句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-158">Binds an instance owner to the current instance handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-159">一旦一个实例所有者绑定到一个句柄，它就会在该句柄的整个生存期中一直与之绑定。</span><span class="sxs-lookup"><span data-stu-id="e988b-159">Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="e988b-160">其他任何实例所有者都无法绑定到该句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-160">No other instance owner can ever be bound to the handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindReclaimedLock">
      <MemberSignature Language="C#" Value="public void BindReclaimedLock (long instanceVersion, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindReclaimedLock(int64 instanceVersion, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindReclaimedLock (instanceVersion As Long, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindReclaimedLock(long instanceVersion, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.BindReclaimedLock : int64 * TimeSpan -&gt; unit" Usage="instancePersistenceContext.BindReclaimedLock (instanceVersion, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="e988b-161">对实例所持有的锁的版本，或为零（如果永久性提供程序不实现锁版本管理）。</span><span class="sxs-lookup"><span data-stu-id="e988b-161">Version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <param name="timeout"><span data-ttu-id="e988b-162">此操作的超时值。</span><span class="sxs-lookup"><span data-stu-id="e988b-162">The time-out value for the operation.</span></span></param>
        <summary><span data-ttu-id="e988b-163">将某个实例上的现有锁绑定到当前实例句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-163">Binds an existing lock on an instance to the current instance handle.</span></span> <span data-ttu-id="e988b-164">现有锁的版本将作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="e988b-164">The version of the existing lock is passed as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-165">尝试获取锁时，永久性提供程序可确定当前实例已在当前存储中锁定。</span><span class="sxs-lookup"><span data-stu-id="e988b-165">When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.</span></span> <span data-ttu-id="e988b-166">如果锁定标记与当前句柄的锁定标记匹配，则永久性提供程序可尝试通过检查其版本并将其传递到 BindReclaimedLock 来回收锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-166">If the lock token matches the current handle's lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock.</span></span> <span data-ttu-id="e988b-167">在锁得以成功回收之前，永久性提供程序不得更改实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-167">The persistence provider must not make changes to the instance until the lock is successfully reclaimed.</span></span> <span data-ttu-id="e988b-168">如果没有其他句柄绑定到锁，则 BindReclaimedLock 将成功执行并且当前句柄将绑定到锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-168">If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock.</span></span> <span data-ttu-id="e988b-169">否则，BindReclaimedLock 将引发 InstanceHandleConflictException。</span><span class="sxs-lookup"><span data-stu-id="e988b-169">Otherwise, BindReclaimedLock throws InstanceHandleConflictException.</span></span> <span data-ttu-id="e988b-170">如果正在对其他句柄执行命令，则 BindReclaimedLock 可能因为要等待那些命令的结果以确定是否可回收锁而发生阻塞。</span><span class="sxs-lookup"><span data-stu-id="e988b-170">If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.</span></span>  
  
 <span data-ttu-id="e988b-171">当前实例句柄必须绑定到一个实例和一个锁所有者。</span><span class="sxs-lookup"><span data-stu-id="e988b-171">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="e988b-172">该实例不得已完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-172">The instance must not be completed.</span></span> <span data-ttu-id="e988b-173">与锁的所有者关联的锁定标记用于标识锁的所有者。</span><span class="sxs-lookup"><span data-stu-id="e988b-173">The lock token associated with the lock owner is used to identify the owner of the lock.</span></span>  
  
 <span data-ttu-id="e988b-174">一旦一个锁绑定到一个句柄，它就会在该句柄的整个生存期中一直与之绑定。</span><span class="sxs-lookup"><span data-stu-id="e988b-174">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="e988b-175">锁定标记和实例版本都不可更改。</span><span class="sxs-lookup"><span data-stu-id="e988b-175">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedInstance">
      <MemberSignature Language="C#" Value="public void CompletedInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompletedInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompletedInstance ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompletedInstance();" />
      <MemberSignature Language="F#" Value="member this.CompletedInstance : unit -&gt; unit" Usage="instancePersistenceContext.CompletedInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e988b-176">指示永久性提供程序已经成功将实例存储中的当前实例标记为完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-176">Indicates that the persistence provider has successfully marked the current instance as complete in the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-177">当前实例句柄必须绑定到某个实例以及该实例上的锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-177">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="e988b-178">必须已初始化但未完成实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-178">The instance must be initialized and not be already completed.</span></span> <span data-ttu-id="e988b-179">如果已将一组实例数据保存到实例 ) 中， (初始化实例。必须完成所有与实例关联的键。</span><span class="sxs-lookup"><span data-stu-id="e988b-179">(An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedInstanceKey">
      <MemberSignature Language="C#" Value="public void CompletedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompletedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompletedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompletedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.CompletedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.CompletedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e988b-180">已完成的键的实例键标识符。</span><span class="sxs-lookup"><span data-stu-id="e988b-180">The instance key identifier for the key that has been completed.</span></span> <span data-ttu-id="e988b-181">不得是 Guid.Empty。</span><span class="sxs-lookup"><span data-stu-id="e988b-181">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="e988b-182">指示永久性提供程序已经成功将外部存储中的键标记为完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-182">Indicates that the persistence provider has successfully marked a key as complete in the external store.</span></span> <span data-ttu-id="e988b-183">该键的标识符将指定为参数。</span><span class="sxs-lookup"><span data-stu-id="e988b-183">The identifier of the key is specified as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-184">当前实例句柄必须绑定到某个实例以及该实例上的锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-184">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="e988b-185">实例键必须与当前实例相关联且尚未完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-185">The instance key must be associated to the current instance and not be already completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindReclaimedLockException">
      <MemberSignature Language="C#" Value="public Exception CreateBindReclaimedLockException (long instanceVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception CreateBindReclaimedLockException(int64 instanceVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateBindReclaimedLockException (instanceVersion As Long) As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ CreateBindReclaimedLockException(long instanceVersion);" />
      <MemberSignature Language="F#" Value="member this.CreateBindReclaimedLockException : int64 -&gt; Exception" Usage="instancePersistenceContext.CreateBindReclaimedLockException instanceVersion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="e988b-186">对实例所持有的锁的版本，或为零（如果永久性提供程序不实现锁版本管理）。</span><span class="sxs-lookup"><span data-stu-id="e988b-186">The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <summary><span data-ttu-id="e988b-187">创建可能从 TryCommand 引发的异常的实例，以触发 BindReclaimedLock 行为。</span><span class="sxs-lookup"><span data-stu-id="e988b-187">Creates an instance of an exception which can be thrown from TryCommand to trigger BindReclaimedLock behavior.</span></span></summary>
        <returns><span data-ttu-id="e988b-188">一个异常。</span><span class="sxs-lookup"><span data-stu-id="e988b-188">An exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-189">示例代码：</span><span class="sxs-lookup"><span data-stu-id="e988b-189">Sample code:</span></span>  
  
```  
  
protected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  
{  
    throw context.CreateBindReclaimedLockException(5);  
}  
is equivalent to  
protected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  
{  
    context.BindReclaimedLock(5, timeout);  
    throw new OperationCanceledException();  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBindReclaimedLock">
      <MemberSignature Language="C#" Value="public void EndBindReclaimedLock (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBindReclaimedLock(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBindReclaimedLock (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBindReclaimedLock(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndBindReclaimedLock : IAsyncResult -&gt; unit" Usage="instancePersistenceContext.EndBindReclaimedLock result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="e988b-190">异步操作的结果。</span><span class="sxs-lookup"><span data-stu-id="e988b-190">The result of the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="e988b-191">结束由 <see cref="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法开始的异步操作。</span><span class="sxs-lookup"><span data-stu-id="e988b-191">Ends the asynchronous operation started by the <see cref="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecute">
      <MemberSignature Language="C#" Value="public void EndExecute (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndExecute(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndExecute (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndExecute(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndExecute : IAsyncResult -&gt; unit" Usage="instancePersistenceContext.EndExecute result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="e988b-192">异步操作的状态。</span><span class="sxs-lookup"><span data-stu-id="e988b-192">The status of an asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="e988b-193">结束异步操作。</span><span class="sxs-lookup"><span data-stu-id="e988b-193">Ends the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (command As InstancePersistenceCommand, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; unit" Usage="instancePersistenceContext.Execute (command, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="e988b-194">要执行的永久性命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-194">The persistence command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="e988b-195">此操作的超时值。</span><span class="sxs-lookup"><span data-stu-id="e988b-195">The time-out value for the operation.</span></span></param>
        <summary><span data-ttu-id="e988b-196">执行永久性命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-196">Executes a persistence command.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-197">永久性提供程序可使用此方法将子命令作为命令的一部分执行。</span><span class="sxs-lookup"><span data-stu-id="e988b-197">A persistence provider can use this method to execute sub-commands as part of a command.</span></span> <span data-ttu-id="e988b-198">子命令将使用 TryCommand 执行，类似于传递到 InstanceStore.Execute 的命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-198">The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute.</span></span> <span data-ttu-id="e988b-199">命令可以嵌套，但是一个命令不能同时执行多个子命令。</span><span class="sxs-lookup"><span data-stu-id="e988b-199">Commands can be nested, but a command must not execute more than one sub-command at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle InstanceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceHandle InstanceHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceHandle As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceHandle ^ InstanceHandle { System::Runtime::DurableInstancing::InstanceHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceHandle : System.Runtime.DurableInstancing.InstanceHandle" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e988b-200">获取当前实例句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-200">Gets the current instance handle.</span></span></summary>
        <value><span data-ttu-id="e988b-201">当前实例句柄。</span><span class="sxs-lookup"><span data-stu-id="e988b-201">The current instance handle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceVersion">
      <MemberSignature Language="C#" Value="public long InstanceVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceVersion" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceVersion { long get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceVersion : int64" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e988b-202">获取与当前实例句柄对于当前实例所持有的锁的版本。</span><span class="sxs-lookup"><span data-stu-id="e988b-202">Gets the version of the lock held on the current instance by the current instance handle.</span></span></summary>
        <value><span data-ttu-id="e988b-203">绑定到当前实例句柄的实例锁的版本; 如果句柄没有绑定到锁，则为-1。</span><span class="sxs-lookup"><span data-stu-id="e988b-203">The version of the instance lock bound to the current instance handle, or -1 if the handle isn't bound to a lock.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-204">使用绑定到锁的句柄来执行需要锁的操作（如保存实例数据）时，永久性提供程序应将此值与对实例存储中实例所持有的锁的锁版本进行对照检查。</span><span class="sxs-lookup"><span data-stu-id="e988b-204">The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.</span></span> <span data-ttu-id="e988b-205">如果该锁版本不匹配，则该命令将失败，并出现 InstanceLockLostException。</span><span class="sxs-lookup"><span data-stu-id="e988b-205">If the lock version doesn't match, the command should fail with InstanceLockLostException.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceView">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceView InstanceView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceView InstanceView" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceView As InstanceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceView ^ InstanceView { System::Runtime::DurableInstancing::InstanceView ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceView : System.Runtime.DurableInstancing.InstanceView" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e988b-206">获取表示当前实例的内存中状态的实例视图对象。</span><span class="sxs-lookup"><span data-stu-id="e988b-206">Gets the instance view object that represents the in-memory state of the current instance.</span></span> <span data-ttu-id="e988b-207">此视图会在命令做出更新的同时反映这些更新。</span><span class="sxs-lookup"><span data-stu-id="e988b-207">This view reflects updates as they are made by the command in progress.</span></span></summary>
        <value><span data-ttu-id="e988b-208">实例视图对象。</span><span class="sxs-lookup"><span data-stu-id="e988b-208">The instance view object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadedInstance">
      <MemberSignature Language="C#" Value="public void LoadedInstance (System.Runtime.DurableInstancing.InstanceState state, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; instanceData, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; instanceMetadata, System.Collections.Generic.IDictionary&lt;Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt; associatedInstanceKeyMetadata, System.Collections.Generic.IDictionary&lt;Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt; completedInstanceKeyMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadedInstance(valuetype System.Runtime.DurableInstancing.InstanceState state, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; instanceData, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; instanceMetadata, class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt;&gt; associatedInstanceKeyMetadata, class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt;&gt; completedInstanceKeyMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadedInstance (state As InstanceState, instanceData As IDictionary(Of XName, InstanceValue), instanceMetadata As IDictionary(Of XName, InstanceValue), associatedInstanceKeyMetadata As IDictionary(Of Guid, IDictionary(Of XName, InstanceValue)), completedInstanceKeyMetadata As IDictionary(Of Guid, IDictionary(Of XName, InstanceValue)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadedInstance(System::Runtime::DurableInstancing::InstanceState state, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ instanceData, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ instanceMetadata, System::Collections::Generic::IDictionary&lt;Guid, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^&gt; ^ associatedInstanceKeyMetadata, System::Collections::Generic::IDictionary&lt;Guid, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^&gt; ^ completedInstanceKeyMetadata);" />
      <MemberSignature Language="F#" Value="member this.LoadedInstance : System.Runtime.DurableInstancing.InstanceState * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * System.Collections.Generic.IDictionary&lt;Guid, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt;&gt; * System.Collections.Generic.IDictionary&lt;Guid, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt;&gt; -&gt; unit" Usage="instancePersistenceContext.LoadedInstance (state, instanceData, instanceMetadata, associatedInstanceKeyMetadata, completedInstanceKeyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Runtime.DurableInstancing.InstanceState" />
        <Parameter Name="instanceData" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="instanceMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="associatedInstanceKeyMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt;" />
        <Parameter Name="completedInstanceKeyMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="e988b-209">实例状态信息。</span><span class="sxs-lookup"><span data-stu-id="e988b-209">The instance state information.</span></span></param>
        <param name="instanceData"><span data-ttu-id="e988b-210">作为 <see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的字典的实例数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-210">The instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="instanceMetadata"><span data-ttu-id="e988b-211">作为 <see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的集合的实例元数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-211">Instance metadata as a collection of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="associatedInstanceKeyMetadata"><span data-ttu-id="e988b-212">作为实例标识符和实例键元数据的字典的关联实例键元数据，它是 <see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的字典。</span><span class="sxs-lookup"><span data-stu-id="e988b-212">Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="completedInstanceKeyMetadata"><span data-ttu-id="e988b-213">作为实例标识符和实例键元数据的字典的已完成实例元数据，它是 <see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的字典。</span><span class="sxs-lookup"><span data-stu-id="e988b-213">Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <summary><span data-ttu-id="e988b-214">指示永久性提供程序已经从实例存储中成功检索到当前实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-214">Indicates that the persistence provider has successfully retrieved the current instance from the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-215">当前实例句柄必须绑定到某个实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-215">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="e988b-216">如果实例句柄绑定到某个锁，或加载的实例标记为已完成，则将加载的数据视为一致，否则视为不确定。</span><span class="sxs-lookup"><span data-stu-id="e988b-216">If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LockToken">
      <MemberSignature Language="C#" Value="public Guid LockToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid LockToken" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LockToken As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid LockToken { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.LockToken : Guid" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e988b-217">获取绑定到当前实例句柄的实例所有者的锁定标记。</span><span class="sxs-lookup"><span data-stu-id="e988b-217">Gets the lock token of the instance owner bound to the current instance handle.</span></span></summary>
        <value><span data-ttu-id="e988b-218">绑定到当前实例句柄的锁定标记， <see cref="F:System.Guid.Empty" /> 如果该句柄没有绑定到实例所有者，则为。</span><span class="sxs-lookup"><span data-stu-id="e988b-218">The lock token bound to the current instance handle, or <see cref="F:System.Guid.Empty" /> if the handle isn't bound to an instance owner.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-219">使用绑定到锁的句柄来执行需要锁的操作（如保存实例数据）时，永久性提供程序应将此值与对实例存储中实例所持有的锁的锁定标记进行对照检查。</span><span class="sxs-lookup"><span data-stu-id="e988b-219">The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.</span></span> <span data-ttu-id="e988b-220">如果锁定标记不匹配，则该命令将失败，并出现 InstanceLockLostException。</span><span class="sxs-lookup"><span data-stu-id="e988b-220">If the lock token doesn't match, the command should fail with InstanceLockLostException.</span></span>  
  
 <span data-ttu-id="e988b-221">获取实例上的新锁（如使用尚未绑定到锁的句柄来保存实例数据）时，永久性提供程序应将此值用作锁定标记。</span><span class="sxs-lookup"><span data-stu-id="e988b-221">The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock).</span></span> <span data-ttu-id="e988b-222">如果实例已在实例存储中锁定，且锁定标记与此锁定标记匹配，则永久性提供程序可尝试使用 BindReclaimedLock 回收实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-222">If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistedInstance">
      <MemberSignature Language="C#" Value="public void PersistedInstance (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PersistedInstance(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})" />
      <MemberSignature Language="VB.NET" Value="Public Sub PersistedInstance (data As IDictionary(Of XName, InstanceValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PersistedInstance(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.PersistedInstance : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; -&gt; unit" Usage="instancePersistenceContext.PersistedInstance data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="e988b-223">作为 <see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的字典的实例数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-223">Instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <summary><span data-ttu-id="e988b-224">指示永久性提供程序已经成功将一组实例数据保存到实例存储。</span><span class="sxs-lookup"><span data-stu-id="e988b-224">Indicates that the persistence provider has successfully persisted a set of instance data to the instance store.</span></span> <span data-ttu-id="e988b-225">如果尚未初始化实例，则此操作具有初始化的效果。</span><span class="sxs-lookup"><span data-stu-id="e988b-225">This has the effect of initializing the instance if it wasn't already.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-226">当前实例句柄必须绑定到某个实例以及该实例上的锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-226">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="e988b-227">每一组实例数据都会完全替换上一组实例数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-227">Each set of instance data completely replaces the previous set.</span></span> <span data-ttu-id="e988b-228">实例数据集可以为 null，这与空相同。</span><span class="sxs-lookup"><span data-stu-id="e988b-228">The set of instance data may be null - this is the same as empty.</span></span> <span data-ttu-id="e988b-229">保存一组为 null 的实例数据会删除现有的实例数据组。</span><span class="sxs-lookup"><span data-stu-id="e988b-229">Persisting a null set of instance data deletes the existing set of instance data.</span></span> <span data-ttu-id="e988b-230">（保存一组实例数据并不会影响实例元数据。）</span><span class="sxs-lookup"><span data-stu-id="e988b-230">(Persisting a set of instance data has no effect on instance metadata.)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueriedInstanceStore">
      <MemberSignature Language="C#" Value="public void QueriedInstanceStore (System.Runtime.DurableInstancing.InstanceStoreQueryResult queryResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueriedInstanceStore(class System.Runtime.DurableInstancing.InstanceStoreQueryResult queryResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueriedInstanceStore (queryResult As InstanceStoreQueryResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueriedInstanceStore(System::Runtime::DurableInstancing::InstanceStoreQueryResult ^ queryResult);" />
      <MemberSignature Language="F#" Value="member this.QueriedInstanceStore : System.Runtime.DurableInstancing.InstanceStoreQueryResult -&gt; unit" Usage="instancePersistenceContext.QueriedInstanceStore queryResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryResult" Type="System.Runtime.DurableInstancing.InstanceStoreQueryResult" />
      </Parameters>
      <Docs>
        <param name="queryResult"><span data-ttu-id="e988b-231">对实例存储的查询的结果。</span><span class="sxs-lookup"><span data-stu-id="e988b-231">The results of a query against an instance store.</span></span></param>
        <summary><span data-ttu-id="e988b-232">向 <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> 中的 <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> 对象列表中添加作为参数传递的 <see cref="T:System.Runtime.DurableInstancing.InstanceView" />。</span><span class="sxs-lookup"><span data-stu-id="e988b-232">Adds the <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> passed as a parameter to a list of <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> objects in an <see cref="T:System.Runtime.DurableInstancing.InstanceView" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceKeyMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceKeyMetadata (Guid key, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceKeyMetadata(valuetype System.Guid key, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceKeyMetadata (key As Guid, metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceKeyMetadata(Guid key, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceKeyMetadata : Guid * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceKeyMetadata (key, metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e988b-233">已读取其元数据的键的实例键标识符。</span><span class="sxs-lookup"><span data-stu-id="e988b-233">The instance key identifier for the key whose metadata was read.</span></span> <span data-ttu-id="e988b-234">不得是 Guid.Empty。</span><span class="sxs-lookup"><span data-stu-id="e988b-234">Must not be Guid.Empty.</span></span></param>
        <param name="metadata"><span data-ttu-id="e988b-235">作为 <see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的字典的元数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-235">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="complete"><span data-ttu-id="e988b-236">如果该元数据代表与该实例键关联的所有元数据，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e988b-236"><see langword="true" /> if the metadata represents all of the metadata associated to the instance key; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e988b-237">指示永久性提供程序已经成功从实例存储读取与当前实例关联的键的一些实例键元数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-237">Indicates that the persistence provider has successfully read some instance key metadata for a key associated to the current instance from the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-238">当前实例句柄必须绑定到某个实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-238">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="e988b-239">如果实例句柄绑定到某个锁，或当前实例标记为已完成，则将元数据视为一致，否则视为不确定。</span><span class="sxs-lookup"><span data-stu-id="e988b-239">If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceMetadata (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceMetadata(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceMetadata (metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceMetadata(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceMetadata : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceMetadata (metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metadata"><span data-ttu-id="e988b-240">作为 <see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的字典的元数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-240">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="complete"><span data-ttu-id="e988b-241">如果该元数据代表与该实例关联的所有元数据，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e988b-241"><see langword="true" /> if the metadata represents all of the metadata associated to the instance; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e988b-242">指示永久性提供程序已经成功从实例存储读取当前实例的一些实例元数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-242">Indicates that the persistence provider has successfully read some instance metadata for the current instance from the instance store.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceOwnerMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceOwnerMetadata (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceOwnerMetadata(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceOwnerMetadata (metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceOwnerMetadata(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceOwnerMetadata : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceOwnerMetadata (metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metadata"><span data-ttu-id="e988b-243"><see cref="T:System.Xml.Linq.XName" /> 和 <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> 对象的字典。</span><span class="sxs-lookup"><span data-stu-id="e988b-243">The dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="complete"><span data-ttu-id="e988b-244">用于指定将一致性设置为 <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt" /> 还是 <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.Partial" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e988b-244">The value to specify whether the consistency to be set to <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt" /> or <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.Partial" />.</span></span></param>
        <summary><span data-ttu-id="e988b-245">使用参数中传递的数据设置实例所有者元数据。</span><span class="sxs-lookup"><span data-stu-id="e988b-245">Sets the instance owner metadata using the data passed in the parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-246">当前实例句柄必须绑定到某个实例。</span><span class="sxs-lookup"><span data-stu-id="e988b-246">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="e988b-247">如果实例句柄绑定到某个锁，或当前实例标记为已完成，则将元数据视为一致，否则视为不确定。</span><span class="sxs-lookup"><span data-stu-id="e988b-247">If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCancellationHandler">
      <MemberSignature Language="C#" Value="public void SetCancellationHandler (Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt; cancellationHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCancellationHandler(class System.Action`1&lt;class System.Runtime.DurableInstancing.InstancePersistenceContext&gt; cancellationHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCancellationHandler (cancellationHandler As Action(Of InstancePersistenceContext))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCancellationHandler(Action&lt;System::Runtime::DurableInstancing::InstancePersistenceContext ^&gt; ^ cancellationHandler);" />
      <MemberSignature Language="F#" Value="member this.SetCancellationHandler : Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt; -&gt; unit" Usage="instancePersistenceContext.SetCancellationHandler cancellationHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationHandler" Type="System.Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt;" />
      </Parameters>
      <Docs>
        <param name="cancellationHandler"><span data-ttu-id="e988b-248">对要调用的函数的引用。</span><span class="sxs-lookup"><span data-stu-id="e988b-248">The reference to a function to be called.</span></span></param>
        <summary><span data-ttu-id="e988b-249">设置要在请求取消某个操作时调用的取消处理程序。</span><span class="sxs-lookup"><span data-stu-id="e988b-249">Sets the cancellation handler to be called when the cancel of an operation is requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-250">如果调用取消处理程序，则永久性提供程序应取消挂起的所有操作，并从 TryCommand 中引发 OperationCanceledException，以指示永久性命令尚未完成便被中断。</span><span class="sxs-lookup"><span data-stu-id="e988b-250">If the cancellation handler is called, the persistence provider should cancel all pending operations and throw OperationCanceledException from TryCommand to indicate that the persistence command was interrupted before it could be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnassociatedInstanceKey">
      <MemberSignature Language="C#" Value="public void UnassociatedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnassociatedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnassociatedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnassociatedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.UnassociatedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.UnassociatedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e988b-251">解除关联的键的实例键标识符。</span><span class="sxs-lookup"><span data-stu-id="e988b-251">The instance key identifier for the key that has been unassociated.</span></span> <span data-ttu-id="e988b-252">不得是 Guid.Empty。</span><span class="sxs-lookup"><span data-stu-id="e988b-252">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="e988b-253">指示永久性提供程序已经成功将某个键与实例存储中的当前实例解除关联。</span><span class="sxs-lookup"><span data-stu-id="e988b-253">Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store.</span></span> <span data-ttu-id="e988b-254">该键的标识符将指定为参数。</span><span class="sxs-lookup"><span data-stu-id="e988b-254">The identifier of the key is specified as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-255">当前实例句柄必须绑定到某个实例以及该实例上的锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-255">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="e988b-256">实例键必须与当前实例相关联且必须标记为完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-256">The instance key must be associated to the current instance and must be marked complete.</span></span> <span data-ttu-id="e988b-257">当前实例不得标记为完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-257">The current instance must not be marked complete.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserContext">
      <MemberSignature Language="C#" Value="public object UserContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserContext" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserContext { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserContext : obj" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e988b-258">获取附加到当前实例句柄的用户上下文信息。</span><span class="sxs-lookup"><span data-stu-id="e988b-258">Gets the user context information attached to the current instance handle.</span></span></summary>
        <value><span data-ttu-id="e988b-259">用户上下文信息。</span><span class="sxs-lookup"><span data-stu-id="e988b-259">The user context information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-260">该对象是从当前实例句柄的 InstanceStore.OnNewInstanceHandle 返回的对象。</span><span class="sxs-lookup"><span data-stu-id="e988b-260">The object is the one that is returned from InstanceStore.OnNewInstanceHandle for the current instance handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceKeyMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceKeyMetadataValue (Guid key, System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceKeyMetadataValue(valuetype System.Guid key, class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceKeyMetadataValue (key As Guid, name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceKeyMetadataValue(Guid key, System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceKeyMetadataValue : Guid * System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceKeyMetadataValue (key, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e988b-261">键的实例键标识符。</span><span class="sxs-lookup"><span data-stu-id="e988b-261">The instance key identifier for the key.</span></span> <span data-ttu-id="e988b-262">不得是 Guid.Empty。</span><span class="sxs-lookup"><span data-stu-id="e988b-262">Must not be Guid.Empty.</span></span></param>
        <param name="name"><span data-ttu-id="e988b-263">元数据属性的名称。</span><span class="sxs-lookup"><span data-stu-id="e988b-263">The name of the metadata property.</span></span></param>
        <param name="value"><span data-ttu-id="e988b-264">元数据属性的值。</span><span class="sxs-lookup"><span data-stu-id="e988b-264">The value of the metadata property.</span></span></param>
        <summary><span data-ttu-id="e988b-265">指示永久性提供程序已经成功将与当前实例关联的实例键的元数据值写入实例存储。</span><span class="sxs-lookup"><span data-stu-id="e988b-265">Indicates that the persistence provider has successfully written a metadata value for an instance key that is associated with the current instance to the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-266">当前实例句柄必须绑定到某个实例以及该实例上的锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-266">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="e988b-267">实例键必须与当前实例相关联且不得为完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-267">The instance key must be associated with the current instance and must not be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceMetadataValue(class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceMetadataValue (name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceMetadataValue(System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceMetadataValue : System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceMetadataValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e988b-268">元数据属性的名称。</span><span class="sxs-lookup"><span data-stu-id="e988b-268">The name of the metadata property.</span></span></param>
        <param name="value"><span data-ttu-id="e988b-269">元数据属性的值。</span><span class="sxs-lookup"><span data-stu-id="e988b-269">The value of the metadata property.</span></span></param>
        <summary><span data-ttu-id="e988b-270">指示永久性提供程序已经成功将当前实例的元数据值写入外部实例存储。</span><span class="sxs-lookup"><span data-stu-id="e988b-270">Indicates that the persistence provider has successfully written a metadata value for the current instance to the external instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-271">当前实例句柄必须绑定到某个实例，且具有该实例上的锁。</span><span class="sxs-lookup"><span data-stu-id="e988b-271">The current instance handle must be bound to an instance as well as has a lock on that instance.</span></span> <span data-ttu-id="e988b-272">该实例不得已完成。</span><span class="sxs-lookup"><span data-stu-id="e988b-272">The instance must not be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceOwnerMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceOwnerMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceOwnerMetadataValue(class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceOwnerMetadataValue (name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceOwnerMetadataValue(System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceOwnerMetadataValue : System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceOwnerMetadataValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e988b-273">元数据属性的名称。</span><span class="sxs-lookup"><span data-stu-id="e988b-273">The name of the metadata property.</span></span></param>
        <param name="value"><span data-ttu-id="e988b-274">元数据属性的值。</span><span class="sxs-lookup"><span data-stu-id="e988b-274">The value of the metadata property.</span></span></param>
        <summary><span data-ttu-id="e988b-275">指示永久性提供程序已经成功将当前实例所有者的元数据值写入实例存储。</span><span class="sxs-lookup"><span data-stu-id="e988b-275">Indicates that the persistence provider has successfully written a metadata value for the current instance owner to the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e988b-276">当前实例句柄必须绑定到某个实例所有者。</span><span class="sxs-lookup"><span data-stu-id="e988b-276">The current instance handle must be bound to an instance owner.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
