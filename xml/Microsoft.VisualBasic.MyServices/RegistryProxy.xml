<Type Name="RegistryProxy" FullName="Microsoft.VisualBasic.MyServices.RegistryProxy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0de4afa3430f738b0f11e7b5122b0096b9876469" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83975773" /></Metadata><TypeSignature Language="C#" Value="public class RegistryProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi RegistryProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.MyServices.RegistryProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class RegistryProxy" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryProxy" />
  <TypeSignature Language="F#" Value="type RegistryProxy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供了用于操控注册表的属性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用这些属性，必须拥有 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举的读取和写入权限。 任何以完全信任级别运行的代码（在默认安全策略下，这是安装在用户的本地硬盘上的任何代码）都具有访问注册表所需的权限。 有关详细信息，请参阅 <xref:System.Security.Permissions.RegistryPermission> 类。  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表读取数据|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例读取 `HKEY_CURRENT_USER\Software\MyApp` `Name` 的值，并将其显示在消息框中。  
  
 [!code-vb[VbVbalrMyRegistry#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#8)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.Registry" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName="ClassesRoot">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey ClassesRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey ClassesRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClassesRoot As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ ClassesRoot { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClassesRoot : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Win32.RegistryKey" /> 类型，该类型提供对 <see langword="HKEY_CLASSES_ROOT" /> 的访问。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_CLASSES_ROOT` 主要用于存储有关 Windows 中的文件关联的信息。  
  
 <xref:System.Security.Permissions> 命名空间中的 <xref:System.Security.Permissions.RegistryPermission> 类控制对注册表变量的访问。 不应将注册表变量存储在某些内存位置，在这些位置，不具有 <xref:System.Security.Permissions.RegistryPermission> 的代码可访问这些变量。 同样，在授予权限时，只授予完成工作所需的那些权限。  
  
 通过 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举定义注册表权限访问值。 下表详细说明了其成员。  
  
|值|说明|  
|-----------|-----------------|  
|AllAccess|对注册表变量进行创建、读取和写入访问。|  
|创建|可以创建注册表变量。|  
|NoAccess|没有对注册表变量的访问权限。|  
|读|可以读注册表变量。|  
|写入|可以写注册表变量。|  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例获取 `ClassesRoot` 注册表项的子项名称，并将它们添加到 `ListBox1`中。  
  
 [!code-vb[VbVbalrMyRegistry#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#10)]  
  
 此示例要求在项目中有一个名为 `ListBox1` 的 `ListBox`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.ClassesRoot" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentConfig">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey CurrentConfig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey CurrentConfig" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentConfig As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ CurrentConfig { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentConfig : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Win32.RegistryKey" /> 类型，该类型提供对 <see langword="HKEY_CURRENT_CONFIG" /> 的访问。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_CURRENT_CONFIG` 主要用于存储计算机上设备的设置。  
  
 <xref:System.Security.Permissions> 命名空间中的 <xref:System.Security.Permissions.RegistryPermission> 类控制对注册表变量的访问。 不应将注册表变量存储在某些内存位置，在这些位置，不具有 <xref:System.Security.Permissions.RegistryPermission> 的代码可访问这些变量。 同样，在授予权限时，只授予完成工作所需的那些权限。  
  
 通过 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举定义注册表权限访问值。 下表详细说明了其成员。  
  
|值|说明|  
|-----------|-----------------|  
|AllAccess|对注册表变量进行创建、读取和写入访问。|  
|创建|可以创建注册表变量。|  
|NoAccess|没有对注册表变量的访问权限。|  
|读|可以读注册表变量。|  
|写入|可以写注册表变量。|  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例创建 `MyDeviceSettings`的子项。  
  
 [!code-vb[VbVbalrMyRegistry#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.CurrentConfig" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentUser">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey CurrentUser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey CurrentUser" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentUser As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ CurrentUser { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUser : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Win32.RegistryKey" /> 类型，该类型提供对 <see langword="HKEY_CURRENT_USER" /> 的访问。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_CURRENT_USER` 主要用于在 Windows 中存储每用户设置（如颜色和字体）。 密钥因用户而异。  
  
 <xref:System.Security.Permissions> 命名空间中的 <xref:System.Security.Permissions.RegistryPermission> 类控制对注册表变量的访问。 不应将注册表变量存储在某些内存位置，在这些位置，不具有 <xref:System.Security.Permissions.RegistryPermission> 的代码可访问这些变量。 同样，在授予权限时，请授予完成工作所需的最少权限。  
  
 通过 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举定义注册表权限访问值。 下表详细说明了其成员。  
  
|值|说明|  
|-----------|-----------------|  
|AllAccess|对注册表变量进行创建、读取和写入访问。|  
|创建|可以创建注册表变量。|  
|NoAccess|没有对注册表变量的访问权限。|  
|读|可以读注册表变量。|  
|写入|可以写注册表变量。|  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例将删除子项 `Software\MyCompany\Preferences\UserData`。  
  
 [!code-vb[VbVbalrMyRegistry#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.CurrentUser" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DynData">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey DynData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey DynData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.DynData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynData As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ DynData { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynData : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.DynData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("The DynData registry key works only on Win9x, which is not supported by this version of the .NET Framework.  Use the PerformanceData registry key instead.  This property will be removed from a future version of the framework.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Win32.RegistryKey" /> 类型，该类型提供对 <see langword="HKEY_DYNDATA" /> 的访问。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_DYNDATA` 用于存储动态注册表数据，如虚拟设备驱动程序使用的数据，并且仅在 Windows 95/98 系统上受支持。 在非 Windows 95/98 系统上，调用 `Registry.DynData`返回的密钥的任何方法（如 `CreateSubKey`、`DeleteSubKey`、`GetSubKeyCount`、`GetValueCount`等）都将引发 <xref:System.IO.IOException>。  
  
 <xref:System.Security.Permissions> 命名空间中的 <xref:System.Security.Permissions.RegistryPermission> 类控制对注册表变量的访问。 不应将注册表变量存储在某些内存位置，在这些位置，不具有 <xref:System.Security.Permissions.RegistryPermission> 的代码可访问这些变量。 同样，在授予权限时，请授予完成工作所需的最少权限。  
  
 通过 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举定义注册表权限访问值。 下表详细说明了其成员。  
  
|值|说明|  
|-----------|-----------------|  
|AllAccess|对注册表变量进行创建、读取和写入访问。|  
|创建|可以创建注册表变量。|  
|NoAccess|没有对注册表变量的访问权限。|  
|读|可以读注册表变量。|  
|写入|可以写注册表变量。|  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例将删除子项树 `Software\MyCompany\Preferences`。  
  
 [!code-vb[VbVbalrMyRegistry#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.DynData" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (string keyName, string valueName, object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public instance object GetValue(string keyName, string valueName, object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (keyName As String, valueName As String, defaultValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="member this.GetValue : string * string * obj -&gt; obj" Usage="registryProxy.GetValue (keyName, valueName, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keyName"><see langword="String" /> 列中的一个值匹配。 要从中检索值的项。 必需。</param>
        <param name="valueName"><see langword="String" /> 列中的一个值匹配。 要检索的值。 必需。</param>
        <param name="defaultValue"><see langword="Object" /> 列中的一个值匹配。 当值不存在时要提供的默认值。 必需。</param>
        <summary>从注册表项中获取值。</summary>
        <returns>从注册表项中获取值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `valueName` 不区分大小写。  
  
 注册表项可以包含一个不与任何名称关联的值。 在注册表编辑器中显示此未命名值时，将显示字符串 "（默认值）"，而不是名称。 若要检索此未命名值，请为 `valueName`指定 null 或空字符串（""）。  
  
 下表列出了涉及 `GetValue` 方法的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例读取 `HKEY_CURRENT_USER\Software\MyApp` `Name` 的值，并将其显示在 `MessageBox`中。  
  
 [!code-vb[VbVbalrMyRegistry#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">该用户没有读取注册表项所需的权限。</exception>
        <exception cref="T:System.IO.IOException">包含指定值的 <see cref="T:Microsoft.Win32.RegistryKey" /> 已标记为删除。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keyName" /> 未以有效注册表根开头。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LocalMachine">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey LocalMachine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey LocalMachine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalMachine As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ LocalMachine { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalMachine : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Win32.RegistryKey" /> 类型，该类型提供对 <see langword="HKEY_LOCAL_MACHINE" /> 的访问。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_LOCAL_MACHINE` 通常用于存储不同于 Windows 中的用户的设置。 计算机的所有用户共享此密钥。 它的五个子项（`Hardware`、`SAM`、`Security`、`Software`和 `System`）保存本地计算机的配置数据。  
  
 <xref:System.Security.Permissions> 命名空间中的 <xref:System.Security.Permissions.RegistryPermission> 类控制对注册表变量的访问。 不应将注册表变量存储在某些内存位置，在这些位置，不具有 <xref:System.Security.Permissions.RegistryPermission> 的代码可访问这些变量。 同样，在授予权限时，请授予完成工作所需的最少权限。  
  
 通过 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举定义注册表权限访问值。 下表详细说明了其成员。  
  
|值|说明|  
|-----------|-----------------|  
|AllAccess|对注册表变量进行创建、读取和写入访问。|  
|创建|可以创建注册表变量。|  
|NoAccess|没有对注册表变量的访问权限。|  
|读|可以读注册表变量。|  
|写入|可以写注册表变量。|  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例将打开子项 `Software\MyCompany\Preferences`，并将值 `FontColor` 设置为 `"red"`。  
  
 [!code-vb[VbVbalrMyRegistry#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.LocalMachine" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="PerformanceData">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey PerformanceData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey PerformanceData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PerformanceData As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ PerformanceData { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PerformanceData : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Win32.RegistryKey" /> 类型，该类型提供对 <see langword="HKEY_PERFORMANCE_DATA" /> 的访问。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_PERFORMANCE_DATA` 用于访问软件组件的性能信息。 每个软件组件在安装时创建其对象和计数器的密钥，并在执行时写入计数器数据。 尽管此数据用于访问，但不会存储在注册表中。 相反，通过 `HKEY_PERFORMANCE_DATA` 调用注册表函数会导致系统从适当的系统对象管理器收集数据。  
  
 此密钥不存在于 Windows 98 系统上;除了调用 `Name` 方法以外，尝试使用它将引发 <xref:System.IO.IOException>。  
  
 此密钥通常不能写入;尝试在其上创建子项会引发 <xref:System.IO.IOException>。  
  
 <xref:System.Security.Permissions> 命名空间中的 <xref:System.Security.Permissions.RegistryPermission> 类控制对注册表变量的访问。 不应将注册表变量存储在某些内存位置，在这些位置，不具有 <xref:System.Security.Permissions.RegistryPermission> 的代码可访问这些变量。 同样，在授予权限时，请授予完成工作所需的最少权限。  
  
 通过 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举定义注册表权限访问值。 下表详细说明了其成员。  
  
|值|说明|  
|-----------|-----------------|  
|AllAccess|对注册表变量进行创建、读取和写入访问。|  
|创建|可以创建注册表变量。|  
|NoAccess|没有对注册表变量的访问权限。|  
|读|可以读注册表变量。|  
|写入|可以写注册表变量。|  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例从 `MyCompany` 子项获取 `ThisSoftware` 值。  
  
 [!code-vb[VbVbalrMyRegistry#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.PerformanceData" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向注册表项中写入值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string keyName, string valueName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetValue(string keyName, string valueName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (keyName As String, valueName As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : string * string * obj -&gt; unit" Usage="registryProxy.SetValue (keyName, valueName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keyName"><see langword="String" /> 列中的一个值匹配。 要写入到的项的名称。 必需。</param>
        <param name="valueName"><see langword="String" /> 列中的一个值匹配。 要写入的值的名称。 必需。</param>
        <param name="value"><see langword="Object" /> 列中的一个值匹配。 要写入的值。 必需。</param>
        <summary>向注册表项中写入值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的键或值不存在，则创建它。  
  
 下面是涉及 `My.Computer.Registry.SetValue` 方法的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|在注册表项中设置值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
  
   
  
## Examples  
 此示例将键 `HKEY_LOCAL_MACHINE\Software\MyCompany\Preferences`中的值 `FontColor` 设置为 "red"。  
  
 [!code-vb[VbVbalrMyRegistry#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keyName" /> 未以有效注册表根开头。  
  
- 或 - 
 <paramref name="valueName" /> 的长度超过了允许的最大长度（255 个字符）。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><see cref="T:Microsoft.Win32.RegistryKey" /> 是只读的，因此无法对其写入内容（例如，它是根级节点，或者未用写访问权限打开该项）。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有创建或修改注册表项所需的权限。</exception>
        <altmember cref="T:Microsoft.Win32.RegistryValueKind" />
        <altmember cref="Overload:Microsoft.Win32.Registry.SetValue" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetValue(string keyName, string valueName, object value, valuetype Microsoft.Win32.RegistryValueKind valueKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (keyName As String, valueName As String, value As Object, valueKind As RegistryValueKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ value, Microsoft::Win32::RegistryValueKind valueKind);" />
      <MemberSignature Language="F#" Value="member this.SetValue : string * string * obj * Microsoft.Win32.RegistryValueKind -&gt; unit" Usage="registryProxy.SetValue (keyName, valueName, value, valueKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="valueKind" Type="Microsoft.Win32.RegistryValueKind" />
      </Parameters>
      <Docs>
        <param name="keyName"><see langword="String" /> 列中的一个值匹配。 要写入到的项的名称。 必需。</param>
        <param name="valueName"><see langword="String" /> 列中的一个值匹配。 要写入的值的名称。 必需。</param>
        <param name="value"><see langword="Object" /> 列中的一个值匹配。 要写入的值。 必需。</param>
        <param name="valueKind"><see cref="T:Microsoft.Win32.RegistryValueKind" /> 列中的一个值匹配。 必需。</param>
        <summary>向注册表项中写入值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的键或值不存在，则创建它。  
  
 下面是涉及 `My.Computer.Registry.SetValue` 方法的任务示例。  
  
|至|请参阅|  
|--------|---------|  
|在注册表项中设置值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
  
   
  
## Examples  
 此示例将键 `HKEY_LOCAL_MACHINE\Software\MyCompany\Preferences`中的值 `FontColor` 设置为 "red"。  
  
 [!code-vb[VbVbalrMyRegistry#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keyName" /> 未以有效注册表根开头。  
  
- 或 - 
 <paramref name="keyName" /> 的长度超过了允许的最大长度（255 个字符）。  
  
- 或 - 
<paramref name="value" /> 的类型与 <paramref name="valueKind" /> 指定的注册表数据类型不匹配，因此，无法正确转换该数据。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><see cref="T:Microsoft.Win32.RegistryKey" /> 是只读的，因此无法对其写入（例如，它是根级节点，或者未用写访问权限打开该项）。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有创建或修改注册表项所需的权限。</exception>
        <altmember cref="T:Microsoft.Win32.RegistryValueKind" />
        <altmember cref="Overload:Microsoft.Win32.Registry.SetValue" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Users">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey Users { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey Users" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.Users" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Users As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ Users { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Users : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.Users" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Win32.RegistryKey" /> 类型，该类型提供对 <see langword="HKEY_USERS" /> 的访问。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_USERS` 主要用于存储首次用户的默认设置。  
  
 <xref:System.Security.Permissions> 命名空间中的 <xref:System.Security.Permissions.RegistryPermission> 类控制对注册表变量的访问。 不应将注册表变量存储在某些内存位置，在这些位置，不具有 <xref:System.Security.Permissions.RegistryPermission> 的代码可访问这些变量。 同样，在授予权限时，请授予完成工作所需的最少权限。  
  
 通过 <xref:System.Security.Permissions.RegistryPermissionAccess> 枚举定义注册表权限访问值。 下表详细说明了其成员。  
  
|值|对注册表变量的访问|  
|-----------|----------------------------------|  
|AllAccess|创建、读取和写入|  
|创建|创建|  
|NoAccess|无访问权限。|  
|读|读|  
|写入|写入|  
  
 下表列出了涉及 `My.Computer.Registry` 对象的任务示例。  
  
|**收件人**|**请参阅**|  
|------------|-------------|  
|创建注册表项并设置其值|[如何：创建注册表项并设置其值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value)|  
|删除注册表项|[如何：删除注册表项](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key)|  
|从注册表项中读取值|[如何：从注册表项读取值](/dotnet/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key)|  
  
   
  
## Examples  
 此示例统计并显示注册表项中的值数。  
  
 [!code-vb[VbVbalrMyRegistry#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.Users" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry">读取和写入注册表 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry">安全性与注册表 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
