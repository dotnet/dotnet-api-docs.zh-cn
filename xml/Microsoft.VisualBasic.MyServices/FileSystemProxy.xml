<Type Name="FileSystemProxy" FullName="Microsoft.VisualBasic.MyServices.FileSystemProxy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df39852cfb0e53107185156f41c0a6d337901ae1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89882542" /></Metadata><TypeSignature Language="C#" Value="public class FileSystemProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FileSystemProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.MyServices.FileSystemProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemProxy" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemProxy" />
  <TypeSignature Language="F#" Value="type FileSystemProxy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供了用于处理驱动器、文件和目录的属性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了涉及对象的任务的示例 `My.Computer.FileSystem` 。  
  
|功能|查看|  
|--------|---------|  
|从文本文件读取|[如何：读取文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files)|  
|从带分隔符的文本文件中读取|[如何：读取逗号分隔的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|从固定宽度文本文件中读取|[如何：读取固定宽度的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
|从具有多种格式的文本文件中读取|[如何：读取具有多种格式的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats)|  
|从二进制文件读取|[如何：读取二进制文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files)|  
|从文本文件读取 <xref:System.IO.StreamReader>|[如何：使用 StreamReader 读取文件中的文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader)|  
|写入到文本文件|[如何：向文件写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files)|  
|追加到文本文件|[如何：向文本文件追加内容](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files)|  
|写入二进制文件|[如何：写入二进制文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files)|  
|写入 **MyDocuments** 目录中的文本文件|[如何：将文本写入“我的文档”目录中的文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-in-the-my-documents-directory)|  
|写入文本文件 `StreamWriter`|[如何：使用 StreamWriter 向文件中写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter)|  
|复制具有特定模式的文件|[如何：将具有特定模式的文件复制到目录中](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory)|  
|将文件复制到相同的目录|[如何：在同一目录中创建文件副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory)|  
|将文件复制到其他目录|[如何：在不同的目录中创建文件的副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory)|  
|创建文件|[如何：创建文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-file)|  
|删除文件|[如何：删除文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file)|  
|查找具有特定模式的文件|[如何：查找具有特定模式的文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern)|  
|移动文件|[如何：移动文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file)|  
|重命名文件|[如何：重命名文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file)|  
|将目录复制到另一个目录|[如何：将目录复制到另一个目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory)|  
|创建目录|[如何：创建目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory)|  
|查找具有特定模式的子目录|[如何：查找具有特定模式的子目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern)|  
|获取目录中的文件集合|[如何：获取目录中的文件集合](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory)|  
|从 **MyDocuments** 目录中读取|[如何：检索“我的文档”目录中的内容](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-retrieve-the-contents-of-the-my-documents-directory)|  
|分析文件路径|[如何：分析文件路径](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths)|  
  
   
  
## Examples  
 此示例将进行检查以确定文件夹是否 `C:\backup\logs` 存在并检查其属性。  
  
 [!code-vb[VbVbcnMyFileSystem#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CombinePath (baseDirectory As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CombinePath(System::String ^ baseDirectory, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="member this.CombinePath : string * string -&gt; string" Usage="fileSystemProxy.CombinePath (baseDirectory, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory"><see langword="String" />. 要组合的第一个路径。</param>
        <param name="relativePath"><see langword="String" />. 要组合的第二个路径。</param>
        <summary>组合两个路径并返回一个格式正确的路径。</summary>
        <returns>指定路径的组合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法修整多余的斜杠标记字符，以创建格式正确的路径。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CombinePath` 。  
  
|功能|查看|  
|--------|---------|  
|合并目录路径和文件名|[如何：分析文件路径](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths)|  
  
   
  
## Examples  
 此示例将目录路径和文件名结合起来，以创建格式正确的路径。  
  
 [!code-vb[VbRefFile#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 此示例合并了两个路径，以创建格式正确的路径。  
  
 [!code-vb[VbRefFile#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 此示例返回 `C:\Dir1\Dir2\Dir4\Dir5\File.txt` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="baseDirectory" /> 或 <paramref name="relativePath" /> 是格式不正确的路径。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一个目录复制到另一个目录中。</summary>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory">如何：在 Visual Basic 中获取目录中的文件集合</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要复制的目录。</param>
        <param name="destinationDirectoryName">应将目录复制到的位置。</param>
        <summary>将一个目录复制到另一个目录中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法复制目录的内容以及目录本身。 如果目标目录不存在，则创建它。 如果目标位置中存在具有相同名称的目录，则将合并这两个目录的内容。 操作期间可为此目录指定新名称。  
  
 在目录中复制文件时，可能会引发由特定文件导致的异常。 如果引发此类异常，则会将它们合并为一个异常，其属性以的 `Data` 形式保存项， <xref:System.Collections.IDictionary> 其中文件或目录路径为密钥，特定异常消息包含在对应的值中。 用于 `For…Each` 枚举条目。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyDirectory` 。  
  
|功能|查看|  
|--------|---------|  
|复制目录|[如何：将目录复制到另一个目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory)|  
  
   
  
## Examples  
 下面的示例将目录复制 `TestDirectory1` 到 `TestDirectory2` 中，并覆盖现有文件。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 将和替换为要 `C:\TestDirectory1` `C:\TestDirectory2` 复制的目录的路径和名称，将替换为要复制到的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
        <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory">如何：在 Visual Basic 中获取目录中的文件集合</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths">如何：在 Visual Basic 中分析文件路径</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要复制的目录。</param>
        <param name="destinationDirectoryName">应将目录复制到的位置。</param>
        <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>将一个目录复制到另一个目录中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法复制目录的内容以及目录本身。 如果目标目录不存在，则创建它。 如果目标位置中存在具有相同名称的目录，则将合并这两个目录的内容。 操作期间可为此目录指定新名称。  
  
 在目录中复制文件时，可能会引发由特定文件导致的异常。 如果引发此类异常，则会将它们合并为一个异常，其属性以的 `Data` 形式保存项， <xref:System.Collections.IDictionary> 其中文件或目录路径为密钥，特定异常消息包含在对应的值中。 用于 `For…Each` 枚举条目。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyDirectory` 。  
  
|功能|查看|  
|--------|---------|  
|复制目录|[如何：将目录复制到另一个目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory)|  
  
   
  
## Examples  
 下面的示例将目录复制 `TestDirectory1` 到 `TestDirectory2` 中，并覆盖现有文件。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 将和替换为要 `C:\TestDirectory1` `C:\TestDirectory2` 复制的目录的路径和名称，将替换为要复制到的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
        <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" /> 设置为 <see langword="UIOption.AllDialogs" /> 且用户取消了该操作，或者无法复制目录中的一个或多个文件。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory">如何：在 Visual Basic 中获取目录中的文件集合</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths">如何：在 Visual Basic 中分析文件路径</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要复制的目录。</param>
        <param name="destinationDirectoryName">应将目录复制到的位置。</param>
        <param name="overwrite">要覆盖现有文件，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>将一个目录复制到另一个目录中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法复制目录的内容以及目录本身。 如果目标目录不存在，则创建它。 如果目标位置中存在具有相同名称的目录，则将合并这两个目录的内容。 操作期间可为此目录指定新名称。  
  
 在目录中复制文件时，可能会引发由特定文件导致的异常，例如，在将设置为时，在合并期间存在的文件 `overwrite` `False` 。 如果引发此类异常，则会将它们合并为一个异常，其属性以的 `Data` 形式保存项， <xref:System.Collections.IDictionary> 其中文件或目录路径为密钥，特定异常消息包含在对应的值中。 用于 `For…Each` 枚举条目。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyDirectory` 。  
  
|功能|查看|  
|--------|---------|  
|复制目录|[如何：将目录复制到另一个目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory)|  
  
   
  
## Examples  
 下面的示例将目录复制 `TestDirectory1` 到 `TestDirectory2` 中，并覆盖现有文件。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 将和替换为要 `C:\TestDirectory1` `C:\TestDirectory2` 复制的目录的路径和名称，将替换为要复制到的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
        <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory">如何：在 Visual Basic 中获取目录中的文件集合</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths">如何：在 Visual Basic 中分析文件路径</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要复制的目录。</param>
        <param name="destinationDirectoryName">应将目录复制到的位置。</param>
        <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定当用户在操作过程中单击“取消”时应执行的操作****。 默认值为 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</param>
        <summary>将一个目录复制到另一个目录中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法复制目录的内容以及目录本身。 如果目标目录不存在，则创建它。 如果目标位置中存在具有相同名称的目录，则将合并这两个目录的内容。 操作期间可为此目录指定新名称。  
  
 在目录中复制文件时，可能会引发由特定文件导致的异常。 如果引发此类异常，则会将它们合并为一个异常，其属性以的 `Data` 形式保存项， <xref:System.Collections.IDictionary> 其中文件或目录路径为密钥，特定异常消息包含在对应的值中。 用于 `For…Each` 枚举条目。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyDirectory` 。  
  
|功能|查看|  
|--------|---------|  
|复制目录|[如何：将目录复制到另一个目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory)|  
  
   
  
## Examples  
 下面的示例将目录复制 `TestDirectory1` 到 `TestDirectory2` 中，并覆盖现有文件。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 将和替换为要 `C:\TestDirectory1` `C:\TestDirectory2` 复制的目录的路径和名称，将替换为要复制到的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
        <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" /> 设置为 <see langword="UIOption.AllDialogs" /> 且用户取消了该操作，或者无法复制目录中的一个或多个文件。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory">如何：在 Visual Basic 中获取目录中的文件集合</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths">如何：在 Visual Basic 中分析文件路径</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将文件复制到新的位置。</summary>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory">如何：在 Visual Basic 中将具有特定模式的文件复制到目录中</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory">如何：在同一目录中创建文件副本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory">如何：在 Visual Basic 中将一个目录复制到另一个目录</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file">如何：在 Visual Basic 中重命名文件</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要复制的文件。</param>
        <param name="destinationFileName">文件应复制到的位置。</param>
        <summary>将文件复制到新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不会保留)  (访问控制项的 Ace。 新创建的文件从创建它的目录继承默认的 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyFile` 。  
  
|功能|查看|  
|--------|---------|  
|将文件复制到相同的目录。|[如何：在同一目录中创建文件副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory)|  
|将文件复制到其他目录。|[如何：在不同的目录中创建文件的副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory)|  
  
   
  
## Examples  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 而不覆盖现有文件。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 并将其重命名 `NewFile.txt` 。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> 包含路径信息。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目标目录中的同名文件正被使用。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory">如何：在 Visual Basic 中将具有特定模式的文件复制到目录中</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory">如何：在同一目录中创建文件副本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory">如何：在 Visual Basic 中将一个目录复制到另一个目录</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file">如何：在 Visual Basic 中重命名文件</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要复制的文件。</param>
        <param name="destinationFileName">文件应复制到的位置。</param>
        <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>将文件复制到新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不会保留)  (访问控制项的 Ace。 新创建的文件从创建它的目录继承默认的 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyFile` 。  
  
|功能|查看|  
|--------|---------|  
|将文件复制到相同的目录。|[如何：在同一目录中创建文件副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory)|  
|将文件复制到其他目录。|[如何：在不同的目录中创建文件的副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory)|  
  
   
  
## Examples  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 而不覆盖现有文件。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 并将其重命名 `NewFile.txt` 。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> 包含路径信息。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目标文件存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory">如何：在 Visual Basic 中将具有特定模式的文件复制到目录中</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory">如何：在同一目录中创建文件副本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory">如何：在 Visual Basic 中将一个目录复制到另一个目录</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file">如何：在 Visual Basic 中重命名文件</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要复制的文件。</param>
        <param name="destinationFileName">文件应复制到的位置。</param>
        <param name="overwrite">如果应覆盖现有文件，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>将文件复制到新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不会保留)  (访问控制项的 Ace。 新创建的文件从创建它的目录继承默认的 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyFile` 。  
  
|功能|查看|  
|--------|---------|  
|将文件复制到相同的目录。|[如何：在同一目录中创建文件副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory)|  
|将文件复制到其他目录。|[如何：在不同的目录中创建文件的副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory)|  
  
   
  
## Examples  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 而不覆盖现有文件。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 并将其重命名 `NewFile.txt` 。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> 包含路径信息。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目标文件存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory">如何：在 Visual Basic 中将具有特定模式的文件复制到目录中</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory">如何：在同一目录中创建文件副本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory">如何：在 Visual Basic 中将一个目录复制到另一个目录</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file">如何：在 Visual Basic 中重命名文件</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要复制的文件。</param>
        <param name="destinationFileName">文件应复制到的位置。</param>
        <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定当用户在操作过程中单击“取消”时应执行的操作****。 默认值为 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</param>
        <summary>将文件复制到新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不会保留)  (访问控制项的 Ace。 新创建的文件从创建它的目录继承默认的 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CopyFile` 。  
  
|功能|查看|  
|--------|---------|  
|将文件复制到相同的目录。|[如何：在同一目录中创建文件副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory)|  
|将文件复制到其他目录。|[如何：在不同的目录中创建文件的副本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory)|  
  
   
  
## Examples  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 而不覆盖现有文件。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 此示例将文件复制 `Test.txt` 到目录 `TestFiles2` 并将其重命名 `NewFile.txt` 。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 将文件路径替换为要在代码中使用的路径。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> 包含路径信息。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目标文件存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="UICancelOption" /> 设置为 <see langword="ThrowException" />，并且用户已经取消了该操作或者发生了未指定的 I/O 错误。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory">如何：在 Visual Basic 中将具有特定模式的文件复制到目录中</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory">如何：在同一目录中创建文件副本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory">如何：在 Visual Basic 中将一个目录复制到另一个目录</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file">如何：在 Visual Basic 中重命名文件</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CreateDirectory(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDirectory (directory As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDirectory(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.CreateDirectory : string -&gt; unit" Usage="fileSystemProxy.CreateDirectory directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">目录的名称和位置。</param>
        <summary>创建目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该目录已存在，则不引发任何异常。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.CreateDirectory` 。  
  
|功能|查看|  
|--------|---------|  
|创建目录|[如何：创建目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory)|  
  
   
  
## Examples  
 此示例在中创建目录 `NewDirectory` `C:\Documents and Settings\All Users\Documents` 。  
  
 [!code-vb[VbVbcnMyFileSystem#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">目录名称格式不正确。 例如，它包含非法字符或仅包含空白。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.PathTooLongException">目录名太长。</exception>
        <exception cref="T:System.NotSupportedException">目录名只是一个冒号 (:)。</exception>
        <exception cref="T:System.IO.IOException">要创建的目录的父目录是只读的。</exception>
        <exception cref="T:System.UnauthorizedAccessException">用户没有创建目录的权限。</exception>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDirectory : string with get, set" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前目录。</summary>
        <value>文件 I/O 操作的当前目录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory` 是系统范围的环境变量。  
  
   
  
## Examples  
 此示例将返回当前目录，并将其显示在消息框中。  
  
 [!code-vb[VbVbcnMyFileSystem#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 此示例将当前目录设置为 `C:\TestDirectory` 。  
  
 [!code-vb[VbVbcnMyFileSystem#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">该路径无效。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>删除目录。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, onDirectoryNotEmpty As DeleteDirectoryOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.DeleteDirectoryOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, onDirectoryNotEmpty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">要删除的目录。</param>
        <param name="onDirectoryNotEmpty">指定当要删除的目录中含有文件或目录时应采取的操作。 默认值为 <see langword="DeleteDirectoryOption.DeleteAllContents" />。</param>
        <summary>删除目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 `OldDirectory`仅当目录为空时，此示例才会删除该目录。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容，要求用户确认删除，但不会将内容发送到 **回收站**。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容，并将其发送到 **回收站**，但不会显示操作的进度。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径是零长度字符串、格式不正确、仅包含空白，或者包含无效字符（包括通配符）。 路径是设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目录不存在，或者目录是一个文件。</exception>
        <exception cref="T:System.IO.IOException">目录或子目录中的某个文件正被使用。</exception>
        <exception cref="T:System.NotSupportedException">目录名中包含冒号 (:)。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">该用户没有必需的权限。</exception>
        <exception cref="T:System.OperationCanceledException">用户取消了操作，或无法删除该目录。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file">如何：在 Visual Basic 中删除文件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">要删除的目录。</param>
        <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">指定是否应将删除的文件发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
        <summary>删除目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` `recycle` 不是用户交互的应用程序（如 Windows 服务）不支持和参数。  
  
   
  
## Examples  
 `OldDirectory`仅当目录为空时，此示例才会删除该目录。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容，要求用户确认删除，但不会将内容发送到 **回收站**。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容，并将其发送到 **回收站**，但不会显示操作的进度。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径是零长度字符串、格式不正确、仅包含空白，或者包含无效字符（包括通配符）。 路径是设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目录不存在，或者目录是一个文件。</exception>
        <exception cref="T:System.IO.IOException">目录或子目录中的某个文件正被使用。</exception>
        <exception cref="T:System.NotSupportedException">目录名中包含冒号 (:)。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">该用户没有必需的权限。</exception>
        <exception cref="T:System.OperationCanceledException">用户取消了操作，或无法删除该目录。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file">如何：在 Visual Basic 中删除文件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">要删除的目录。</param>
        <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">指定是否应将删除的文件发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
        <param name="onUserCancel">指定在用户单击“取消”时是否引发异常****。</param>
        <summary>删除目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` `recycle` `onUserCancel` 不是用户交互的应用程序（如 Windows 服务）不支持、和参数。  
  
   
  
## Examples  
 `OldDirectory`仅当目录为空时，此示例才会删除该目录。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容，要求用户确认删除，但不会将内容发送到 **回收站**。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 此示例将删除目录 `OldDirectory` 及其所有内容，并将其发送到 **回收站**，但不会显示操作的进度。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径是零长度字符串、格式不正确、仅包含空白，或者包含无效字符（包括通配符）。 路径是设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目录不存在，或者目录是一个文件。</exception>
        <exception cref="T:System.IO.IOException">目录或子目录中的某个文件正被使用。</exception>
        <exception cref="T:System.NotSupportedException">目录名中包含冒号 (:)。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">该用户没有必需的权限。</exception>
        <exception cref="T:System.OperationCanceledException">用户取消了操作，或无法删除该目录。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file">如何：在 Visual Basic 中删除文件</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>删除文件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string -&gt; unit" Usage="fileSystemProxy.DeleteFile file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要删除的文件的名称和路径。</param>
        <summary>删除文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.DeleteFile` 。  
  
|功能|查看|  
|--------|---------|  
|删除文件|[如何：删除文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file)|  
  
   
  
## Examples  
 此示例删除文件 `Test.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 此示例将删除文件 `Test.txt` ，并允许用户确认应删除该文件。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 此示例将删除该文件 `Test.txt` 并将其发送到 **回收站**。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；带有必须指定文件的尾部反斜杠；是设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.IO.IOException">该文件正在使用。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有删除该文件的权限，或者该文件为只读。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file">如何：在 Visual Basic 中删除文件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">要删除的文件的名称和路径。</param>
        <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">删除的文件是否应发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
        <summary>删除文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` `recycle` 不是用户交互的应用程序（如 Windows 服务）不支持和参数。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.DeleteFile` 。  
  
|功能|查看|  
|--------|---------|  
|删除文件|[如何：删除文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file)|  
  
   
  
## Examples  
 此示例删除文件 `Test.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 此示例将删除文件 `Test.txt` ，并允许用户确认应删除该文件。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 此示例将删除该文件 `Test.txt` 并将其发送到 **回收站**。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；带有必须指定文件的尾部反斜杠；是设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.IO.IOException">该文件正在使用。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有删除该文件的权限，或者该文件为只读。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file">如何：在 Visual Basic 中删除文件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">要删除的文件的名称和路径。</param>
        <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">删除的文件是否应发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
        <param name="onUserCancel">指定用户取消操作时是否引发异常。 默认值为 <see langword="UICancelOption.ThrowException" />。</param>
        <summary>删除文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` `recycle` `onUserCancel` 不是用户交互的应用程序（如 Windows 服务）不支持、和参数。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.DeleteFile` 。  
  
|功能|查看|  
|--------|---------|  
|删除文件|[如何：删除文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file)|  
  
   
  
## Examples  
 此示例删除文件 `Test.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 此示例将删除文件 `Test.txt` ，并允许用户确认应删除该文件。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 此示例将删除该文件 `Test.txt` 并将其发送到 **回收站**。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；带有必须指定文件的尾部反斜杠；是设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.IO.IOException">该文件正在使用。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有删除该文件的权限，或者该文件为只读。</exception>
        <exception cref="T:System.OperationCanceledException">用户已取消该操作并且 <paramref name="onUserCancel" /> 已设置为 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file">如何：在 Visual Basic 中删除文件</related>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool DirectoryExists(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DirectoryExists (directory As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DirectoryExists(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.DirectoryExists : string -&gt; bool" Usage="fileSystemProxy.DirectoryExists directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">目录的路径。</param>
        <summary>如果指定目录存在，则返回 <see langword="True" />。</summary>
        <returns>如果目录存在，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例将确定目录是否 `C:\backup\logs` 存在并检查其属性。  
  
 [!code-vb[VbRefFile#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories">演练：在 Visual Basic 中操作文件和目录</related>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Drives As ReadOnlyCollection(Of DriveInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ Drives { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Drives : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回所有可用驱动器名称的只读集合。</summary>
        <value>作为 <see cref="T:System.IO.DriveInfo" /> 对象的所有可用驱动器的只读集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回所有逻辑驱动器。  
  
   
  
## Examples  
 此示例在一个消息框中显示可用的驱动器名称。  
  
 [!code-vb[VbRefFile#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool FileExists(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileExists (file As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FileExists(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.FileExists : string -&gt; bool" Usage="fileSystemProxy.FileExists file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">文件的名称和路径。</param>
        <summary>如果指定文件存在，则返回 <see langword="True" />。</summary>
        <returns>如果文件存在，则返回 <see langword="True" />；否则此方法返回 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果应用程序没有足够的权限读取指定的文件，则该 `FileExists` 方法返回 `False` ，而不考虑路径是否存在; 该方法不会引发异常。  
  
   
  
## Examples  
 此示例检查文件是否 `Check.txt` 存在，并在消息框中提供信息。  
  
 [!code-vb[VbRefFile#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文件名称以反斜杠 (\\) 结尾。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories">演练：在 Visual Basic 中操作文件和目录</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回字符串的只读集合，这些字符串表示包含指定文本的文件的名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">要搜索的目录。</param>
        <param name="containsText">搜索文本。</param>
        <param name="ignoreCase">如果搜索应区分大小写，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="True" />。</param>
        <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <summary>返回字符串的只读集合，这些字符串表示包含指定文本的文件的名称。</summary>
        <returns>包含指定文本的文件名的只读集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有找到与指定模式匹配的文件，则返回一个空集合。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.FindInFiles` 。  
  
|功能|查看|  
|--------|---------|  
|在目录中搜索包含特定字符串的文件|[演练：在 Visual Basic 中操作文件和目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories)|  
  
   
  
## Examples  
 此示例 `C:\TestDir` 在目录中搜索包含字符串的所有文件 `"sample string"` ，并将结果显示在中 `ListBox1` 。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 若要工作，该项目必须包含一个 `ListBox` 名为的 `ListBox1` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一而无效：是零长度字符串;它仅包含空格;它包含无效字符;或者是 (以<c> \\ . \</c>) 开头的设备路径。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">指定的目录路径中包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories">演练：在 Visual Basic 中操作文件和目录</related>
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption, ParamArray fileWildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ fileWildcards);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType, fileWildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">要搜索的目录。</param>
        <param name="containsText">搜索文本。</param>
        <param name="ignoreCase">如果搜索应区分大小写，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="True" />。</param>
        <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <param name="fileWildcards">要匹配的模式。</param>
        <summary>返回字符串的只读集合，这些字符串表示包含指定文本的文件的名称。</summary>
        <returns>包含指定文本的文件名的只读集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有找到与指定模式匹配的文件，则返回一个空集合。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.FindInFiles` 。  
  
|功能|查看|  
|--------|---------|  
|在目录中搜索包含特定字符串的文件|[演练：在 Visual Basic 中操作文件和目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories)|  
  
   
  
## Examples  
 此示例 `C:\TestDir` 在目录中搜索包含字符串的所有文件 `"sample string"` ，并将结果显示在中 `ListBox1` 。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 若要工作，该项目必须包含一个 `ListBox` 名为的 `ListBox1` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一而无效：是零长度字符串;它仅包含空格;它包含无效字符;或者是 (以<c> \\ . \</c>) 开头的设备路径。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">指定的目录路径中包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories">演练：在 Visual Basic 中操作文件和目录</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个字符串集合，这些字符串表示目录内子目录的路径名。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">目录的名称和路径。</param>
        <summary>返回一个字符串集合，这些字符串表示目录内子目录的路径名。</summary>
        <returns>所指定目录中，子目录路径名称的只读集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.GetDirectories` 。  
  
|功能|查看|  
|--------|---------|  
|列出具有特定模式的子目录|[如何：查找具有特定模式的子目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern)|  
  
   
  
## Examples  
 下面的示例返回目录结构中包含该单词的所有目录， `Logs` 并将其添加到中 `ListBox1` 。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 此示例要求在 `ListBox` `ListBox1` 窗体上具有命名的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">目录的名称和路径。</param>
        <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <param name="wildcards">用于匹配名称的模式。</param>
        <summary>返回一个字符串集合，这些字符串表示目录内子目录的路径名。</summary>
        <returns>所指定目录中，子目录路径名称的只读集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用 `wildcards` 参数来指定特定模式。 如果要在搜索中包含子目录的内容，请将 `searchType` 参数设置为 `SearchAllSubDirectories`。  
  
 如果没有找到与指定模式匹配的目录，则返回一个空集合。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.GetDirectories` 。  
  
|功能|查看|  
|--------|---------|  
|列出具有特定模式的子目录|[如何：查找具有特定模式的子目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern)|  
  
   
  
## Examples  
 下面的示例返回目录结构中包含该单词的所有目录， `Logs` 并将其添加到中 `ListBox1` 。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 此示例要求在 `ListBox` `ListBox1` 窗体上具有命名的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException">一个或多个指定的通配符为 <see langword="Nothing" />、空字符串，或者仅包含空格。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectoryInfo (directory As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DirectoryInfo ^ GetDirectoryInfo(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectoryInfo : string -&gt; System.IO.DirectoryInfo" Usage="fileSystemProxy.GetDirectoryInfo directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory"><see langword="String" />. 目录的路径。</param>
        <summary>返回指定路径的 <see cref="T:System.IO.DirectoryInfo" /> 对象。</summary>
        <returns>指定路径的 <see cref="T:System.IO.DirectoryInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该目录不存在，则只有在第一次访问该对象上的属性时才会引发异常 <xref:System.IO.DirectoryInfo> 。  
  
   
  
## Examples  
 此示例获取 <xref:System.IO.DirectoryInfo> 目录的对象 `C:\Documents and Settings` 并显示目录的创建时间、上次访问时间和上次写入时间。  
  
 [!code-vb[VbRefFile#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">目录路径中包含冒号 (:)，或者格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDriveInfo (drive As String) As DriveInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DriveInfo ^ GetDriveInfo(System::String ^ drive);" />
      <MemberSignature Language="F#" Value="member this.GetDriveInfo : string -&gt; System.IO.DriveInfo" Usage="fileSystemProxy.GetDriveInfo drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">要检查的驱动器。</param>
        <summary>返回指定驱动器的 <see cref="T:System.IO.DriveInfo" /> 对象。</summary>
        <returns>指定驱动器的 <see cref="T:System.IO.DriveInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.DriveInfo>类对驱动器建模，并提供用于查询驱动器信息的方法和属性。 使用 <xref:System.IO.DriveInfo> 确定可用的驱动器和设备的类型。 您还可以查询属性，以确定驱动器上的容量和可用空间。  
  
   
  
## Examples  
 此示例将获取 <xref:System.IO.DriveInfo> C 驱动器的对象，并使用它来显示有关驱动器的信息。  
  
 [!code-vb[VbRefFile#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 有关不同驱动器类型的信息，请参阅 <xref:System.IO.DriveType> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="drive" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFileInfo (file As String) As FileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::FileInfo ^ GetFileInfo(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.GetFileInfo : string -&gt; System.IO.FileInfo" Usage="fileSystemProxy.GetFileInfo file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">文件的名称和路径。</param>
        <summary>返回指定文件的 <see cref="T:System.IO.FileInfo" /> 对象。</summary>
        <returns>指定文件的 <see cref="T:System.IO.FileInfo" /> 对象</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果文件不存在，则不会引发异常;相反，它将在第一次访问对象的属性时引发。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.GetFileInfo` 。  
  
|功能|查看|  
|--------|---------|  
|确定文件的名称和路径|[如何：分析文件路径](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths)|  
  
   
  
## Examples  
 此示例将检索 <xref:System.IO.FileInfo?displayProperty=nameWithType> 文件的对象， `MyLogFile.log` 并使用它来报告文件的完整名称、上次访问时间和长度。  
  
 [!code-vb[VbRefFile#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径名称格式不正确。 例如，包含无效字符或仅为空白。 文件名具有尾随斜杠标记。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.NotSupportedException">路径的字符串中间包含一个冒号。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径太长。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少必要的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少对文件的 ACL（访问控制列表）的访问权限。</exception>
        <altmember cref="T:System.IO.FileInfo" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories">演练：在 Visual Basic 中操作文件和目录</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回字符串的只读集合，这些字符串表示目录内文件的名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">要搜索的目录。</param>
        <summary>返回字符串的只读集合，这些字符串表示目录内文件的名称。</summary>
        <returns>指定目录中的文件名的只读集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有找到与指定模式匹配的文件，则返回一个空集合。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.GetFiles` 。  
  
|功能|查看|  
|--------|---------|  
|获取目录中的文件集合|[如何：获取目录中的文件集合](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory)|  
|在目录中查找具有特定模式的文件|[如何：查找具有特定模式的文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern)|  
  
   
  
## Examples  
 下面的示例返回目录中的所有文件，并将它们添加到 `ListBox1`。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 此示例要求在 `ListBox` `ListBox1` 窗体上具有命名的。  
  
 此示例返回目录中扩展名为的所有文件 `.txt` ，并将其添加到中 `ListBox1` 。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 此示例要求在 `ListBox` `ListBox1` 窗体上具有命名的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">要搜索的目录不存在。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" /> 指向某个现有文件。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern">如何：在 Visual Basic 中查找具有特定模式的文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory">如何：在 Visual Basic 中获取目录中的文件集合</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">要搜索的目录。</param>
        <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <param name="wildcards">要匹配的模式。</param>
        <summary>返回字符串的只读集合，这些字符串表示目录内文件的名称。</summary>
        <returns>指定目录中的文件名的只读集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有找到与指定模式匹配的文件，则返回一个空集合。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.GetFiles` 。  
  
|功能|查看|  
|--------|---------|  
|获取目录中的文件集合|[如何：获取目录中的文件集合](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory)|  
|在目录中查找具有特定模式的文件|[如何：查找具有特定模式的文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern)|  
  
   
  
## Examples  
 下面的示例返回目录中的所有文件，并将它们添加到 `ListBox1`。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 此示例要求在 `ListBox` `ListBox1` 窗体上具有命名的。  
  
 此示例返回目录中扩展名为的所有文件 `.txt` ，并将其添加到中 `ListBox1` 。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 此示例要求在 `ListBox` `ListBox1` 窗体上具有命名的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">要搜索的目录不存在。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" /> 指向某个现有文件。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern">如何：在 Visual Basic 中查找具有特定模式的文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory">如何：在 Visual Basic 中获取目录中的文件集合</related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; string" Usage="fileSystemProxy.GetName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">必需。 要分析的路径。 <see langword="String" />.</param>
        <summary>从提供的路径分析文件名。</summary>
        <returns>来自指定路径的文件名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个字符串运算; `FileSystem` 不会检查。  
  
 此 `GetName` 方法将忽略在路径末尾出现的斜杠标记。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.GetFileName` 。  
  
|功能|查看|  
|--------|---------|  
|分析文件路径|[如何：分析文件路径](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths)|  
  
   
  
## Examples  
 下面的示例分析文件路径，并返回该文件的名称。  
  
 [!code-vb[VbVbcnMyFileSystem#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 将路径替换 `C:\Testdirectory\Testfile` 为要分析的路径。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetParentPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParentPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetParentPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetParentPath : string -&gt; string" Usage="fileSystemProxy.GetParentPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要检查的路径。</param>
        <summary>返回所提供的路径的父路径。</summary>
        <returns>所提供的路径的父路径。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个字符串运算;不检查文件系统。  
  
   
  
## Examples  
 此示例获取的父路径 `C:\Backups\Tmp\Test` 。  
  
 [!code-vb[VbRefFile#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径是根路径，因此没有父路径。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths">如何：在 Visual Basic 中分析文件路径</related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="member this.GetTempFileName : unit -&gt; string" Usage="fileSystemProxy.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在磁盘上创建一个唯一命名的零字节临时文件并返回该文件的完整路径。</summary>
        <returns>包含该临时文件的完整路径的 <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于创建临时文件。  
  
   
  
## Examples  
 此示例将创建一个临时文件并返回其路径。  
  
 [!code-vb[VbVbcnMyFileSystem#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将目录从一个位置移动到另一个位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移动的目录的路径。</param>
        <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
        <summary>将目录从一个位置移动到另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果尝试将目录移动到不存在的目录中，则将创建目标结构。  
  
   
  
## Examples  
 此示例 `Directory1` 在内移动 `Directory2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 此示例在中移动 `Directory1` `Directory2` ，并覆盖目录（如果已存在）。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
        <exception cref="T:System.IO.IOException">源是根目录，或者，源路径与目标路径相同。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移动的目录的路径。</param>
        <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
        <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>将目录从一个位置移动到另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果尝试将目录移动到不存在的目录中，则将创建目标结构。  
  
   
  
## Examples  
 此示例 `Directory1` 在内移动 `Directory2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 此示例在中移动 `Directory1` `Directory2` ，并覆盖目录（如果已存在）。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
        <exception cref="T:System.IO.IOException">目标目录已存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移动的目录的路径。</param>
        <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
        <param name="overwrite">如果应覆盖现有目录，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>将目录从一个位置移动到另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果尝试将目录移动到不存在的目录中，则将创建目标结构。  
  
   
  
## Examples  
 此示例 `Directory1` 在内移动 `Directory2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 此示例在中移动 `Directory1` `Directory2` ，并覆盖目录（如果已存在）。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
        <exception cref="T:System.IO.IOException">目标目录已存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移动的目录的路径。</param>
        <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
        <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定用户取消操作时是否引发异常。 默认值为 <see langword="UICancelOption.ThrowException" />。</param>
        <summary>将目录从一个位置移动到另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果尝试将目录移动到不存在的目录中，则将创建目标结构。  
  
   
  
## Examples  
 此示例 `Directory1` 在内移动 `Directory2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 此示例在中移动 `Directory1` `Directory2` ，并覆盖目录（如果已存在）。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="onUserCancel" /> 设置为 <see langword="ThrowException" /> 并且无法复制子目录中的文件。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" /> 设置为 <see langword="ThrowException" />，并且用户取消了该操作，或者无法完成该操作。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将文件移动到一个新位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移动的文件的路径。</param>
        <param name="destinationFileName">文件应移到的目录的路径。</param>
        <summary>将文件移动到一个新位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目标结构不存在，则创建它。  
  
 `MoveFile`仅当在同一卷内移动文件时，方法才会保留 ace (访问控制项) 。 这包括继承的 Ace，在移动 (直接 Ace 时，这会成为直接的 ace) 。 如果在卷之间移动文件，则不会复制 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.MoveFile` 。  
  
|功能|查看|  
|--------|---------|  
|移动文件|[如何：移动文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file)|  
  
   
  
## Examples  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 并将其重命名 `Test2.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移动的文件的路径。</param>
        <param name="destinationFileName">文件应移到的目录的路径。</param>
        <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>将文件移动到一个新位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目标结构不存在，则创建它。  
  
 `MoveFile`仅当在同一卷内移动文件时，方法才会保留 ace (访问控制项) 。 这包括继承的 Ace，在移动 (直接 Ace 时，这会成为直接的 ace) 。 如果在卷之间移动文件，则不会复制 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.MoveFile` 。  
  
|功能|查看|  
|--------|---------|  
|移动文件|[如何：移动文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file)|  
  
   
  
## Examples  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 并将其重命名 `Test2.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移动的文件的路径。</param>
        <param name="destinationFileName">文件应移到的目录的路径。</param>
        <param name="overwrite">要覆盖现有文件，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>将文件移动到一个新位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目标结构不存在，则创建它。  
  
 `MoveFile`仅当在同一卷内移动文件时，方法才会保留 ace (访问控制项) 。 这包括继承的 Ace，在移动 (直接 Ace 时，这会成为直接的 ace) 。 如果在卷之间移动文件，则不会复制 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.MoveFile` 。  
  
|功能|查看|  
|--------|---------|  
|移动文件|[如何：移动文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file)|  
  
   
  
## Examples  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 并将其重命名 `Test2.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移动的文件的路径。</param>
        <param name="destinationFileName">文件应移到的目录的路径。</param>
        <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定用户取消操作时是否引发异常。 默认值为 <see langword="UICancelOption.ThrowException" />。</param>
        <summary>将文件移动到一个新位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目标结构不存在，则创建它。  
  
 `MoveFile`仅当在同一卷内移动文件时，方法才会保留 ace (访问控制项) 。 这包括继承的 Ace，在移动 (直接 Ace 时，这会成为直接的 ace) 。 如果在卷之间移动文件，则不会复制 Ace。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.MoveFile` 。  
  
|功能|查看|  
|--------|---------|  
|移动文件|[如何：移动文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file)|  
  
   
  
## Examples  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 此示例将文件 `Test.txt` 从移动 `TestDir1` 到 `TestDir2` 并将其重命名 `Test2.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" /> 设置为 <see langword="ThrowException" />，并且用户已经取消了该操作或者发生了未指定的 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用 <see langword="OpenTextFieldParser" /> 方法可以创建 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象，该对象为分析结构化文本文件（例如日志）提供了一种简单而有效的方法。 <see langword="TextFieldParser" /> 对象可用于读取分隔文件和固定宽度文件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要使用 <see langword="TextFieldParser" /> 打开的文件。</param>
        <summary>使用 <see langword="OpenTextFieldParser" /> 方法可以创建 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象，该对象为分析结构化文本文件（例如日志）提供了一种简单而有效的方法。 <see langword="TextFieldParser" /> 对象可用于读取分隔文件和固定宽度文件。</summary>
        <returns>用于读取指定文件的 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.OpenTextFieldParser` 。  
  
|功能|查看|  
|--------|---------|  
|从带分隔符的文本文件中读取|[如何：读取逗号分隔的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|从固定宽度文本文件中读取|[如何：读取固定宽度的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
|从具有多种格式的文本文件中读取|[如何：读取具有多种格式的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats)|  
  
   
  
## Examples  
 此示例打开 `TextFieldParser.reader`，并使用它读取 `C:\TestFolder1\Test1.txt`。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">无法使用指定的格式分析某行 ()。 此异常消息指定导致发生异常的行，同时将 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 属性分配给该行中包含的文本。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files">如何：在 Visual Basic 中读取文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files">如何：在 Visual Basic 中读取逗号分隔的文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats">如何：在 Visual Basic 中读取具有多种格式的文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object">使用 TextFieldParser 对象分析文本文件</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray fieldWidths As Integer()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * int[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, fieldWidths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">要使用 <see langword="TextFieldParser" /> 打开的文件。</param>
        <param name="fieldWidths">字段的宽度。</param>
        <summary>使用 <see langword="OpenTextFieldParser" /> 方法可以创建 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象，该对象为分析结构化文本文件（例如日志）提供了一种简单而有效的方法。 <see langword="TextFieldParser" /> 对象可用于读取分隔文件和固定宽度文件。</summary>
        <returns>用于读取指定文件的 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.OpenTextFieldParser` 。  
  
|功能|查看|  
|--------|---------|  
|从带分隔符的文本文件中读取|[如何：读取逗号分隔的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|从固定宽度文本文件中读取|[如何：读取固定宽度的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
|从具有多种格式的文本文件中读取|[如何：读取具有多种格式的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats)|  
  
   
  
## Examples  
 此示例打开 `TextFieldParser.reader`，并使用它读取 `C:\TestFolder1\Test1.txt`。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">无法使用指定的格式分析某行 ()。 此异常消息指定导致发生异常的行，同时将 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 属性分配给该行中包含的文本。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files">如何：在 Visual Basic 中读取文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files">如何：在 Visual Basic 中读取逗号分隔的文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats">如何：在 Visual Basic 中读取具有多种格式的文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object">使用 TextFieldParser 对象分析文本文件</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray delimiters As String()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * string[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, delimiters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">要使用 <see langword="TextFieldParser" /> 打开的文件。</param>
        <param name="delimiters">字段分隔符。</param>
        <summary>使用 <see langword="OpenTextFieldParser" /> 方法可以创建 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象，该对象为分析结构化文本文件（例如日志）提供了一种简单而有效的方法。 <see langword="TextFieldParser" /> 对象可用于读取分隔文件和固定宽度文件。</summary>
        <returns>用于读取指定文件的 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.OpenTextFieldParser` 。  
  
|功能|查看|  
|--------|---------|  
|从带分隔符的文本文件中读取|[如何：读取逗号分隔的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|从固定宽度文本文件中读取|[如何：读取固定宽度的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
|从具有多种格式的文本文件中读取|[如何：读取具有多种格式的文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats)|  
  
   
  
## Examples  
 此示例打开 `TextFieldParser.reader`，并使用它读取 `C:\TestFolder1\Test1.txt`。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">无法使用指定的格式分析某行 ()。 此异常消息指定导致发生异常的行，同时将 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 属性分配给该行中包含的文本。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files">如何：在 Visual Basic 中读取文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files">如何：在 Visual Basic 中读取逗号分隔的文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats">如何：在 Visual Basic 中读取具有多种格式的文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object">使用 TextFieldParser 对象分析文本文件</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileReader (file As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要读取的文件。</param>
        <summary>打开要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象。</summary>
        <returns>要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有文本文件才能使用读取 <xref:System.IO.StreamReader> 。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.OpenTextFileReader` 。  
  
|功能|查看|  
|--------|---------|  
|使用 <xref:System.IO.StreamReader>|[如何：使用 StreamReader 读取文件中的文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader)|  
  
   
  
## Examples  
 此示例将打开该文件 `Testfile.txt` ，读取其中的行，并在中显示该行 `MessageBox` 。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文件名以反斜杠 (\\) 结尾。</exception>
        <exception cref="T:System.IO.FileNotFoundException">无法找到指定的文件。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少从文件读取所必需的权限。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader">如何：使用 StreamReader 读取文件中的文本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileReader (file As String, encoding As Encoding) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要读取的文件。</param>
        <param name="encoding">要用于文件内容的编码。 默认值为 ASCII。</param>
        <summary>打开要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象。</summary>
        <returns>要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有文本文件才能使用读取 <xref:System.IO.StreamReader> 。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.OpenTextFileReader` 。  
  
|功能|查看|  
|--------|---------|  
|使用 <xref:System.IO.StreamReader>|[如何：使用 StreamReader 读取文件中的文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader)|  
  
   
  
## Examples  
 此示例将打开该文件 `Testfile.txt` ，读取其中的行，并在中显示该行 `MessageBox` 。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文件名以反斜杠 (\\) 结尾。</exception>
        <exception cref="T:System.IO.FileNotFoundException">无法找到指定的文件。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少从文件读取所必需的权限。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader">如何：使用 StreamReader 读取文件中的文本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开要写入指定文件的 <see cref="T:System.IO.StreamWriter" /> 对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileWriter (file As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">要写入的文件。</param>
        <param name="append">要追加到文件的内容中，则为 <see langword="True" />；要覆盖文件的内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>打开要写入指定文件的 <see cref="T:System.IO.StreamWriter" /> 对象。</summary>
        <returns>要写入指定文件的 <see cref="T:System.IO.StreamWriter" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter`方法打开并初始化文件的流，然后返回 <xref:System.IO.StreamWriter> 该流的对象。 您可以根据需要多次写入流，然后在完成时将其关闭。  
  
> [!NOTE]
>  您必须对 <xref:System.IO.StreamWriter.Close%2A> 对象调用方法 <xref:System.IO.StreamWriter> ，以确保所有数据都已正确写入基础流。  
  
 如果只是将几个字符串写入文件，则使用方法可能会更简单 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> 。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.OpenTextFileWriter` 。  
  
|功能|查看|  
|--------|---------|  
|向文件写入文本 `StreamWriter`|[如何：使用 StreamWriter 向文件中写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter)|  
  
   
  
## Examples  
 此示例使用 <xref:System.IO.StreamWriter> 方法打开， `My.Computer.FileSystem.OpenTextFileWriter` 并使用该类通过类的方法将字符串写入文本文件 `WriteLine` `StreamWriter` 。  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文件名以尾部反斜杠结尾。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileWriter (file As String, append As Boolean, encoding As Encoding) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要写入的文件。</param>
        <param name="append">若要追加到文件的内容中，则为 <see langword="True" />；若要覆盖文件的内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <param name="encoding">写入文件时要使用的编码。 默认值为 ASCII。</param>
        <summary>打开要写入指定文件的 <see cref="T:System.IO.StreamWriter" />。</summary>
        <returns>要写入指定文件的 <see cref="T:System.IO.StreamWriter" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter`方法打开并初始化文件的流，然后返回 <xref:System.IO.StreamWriter> 该流的对象。 您可以根据需要多次写入流，然后在完成时将其关闭。  
  
> [!NOTE]
>  您必须对 <xref:System.IO.StreamWriter.Close%2A> 对象调用方法 <xref:System.IO.StreamWriter> ，以确保所有数据都已正确写入基础流。  
  
 如果只是将几个字符串写入文件，则使用方法可能会更简单 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> 。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.OpenTextFileWriter` 。  
  
|功能|查看|  
|--------|---------|  
|向文件写入文本 `StreamWriter`|[如何：使用 StreamWriter 向文件中写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter)|  
  
   
  
## Examples  
 此示例使用 <xref:System.IO.StreamWriter> 方法打开， `My.Computer.FileSystem.OpenTextFileWriter` 并使用该类通过类的方法将字符串写入文本文件 `WriteLine` `StreamWriter` 。  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文件名以尾部反斜杠结尾。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllBytes (file As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllBytes : string -&gt; byte[]" Usage="fileSystemProxy.ReadAllBytes file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要读取的文件。</param>
        <summary>以字节数组的形式返回文件的内容。</summary>
        <returns>包含文件内容的 <see langword="Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 `ReadAllBytes` 对象的方法可以 `My.Computer.FileSystem` 从二进制文件中读取。 文件的内容作为字节数组返回。  
  
 不要根据文件的名称来判断文件的内容。 例如，文件 Form1.vb 可能不是 Visual Basic 源文件。 在应用程序中使用输入的数据之前，需验证所有的输入内容。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.ReadAllBytes` 。  
  
|功能|查看|  
|--------|---------|  
|从二进制文件读取|[如何：读取二进制文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files)|  
  
   
  
## Examples  
 此示例从文件读取 `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将文本文件的内容作为 <see langword="String" /> 返回。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllText (file As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string -&gt; string" Usage="fileSystemProxy.ReadAllText file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要读取的文件的名称和路径。</param>
        <summary>将文本文件的内容作为 <see langword="String" /> 返回。</summary>
        <returns>包含文件内容的 <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过 `ReadAllText` 对象的 `My.Computer.FileSystem` 方法，可以读取文本文件。 文件的内容作为字符串返回。  
  
 如果文件内容的编码格式为 ASCII 或 utf-8，则可以指定文件编码。 如果要从文件中读取包含扩展字符的文件，则需要使用方法的另一个重载来指定文件编码 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText%2A> 。  
  
 不要根据文件的名称来判断文件的内容。 例如，文件 Form1.vb 可能不是 Visual Basic 源文件。 在应用程序中使用输入的数据之前，需验证所有的输入内容。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.ReadAllText` 。  
  
|功能|查看|  
|--------|---------|  
|从文本文件读取|[如何：读取文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files)|  
  
   
  
## Examples  
 此示例将的内容读入 `Test.txt` 字符串中，然后将其显示在消息框中。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 此示例将 ASCII 文件的内容读入 `Test.txt` 字符串中，然后将其显示在消息框中。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader">如何：使用 StreamReader 读取文件中的文本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files">疑难解答：读取和写入文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories">演练：在 Visual Basic 中操作文件和目录</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-encodings">文件编码</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllText (file As String, encoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string * System.Text.Encoding -&gt; string" Usage="fileSystemProxy.ReadAllText (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要读取的文件的名称和路径。</param>
        <param name="encoding">读取文件时要使用的字符编码。 默认值为 UTF-8。</param>
        <summary>将文本文件的内容作为 <see langword="String" /> 返回。</summary>
        <returns>包含文件内容的 <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过 `ReadAllText` 对象的 `My.Computer.FileSystem` 方法，可以读取文本文件。 文件的内容作为字符串返回。  
  
 如果文件内容的编码格式为 ASCII 或 utf-8，则可以指定文件编码。 如果要从文件中读取包含扩展字符的文件，则需要指定文件编码。  
  
 不要根据文件的名称来判断文件的内容。 例如，文件 Form1.vb 可能不是 Visual Basic 源文件。 在应用程序中使用输入的数据之前，需验证所有的输入内容。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.ReadAllText` 。  
  
|功能|查看|  
|--------|---------|  
|从文本文件读取|[如何：读取文本文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files)|  
  
   
  
## Examples  
 此示例将的内容读入 `Test.txt` 字符串中，然后将其显示在消息框中。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 此示例将 ASCII 文件的内容读入 `Test.txt` 字符串中，然后将其显示在消息框中。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files">从文件读取 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader">如何：使用 StreamReader 读取文件中的文本 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files">疑难解答：读取和写入文本文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories">演练：在 Visual Basic 中操作文件和目录</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-encodings">文件编码</related>
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameDirectory(string directory, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameDirectory (directory As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameDirectory(System::String ^ directory, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameDirectory : string * string -&gt; unit" Usage="fileSystemProxy.RenameDirectory (directory, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">要重命名的目录的路径和名称。</param>
        <param name="newName">目录的新名称。</param>
        <summary>重命名目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不能用于移动目录;使用 `MoveDirectory` 方法移动和重命名目录。  
  
   
  
## Examples  
 此示例将目录重命名 `Test` 为 `SecondTest` 。  
  
 [!code-vb[VbVbcnMyFileSystem#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" /> 包含路径信息。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> 为 <see langword="Nothing" />。  
  
- 或 - 
 <paramref name="newName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
        <exception cref="T:System.IO.IOException">存在一个具有 <paramref name="newName" /> 中指定的名称的文件或目录。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths">如何：在 Visual Basic 中分析文件路径</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameFile(string file, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameFile (file As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameFile(System::String ^ file, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameFile : string * string -&gt; unit" Usage="fileSystemProxy.RenameFile (file, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要重命名的文件。</param>
        <param name="newName">文件的新名称。</param>
        <summary>重命名文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不能用于移动文件；使用 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile%2A> 方法可移动并重命名文件。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.RenameFile` 。  
  
|功能|查看|  
|--------|---------|  
|重命名文件|[如何：重命名文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file)|  
  
   
  
## Examples  
 此示例将文件重命名 `Test.txt` 为 `SecondTest.txt` 。  
  
 [!code-vb[VbVbcnMyFileSystem#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 将 " `C:\Test.txt` " 改为要重命名的文件的路径和文件名。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" /> 包含路径信息或以反斜杠 (\\) 结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。  
  
- 或 - 
 <paramref name="newName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">存在一个具有 <paramref name="newName" /> 中指定的名称的文件或目录。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories">创建、删除和移动文件和目录 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="SpecialDirectories">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialDirectories As SpecialDirectoriesProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ SpecialDirectories { Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SpecialDirectories : Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象提供用于访问经常引用的目录的属性。</summary>
        <value>此属性返回计算机的 <see cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例返回用户桌面目录的文件路径并显示该路径。  
  
 [!code-vb[VbVbcnMyFileSystem#80](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#80)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllBytes (file As String, data As Byte(), append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllBytes(System::String ^ file, cli::array &lt;System::Byte&gt; ^ data, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllBytes : string * byte[] * bool -&gt; unit" Usage="fileSystemProxy.WriteAllBytes (file, data, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">要写入的文件的路径和名称。</param>
        <param name="data">要写入文件的数据。</param>
        <param name="append">若要追加到文件内容中，则为 <see langword="True" />；若要覆盖文件内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>将数据写入二进制文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的路径（不包括文件名）无效，则 <xref:System.IO.DirectoryNotFoundException> 会引发异常。 如果该路径有效，但该文件不存在，则创建该文件。  
  
> [!NOTE]
>  `WriteAllBytes`方法打开一个文件，向其中写入数据，然后将其关闭。 使用方法的代码 `WriteAllBytes` 比使用对象的代码更简单 <xref:System.IO.BinaryWriter> 。 但是，如果要使用循环将数据添加到文件，则 <xref:System.IO.BinaryWriter> 对象可以提供更好的性能，因为只需打开并关闭该文件一次。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.WriteAllBytes` 。  
  
|功能|查看|  
|--------|---------|  
|写入二进制文件|[如何：写入二进制文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files)|  
  
   
  
## Examples  
 此示例将数据数组追加 `CustomerData` 到该文件 `CollectedData` 。  
  
 [!code-vb[VbVbcnMyFileSystem#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files">如何：在 Visual Basic 中写入二进制文件</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files">写入文件 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向文件写入文本。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllText (file As String, text As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">要写入的文件。</param>
        <param name="text">要写入文件的文本。</param>
        <param name="append">要追加到文件的内容中，则为 <see langword="True" />；要覆盖文件的内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>向文件写入文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 UTF-8 编码用于写入文件。 若要指定不同的编码，请使用方法的其他重载 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> 。  
  
 如果指定的文件不存在，则会创建一个。  
  
 如果指定的编码与文件的现有编码不匹配，则忽略指定的编码。  
  
> [!NOTE]
>  `WriteAllText`方法打开一个文件，向其中写入数据，然后将其关闭。 使用方法的代码 `WriteAllText` 比使用对象的代码更简单 <xref:System.IO.StreamWriter> 。 但是，如果要使用循环将字符串添加到文件，则 <xref:System.IO.StreamWriter> 对象可以提供更好的性能，因为只需打开并关闭该文件一次。 有关更多信息，请参见 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> 方法。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.WriteAllText` 。  
  
|功能|查看|  
|--------|---------|  
|将文本写入文件|[如何：向文件写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files)|  
|向文件中追加文本|[如何：向文本文件追加内容](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files)|  
  
   
  
## Examples  
 此示例将行写入 `"This is new text to be added."` 文件 `Test.txt` ，并覆盖文件中的任何现有文本。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 此示例将文件夹中的文件的名称写入 `Documents and Settings` ，并 `FileList.txt` 在每个文件之间插入一个回车符以获得更好的可读性。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files">写入文件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllText (file As String, text As String, append As Boolean, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool * System.Text.Encoding -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要写入的文件。</param>
        <param name="text">要写入文件的文本。</param>
        <param name="append">要追加到文件的内容中，则为 <see langword="True" />；要覆盖文件的内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <param name="encoding">写入文件时要使用的编码。 默认值为 UTF-8。</param>
        <summary>向文件写入文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的文件不存在，则会创建一个。  
  
 如果指定的编码与文件的现有编码不匹配，则忽略指定的编码。  
  
> [!NOTE]
>  `WriteAllText`方法打开一个文件，向其中写入数据，然后将其关闭。 使用方法的代码 `WriteAllText` 比使用对象的代码更简单 <xref:System.IO.StreamWriter> 。 但是，如果要使用循环将字符串添加到文件，则 <xref:System.IO.StreamWriter> 对象可以提供更好的性能，因为只需打开并关闭该文件一次。 有关更多信息，请参见 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> 方法。  
  
 下表列出了涉及方法的任务的示例 `My.Computer.FileSystem.WriteAllText` 。  
  
|功能|查看|  
|--------|---------|  
|将文本写入文件|[如何：向文件写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files)|  
|向文件中追加文本|[如何：向文本文件追加内容](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files)|  
  
   
  
## Examples  
 此示例将行写入 `"This is new text to be added."` 文件 `Test.txt` ，并覆盖文件中的任何现有文本。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 此示例将文件夹中的文件的名称写入 `Documents and Settings` ，并 `FileList.txt` 在每个文件之间插入一个回车符以获得更好的可读性。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\\\.\\ 开头）；以尾部反斜杠结尾。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
        <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
        <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
        <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files">写入文件 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
