<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a246b38899f23b692cc83d3c90b0a97e0da662fc" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100309676" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Conversion extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.VisualBasic.CompilerServices.StandardModule]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.VisualBasic.CompilerServices.StandardModule&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="17bd5-101"><see langword="Conversion" /> 模块包含用于执行各种转换操作的过程。</span><span class="sxs-lookup"><span data-stu-id="17bd5-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-102">此模块支持 Visual Basic 语言关键字和运行库成员，这些关键字将十进制数字转换为其他基项、将数字转换为字符串，将字符串转换为数字，将一种数据类型转换为另一种数据类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-103">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-104">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-104">Conversion Summary</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/"><span data-ttu-id="17bd5-105">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members"><span data-ttu-id="17bd5-106">Visual Basic Run-Time 库成员</span><span class="sxs-lookup"><span data-stu-id="17bd5-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object? Expression, Type TargetType);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="17bd5-107">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="17bd5-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="17bd5-108">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="17bd5-109">将对象转换为指定类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="17bd5-110">一个对象，其类型在运行时为请求的目标类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-111">`CTypeDynamic`方法将作为参数传递的对象转换 `Expression` 为参数指定的类型 `TargetType` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="17bd5-112">如果对象是动态对象，则该 `CTypeDynamic` 方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="17bd5-113">`CTypeDynamic`方法根据对象本身定义的转换语义应用动态转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="17bd5-114">如果动态对象继承自 <xref:System.Dynamic.DynamicObject> ，则该 `CTypeDynamic` 方法将首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="17bd5-115">如果用户定义的静态转换失败，该方法将 `CTypeDynamic` 尝试使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="17bd5-116">如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> ，则该 `CTypeDynamic` 方法将优先于用户定义的静态转换的动态转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-117">下面的示例使用 `CTypeDynamic` 方法将动态对象转换为字符串，方法是使用由动态对象定义的转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects"><span data-ttu-id="17bd5-118">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects"><span data-ttu-id="17bd5-119">演练：创建并使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="17bd5-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object? Expression);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="17bd5-120">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="17bd5-121">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="17bd5-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="17bd5-122">将对象转换为指定的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="17bd5-123">静态类型化为请求的泛型类型的对象。</span><span class="sxs-lookup"><span data-stu-id="17bd5-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-124">`CTypeDynamic`方法将作为参数传递的对象转换 `Expression` 为泛型参数类型所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="17bd5-125">如果对象是动态对象，则该 `CTypeDynamic` 方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="17bd5-126">`CTypeDynamic`方法根据对象本身定义的转换语义应用动态转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="17bd5-127">如果动态对象继承自 <xref:System.Dynamic.DynamicObject> ，则该 `CTypeDynamic` 方法将首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="17bd5-128">如果用户定义的静态转换失败，该方法将 `CTypeDynamic` 尝试使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="17bd5-129">如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> ，则该 `CTypeDynamic` 方法将优先于用户定义的静态转换的动态转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-130">下面的示例使用 `CTypeDynamic` 方法将动态对象转换为字符串，方法是使用由动态对象定义的转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects"><span data-ttu-id="17bd5-131">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects"><span data-ttu-id="17bd5-132">演练：创建并使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="17bd5-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17bd5-133">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="17bd5-134">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-135">对应于最新运行时错误的错误消息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-136">`ErrorToString`函数检查对象的属性设置 `Err` 以确定最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="17bd5-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="17bd5-137">函数的返回值 `ErrorToString` 对应于 `Description` 对象的属性 `Err` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="17bd5-138">如果未出现运行时错误，则 `ErrorToString` 返回长度为零的字符串 ( "" ) 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="17bd5-139">在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。</span><span class="sxs-lookup"><span data-stu-id="17bd5-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-140">下面的代码使用 `ErrorToString` 函数来显示与指定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-141"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="17bd5-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="17bd5-142">可选。</span><span class="sxs-lookup"><span data-stu-id="17bd5-142">Optional.</span></span> <span data-ttu-id="17bd5-143">任何有效的错误号。</span><span class="sxs-lookup"><span data-stu-id="17bd5-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="17bd5-144">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-145">与给定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-146">`ErrorToString`函数检查对象的属性设置 `Err` 以确定最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="17bd5-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="17bd5-147">函数的返回值 `ErrorToString` 对应于 `Description` 对象的属性 `Err` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="17bd5-148">如果 `ErrorNumber` 是有效的错误号但未定义，则 `ErrorToString` 返回字符串（ `"Application-defined or object-defined error."` 如果无效 `ErrorNumber` ），将发生错误。</span><span class="sxs-lookup"><span data-stu-id="17bd5-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="17bd5-149">如果 `ErrorNumber` 省略，则返回与最新的运行时错误相对应的消息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="17bd5-150">如果未发生运行时错误或 `ErrorNumber` 为0，则 `ErrorToString` 返回长度为零的字符串 ( "" ) 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="17bd5-151">在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。</span><span class="sxs-lookup"><span data-stu-id="17bd5-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-152">下面的代码使用 `ErrorToString` 函数来显示与指定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="17bd5-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-153"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="17bd5-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17bd5-154">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-155">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-155">Required.</span></span> <span data-ttu-id="17bd5-156"><see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-157">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-158">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-159">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-160">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-161">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-162">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="17bd5-163">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-164">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-165">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-166">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-167">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-168">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-169">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-170">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-171">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-171">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-172">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-173">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-175">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-176">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-176">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-177">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-178">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Fix(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-179">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-179">Required.</span></span> <span data-ttu-id="17bd5-180"><see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-180">A number of type <see cref="T:System.Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-181">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-182">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-183">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-184">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-185">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-186">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="17bd5-187">从 Visual Basic 15.8 开始， `Double` 如果将由方法返回的值传递 `Fix` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Double` 返回的值 `Fix` 隐式转换为设置为的 [选项 Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) ， `Off` 则将优化性能的整数转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to `Off`.</span></span> <span data-ttu-id="17bd5-188">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="17bd5-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="17bd5-189">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="17bd5-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="17bd5-190">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-191">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-192">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-193">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-194">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-195">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-196">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-197">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-198">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-198">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-199">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-200">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-202">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-203">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-203">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-204">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-205">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Fix(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-206">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-206">Required.</span></span> <span data-ttu-id="17bd5-207"><see langword="Short" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-208">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-209">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-210">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-211">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-212">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-213">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-214">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-215">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-216">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-217">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-218">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-219">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-220">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-221">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-222">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-222">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-223">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-224">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-226">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-227">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-227">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-228">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-229">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Fix(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-230">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-230">Required.</span></span> <span data-ttu-id="17bd5-231"><see langword="Integer" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-232">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-233">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-234">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-235">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-236">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-237">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-238">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-239">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-240">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-241">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-242">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-243">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-244">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-245">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-246">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-246">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-247">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-248">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-250">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-251">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-251">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-252">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-253">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Fix(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-254">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-254">Required.</span></span> <span data-ttu-id="17bd5-255"><see langword="Long" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-256">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-257">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-258">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-259">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-260">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-261">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-262">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-263">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-264">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-265">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-266">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-267">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-268">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-269">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-270">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-270">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-271">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-272">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-274">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-275">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-275">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-276">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-277">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Fix(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-278">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-278">Required.</span></span> <span data-ttu-id="17bd5-279"><see langword="Object" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="17bd5-280">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="17bd5-281">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-282">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-283">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-284">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-285">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-286">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="17bd5-287">从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，该对象的运行时类型为或，则在将该 `Double` `Single` 方法返回的值传递给任何整型转换函数时，将优化浮点到整数转换的性能 `Fix` ; 如果返回的值将[](/dotnet/visual-basic/language-reference/functions/conversion-functions) `Fix` 自动转换为设置为 Off[的](/dotnet/visual-basic/language-reference/statements/option-strict-statement)整数，则为。</span><span class="sxs-lookup"><span data-stu-id="17bd5-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="17bd5-288">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="17bd5-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="17bd5-289">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="17bd5-290">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-291">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-292">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-293">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-294">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-295">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-296">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-297">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-298">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-298">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-299">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-300">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-302">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-303">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-303">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-304">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-305">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Fix(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-306">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-306">Required.</span></span> <span data-ttu-id="17bd5-307"><see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-307">A number of type <see cref="T:System.Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-308">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-309">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-310">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-311">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-312">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-313">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="17bd5-314">从 Visual Basic 15.8 开始， `Single` 如果将由方法返回的值传递 `Fix` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Single` 返回的值 `Fix` 被自动转换为将 [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) 设置为 Off 的整数，则将优化性能的整数转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="17bd5-315">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="17bd5-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="17bd5-316">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="17bd5-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="17bd5-317">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-318">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-319">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-320">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-321">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-322">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-323">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-324">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-325">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-325">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-326">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-327">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-329">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-330">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-330">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-331">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-332">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17bd5-333">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-334">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-334">Required.</span></span> <span data-ttu-id="17bd5-335">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-336">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-337">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-338">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-339">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-339">If `Number` is</span></span>|<span data-ttu-id="17bd5-340">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-341">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-341">Empty</span></span>|<span data-ttu-id="17bd5-342">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-342">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-343">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-343">Any numeric value</span></span>|<span data-ttu-id="17bd5-344">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-345">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-346">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-347">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-348">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-349"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-351">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-352">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-352">Required.</span></span> <span data-ttu-id="17bd5-353">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-354">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-355">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-356">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-357">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-357">If `Number` is</span></span>|<span data-ttu-id="17bd5-358">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-359">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-359">Empty</span></span>|<span data-ttu-id="17bd5-360">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-360">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-361">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-361">Any numeric value</span></span>|<span data-ttu-id="17bd5-362">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-363">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-364">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-365">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-366">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-367"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-369">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-370">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-370">Required.</span></span> <span data-ttu-id="17bd5-371">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-372">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-373">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-374">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-375">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-375">If `Number` is</span></span>|<span data-ttu-id="17bd5-376">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-377">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-377">Empty</span></span>|<span data-ttu-id="17bd5-378">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-378">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-379">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-379">Any numeric value</span></span>|<span data-ttu-id="17bd5-380">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-381">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-382">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-383">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-384">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-385"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-387">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-388">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-388">Required.</span></span> <span data-ttu-id="17bd5-389">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-390">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-391">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-392">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-393">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-393">If `Number` is</span></span>|<span data-ttu-id="17bd5-394">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-395">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-395">Empty</span></span>|<span data-ttu-id="17bd5-396">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-396">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-397">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-397">Any numeric value</span></span>|<span data-ttu-id="17bd5-398">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-399">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-400">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-401">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-402">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-403"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-405">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-406">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-406">Required.</span></span> <span data-ttu-id="17bd5-407">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-408">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-409">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-410">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-411">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-411">If `Number` is</span></span>|<span data-ttu-id="17bd5-412">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-413">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-413">Empty</span></span>|<span data-ttu-id="17bd5-414">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-414">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-415">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-415">Any numeric value</span></span>|<span data-ttu-id="17bd5-416">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-417">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-418">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-419">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-420">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-421"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-423">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-424">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-424">Required.</span></span> <span data-ttu-id="17bd5-425">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-426">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-427">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-428">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-429">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-429">If `Number` is</span></span>|<span data-ttu-id="17bd5-430">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-431">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-431">Empty</span></span>|<span data-ttu-id="17bd5-432">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-432">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-433">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-433">Any numeric value</span></span>|<span data-ttu-id="17bd5-434">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-435">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-436">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-437">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-438">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-439"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-441">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-442">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-442">Required.</span></span> <span data-ttu-id="17bd5-443">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-444">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-445">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-446">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-447">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-447">If `Number` is</span></span>|<span data-ttu-id="17bd5-448">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-449">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-449">Empty</span></span>|<span data-ttu-id="17bd5-450">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-450">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-451">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-451">Any numeric value</span></span>|<span data-ttu-id="17bd5-452">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-453">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-454">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-455">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-456">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-457"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-459">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-460">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-460">Required.</span></span> <span data-ttu-id="17bd5-461">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-462">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-463">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-464">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-465">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-465">If `Number` is</span></span>|<span data-ttu-id="17bd5-466">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-467">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-467">Empty</span></span>|<span data-ttu-id="17bd5-468">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-468">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-469">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-469">Any numeric value</span></span>|<span data-ttu-id="17bd5-470">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-471">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-472">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-473">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-474">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-475"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-477">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-478">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-478">Required.</span></span> <span data-ttu-id="17bd5-479">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-480">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-481">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-482">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-483">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="17bd5-483">If `Number` is</span></span>|<span data-ttu-id="17bd5-484">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-485">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-485">Empty</span></span>|<span data-ttu-id="17bd5-486">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-486">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-487">任何数值</span><span class="sxs-lookup"><span data-stu-id="17bd5-487">Any numeric value</span></span>|<span data-ttu-id="17bd5-488">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="17bd5-489">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="17bd5-490">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="17bd5-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-491">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-492">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-493"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="17bd5-495">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17bd5-496">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-497">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-497">Required.</span></span> <span data-ttu-id="17bd5-498"><see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-499">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-500">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-501">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-502">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-503">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-504">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="17bd5-505">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-506">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-507">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-508">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-509">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-510">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-511">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-512">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-513">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-513">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-514">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-515">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-517">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-518">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-518">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-519">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-520">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Int(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-521">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-521">Required.</span></span> <span data-ttu-id="17bd5-522"><see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-522">A number of type <see cref="T:System.Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-523">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-524">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-525">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-526">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-527">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-528">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="17bd5-529">从 Visual Basic 15.8 开始，如果将由方法返回的值传递 `Int` 到任何[整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果返回的双精度值 `Int` 被设置为 Off [](/dotnet/visual-basic/language-reference/statements/option-strict-statement) ，则会优化双精度转换的性能。</span><span class="sxs-lookup"><span data-stu-id="17bd5-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="17bd5-530">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="17bd5-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="17bd5-531">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="17bd5-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="17bd5-532">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-533">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-534">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-535">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-536">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-537">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-538">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-539">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-540">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-540">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-541">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-542">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-544">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-545">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-545">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-546">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-547">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Int(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-548">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-548">Required.</span></span> <span data-ttu-id="17bd5-549"><see langword="Short" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-550">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-551">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-552">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-553">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-554">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-555">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-556">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-557">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-558">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-559">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-560">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-561">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-562">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-563">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-564">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-564">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-565">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-566">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-568">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-569">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-569">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-570">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-571">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Int(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-572">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-572">Required.</span></span> <span data-ttu-id="17bd5-573"><see langword="Integer" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-574">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-575">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-576">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-577">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-578">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-579">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-580">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-581">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-582">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-583">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-584">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-585">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-586">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-587">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-588">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-588">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-589">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-590">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-592">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-593">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-593">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-594">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-595">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Int(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-596">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-596">Required.</span></span> <span data-ttu-id="17bd5-597"><see langword="Long" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-598">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-599">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-600">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-601">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-602">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-603">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-604">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-605">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-606">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-607">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-608">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-609">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-610">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-611">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-612">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-612">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-613">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-614">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-616">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-617">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-617">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-618">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-619">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Int(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-620">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-620">Required.</span></span> <span data-ttu-id="17bd5-621"><see langword="Object" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="17bd5-622">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="17bd5-623">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-624">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-625">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-626">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-627">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-628">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="17bd5-629">从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，该对象的运行时类型为或，则在将该 `Double` `Single` 方法返回的值传递给任何整型转换函数时，将优化浮点到整数转换的性能 `Int` ; 如果返回的值将[](/dotnet/visual-basic/language-reference/functions/conversion-functions) `Int` 自动转换为设置为 Off[的](/dotnet/visual-basic/language-reference/statements/option-strict-statement)整数，则为。</span><span class="sxs-lookup"><span data-stu-id="17bd5-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="17bd5-630">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="17bd5-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="17bd5-631">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="17bd5-632">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-633">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-634">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-635">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-636">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-637">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-638">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-639">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-640">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-640">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-641">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-642">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-644">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-645">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-645">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-646">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-647">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Int(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-648">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-648">Required.</span></span> <span data-ttu-id="17bd5-649"><see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-649">A number of type <see cref="T:System.Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-650">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-651">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-652">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="17bd5-653">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="17bd5-654">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="17bd5-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="17bd5-655">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="17bd5-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="17bd5-656">从 Visual Basic 15.8 开始， `Single` 如果将由方法返回的值传递 `Int` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Single` 返回的值 `Int` 被自动转换为将 [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) 设置为 Off 的整数，则将优化性能的整数转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="17bd5-657">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="17bd5-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="17bd5-658">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="17bd5-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="17bd5-659">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="17bd5-660">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="17bd5-661">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="17bd5-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="17bd5-662">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="17bd5-663">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="17bd5-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="17bd5-664">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17bd5-665">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="17bd5-666">例如：</span><span class="sxs-lookup"><span data-stu-id="17bd5-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17bd5-667">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="17bd5-667">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-668">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="17bd5-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-669">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="17bd5-671">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="17bd5-672">数学摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-672">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="17bd5-673">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="17bd5-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-674">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17bd5-675">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-676">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-676">Required.</span></span> <span data-ttu-id="17bd5-677">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-678">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-679">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-680">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-681">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-681">If Number is</span></span>|<span data-ttu-id="17bd5-682">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-683">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-683">Empty</span></span>|<span data-ttu-id="17bd5-684">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-684">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-685">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-685">Any other number</span></span>|<span data-ttu-id="17bd5-686">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-687">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-688">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-689">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-690">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-691"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-692">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-692">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-694">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-694">Required.</span></span> <span data-ttu-id="17bd5-695">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-696">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-697">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-698">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-699">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-699">If Number is</span></span>|<span data-ttu-id="17bd5-700">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-701">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-701">Empty</span></span>|<span data-ttu-id="17bd5-702">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-702">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-703">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-703">Any other number</span></span>|<span data-ttu-id="17bd5-704">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-705">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-706">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-707">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-708">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-709"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-710">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-710">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-712">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-712">Required.</span></span> <span data-ttu-id="17bd5-713">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-714">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-715">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-716">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-717">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-717">If Number is</span></span>|<span data-ttu-id="17bd5-718">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-719">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-719">Empty</span></span>|<span data-ttu-id="17bd5-720">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-720">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-721">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-721">Any other number</span></span>|<span data-ttu-id="17bd5-722">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-723">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-724">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-725">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-726">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-727"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-728">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-728">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-730">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-730">Required.</span></span> <span data-ttu-id="17bd5-731">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-732">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-733">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-734">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-735">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-735">If Number is</span></span>|<span data-ttu-id="17bd5-736">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-737">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-737">Empty</span></span>|<span data-ttu-id="17bd5-738">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-738">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-739">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-739">Any other number</span></span>|<span data-ttu-id="17bd5-740">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-741">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-742">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-743">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-744">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-745"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-746">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-746">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-748">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-748">Required.</span></span> <span data-ttu-id="17bd5-749">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-750">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-751">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-752">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-753">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-753">If Number is</span></span>|<span data-ttu-id="17bd5-754">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-755">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-755">Empty</span></span>|<span data-ttu-id="17bd5-756">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-756">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-757">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-757">Any other number</span></span>|<span data-ttu-id="17bd5-758">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-759">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-760">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-761">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-762">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-763"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-764">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-764">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-766">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-766">Required.</span></span> <span data-ttu-id="17bd5-767">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-768">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-769">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-770">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-771">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-771">If Number is</span></span>|<span data-ttu-id="17bd5-772">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-773">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-773">Empty</span></span>|<span data-ttu-id="17bd5-774">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-774">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-775">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-775">Any other number</span></span>|<span data-ttu-id="17bd5-776">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-777">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-778">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-779">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-780">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-781"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-782">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-782">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-784">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-784">Required.</span></span> <span data-ttu-id="17bd5-785">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-786">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-787">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-788">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-789">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-789">If Number is</span></span>|<span data-ttu-id="17bd5-790">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-791">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-791">Empty</span></span>|<span data-ttu-id="17bd5-792">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-792">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-793">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-793">Any other number</span></span>|<span data-ttu-id="17bd5-794">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-795">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-796">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-797">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-798">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-799"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-800">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-800">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-802">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-802">Required.</span></span> <span data-ttu-id="17bd5-803">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-804">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-805">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-806">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-807">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-807">If Number is</span></span>|<span data-ttu-id="17bd5-808">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-809">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-809">Empty</span></span>|<span data-ttu-id="17bd5-810">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-810">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-811">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-811">Any other number</span></span>|<span data-ttu-id="17bd5-812">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-813">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-814">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-815">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-816">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-817"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-818">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-818">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-820">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-820">Required.</span></span> <span data-ttu-id="17bd5-821">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-822">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-823">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-824">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="17bd5-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="17bd5-825">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="17bd5-825">If Number is</span></span>|<span data-ttu-id="17bd5-826">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="17bd5-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="17bd5-827">空</span><span class="sxs-lookup"><span data-stu-id="17bd5-827">Empty</span></span>|<span data-ttu-id="17bd5-828">零</span><span class="sxs-lookup"><span data-stu-id="17bd5-828">Zero (0)</span></span>|  
|<span data-ttu-id="17bd5-829">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="17bd5-829">Any other number</span></span>|<span data-ttu-id="17bd5-830">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="17bd5-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="17bd5-831">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="17bd5-832">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-833">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-834">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-835"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-836">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-836">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Str(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="17bd5-838">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-838">Required.</span></span> <span data-ttu-id="17bd5-839">包含任何有效的数值表达式的 <see langword="Object" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="17bd5-840">返回数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="17bd5-841">数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-842">当数字转换为字符串时，将始终为的符号保留前导空格 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="17bd5-843">如果 `Number` 为正，则返回的字符串将包含前导空格，并暗含正负号。</span><span class="sxs-lookup"><span data-stu-id="17bd5-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="17bd5-844">负数将包括减号 ( ) ，无前导空格。</span><span class="sxs-lookup"><span data-stu-id="17bd5-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="17bd5-845">使用 `Format` 函数可以将要设置格式的数值转换为日期、时间、货币或其他用户定义格式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="17bd5-846">与 `Str` 函数不同， `Format` 函数不包含用于的符号的前导空格 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17bd5-847">`Str`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="17bd5-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="17bd5-848">例如，如果使用不同的小数点分隔符 (例如，在 "国际化应用程序") 中，使用 `CStr` 或 `Format` 函数将数字转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="17bd5-849">若要获取特定区域性中的数字的字符串表示形式，请使用数字的 `ToString(IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="17bd5-850">例如，在将 <xref:System.Double.ToString%2A> 类型的值转换 `Double` 为字符串时使用。</span><span class="sxs-lookup"><span data-stu-id="17bd5-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-851">此示例使用 `Str` 函数返回 `String` 数字的表示形式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="17bd5-852">当正数转换为字符串时，将始终为其符号保留前导空格。</span><span class="sxs-lookup"><span data-stu-id="17bd5-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17bd5-853">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="17bd5-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="17bd5-854"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="17bd5-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="17bd5-855">转换摘要</span><span class="sxs-lookup"><span data-stu-id="17bd5-855">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17bd5-857">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="17bd5-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Val(char Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="17bd5-858">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-858">Required.</span></span> <span data-ttu-id="17bd5-859">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="17bd5-860">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="17bd5-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="17bd5-861">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="17bd5-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="17bd5-862">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-863">`Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="17bd5-864">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="17bd5-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="17bd5-865">但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。</span><span class="sxs-lookup"><span data-stu-id="17bd5-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="17bd5-866">从参数中去除空格、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="17bd5-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="17bd5-867">以下调用返回值1615198。</span><span class="sxs-lookup"><span data-stu-id="17bd5-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="17bd5-868">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="17bd5-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="17bd5-869">`Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="17bd5-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="17bd5-870">当使用不同的小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="17bd5-871">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="17bd5-872">例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="17bd5-873">为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="17bd5-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="17bd5-874">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="17bd5-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="17bd5-875">`Double` `Integer` `Long` 如果格式不包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="17bd5-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-876">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="17bd5-877">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="17bd5-878"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="17bd5-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-879"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object? Expression);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="17bd5-881">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-881">Required.</span></span> <span data-ttu-id="17bd5-882">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="17bd5-883">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="17bd5-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="17bd5-884">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="17bd5-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="17bd5-885">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-886">`Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="17bd5-887">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="17bd5-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="17bd5-888">但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。</span><span class="sxs-lookup"><span data-stu-id="17bd5-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="17bd5-889">将从自变量中删除空白、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="17bd5-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="17bd5-890">以下调用返回值1234123。</span><span class="sxs-lookup"><span data-stu-id="17bd5-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="17bd5-891">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="17bd5-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="17bd5-892">`Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="17bd5-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="17bd5-893">使用其他小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="17bd5-894">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="17bd5-895">例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17bd5-896">为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="17bd5-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="17bd5-897">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="17bd5-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="17bd5-898">`Double` `Integer` `Long` 如果冲突未包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="17bd5-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-899">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="17bd5-900">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="17bd5-901"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="17bd5-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-902"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string? InputStr);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(string InputStr) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="17bd5-904">必需。</span><span class="sxs-lookup"><span data-stu-id="17bd5-904">Required.</span></span> <span data-ttu-id="17bd5-905">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="17bd5-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="17bd5-906">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="17bd5-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="17bd5-907">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="17bd5-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="17bd5-908">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17bd5-909">`Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="17bd5-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="17bd5-910">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="17bd5-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="17bd5-911">但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。</span><span class="sxs-lookup"><span data-stu-id="17bd5-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="17bd5-912">将从自变量中删除空白、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="17bd5-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="17bd5-913">以下调用返回值1234123。</span><span class="sxs-lookup"><span data-stu-id="17bd5-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="17bd5-914">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="17bd5-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="17bd5-915">`Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="17bd5-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="17bd5-916">使用其他小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="17bd5-917">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="17bd5-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="17bd5-918">例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。</span><span class="sxs-lookup"><span data-stu-id="17bd5-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17bd5-919">为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="17bd5-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="17bd5-920">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="17bd5-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="17bd5-921">`Double` `Integer` `Long` 如果冲突未包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="17bd5-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="17bd5-922">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="17bd5-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="17bd5-923">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="17bd5-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="17bd5-924"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="17bd5-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17bd5-925"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="17bd5-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="17bd5-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="17bd5-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
