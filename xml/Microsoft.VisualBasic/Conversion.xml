<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c18406e2aa9377f87f63c42c0571eb6aef793cb" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89966708" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Conversion extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.VisualBasic.CompilerServices.StandardModule]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.VisualBasic.CompilerServices.StandardModule&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Conversion" /> 模块包含用于执行各种转换操作的过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模块支持 Visual Basic 语言关键字和运行库成员，这些关键字将十进制数字转换为其他基项、将数字转换为字符串，将字符串转换为数字，将一种数据类型转换为另一种数据类型。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/">关键字 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members">Visual Basic 运行时库成员</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object? Expression, Type TargetType);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">要转换的对象。</param>
        <param name="TargetType">该对象要转换为的类型。</param>
        <summary>将对象转换为指定类型。</summary>
        <returns>一个对象，其类型在运行时为请求的目标类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CTypeDynamic`方法将作为参数传递的对象转换 `Expression` 为参数指定的类型 `TargetType` 。 如果对象是动态对象，则该 `CTypeDynamic` 方法应用可用的动态转换。  
  
 `CTypeDynamic`方法根据对象本身定义的转换语义应用动态转换。 如果动态对象继承自 <xref:System.Dynamic.DynamicObject> ，则该 `CTypeDynamic` 方法将首先尝试使用用户定义的静态转换执行转换。 如果用户定义的静态转换失败，该方法将 `CTypeDynamic` 尝试使用动态转换执行转换。 如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> ，则该 `CTypeDynamic` 方法将优先于用户定义的静态转换的动态转换。  
  
   
  
## Examples  
 下面的示例使用 `CTypeDynamic` 方法将动态对象转换为字符串，方法是使用由动态对象定义的转换。  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects">使用动态对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects">演练：创建并使用动态对象（C# 和 Visual Basic）</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType? CTypeDynamic&lt;TargetType&gt; (object Expression);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">该对象要转换为的类型。</typeparam>
        <param name="Expression">要转换的对象。</param>
        <summary>将对象转换为指定的泛型类型。</summary>
        <returns>静态类型化为请求的泛型类型的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CTypeDynamic`方法将作为参数传递的对象转换 `Expression` 为泛型参数类型所指定的类型。 如果对象是动态对象，则该 `CTypeDynamic` 方法应用可用的动态转换。  
  
 `CTypeDynamic`方法根据对象本身定义的转换语义应用动态转换。 如果动态对象继承自 <xref:System.Dynamic.DynamicObject> ，则该 `CTypeDynamic` 方法将首先尝试使用用户定义的静态转换执行转换。 如果用户定义的静态转换失败，该方法将 `CTypeDynamic` 尝试使用动态转换执行转换。 如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> ，则该 `CTypeDynamic` 方法将优先于用户定义的静态转换的动态转换。  
  
   
  
## Examples  
 下面的示例使用 `CTypeDynamic` 方法将动态对象转换为字符串，方法是使用由动态对象定义的转换。  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects">使用动态对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects">演练：创建并使用动态对象（C# 和 Visual Basic）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回与给定的错误号对应的错误信息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回与给定的错误号对应的错误信息。</summary>
        <returns>对应于最新运行时错误的错误消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrorToString`函数检查对象的属性设置 `Err` 以确定最新的运行时错误。 函数的返回值 `ErrorToString` 对应于 `Description` 对象的属性 `Err` 。 如果未出现运行时错误，则 `ErrorToString` 返回长度为零的字符串 ( "" ) 。  
  
 在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。  
  
   
  
## Examples  
 下面的代码使用 `ErrorToString` 函数来显示与指定错误号对应的错误消息。  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> 超出范围。</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">可选。 任何有效的错误号。</param>
        <summary>返回与给定的错误号对应的错误信息。</summary>
        <returns>与给定错误号对应的错误消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrorToString`函数检查对象的属性设置 `Err` 以确定最新的运行时错误。 函数的返回值 `ErrorToString` 对应于 `Description` 对象的属性 `Err` 。 如果 `ErrorNumber` 是有效的错误号但未定义，则 `ErrorToString` 返回字符串（ `"Application-defined or object-defined error."` 如果无效 `ErrorNumber` ），将发生错误。 如果 `ErrorNumber` 省略，则返回与最新的运行时错误相对应的消息。 如果未发生运行时错误或 `ErrorNumber` 为0，则 `ErrorToString` 返回长度为零的字符串 ( "" ) 。  
  
 在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。  
  
   
  
## Examples  
 下面的代码使用 `ErrorToString` 函数来显示与指定错误号对应的错误消息。  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> 超出范围。</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个数的整数部分。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Fix(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  

从 Visual Basic 15.8 开始， `Double` 如果将由方法返回的值传递 `Fix` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Double` 返回的值 `Fix` 隐式转换为设置为的 [选项 Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) ， `Off` 则将优化性能的整数转换。 此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。 下面的示例演示了此类经过优化的转换：

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Fix(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Short" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Fix(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Fix(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Long" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Fix(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Object" /> 类型的数字或任何有效的数值表达式。 如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  

从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，该对象的运行时类型为或，则在将该 `Double` `Single` 方法返回的值传递给任何整型转换函数时，将优化浮点到整数转换的性能 `Fix` ; 如果返回的值将[integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions) `Fix` 自动转换为设置为 Off[的](/dotnet/visual-basic/language-reference/statements/option-strict-statement)整数，则为。 此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。 例如：

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Fix(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
从 Visual Basic 15.8 开始， `Single` 如果将由方法返回的值传递 `Fix` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Single` 返回的值 `Fix` 被自动转换为将 [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) 设置为 Off 的整数，则将优化性能的整数转换。 此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。 下面的示例演示了此类经过优化的转换：
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回表示数字的十六进制值的字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示数字的十六进制值的字符串。</summary>
        <returns>表示某数十六进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 `Number` 为 |Hex 返回|  
|-|-|  
|空|零|  
|任何数值|最多十六个十六进制字符|  
  
 可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。 例如， `&H10` 表示十六进制表示法中的十进制数16。  
  
   
  
## Examples  
 此示例使用 `Hex` 函数返回数字的十六进制值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers">如何：将十六进制字符串转换为数字</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个数的整数部分。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Int(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
从 Visual Basic 15.8 开始，如果将由方法返回的值传递 `Int` 到任何[整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果返回的双精度值 `Int` 被设置为 Off [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) ，则会优化双精度转换的性能。 此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。 下面的示例演示了此类经过优化的转换：

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Int(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Short" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Int(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Int(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Long" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Int(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Object" /> 类型的数字或任何有效的数值表达式。 如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，该对象的运行时类型为或，则在将该 `Double` `Single` 方法返回的值传递给任何整型转换函数时，将优化浮点到整数转换的性能 `Int` ; 如果返回的值将[integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions) `Int` 自动转换为设置为 Off[的](/dotnet/visual-basic/language-reference/statements/option-strict-statement)整数，则为。 此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。 例如：

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Int(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</param>
        <summary>返回一个数的整数部分。</summary>
        <returns>数字的整数部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。  
  
 和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。 例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。  
  
 `Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`  
  
从 Visual Basic 15.8 开始， `Single` 如果将由方法返回的值传递 `Int` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Single` 返回的值 `Int` 被自动转换为将 [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) 设置为 Off 的整数，则将优化性能的整数转换。 此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。 下面的示例演示了此类经过优化的转换：

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。 如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。 下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。 但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
        <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary">数学摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions">数学函数 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回表示某数八进制值的字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
        <summary>返回表示某数八进制值的字符串。</summary>
        <returns>表示某数八进制值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。  
  
|如果 Number 为|Oct 返回|  
|-|-|  
|空|零|  
|任何其他数字|最多22个八进制字符|  
  
 您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。 例如， `&O10` 是十进制8的八进制表示法。  
  
   
  
## Examples  
 此示例使用 `Oct` 函数返回数字的八进制值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Str(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 包含任何有效的数值表达式的 <see langword="Object" />。</param>
        <summary>返回数字的 <see langword="String" /> 表示形式。</summary>
        <returns>数字的 <see langword="String" /> 表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当数字转换为字符串时，将始终为的符号保留前导空格 `Number` 。 如果 `Number` 为正，则返回的字符串将包含前导空格，并暗含正负号。 负数将包括减号 ( ) ，无前导空格。  
  
 使用 `Format` 函数可以将要设置格式的数值转换为日期、时间、货币或其他用户定义格式。 与 `Str` 函数不同， `Format` 函数不包含用于的符号的前导空格 `Number` 。  
  
> [!NOTE]
>  `Str`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。 例如，如果使用不同的小数点分隔符 (例如，在 "国际化应用程序") 中，使用 `CStr` 或 `Format` 函数将数字转换为字符串。 若要获取特定区域性中的数字的字符串表示形式，请使用数字的 `ToString(IFormatProvider)` 方法。 例如，在将 <xref:System.Double.ToString%2A> 类型的值转换 `Double` 为字符串时使用。  
  
   
  
## Examples  
 此示例使用 `Str` 函数返回 `String` 数字的表示形式。 当正数转换为字符串时，将始终为其符号保留前导空格。  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" /> 不是 Numeric 类型。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary">转换摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将字符串中包含的数字作为适当类型的数值返回。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Val(char Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>将字符串中包含的数字作为适当类型的数值返回。</summary>
        <returns>字符串中包含的作为适当类型数值的数字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。 不识别经常被视为数值部分的符号和字符，如美元符号和逗号。 但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。 从参数中去除空格、制表符和换行符。  
  
 以下调用返回值1615198。  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
以下调用返回十进制值-1。  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。 当使用不同的小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。 若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。 例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。  
  
为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。 例如，下面的代码引发此异常。  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

`Double` `Integer` `Long` 如果格式不包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 下面的示例使用 `Val` 函数返回每个字符串中包含的数字。 `Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> 太大。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>将字符串中包含的数字作为适当类型的数值返回。</summary>
        <returns>字符串中包含的作为适当类型数值的数字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。 不识别经常被视为数值部分的符号和字符，如美元符号和逗号。 但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。 将从自变量中删除空白、制表符和换行符。  
  
 以下调用返回值1234123。  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
以下调用返回十进制值-1。  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。 使用其他小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。 若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。 例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。  
  
> [!NOTE]
>  为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。 例如，下面的代码引发此异常。  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  `Double` `Integer` `Long` 如果冲突未包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 下面的示例使用 `Val` 函数返回每个字符串中包含的数字。 `Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> 太大。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(string InputStr) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">必需。 任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>将字符串中包含的数字作为适当类型的数值返回。</summary>
        <returns>字符串中包含的作为适当类型数值的数字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。 不识别经常被视为数值部分的符号和字符，如美元符号和逗号。 但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。 将从自变量中删除空白、制表符和换行符。  
  
 以下调用返回值1234123。  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
以下调用返回十进制值-1。  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。 使用其他小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。 若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。 例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。  
  
> [!NOTE]
>  为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。 例如，下面的代码引发此异常。  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  `Double` `Integer` `Long` 如果冲突未包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 下面的示例使用 `Val` 函数返回每个字符串中包含的数字。 `Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> 太大。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
  </Members>
</Type>
