<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c18406e2aa9377f87f63c42c0571eb6aef793cb" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89966708" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Conversion extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.VisualBasic.CompilerServices.StandardModule]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.VisualBasic.CompilerServices.StandardModule&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="567c6-101"><see langword="Conversion" /> 模块包含用于执行各种转换操作的过程。</span><span class="sxs-lookup"><span data-stu-id="567c6-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-102">此模块支持 Visual Basic 语言关键字和运行库成员，这些关键字将十进制数字转换为其他基项、将数字转换为字符串，将字符串转换为数字，将一种数据类型转换为另一种数据类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-103">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-104">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-104">Conversion Summary</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/"><span data-ttu-id="567c6-105">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members"><span data-ttu-id="567c6-106">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="567c6-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object? Expression, Type TargetType);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="567c6-107">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="567c6-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="567c6-108">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="567c6-109">将对象转换为指定类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="567c6-110">一个对象，其类型在运行时为请求的目标类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-111">`CTypeDynamic`方法将作为参数传递的对象转换 `Expression` 为参数指定的类型 `TargetType` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="567c6-112">如果对象是动态对象，则该 `CTypeDynamic` 方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="567c6-113">`CTypeDynamic`方法根据对象本身定义的转换语义应用动态转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="567c6-114">如果动态对象继承自 <xref:System.Dynamic.DynamicObject> ，则该 `CTypeDynamic` 方法将首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="567c6-115">如果用户定义的静态转换失败，该方法将 `CTypeDynamic` 尝试使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="567c6-116">如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> ，则该 `CTypeDynamic` 方法将优先于用户定义的静态转换的动态转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-117">下面的示例使用 `CTypeDynamic` 方法将动态对象转换为字符串，方法是使用由动态对象定义的转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects"><span data-ttu-id="567c6-118">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects"><span data-ttu-id="567c6-119">演练：创建并使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="567c6-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType? CTypeDynamic&lt;TargetType&gt; (object Expression);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="567c6-120">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="567c6-121">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="567c6-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="567c6-122">将对象转换为指定的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="567c6-123">静态类型化为请求的泛型类型的对象。</span><span class="sxs-lookup"><span data-stu-id="567c6-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-124">`CTypeDynamic`方法将作为参数传递的对象转换 `Expression` 为泛型参数类型所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="567c6-125">如果对象是动态对象，则该 `CTypeDynamic` 方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="567c6-126">`CTypeDynamic`方法根据对象本身定义的转换语义应用动态转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="567c6-127">如果动态对象继承自 <xref:System.Dynamic.DynamicObject> ，则该 `CTypeDynamic` 方法将首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="567c6-128">如果用户定义的静态转换失败，该方法将 `CTypeDynamic` 尝试使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="567c6-129">如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> ，则该 `CTypeDynamic` 方法将优先于用户定义的静态转换的动态转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-130">下面的示例使用 `CTypeDynamic` 方法将动态对象转换为字符串，方法是使用由动态对象定义的转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects"><span data-ttu-id="567c6-131">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects"><span data-ttu-id="567c6-132">演练：创建并使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="567c6-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="567c6-133">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="567c6-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="567c6-134">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="567c6-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="567c6-135">对应于最新运行时错误的错误消息。</span><span class="sxs-lookup"><span data-stu-id="567c6-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-136">`ErrorToString`函数检查对象的属性设置 `Err` 以确定最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="567c6-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="567c6-137">函数的返回值 `ErrorToString` 对应于 `Description` 对象的属性 `Err` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="567c6-138">如果未出现运行时错误，则 `ErrorToString` 返回长度为零的字符串 ( "" ) 。</span><span class="sxs-lookup"><span data-stu-id="567c6-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="567c6-139">在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。</span><span class="sxs-lookup"><span data-stu-id="567c6-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-140">下面的代码使用 `ErrorToString` 函数来显示与指定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="567c6-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-141"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="567c6-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="567c6-142">可选。</span><span class="sxs-lookup"><span data-stu-id="567c6-142">Optional.</span></span> <span data-ttu-id="567c6-143">任何有效的错误号。</span><span class="sxs-lookup"><span data-stu-id="567c6-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="567c6-144">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="567c6-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="567c6-145">与给定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="567c6-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-146">`ErrorToString`函数检查对象的属性设置 `Err` 以确定最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="567c6-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="567c6-147">函数的返回值 `ErrorToString` 对应于 `Description` 对象的属性 `Err` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="567c6-148">如果 `ErrorNumber` 是有效的错误号但未定义，则 `ErrorToString` 返回字符串（ `"Application-defined or object-defined error."` 如果无效 `ErrorNumber` ），将发生错误。</span><span class="sxs-lookup"><span data-stu-id="567c6-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="567c6-149">如果 `ErrorNumber` 省略，则返回与最新的运行时错误相对应的消息。</span><span class="sxs-lookup"><span data-stu-id="567c6-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="567c6-150">如果未发生运行时错误或 `ErrorNumber` 为0，则 `ErrorToString` 返回长度为零的字符串 ( "" ) 。</span><span class="sxs-lookup"><span data-stu-id="567c6-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="567c6-151">在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。</span><span class="sxs-lookup"><span data-stu-id="567c6-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-152">下面的代码使用 `ErrorToString` 函数来显示与指定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="567c6-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-153"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="567c6-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="567c6-154">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-155">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-155">Required.</span></span> <span data-ttu-id="567c6-156"><see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-157">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-158">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-159">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-160">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-161">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-162">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="567c6-163">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-164">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-165">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-166">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-167">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-168">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-169">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-170">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-171">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-171">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-172">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-173">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-175">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-176">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-176">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-177">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-178">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Fix(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-179">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-179">Required.</span></span> <span data-ttu-id="567c6-180"><see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-180">A number of type <see cref="T:System.Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-181">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-182">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-183">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-184">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-185">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-186">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="567c6-187">从 Visual Basic 15.8 开始， `Double` 如果将由方法返回的值传递 `Fix` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Double` 返回的值 `Fix` 隐式转换为设置为的 [选项 Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) ， `Off` 则将优化性能的整数转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to `Off`.</span></span> <span data-ttu-id="567c6-188">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="567c6-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="567c6-189">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="567c6-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="567c6-190">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-191">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-192">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-193">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-194">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-195">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-196">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-197">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-198">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-198">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-199">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-200">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-202">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-203">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-203">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-204">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-205">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Fix(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-206">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-206">Required.</span></span> <span data-ttu-id="567c6-207"><see langword="Short" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-208">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-209">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-210">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-211">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-212">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-213">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-214">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-215">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-216">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-217">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-218">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-219">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-220">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-221">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-222">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-222">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-223">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-224">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-226">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-227">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-227">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-228">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-229">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Fix(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-230">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-230">Required.</span></span> <span data-ttu-id="567c6-231"><see langword="Integer" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-232">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-233">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-234">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-235">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-236">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-237">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-238">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-239">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-240">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-241">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-242">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-243">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-244">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-245">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-246">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-246">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-247">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-248">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-250">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-251">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-251">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-252">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-253">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Fix(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-254">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-254">Required.</span></span> <span data-ttu-id="567c6-255"><see langword="Long" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-256">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-257">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-258">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-259">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-260">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-261">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-262">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-263">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-264">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-265">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-266">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-267">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-268">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-269">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-270">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-270">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-271">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-272">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-274">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-275">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-275">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-276">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-277">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Fix(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-278">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-278">Required.</span></span> <span data-ttu-id="567c6-279"><see langword="Object" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="567c6-280">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="567c6-281">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-282">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-283">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-284">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-285">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-286">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="567c6-287">从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，该对象的运行时类型为或，则在将该 `Double` `Single` 方法返回的值传递给任何整型转换函数时，将优化浮点到整数转换的性能 `Fix` ; 如果返回的值将[integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions) `Fix` 自动转换为设置为 Off[的](/dotnet/visual-basic/language-reference/statements/option-strict-statement)整数，则为。</span><span class="sxs-lookup"><span data-stu-id="567c6-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="567c6-288">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="567c6-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="567c6-289">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="567c6-290">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-291">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-292">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-293">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-294">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-295">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-296">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-297">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-298">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-298">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-299">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-300">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-302">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-303">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-303">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-304">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-305">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Fix(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-306">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-306">Required.</span></span> <span data-ttu-id="567c6-307"><see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-307">A number of type <see cref="T:System.Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-308">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-309">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-310">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-311">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-312">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-313">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="567c6-314">从 Visual Basic 15.8 开始， `Single` 如果将由方法返回的值传递 `Fix` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Single` 返回的值 `Fix` 被自动转换为将 [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) 设置为 Off 的整数，则将优化性能的整数转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="567c6-315">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="567c6-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="567c6-316">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="567c6-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="567c6-317">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-318">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-319">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-320">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-321">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-322">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-323">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-324">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-325">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-325">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-326">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-327">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-329">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-330">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-330">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-331">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-332">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="567c6-333">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-334">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-334">Required.</span></span> <span data-ttu-id="567c6-335">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-336">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-337">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-338">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-339">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-339">If `Number` is</span></span>|<span data-ttu-id="567c6-340">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-341">空</span><span class="sxs-lookup"><span data-stu-id="567c6-341">Empty</span></span>|<span data-ttu-id="567c6-342">零</span><span class="sxs-lookup"><span data-stu-id="567c6-342">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-343">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-343">Any numeric value</span></span>|<span data-ttu-id="567c6-344">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-345">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-346">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-347">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-348">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-349"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-351">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-352">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-352">Required.</span></span> <span data-ttu-id="567c6-353">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-354">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-355">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-356">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-357">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-357">If `Number` is</span></span>|<span data-ttu-id="567c6-358">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-359">空</span><span class="sxs-lookup"><span data-stu-id="567c6-359">Empty</span></span>|<span data-ttu-id="567c6-360">零</span><span class="sxs-lookup"><span data-stu-id="567c6-360">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-361">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-361">Any numeric value</span></span>|<span data-ttu-id="567c6-362">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-363">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-364">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-365">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-366">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-367"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-369">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-370">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-370">Required.</span></span> <span data-ttu-id="567c6-371">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-372">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-373">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-374">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-375">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-375">If `Number` is</span></span>|<span data-ttu-id="567c6-376">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-377">空</span><span class="sxs-lookup"><span data-stu-id="567c6-377">Empty</span></span>|<span data-ttu-id="567c6-378">零</span><span class="sxs-lookup"><span data-stu-id="567c6-378">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-379">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-379">Any numeric value</span></span>|<span data-ttu-id="567c6-380">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-381">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-382">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-383">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-384">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-385"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-387">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-388">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-388">Required.</span></span> <span data-ttu-id="567c6-389">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-390">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-391">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-392">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-393">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-393">If `Number` is</span></span>|<span data-ttu-id="567c6-394">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-395">空</span><span class="sxs-lookup"><span data-stu-id="567c6-395">Empty</span></span>|<span data-ttu-id="567c6-396">零</span><span class="sxs-lookup"><span data-stu-id="567c6-396">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-397">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-397">Any numeric value</span></span>|<span data-ttu-id="567c6-398">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-399">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-400">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-401">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-402">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-403"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-405">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-406">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-406">Required.</span></span> <span data-ttu-id="567c6-407">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-408">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-409">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-410">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-411">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-411">If `Number` is</span></span>|<span data-ttu-id="567c6-412">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-413">空</span><span class="sxs-lookup"><span data-stu-id="567c6-413">Empty</span></span>|<span data-ttu-id="567c6-414">零</span><span class="sxs-lookup"><span data-stu-id="567c6-414">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-415">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-415">Any numeric value</span></span>|<span data-ttu-id="567c6-416">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-417">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-418">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-419">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-420">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-421"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-423">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-424">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-424">Required.</span></span> <span data-ttu-id="567c6-425">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-426">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-427">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-428">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-429">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-429">If `Number` is</span></span>|<span data-ttu-id="567c6-430">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-431">空</span><span class="sxs-lookup"><span data-stu-id="567c6-431">Empty</span></span>|<span data-ttu-id="567c6-432">零</span><span class="sxs-lookup"><span data-stu-id="567c6-432">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-433">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-433">Any numeric value</span></span>|<span data-ttu-id="567c6-434">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-435">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-436">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-437">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-438">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-439"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-441">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-442">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-442">Required.</span></span> <span data-ttu-id="567c6-443">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-444">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-445">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-446">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-447">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-447">If `Number` is</span></span>|<span data-ttu-id="567c6-448">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-449">空</span><span class="sxs-lookup"><span data-stu-id="567c6-449">Empty</span></span>|<span data-ttu-id="567c6-450">零</span><span class="sxs-lookup"><span data-stu-id="567c6-450">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-451">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-451">Any numeric value</span></span>|<span data-ttu-id="567c6-452">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-453">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-454">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-455">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-456">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-457"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-459">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-460">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-460">Required.</span></span> <span data-ttu-id="567c6-461">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-462">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-463">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-464">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-465">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-465">If `Number` is</span></span>|<span data-ttu-id="567c6-466">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-467">空</span><span class="sxs-lookup"><span data-stu-id="567c6-467">Empty</span></span>|<span data-ttu-id="567c6-468">零</span><span class="sxs-lookup"><span data-stu-id="567c6-468">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-469">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-469">Any numeric value</span></span>|<span data-ttu-id="567c6-470">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-471">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-472">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-473">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-474">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-475"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-477">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-478">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-478">Required.</span></span> <span data-ttu-id="567c6-479">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-480">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-481">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-482">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-483">如果 `Number` 为 </span><span class="sxs-lookup"><span data-stu-id="567c6-483">If `Number` is</span></span>|<span data-ttu-id="567c6-484">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-485">空</span><span class="sxs-lookup"><span data-stu-id="567c6-485">Empty</span></span>|<span data-ttu-id="567c6-486">零</span><span class="sxs-lookup"><span data-stu-id="567c6-486">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-487">任何数值</span><span class="sxs-lookup"><span data-stu-id="567c6-487">Any numeric value</span></span>|<span data-ttu-id="567c6-488">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="567c6-489">可以通过在适当范围内的数字前面使用来表示十六进制数字 `&H` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="567c6-490">例如， `&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="567c6-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-491">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-492">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-493"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers"><span data-ttu-id="567c6-495">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="567c6-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="567c6-496">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-497">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-497">Required.</span></span> <span data-ttu-id="567c6-498"><see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-499">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-500">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-501">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-502">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-503">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-504">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="567c6-505">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-506">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-507">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-508">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-509">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-510">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-511">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-512">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-513">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-513">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-514">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-515">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-517">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-518">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-518">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-519">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-520">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Int(float64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-521">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-521">Required.</span></span> <span data-ttu-id="567c6-522"><see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-522">A number of type <see cref="T:System.Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-523">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-524">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-525">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-526">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-527">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-528">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="567c6-529">从 Visual Basic 15.8 开始，如果将由方法返回的值传递 `Int` 到任何[整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果返回的双精度值 `Int` 被设置为 Off [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) ，则会优化双精度转换的性能。</span><span class="sxs-lookup"><span data-stu-id="567c6-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="567c6-530">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="567c6-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="567c6-531">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="567c6-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="567c6-532">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-533">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-534">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-535">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-536">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-537">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-538">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-539">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-540">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-540">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-541">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-542">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-544">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-545">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-545">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-546">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-547">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Int(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-548">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-548">Required.</span></span> <span data-ttu-id="567c6-549"><see langword="Short" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-550">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-551">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-552">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-553">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-554">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-555">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-556">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-557">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-558">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-559">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-560">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-561">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-562">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-563">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-564">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-564">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-565">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-566">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-568">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-569">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-569">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-570">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-571">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Int(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-572">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-572">Required.</span></span> <span data-ttu-id="567c6-573"><see langword="Integer" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-574">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-575">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-576">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-577">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-578">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-579">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-580">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-581">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-582">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-583">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-584">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-585">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-586">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-587">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-588">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-588">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-589">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-590">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-592">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-593">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-593">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-594">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-595">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Int(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-596">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-596">Required.</span></span> <span data-ttu-id="567c6-597"><see langword="Long" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-598">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-599">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-600">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-601">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-602">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-603">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-604">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-605">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-606">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-607">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-608">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-609">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-610">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-611">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-612">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-612">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-613">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-614">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-616">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-617">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-617">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-618">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-619">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Int(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-620">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-620">Required.</span></span> <span data-ttu-id="567c6-621"><see langword="Object" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="567c6-622">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="567c6-623">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-624">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-625">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-626">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-627">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-628">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="567c6-629">从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，该对象的运行时类型为或，则在将该 `Double` `Single` 方法返回的值传递给任何整型转换函数时，将优化浮点到整数转换的性能 `Int` ; 如果返回的值将[integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions) `Int` 自动转换为设置为 Off[的](/dotnet/visual-basic/language-reference/statements/option-strict-statement)整数，则为。</span><span class="sxs-lookup"><span data-stu-id="567c6-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="567c6-630">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="567c6-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="567c6-631">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="567c6-632">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-633">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-634">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-635">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-636">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-637">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-638">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-639">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-640">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-640">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-641">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-642">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-644">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-645">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-645">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-646">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-647">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Int(float32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-648">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-648">Required.</span></span> <span data-ttu-id="567c6-649"><see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-649">A number of type <see cref="T:System.Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-650">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-651">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-652">`Int`和函数都 `Fix` 删除的小数部分 `Number` ，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="567c6-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="567c6-653">和函数之间的区别 `Int` `Fix` 是，如果 `Number` 为负，则 `Int` 返回小于或等于的第一个负整数 `Number` ，而 `Fix` 返回大于或等于的第一个负整数 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="567c6-654">例如， `Int` 将-8.4 转换为-9，并 `Fix` 将-8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="567c6-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="567c6-655">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="567c6-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="567c6-656">从 Visual Basic 15.8 开始， `Single` 如果将由方法返回的值传递 `Int` 到任何 [整型转换函数](/dotnet/visual-basic/language-reference/functions/conversion-functions)，或者如果 `Single` 返回的值 `Int` 被自动转换为将 [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) 设置为 Off 的整数，则将优化性能的整数转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](/dotnet/visual-basic/language-reference/functions/conversion-functions), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](/dotnet/visual-basic/language-reference/statements/option-strict-statement) set to Off.</span></span> <span data-ttu-id="567c6-657">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="567c6-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="567c6-658">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="567c6-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="567c6-659">此示例说明了 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="567c6-660">如果是负数参数，则 `Int` 函数返回小于或等于数字的第一个负整数; `Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="567c6-661">下面的示例要求你指定， `Option Strict Off` 因为在下面不允许从类型到类型的隐式转换 `Double` `Integer` `Option Strict On` ：</span><span class="sxs-lookup"><span data-stu-id="567c6-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="567c6-662">您可以使用 `CInt` 函数将其他数据类型显式转换为类型 `Integer` `Option Strict Off` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="567c6-663">但是，会 `CInt` 舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="567c6-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="567c6-664">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="567c6-665">您可以对 `CInt` 调用的结果使用函数，也可以在 `Fix` `Int` 没有舍入的情况下执行到整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="567c6-666">例如：</span><span class="sxs-lookup"><span data-stu-id="567c6-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="567c6-667">有关的详细信息 `CInt` ，请参阅 [类型转换函数](/dotnet/visual-basic/language-reference/functions/type-conversion-functions)。</span><span class="sxs-lookup"><span data-stu-id="567c6-667">For more information on `CInt`, see [Type Conversion Functions](/dotnet/visual-basic/language-reference/functions/type-conversion-functions).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-668">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="567c6-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-669">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary"><span data-ttu-id="567c6-671">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/math-summary"><span data-ttu-id="567c6-672">数学摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-672">Math Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/math-functions"><span data-ttu-id="567c6-673">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="567c6-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-674">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="567c6-675">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-676">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-676">Required.</span></span> <span data-ttu-id="567c6-677">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-678">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-679">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-680">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-681">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-681">If Number is</span></span>|<span data-ttu-id="567c6-682">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-683">空</span><span class="sxs-lookup"><span data-stu-id="567c6-683">Empty</span></span>|<span data-ttu-id="567c6-684">零</span><span class="sxs-lookup"><span data-stu-id="567c6-684">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-685">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-685">Any other number</span></span>|<span data-ttu-id="567c6-686">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-687">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-688">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-689">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-690">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-691"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-692">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-692">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-694">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-694">Required.</span></span> <span data-ttu-id="567c6-695">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-696">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-697">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-698">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-699">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-699">If Number is</span></span>|<span data-ttu-id="567c6-700">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-701">空</span><span class="sxs-lookup"><span data-stu-id="567c6-701">Empty</span></span>|<span data-ttu-id="567c6-702">零</span><span class="sxs-lookup"><span data-stu-id="567c6-702">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-703">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-703">Any other number</span></span>|<span data-ttu-id="567c6-704">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-705">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-706">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-707">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-708">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-709"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-710">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-710">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-712">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-712">Required.</span></span> <span data-ttu-id="567c6-713">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-714">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-715">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-716">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-717">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-717">If Number is</span></span>|<span data-ttu-id="567c6-718">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-719">空</span><span class="sxs-lookup"><span data-stu-id="567c6-719">Empty</span></span>|<span data-ttu-id="567c6-720">零</span><span class="sxs-lookup"><span data-stu-id="567c6-720">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-721">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-721">Any other number</span></span>|<span data-ttu-id="567c6-722">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-723">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-724">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-725">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-726">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-727"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-728">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-728">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-730">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-730">Required.</span></span> <span data-ttu-id="567c6-731">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-732">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-733">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-734">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-735">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-735">If Number is</span></span>|<span data-ttu-id="567c6-736">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-737">空</span><span class="sxs-lookup"><span data-stu-id="567c6-737">Empty</span></span>|<span data-ttu-id="567c6-738">零</span><span class="sxs-lookup"><span data-stu-id="567c6-738">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-739">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-739">Any other number</span></span>|<span data-ttu-id="567c6-740">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-741">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-742">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-743">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-744">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-745"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-746">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-746">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-748">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-748">Required.</span></span> <span data-ttu-id="567c6-749">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-750">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-751">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-752">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-753">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-753">If Number is</span></span>|<span data-ttu-id="567c6-754">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-755">空</span><span class="sxs-lookup"><span data-stu-id="567c6-755">Empty</span></span>|<span data-ttu-id="567c6-756">零</span><span class="sxs-lookup"><span data-stu-id="567c6-756">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-757">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-757">Any other number</span></span>|<span data-ttu-id="567c6-758">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-759">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-760">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-761">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-762">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-763"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-764">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-764">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int8 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-766">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-766">Required.</span></span> <span data-ttu-id="567c6-767">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-768">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-769">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-770">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-771">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-771">If Number is</span></span>|<span data-ttu-id="567c6-772">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-773">空</span><span class="sxs-lookup"><span data-stu-id="567c6-773">Empty</span></span>|<span data-ttu-id="567c6-774">零</span><span class="sxs-lookup"><span data-stu-id="567c6-774">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-775">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-775">Any other number</span></span>|<span data-ttu-id="567c6-776">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-777">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-778">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-779">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-780">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-781"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-782">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-782">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-784">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-784">Required.</span></span> <span data-ttu-id="567c6-785">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-786">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-787">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-788">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-789">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-789">If Number is</span></span>|<span data-ttu-id="567c6-790">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-791">空</span><span class="sxs-lookup"><span data-stu-id="567c6-791">Empty</span></span>|<span data-ttu-id="567c6-792">零</span><span class="sxs-lookup"><span data-stu-id="567c6-792">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-793">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-793">Any other number</span></span>|<span data-ttu-id="567c6-794">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-795">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-796">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-797">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-798">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-799"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-800">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-800">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-802">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-802">Required.</span></span> <span data-ttu-id="567c6-803">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-804">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-805">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-806">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-807">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-807">If Number is</span></span>|<span data-ttu-id="567c6-808">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-809">空</span><span class="sxs-lookup"><span data-stu-id="567c6-809">Empty</span></span>|<span data-ttu-id="567c6-810">零</span><span class="sxs-lookup"><span data-stu-id="567c6-810">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-811">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-811">Any other number</span></span>|<span data-ttu-id="567c6-812">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-813">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-814">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-815">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-816">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-817"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-818">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-818">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-820">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-820">Required.</span></span> <span data-ttu-id="567c6-821">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="567c6-822">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-823">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-824">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="567c6-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="567c6-825">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="567c6-825">If Number is</span></span>|<span data-ttu-id="567c6-826">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="567c6-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="567c6-827">空</span><span class="sxs-lookup"><span data-stu-id="567c6-827">Empty</span></span>|<span data-ttu-id="567c6-828">零</span><span class="sxs-lookup"><span data-stu-id="567c6-828">Zero (0)</span></span>|  
|<span data-ttu-id="567c6-829">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="567c6-829">Any other number</span></span>|<span data-ttu-id="567c6-830">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="567c6-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="567c6-831">您可以使用在适当范围内的数字前面直接表示八进制数 `&O` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="567c6-832">例如， `&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="567c6-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-833">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="567c6-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-834">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-835"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-836">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-836">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Str(object Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="567c6-838">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-838">Required.</span></span> <span data-ttu-id="567c6-839">包含任何有效的数值表达式的 <see langword="Object" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="567c6-840">返回数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="567c6-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="567c6-841">数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="567c6-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-842">当数字转换为字符串时，将始终为的符号保留前导空格 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="567c6-843">如果 `Number` 为正，则返回的字符串将包含前导空格，并暗含正负号。</span><span class="sxs-lookup"><span data-stu-id="567c6-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="567c6-844">负数将包括减号 ( ) ，无前导空格。</span><span class="sxs-lookup"><span data-stu-id="567c6-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="567c6-845">使用 `Format` 函数可以将要设置格式的数值转换为日期、时间、货币或其他用户定义格式。</span><span class="sxs-lookup"><span data-stu-id="567c6-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="567c6-846">与 `Str` 函数不同， `Format` 函数不包含用于的符号的前导空格 `Number` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="567c6-847">`Str`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="567c6-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="567c6-848">例如，如果使用不同的小数点分隔符 (例如，在 "国际化应用程序") 中，使用 `CStr` 或 `Format` 函数将数字转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="567c6-849">若要获取特定区域性中的数字的字符串表示形式，请使用数字的 `ToString(IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="567c6-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="567c6-850">例如，在将 <xref:System.Double.ToString%2A> 类型的值转换 `Double` 为字符串时使用。</span><span class="sxs-lookup"><span data-stu-id="567c6-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="567c6-851">此示例使用 `Str` 函数返回 `String` 数字的表示形式。</span><span class="sxs-lookup"><span data-stu-id="567c6-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="567c6-852">当正数转换为字符串时，将始终为其符号保留前导空格。</span><span class="sxs-lookup"><span data-stu-id="567c6-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="567c6-853">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="567c6-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="567c6-854"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="567c6-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/conversion-summary"><span data-ttu-id="567c6-855">转换摘要</span><span class="sxs-lookup"><span data-stu-id="567c6-855">Conversion Summary</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="567c6-857">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="567c6-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Val(char Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="567c6-858">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-858">Required.</span></span> <span data-ttu-id="567c6-859">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="567c6-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="567c6-860">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="567c6-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="567c6-861">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="567c6-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="567c6-862">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-863">`Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="567c6-864">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="567c6-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="567c6-865">但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。</span><span class="sxs-lookup"><span data-stu-id="567c6-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="567c6-866">从参数中去除空格、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="567c6-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="567c6-867">以下调用返回值1615198。</span><span class="sxs-lookup"><span data-stu-id="567c6-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="567c6-868">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="567c6-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="567c6-869">`Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="567c6-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="567c6-870">当使用不同的小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="567c6-871">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="567c6-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="567c6-872">例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="567c6-873">为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="567c6-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="567c6-874">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="567c6-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="567c6-875">`Double` `Integer` `Long` 如果格式不包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="567c6-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="567c6-876">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="567c6-877">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="567c6-878"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="567c6-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-879"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="567c6-881">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-881">Required.</span></span> <span data-ttu-id="567c6-882">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="567c6-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="567c6-883">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="567c6-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="567c6-884">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="567c6-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="567c6-885">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-886">`Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="567c6-887">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="567c6-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="567c6-888">但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。</span><span class="sxs-lookup"><span data-stu-id="567c6-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="567c6-889">将从自变量中删除空白、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="567c6-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="567c6-890">以下调用返回值1234123。</span><span class="sxs-lookup"><span data-stu-id="567c6-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="567c6-891">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="567c6-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="567c6-892">`Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="567c6-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="567c6-893">使用其他小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="567c6-894">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="567c6-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="567c6-895">例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="567c6-896">为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="567c6-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="567c6-897">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="567c6-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="567c6-898">`Double` `Integer` `Long` 如果冲突未包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="567c6-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="567c6-899">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="567c6-900">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="567c6-901"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="567c6-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-902"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(string InputStr) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="567c6-904">必需。</span><span class="sxs-lookup"><span data-stu-id="567c6-904">Required.</span></span> <span data-ttu-id="567c6-905">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="567c6-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="567c6-906">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="567c6-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="567c6-907">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="567c6-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="567c6-908">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="567c6-909">`Val`函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="567c6-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="567c6-910">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="567c6-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="567c6-911">但是，函数会识别八进制) 的基数前缀 `&O` (和 `&H` 十六进制) 的 (。</span><span class="sxs-lookup"><span data-stu-id="567c6-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="567c6-912">将从自变量中删除空白、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="567c6-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="567c6-913">以下调用返回值1234123。</span><span class="sxs-lookup"><span data-stu-id="567c6-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="567c6-914">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="567c6-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="567c6-915">`Val`函数仅识别 `.`) 为有效小数点分隔符 (的时间段。</span><span class="sxs-lookup"><span data-stu-id="567c6-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="567c6-916">使用其他小数点分隔符时，与在国际应用程序中一样，请使用 `CDbl` 或 `CInt` 改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="567c6-917">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="567c6-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="567c6-918">例如，在将 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 字符串转换为时使用 `Double` 。</span><span class="sxs-lookup"><span data-stu-id="567c6-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="567c6-919">为了 <xref:System.InvalidCastException> 响应某些不常见的数字格式，可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="567c6-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="567c6-920">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="567c6-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="567c6-921">`Double` `Integer` `Long` 如果冲突未包含在字符串中，则编译器将捕获格式化为的数字与和类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="567c6-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="567c6-922">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="567c6-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="567c6-923">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="567c6-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="567c6-924"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="567c6-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="567c6-925"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="567c6-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions"><span data-ttu-id="567c6-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="567c6-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
