<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9a05d440f0d9ff3316b9e99a36f133e6f60df4e3" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102070254" /></Metadata><TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Count = {Count}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Count = {Count}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4e2b0-101">Visual Basic <see langword="Collection" /> 是可作为单元引用的一组有序项。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4e2b0-102">只要可能，您应使用 <xref:System.Collections.Generic?displayProperty=nameWithType> 命名空间或 <xref:System.Collections.Concurrent> 命名空间而不是 Visual Basic `Collection` 中的泛型集合。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="4e2b0-103">有关详细信息，请参阅 [集合-c #](/dotnet/csharp/programming-guide/concepts/collections) 或 [集合-Visual Basic](/dotnet/visual-basic/programming-guide/concepts/collections)。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-103">For more information, see [Collections - C#](/dotnet/csharp/programming-guide/concepts/collections) or [Collections - Visual Basic](/dotnet/visual-basic/programming-guide/concepts/collections).</span></span>  
  
 <span data-ttu-id="4e2b0-104">Visual Basic `Collection` 对象提供了一种将一组相关项作为单个对象来引用的便捷方法。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="4e2b0-105">集合中的项或 *元素* 只需要与集合中存在的项相关联。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="4e2b0-106">集合的元素不必共享同一数据类型。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="4e2b0-107">您可以使用与创建其他对象相同的方式来创建集合，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="4e2b0-108">创建集合后，可以执行以下任一操作：</span><span class="sxs-lookup"><span data-stu-id="4e2b0-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="4e2b0-109">使用方法添加元素 <xref:Microsoft.VisualBasic.Collection.Add%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="4e2b0-110">使用方法移除元素 <xref:Microsoft.VisualBasic.Collection.Remove%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="4e2b0-111">删除包含方法的所有元素 <xref:Microsoft.VisualBasic.Collection.Clear%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="4e2b0-112">了解集合包含的元素与属性的数目 <xref:Microsoft.VisualBasic.Collection.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="4e2b0-113">使用方法检查特定元素是否存在 <xref:Microsoft.VisualBasic.Collection.Contains%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="4e2b0-114">使用属性返回集合中的特定元素 <xref:Microsoft.VisualBasic.Collection.Item%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="4e2b0-115">使用 For Each 循环访问整个集合 [下一语句](/dotnet/visual-basic/language-reference/statements/for-each-next-statement)。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-115">Iterate through the entire collection with the [For Each...Next Statement](/dotnet/visual-basic/language-reference/statements/for-each-next-statement).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e2b0-116">尽管 Visual Basic `Collection` 对象具有与 Visual Basic 6.0 中的对象相同的功能 `Collection` ，但这两种功能无法在 COM 环境中进行互操作。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="4e2b0-117">循环访问 Visual Basic `Collection` 不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="4e2b0-118">即使集合已同步，其他线程仍可以修改该集合，从而导致枚举器引发异常。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="4e2b0-119">若要保证枚举过程中的线程安全，请锁定集合或捕获由其他线程所做的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="4e2b0-120">有关锁定编程元素的详细信息，请参阅 [SyncLock 语句](/dotnet/visual-basic/language-reference/statements/synclock-statement)。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-120">For more information on locking a programming element, see [SyncLock Statement](/dotnet/visual-basic/language-reference/statements/synclock-statement).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-121">下面的示例创建 `Collection` 对象 `names` 和一个对话框，用户可以使用该对话框将 (名称) 对象添加到集合中。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="4e2b0-122">然后，它显示集合中的名称，最后清空集合，而不释放 `Collection` 对象本身。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="4e2b0-123">若要查看其工作原理，请从 "**项目**" 菜单中选择 "**添加类**" 命令，然后在 `instanceName` " (类型") 的模块级别声明一个名为的公共变量， `nameClass` `Public instanceName` 以便保存每个实例的名称。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="4e2b0-124">保留默认名称为 `nameClass` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="4e2b0-125">将以下代码复制并粘贴到另一个模块的 " **常规** " 部分，然后用 `classNamer` 另一个过程中的语句启动它。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="4e2b0-126"> (此示例仅适用于支持类的主机应用程序。 ) </span><span class="sxs-lookup"><span data-stu-id="4e2b0-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e2b0-127">创建并返回一个新的 Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-128">此构造函数返回的 Visual Basic 集合为空，并且没有分配任何初始容量。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="4e2b0-129">Visual Basic 集合与 <xref:System.Collections?displayProperty=nameWithType> 、 <xref:System.Collections.Generic?displayProperty=nameWithType> 和命名空间中提供的 .NET Framework 集合不兼容 <xref:System.Collections.Specialized?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-129">Visual Basic collections are not compatible with the .NET Framework collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-130">下面的示例创建一个新的 Visual Basic 集合，并将其分配给变量 `coll` ：</span><span class="sxs-lookup"><span data-stu-id="4e2b0-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="4e2b0-131">此 `Collection` 对象是从1开始的，这意味着元素的索引值范围从1到属性的值 `Count` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="4e2b0-132">Visual Basic 集合包含类型为的元素 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object? Item, string? Key = default, object? Before = default, object? After = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object Item, string Key, object Before, object After) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = Nothing, Optional Before As Object = Nothing, Optional After As Object = Nothing)" />
      <MemberSignature Language="F#" Value="member this.Add : obj * string * obj * obj -&gt; unit" Usage="collection.Add (Item, Key, Before, After)" />
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = default, object Before = default, object After = default);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item"><span data-ttu-id="4e2b0-133">必需。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-133">Required.</span></span> <span data-ttu-id="4e2b0-134">一个任意类型的对象，该对象指定要添加到集合的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-134">An object of any type that specifies the element to add to the collection.</span></span></param>
        <param name="Key"><span data-ttu-id="4e2b0-135">可选。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-135">Optional.</span></span> <span data-ttu-id="4e2b0-136">指定键字符串的唯一 <see langword="String" /> 表达式，可以用此键字符串代替定位索引访问集合的这个新元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span></span></param>
        <param name="Before"><span data-ttu-id="4e2b0-137">可选。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-137">Optional.</span></span> <span data-ttu-id="4e2b0-138">指定集合中的相对位置的表达式。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-138">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="4e2b0-139">将要添加的元素放在集合中由 <paramref name="Before" /> 参数标识的元素前面。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-139">The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument.</span></span> <span data-ttu-id="4e2b0-140">如果 <paramref name="Before" /> 是数值表达式，则它必须是介于 1 和集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性值之间的数值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-140">If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="4e2b0-141">如果 <paramref name="Before" /> 是 <see langword="String" /> 表达式，则必须对应于将引用的元素添加到集合时指定的键字符串。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-141">If <paramref name="Before" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span></span> <span data-ttu-id="4e2b0-142">不能同时指定 <paramref name="Before" /> 和 <paramref name="After" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-142">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <param name="After"><span data-ttu-id="4e2b0-143">可选。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-143">Optional.</span></span> <span data-ttu-id="4e2b0-144">指定集合中的相对位置的表达式。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-144">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="4e2b0-145">将要添加的元素放在集合中由 <paramref name="After" /> 参数标识的元素后面。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-145">The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument.</span></span> <span data-ttu-id="4e2b0-146">如果 <paramref name="After" /> 是数值表达式，则它必须是介于 1 和集合的 <see langword="Count" /> 属性值之间的数值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-146">If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span></span> <span data-ttu-id="4e2b0-147">如果 <paramref name="After" /> 是 <see langword="String" /> 表达式，则必须对应于将引用的元素添加到集合时指定的键字符串。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-147">If <paramref name="After" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span></span> <span data-ttu-id="4e2b0-148">不能同时指定 <paramref name="Before" /> 和 <paramref name="After" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-148">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <summary><span data-ttu-id="4e2b0-149">将一个元素添加到 <see langword="Collection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-149">Adds an element to a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-150">`Before`或 `After` 参数必须引用集合的现有元素; 否则，将发生错误。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="4e2b0-151">如果省略了 `Before` 和 `After` 参数，则新的对象将添加到集合的末尾。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="4e2b0-152">如果指定的 `Key` 值与集合中现有元素的键匹配，也会出现错误。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-153">下面的示例使用 `Add` 方法将名为的 `child` 类的对象（名为的类的实例）添加 `child` `Public` `name` 到名为的集合 `family` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-153">The following example uses the `Add` method to add `child` objects - instances of a class called `child` containing a `Public` property `name` - to a collection called `family`.</span></span> <span data-ttu-id="4e2b0-154">若要查看其工作原理，请创建 <xref:System.Windows.Forms.Form> 包含两个控件的， <xref:System.Windows.Forms.Button> 并将其 <xref:System.Windows.Forms.Control.Text%2A> 属性设置为 `Add` 和 `List` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="4e2b0-155">向 `child` 窗体代码添加类定义和 `family` 声明。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="4e2b0-156">`_Click`按如下所示修改 "**添加**" 和 "**列表**" 按钮的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="4e2b0-157">" **添加** " 按钮允许添加子级。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="4e2b0-158">" **列表** " 按钮显示所有子项的名称。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e2b0-159">删除 Visual Basic <see langword="Collection" /> 对象的所有元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-160">`Clear`方法将清空集合并将其属性重置 <xref:Microsoft.VisualBasic.Collection.Count%2A> 为0。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string Key) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="collection.Contains Key" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="4e2b0-161">必需。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-161">Required.</span></span> <span data-ttu-id="4e2b0-162"><see langword="String" /> 表达式，指定搜索集合的元素所用的键。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span></span></param>
        <summary><span data-ttu-id="4e2b0-163">返回一个值，该值指示 Visual Basic <see langword="Collection" /> 对象是否包含一个带有特定键的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-163">Returns a value that indicates whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></summary>
        <returns><span data-ttu-id="4e2b0-164">如果 Visual Basic <see langword="Collection" /> 对象包含一个带有特定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-164"><see langword="true" /> if Visual Basic <see langword="Collection" /> object contains an element with a specific key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-165">`Contains``True`如果集合包含具有完全匹配的键的元素，则返回 `Key` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="4e2b0-166">否则，`Contains` 将返回 `False`。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="4e2b0-167">匹配键值时忽略大小写。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="4e2b0-168">Visual Basic `Collection` 可以保存某些元素，这些元素具有键和其他不含键的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="4e2b0-169">这取决于对方法的调用是否 <xref:Microsoft.VisualBasic.Collection.Add%2A> 向可选参数提供参数 `Key` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="4e2b0-170">如果要使用其键搜索元素的集合，请记住在 `Key` 每次调用方法时提供自变量 `Add` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.VisualBasic.Collection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4e2b0-171">获取集合中的元素数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-171">Gets the number of elements in a collection.</span></span></summary>
        <value><span data-ttu-id="4e2b0-172">集合中的元素数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-172">The number of elements in a collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-173">使用 `Count` 属性可确定对象中的元素数目 `Collection` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-173">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-174">此示例演示如何使用 `Count` 属性来显示变量中的对象中的元素数 <xref:Microsoft.VisualBasic.Collection> `birthdays` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-174">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4e2b0-175">`Collection`对象是从1开始的，这意味着元素的索引值范围从1到属性的值 `Count` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-175">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerator GetEnumerator() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.GetEnumerator " />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e2b0-176">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-176">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="4e2b0-177">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-177">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-178">[每个 .。。Next 语句](/dotnet/visual-basic/language-reference/statements/for-each-next-statement)调用 `GetEnumerator` 来获取枚举器对象，以支持对集合的元素进行迭代。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-178">The [For Each...Next Statement](/dotnet/visual-basic/language-reference/statements/for-each-next-statement) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="4e2b0-179">通常，可以使用 `For Each` ... `Next` 循环遍历集合或数组，并且无需 `GetEnumerator` 显式调用。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-179">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="4e2b0-180">如果需要对迭代进行更进一步的控制 `For Each` `Next` ，则可以使用 `GetEnumerator` 方法执行自定义的遍历。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-180">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="4e2b0-181">在某些情况下，您可能需要执行此操作。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-181">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="4e2b0-182">你可能希望返回到集合的开始处，并在迭代完成之前重新启动。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-182">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="4e2b0-183">由于各种原因，你可能希望跳过一个或多个元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-183">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="4e2b0-184">可能需要在遍历的中间更改集合的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-184">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="4e2b0-185">在这种情况下，您必须获取新的枚举器对象，因为上一个枚举器已失效。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-185">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-186">下面的示例演示如何使用 `GetEnumerator` 检索对象的所有元素 `Collection` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-186">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="4e2b0-187">`GetEnumerator` 构造并返回一个枚举器对象，该对象实现 <xref:System.Collections.IEnumerator> <xref:System.Collections> 命名空间的接口。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-187">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="4e2b0-188">枚举器对象公开 <xref:System.Collections.IEnumerator.Current%2A> 属性以及 <xref:System.Collections.IEnumerator.MoveNext%2A> 和 <xref:System.Collections.IEnumerator.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-188">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="4e2b0-189">有关详细信息，请参阅 [For Each .。。下一语句](/dotnet/visual-basic/language-reference/statements/for-each-next-statement)。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-189">For more information, see [For Each...Next Statement](/dotnet/visual-basic/language-reference/statements/for-each-next-statement).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e2b0-190">按位置或键获取 <see langword="Collection" /> 对象的特定元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-190">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object? this[int Index] { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="4e2b0-191">一个数值表达式，用于指定集合的元素位置。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-191">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="4e2b0-192"><paramref name="Index" /> 必须为介于 1 到集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性的值之间的数字。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-192"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="4e2b0-193">或 (B) 指定集合中元素的位置或键字符串的 <see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-193">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="4e2b0-194">按位置或键获取 <see langword="Collection" /> 对象的特定元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-194">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="4e2b0-195">对象的特定元素（ <see langword="Collection" /> 按位置或键）。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-195">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-196">如果 `Index` 的类型为 `Object` ，则 `Item` 属性将尝试将其视为 `String` 、 `Char` 、 `Char` 数组或整数值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-196">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="4e2b0-197">如果 `Item` 无法转换 `Index` 为 `String` 或 `Integer` ，则会引发 <xref:System.ArgumentException> 异常。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-197">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="4e2b0-198">`Item`属性是集合的默认属性。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-198">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="4e2b0-199">因此，以下代码行是等效的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-199">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-200">下面的示例使用 `Item` 属性来检索对集合中对象的引用。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-200">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="4e2b0-201">它 `birthdays` 以对象的形式创建 `Collection` ，然后检索表示帐单生日的对象，并使用键 `"Bill"` 作为 `Index` 参数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-201">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4e2b0-202">请注意，第一次调用显式指定了 `Item` 属性，但第二次调用不指定。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-202">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="4e2b0-203">因为 `Item` 属性是对象的默认属性，所以这两个调用都有效 `Collection` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-203">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object? this[object Index] { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="4e2b0-204">一个数值表达式，用于指定集合的元素位置。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-204">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="4e2b0-205"><paramref name="Index" /> 必须为介于 1 到集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性的值之间的数字。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-205"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="4e2b0-206">或 (B) 指定集合中元素的位置或键字符串的 <see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-206">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="4e2b0-207">按位置或键获取 <see langword="Collection" /> 对象的特定元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-207">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="4e2b0-208">对象的特定元素（ <see langword="Collection" /> 按位置或键）。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-208">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-209">如果 `Index` 的类型为 `Object` ，则 `Item` 属性将尝试将其视为 `String` 、 `Char` 、 `Char` 数组或整数值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-209">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="4e2b0-210">如果 `Item` 无法转换 `Index` 为 `String` 或 `Integer` ，则会引发 <xref:System.ArgumentException> 异常。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-210">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="4e2b0-211">`Item`属性是集合的默认属性。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-211">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="4e2b0-212">因此，以下代码行是等效的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-212">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-213">下面的示例使用 `Item` 属性来检索对集合中对象的引用。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-213">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="4e2b0-214">它 `birthdays` 以对象的形式创建 `Collection` ，然后检索表示帐单生日的对象，并使用键 `"Bill"` 作为 `Index` 参数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-214">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4e2b0-215">请注意，第一次调用显式指定了 `Item` 属性，但第二次调用不指定。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-215">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="4e2b0-216">因为 `Item` 属性是对象的默认属性，所以这两个调用都有效 `Collection` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-216">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object? this[string Key] { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="4e2b0-217">指定键字符串的唯一 <see langword="String" /> 表达式，可以使用此键字符串代替位置索引访问集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-217">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="4e2b0-218"><paramref name="Key" /> 必须对应于将元素添加到集合中时指定的 <paramref name="Key" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-218"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="4e2b0-219">按位置或键获取 <see langword="Collection" /> 对象的特定元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-219">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="4e2b0-220">对象的特定元素（ <see langword="Collection" /> 按位置或键）。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-220">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-221">如果 `Index` 的类型为 `Object` ，则 `Item` 属性将尝试将其视为 `String` 、 `Char` 、 `Char` 数组或整数值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-221">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="4e2b0-222">如果 `Item` 无法转换 `Index` 为 `String` 或 `Integer` ，则会引发 <xref:System.ArgumentException> 异常。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-222">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="4e2b0-223">`Item`属性是集合的默认属性。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-223">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="4e2b0-224">因此，以下代码行是等效的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-224">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-225">下面的示例使用 `Item` 属性来检索对集合中对象的引用。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-225">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="4e2b0-226">它 `birthdays` 以对象的形式创建 `Collection` ，然后检索表示帐单生日的对象，并使用键 `"Bill"` 作为 `Index` 参数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-226">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4e2b0-227">请注意，第一次调用显式指定了 `Item` 属性，但第二次调用不指定。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-227">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="4e2b0-228">因为 `Item` 属性是对象的默认属性，所以这两个调用都有效 `Collection` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-228">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e2b0-229">从 <see langword="Collection" /> 对象移除元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-229">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; unit" Usage="collection.Remove Index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="4e2b0-230">一个数值表达式，用于指定集合的元素位置。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-230">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="4e2b0-231"><paramref name="Index" /> 必须为介于 1 到集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性的值之间的数字。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-231"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span></param>
        <summary><span data-ttu-id="4e2b0-232">从 <see langword="Collection" /> 对象移除元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-232">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-233">当 `Remove` 从集合中删除某个元素时，它会将集合的 <xref:Microsoft.VisualBasic.Collection.Count%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-233">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="4e2b0-234">它还减少 `Index` 了集合中以前跟已删除元素的每个元素的值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-234">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="4e2b0-235">如果在没有的情况下将某个元素添加到集合 `Key` 中，则必须使用它 `Index` 将其删除。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-235">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-236">此示例演示 `Remove` 如何使用方法从 <xref:Microsoft.VisualBasic.Collection> 变量中的对象中删除对象 `birthdays` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-236">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="4e2b0-237">对方法进行四次调用后 `Add` ， `Count` 属性包含4，元素的 `"Bill"` 索引值为1，元素 `"Pete"` 的索引值为4。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-237">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="4e2b0-238">第一次调用 `Remove` 后， `Count` 的值为3，元素 `"Bill"` 将被删除，并且元素 `"Pete"` 的索引值为3。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-238">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="4e2b0-239">在第二次调用后 `Remove` ，的 `Count` 值为2，元素 `"Mike"` 将被删除，并且元素 `"Pete"` 的索引值为2。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-239">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="collection.Remove Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="4e2b0-240">指定键字符串的唯一 <see langword="String" /> 表达式，可以使用此键字符串代替位置索引访问集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-240">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="4e2b0-241"><paramref name="Key" /> 必须对应于将元素添加到集合中时指定的 <paramref name="Key" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-241"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="4e2b0-242">从 <see langword="Collection" /> 对象移除元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-242">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-243">当 `Remove` 从集合中删除某个元素时，它会将集合的 <xref:Microsoft.VisualBasic.Collection.Count%2A> 属性减一。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-243">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="4e2b0-244">它还减少 `Index` 了集合中以前跟已删除元素的每个元素的值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-244">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="4e2b0-245">如果在没有的情况下将某个元素添加到集合 `Key` 中，则必须使用它 `Index` 将其删除。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-245">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e2b0-246">此示例演示 `Remove` 如何使用方法从 <xref:Microsoft.VisualBasic.Collection> 变量中的对象中删除对象 `birthdays` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-246">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="4e2b0-247">对方法进行四次调用后 `Add` ， `Count` 属性包含4，元素的 `"Bill"` 索引值为1，元素 `"Pete"` 的索引值为4。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-247">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="4e2b0-248">第一次调用 `Remove` 后， `Count` 的值为3，元素 `"Bill"` 将被删除，并且元素 `"Pete"` 的索引值为3。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-248">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="4e2b0-249">在第二次调用后 `Remove` ，的 `Count` 值为2，元素 `"Mike"` 将被删除，并且元素 `"Pete"` 的索引值为2。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-249">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo" ExplicitInterfaceMemberName="ICollectionCopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub ICollectionCopyTo (array As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member ICollectionCopyTo : Array * int -&gt; unit&#xA;override this.ICollectionCopyTo : Array * int -&gt; unit" Usage="collection.ICollectionCopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="4e2b0-250">一维 <see cref="T:System.Array" />，它是从 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-250">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="4e2b0-251"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-251">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="4e2b0-252"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-252">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="4e2b0-253">从特定的 <see cref="T:Microsoft.VisualBasic.Collection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-253">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-254"><xref:System.Array>按枚举器循环访问对象的相同顺序将元素复制到中 <xref:Microsoft.VisualBasic.Collection> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-254">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="4e2b0-255">此方法是从中获取的 O (`n`) 操作 `n` <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-255">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4e2b0-256"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-256"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4e2b0-257"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-257"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e2b0-258"><paramref name="array" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-258"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="4e2b0-259">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4e2b0-259">-or-</span></span> 
<span data-ttu-id="4e2b0-260">源 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-260">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4e2b0-261">无法自动将源 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象的类型强制转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-261">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count" ExplicitInterfaceMemberName="ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.Count : int" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4e2b0-262">获取此集合中的项数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-262">Gets the number of items in this collection.</span></span></summary>
        <value><span data-ttu-id="4e2b0-263">此集合中项的数目。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-263">The number of items in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized" ExplicitInterfaceMemberName="ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4e2b0-264">获取一个值，该值指示对 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象的访问是否已同步（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-264">Gets a value that indicates whether access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="4e2b0-265"><see langword="true" /> 如果对对象的访问 <see cref="T:Microsoft.VisualBasic.Collection" /> 是同步的，则为; 否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-265"><see langword="true" /> if access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot" ExplicitInterfaceMemberName="ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4e2b0-266">获取一个对象，该对象可用于同步对 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象的访问。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-266">Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <value><span data-ttu-id="4e2b0-267">一个对象，该对象可用于同步对 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象的访问。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-267">An object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator" ExplicitInterfaceMemberName="ICollectionGetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member ICollectionGetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.ICollectionGetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.ICollectionGetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e2b0-268">获取能够循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-268">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="4e2b0-269">一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-269">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="4e2b0-270">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-270">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="4e2b0-271">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-271">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4e2b0-272">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-272">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4e2b0-273">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-273">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4e2b0-274"><xref:System.Collections.IEnumerator.Reset%2A>方法还将枚举器恢复到此位置。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-274">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="4e2b0-275">在此位置， <xref:System.Collections.IEnumerator.Current%2A> 属性未定义。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-275">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="4e2b0-276">因此，在读取的值之前，必须调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 方法，以将枚举器前进到集合的第一个元素 <xref:System.Collections.IEnumerator.Current%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-276">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="4e2b0-277">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-277"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="4e2b0-278"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-278"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4e2b0-279">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-279">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4e2b0-280">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-280">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4e2b0-281">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.IEnumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-281">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="4e2b0-282">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-282">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="4e2b0-283">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-283">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4e2b0-284">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-284">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="4e2b0-285">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-285">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4e2b0-286">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-286">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="4e2b0-287">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-287">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add" ExplicitInterfaceMemberName="IListAdd">
      <MemberSignature Language="C#" Value="int IList.Add (object Item);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object Item) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (Item As Object) As Integer Implements IList.Add" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ Item) = System::Collections::IList::Add;" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member IListAdd : obj -&gt; int&#xA;override this.IListAdd : obj -&gt; int" Usage="collection.IListAdd Item" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="int IList.Add (object value);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member IListAdd : obj -&gt; int&#xA;override this.IListAdd : obj -&gt; int" Usage="collection.IListAdd value" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Item" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4e2b0-288">要添加到集合的项。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-288">The item to add to the collection.</span></span></param>
        <param name="Item"><span data-ttu-id="4e2b0-289">要添加到集合的项。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-289">The item to add to the collection.</span></span></param>
        <summary><span data-ttu-id="4e2b0-290">向集合中添加一项。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-290">Adds an item to the collection.</span></span></summary>
        <returns><span data-ttu-id="4e2b0-291">新元素插入到的位置；或者为 -1，指示该项未插入到集合中。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-291">The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear" ExplicitInterfaceMemberName="IListClear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberSignature Language="F#" Value="abstract member IListClear : unit -&gt; unit&#xA;override this.IListClear : unit -&gt; unit" Usage="collection.IListClear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e2b0-292">从 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中移除所有项。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-292">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-293">此方法从对象中移除所有项 <xref:Microsoft.VisualBasic.Collection> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-293">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4e2b0-294"><see cref="T:System.Collections.IList" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-294">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains" ExplicitInterfaceMemberName="IListContains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberSignature Language="F#" Value="abstract member IListContains : obj -&gt; bool&#xA;override this.IListContains : obj -&gt; bool" Usage="collection.IListContains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4e2b0-295">要在 <see cref="T:System.Object" /> 对象中查找的 <see cref="T:Microsoft.VisualBasic.Collection" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-295">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4e2b0-296">确定 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象是否包含特定值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-296">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="4e2b0-297">如果在 <see cref="T:System.Object" /> 对象中找到 <see cref="T:Microsoft.VisualBasic.Collection" />，则返回 <see langword="True" />，否则返回 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-297">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-298">此方法确定对象是否 <xref:Microsoft.VisualBasic.Collection> 包含特定值。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-298">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf" ExplicitInterfaceMemberName="IListIndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberSignature Language="F#" Value="abstract member IListIndexOf : obj -&gt; int&#xA;override this.IListIndexOf : obj -&gt; int" Usage="collection.IListIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4e2b0-299">要在 <see cref="T:System.Object" /> 对象中查找的 <see cref="T:Microsoft.VisualBasic.Collection" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-299">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4e2b0-300">确定 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中特定项的索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-300">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <returns><span data-ttu-id="4e2b0-301">如果在集合中找到该对象，则为 <paramref name="value" />；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-301">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-302">此方法确定对象中特定项的索引 <xref:Microsoft.VisualBasic.Collection> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-302">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert" ExplicitInterfaceMemberName="IListInsert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberSignature Language="F#" Value="abstract member IListInsert : int * obj -&gt; unit&#xA;override this.IListInsert : int * obj -&gt; unit" Usage="collection.IListInsert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="4e2b0-303">应插入 <paramref name="value" /> 的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-303">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="4e2b0-304">要插入到 <see cref="T:System.Object" /> 对象中的 <see cref="T:Microsoft.VisualBasic.Collection" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-304">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4e2b0-305">将项插入 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中的指定索引处。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-305">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-306">如果 `index` 等于对象中的项数，则 <xref:Microsoft.VisualBasic.Collection> `value` 将追加到末尾。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-306">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="4e2b0-307">在由连续的元素组成的集合（如列表）中，插入点下面的元素将下移以容纳新的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-307">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="4e2b0-308">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-308">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="4e2b0-309">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-309">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4e2b0-310"><paramref name="index" /> 不是 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-310"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4e2b0-311"><see cref="T:Microsoft.VisualBasic.Collection" /> 对象是只读的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-311">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="4e2b0-312">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4e2b0-312">-or-</span></span> 
<span data-ttu-id="4e2b0-313"><see cref="T:Microsoft.VisualBasic.Collection" /> 对象具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-313">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="4e2b0-314"><paramref name="value" /> 在 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中为空引用。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-314"><paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize" ExplicitInterfaceMemberName="IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.IsFixedSize : bool" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4e2b0-315">获取一个值，该值指示 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-315">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="4e2b0-316">如果 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-316"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly" ExplicitInterfaceMemberName="IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.IsReadOnly : bool" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4e2b0-317">获取一个值，它指示 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象是否只读。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-317">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object is.</span></span></summary>
        <value><span data-ttu-id="4e2b0-318">如果 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-318"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item" ExplicitInterfaceMemberName="IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.Item" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.Item(int) : obj with get, set" Usage="System.Collections.IList.Item" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.Item" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Index" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="4e2b0-319">要获取或设置的元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-319">The zero-based index fo the element to get or set.</span></span></param>
        <param name="Index"><span data-ttu-id="4e2b0-320">要获取或设置的元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-320">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="4e2b0-321">获取或设置指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-321">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="4e2b0-322">指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-322">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4e2b0-323"><paramref name="index" /> 不是 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-323"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4e2b0-324">设置该属性，而且 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象为只读。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-324">The property is set and the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove" ExplicitInterfaceMemberName="IListRemove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberSignature Language="F#" Value="abstract member IListRemove : obj -&gt; unit&#xA;override this.IListRemove : obj -&gt; unit" Usage="collection.IListRemove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4e2b0-325">要从 <see cref="T:System.Object" /> 对象中移除的 <see cref="T:Microsoft.VisualBasic.Collection" />。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-325">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4e2b0-326">从 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中移除特定对象的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-326">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-327">在由连续的元素组成的集合（如列表）中，已移除元素下面的元素将上移以占据空出的位置。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-327">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="4e2b0-328">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-328">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="4e2b0-329">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-329">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="4e2b0-330">如果 `value` 在对象中找不到 <xref:Microsoft.VisualBasic.Collection> ，则 <xref:Microsoft.VisualBasic.Collection> 对象将保持不变，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-330">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4e2b0-331"><see cref="T:Microsoft.VisualBasic.Collection" /> 对象是只读的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-331">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="4e2b0-332">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4e2b0-332">-or-</span></span> 
<span data-ttu-id="4e2b0-333"><see cref="T:Microsoft.VisualBasic.Collection" /> 对象具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-333">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt" ExplicitInterfaceMemberName="IListRemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberSignature Language="F#" Value="abstract member IListRemoveAt : int -&gt; unit&#xA;override this.IListRemoveAt : int -&gt; unit" Usage="collection.IListRemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="4e2b0-334">要移除的项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-334">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="4e2b0-335">移除指定索引处的 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象项。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-335">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-336">在由连续的元素组成的集合（如列表）中，已移除元素下面的元素将上移以占据空出的位置。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-336">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="4e2b0-337">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-337">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="4e2b0-338">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-338">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4e2b0-339"><paramref name="index" /> 不是 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-339"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4e2b0-340"><see cref="T:Microsoft.VisualBasic.Collection" /> 对象是只读的。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-340">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="4e2b0-341">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4e2b0-341">-or-</span></span> 
<span data-ttu-id="4e2b0-342"><see cref="T:Microsoft.VisualBasic.Collection" /> 对象具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-342">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" ExplicitInterfaceMemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberSignature Language="F#" Value="abstract member OnDeserialization : obj -&gt; unit&#xA;override this.OnDeserialization : obj -&gt; unit" Usage="collection.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="4e2b0-343">启动回调的对象。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-343">The object that initiated the callback.</span></span></param>
        <summary><span data-ttu-id="4e2b0-344">在整个 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象图反序列化后运行。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-344">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-345">在 <xref:Microsoft.VisualBasic.Collection> 反序列化整个对象图后，将调用此方法。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-345">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData" ExplicitInterfaceMemberName="GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="collection.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="4e2b0-346"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化 <see cref="T:Microsoft.VisualBasic.Collection" /> 所需的信息。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-346">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="4e2b0-347">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含与 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象关联的已序列化流的源和目标。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-347">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4e2b0-348">返回对 <see cref="T:Microsoft.VisualBasic.Collection" /> 对象进行序列化所需的数据。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-348">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2b0-349">此方法返回序列化对象所需的数据 <xref:Microsoft.VisualBasic.Collection> 。</span><span class="sxs-lookup"><span data-stu-id="4e2b0-349">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
