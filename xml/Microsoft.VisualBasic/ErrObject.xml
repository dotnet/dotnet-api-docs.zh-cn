<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26868ddabc8136413bd18f5ba67dd4c3170670a7" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100284501" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ErrObject extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a84f5-101"><see langword="ErrObject" /> 模块包含用于使用 <see langword="Err" /> 对象标识和处理运行时错误的属性和过程。</span><span class="sxs-lookup"><span data-stu-id="a84f5-101">The <see langword="ErrObject" /> module contains properties and procedures used to identify and handle run-time errors using the <see langword="Err" /> object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-102">`ErrObject`模块支持 `Err` 对象。</span><span class="sxs-lookup"><span data-stu-id="a84f5-102">The `ErrObject` module supports the `Err` object.</span></span> <span data-ttu-id="a84f5-103">有关详细信息，请参阅 <xref:Microsoft.VisualBasic.Information.Err%2A>。</span><span class="sxs-lookup"><span data-stu-id="a84f5-103">For more information, see <xref:Microsoft.VisualBasic.Information.Err%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-104">此示例使用 `Err` 构造错误消息对话框中的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-104">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="a84f5-105">请注意，当您首先使用方法时，会发生什么情况 `Clear` ：在使用方法生成 Visual Basic 错误时 `Raise` ，Visual Basic 的默认值将成为该 `Err` 对象的属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-105">Notice what happens when you use the `Clear` method first: When you then generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement"><span data-ttu-id="a84f5-106">On Error 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="a84f5-106">On Error Statement (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement"><span data-ttu-id="a84f5-107">Try...Catch...Finally 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="a84f5-107">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/"><span data-ttu-id="a84f5-108">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="a84f5-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members"><span data-ttu-id="a84f5-109">Visual Basic Run-Time 库成员</span><span class="sxs-lookup"><span data-stu-id="a84f5-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a84f5-110">清除 <see langword="Err" /> 对象的所有属性设置。</span><span class="sxs-lookup"><span data-stu-id="a84f5-110">Clears all property settings of the <see langword="Err" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-111">在 `Clear` `Err` 处理错误后，使用显式清除对象，例如在使用延迟的错误处理时 `On Error Resume Next` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-111">Use `Clear` to explicitly clear the `Err` object after an error has been handled, such as when you use deferred error handling with `On Error Resume Next`.</span></span> <span data-ttu-id="a84f5-112">`Clear`当以下任一语句执行时，将自动调用方法：</span><span class="sxs-lookup"><span data-stu-id="a84f5-112">The `Clear` method is called automatically whenever any of the following statements executes:</span></span>  
  
-   <span data-ttu-id="a84f5-113">任何类型的 `Resume` 语句</span><span class="sxs-lookup"><span data-stu-id="a84f5-113">Any type of `Resume` statement</span></span>  
  
-   <span data-ttu-id="a84f5-114">`Exit Sub`、`Exit Function` 或 `Exit Property`</span><span class="sxs-lookup"><span data-stu-id="a84f5-114">`Exit Sub`, `Exit Function`, or `Exit Property`</span></span>  
  
-   <span data-ttu-id="a84f5-115">Any `On Error` 语句</span><span class="sxs-lookup"><span data-stu-id="a84f5-115">Any `On Error` statement</span></span>  
  
-   <span data-ttu-id="a84f5-116">Any `Try...Catch...Finally` 语句</span><span class="sxs-lookup"><span data-stu-id="a84f5-116">Any `Try...Catch...Finally` statement</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a84f5-117">在 `On Error Resume Next` `On Error GoTo` 处理访问其他对象的过程中生成的错误时，构造可能更好。</span><span class="sxs-lookup"><span data-stu-id="a84f5-117">The `On Error Resume Next` construct may be preferable to `On Error GoTo` when handling errors generated during access to other objects.</span></span> <span data-ttu-id="a84f5-118">`Err`在每次与对象交互后进行检查将消除代码访问了哪个对象的歧义：你可以确定哪个对象放置了错误代码 `Err.Number` ，以及哪个对象最初生成了错误 () 中指定的对象 `Err.Source` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-118">Checking `Err` after each interaction with an object removes ambiguity about which object was accessed by the code: You can be sure which object placed the error code in `Err.Number`, as well as which object originally generated the error (the object specified in `Err.Source`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-119">此示例使用 `Err` 对象的 `Clear` 方法将对象的数值属性重置 `Err` 为零，并将其字符串属性重置为长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="a84f5-119">This example uses the `Err` object's `Clear` method to reset the numeric properties of the `Err` object to zero and its string properties to zero-length strings.</span></span> <span data-ttu-id="a84f5-120">如果不调用 `Clear` ，则的第二次调用 `MsgBox` 会显示相同的错误消息。</span><span class="sxs-lookup"><span data-stu-id="a84f5-120">Without the call to `Clear`, the second call to `MsgBox` would display the same error message.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement"><span data-ttu-id="a84f5-121">On Error 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="a84f5-121">On Error Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a84f5-122">返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。</span><span class="sxs-lookup"><span data-stu-id="a84f5-122">Returns or sets a <see langword="String" /> expression containing a descriptive string associated with an error.</span></span> <span data-ttu-id="a84f5-123">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-123">Read/write.</span></span></summary>
        <value><span data-ttu-id="a84f5-124">返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。</span><span class="sxs-lookup"><span data-stu-id="a84f5-124">Returns or sets a <see langword="String" /> expression containing a descriptive string associated with an error.</span></span> <span data-ttu-id="a84f5-125">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-125">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-126">`Description`属性设置包含错误的简短说明。</span><span class="sxs-lookup"><span data-stu-id="a84f5-126">The `Description` property setting consists of a short description of the error.</span></span> <span data-ttu-id="a84f5-127">使用此属性来向用户发出警报，指出您无法或不希望处理的错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-127">Use this property to alert the user to an error that you cannot or do not want to handle.</span></span> <span data-ttu-id="a84f5-128">当生成用户定义的错误时，将错误的简短说明分配给 `Description` 属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-128">When generating a user-defined error, assign a short description of your error to the `Description` property.</span></span> <span data-ttu-id="a84f5-129">如果 `Description` 未填充属性，并且属性的值 <xref:Microsoft.VisualBasic.ErrObject.Number%2A> 与 Visual Basic 运行时错误对应，则 <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> 生成错误时，将在属性中设置该函数返回的字符串 `Description` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-129">If the `Description` property is not filled in, and the value of the <xref:Microsoft.VisualBasic.ErrObject.Number%2A> property corresponds to a Visual Basic run-time error, then the string returned by the <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> function is set in the `Description` property when the error is generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-130">此示例将用户定义的消息分配给 `Description` 对象的属性 `Err` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-130">This example assigns a user-defined message to the `Description` property of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a84f5-131">获取指示上一条执行语句的行号的整数。</span><span class="sxs-lookup"><span data-stu-id="a84f5-131">Gets an integer indicating the line number of the last executed statement.</span></span></summary>
        <value><span data-ttu-id="a84f5-132">最后执行的语句的行号。</span><span class="sxs-lookup"><span data-stu-id="a84f5-132">The line number of the last executed statement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-133">如果 Visual Basic 没有遇到任何行号，则返回0。</span><span class="sxs-lookup"><span data-stu-id="a84f5-133">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-134">此示例使用 `Erl` 属性指示行号。</span><span class="sxs-lookup"><span data-stu-id="a84f5-134">This example uses the `Erl` property to indicate the line number.</span></span>  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception? GetException ();" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetException() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberSignature Language="C#" Value="public Exception GetException ();" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a84f5-135">返回表示所发生错误的异常。</span><span class="sxs-lookup"><span data-stu-id="a84f5-135">Returns the exception representing the error that occurred.</span></span></summary>
        <returns><span data-ttu-id="a84f5-136">表示所发生错误的异常。</span><span class="sxs-lookup"><span data-stu-id="a84f5-136">The exception representing the error that occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-137">`GetException`函数只能从对象类中使用 `Err` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-137">The `GetException` function is available only from the `Err` object class.</span></span> <span data-ttu-id="a84f5-138">它使用对象的 `Exception` 属性 `Err` 来显示已发生的错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-138">It works with the `Exception` property of the `Err` object to display the error that has occurred.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-139">下面的代码显示分配给对象中的异常的消息 `Err` ：</span><span class="sxs-lookup"><span data-stu-id="a84f5-139">The following code displays the message assigned to the exception in the `Err` object:</span></span>  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a84f5-140">返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。</span><span class="sxs-lookup"><span data-stu-id="a84f5-140">Returns or sets an <see langword="Integer" /> containing the context ID for a topic in a Help file.</span></span> <span data-ttu-id="a84f5-141">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-141">Read/write.</span></span></summary>
        <value><span data-ttu-id="a84f5-142">返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。</span><span class="sxs-lookup"><span data-stu-id="a84f5-142">Returns or sets an <see langword="Integer" /> containing the context ID for a topic in a Help file.</span></span> <span data-ttu-id="a84f5-143">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-143">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-144">`HelpContext`属性用于显示应用程序的上下文相关帮助。</span><span class="sxs-lookup"><span data-stu-id="a84f5-144">The `HelpContext` property is used to display context-sensitive Help for an application.</span></span> <span data-ttu-id="a84f5-145">如果在中指定了帮助文件 `HelpFile` ，则 `HelpContext` 使用属性来自动显示标识的帮助文件。</span><span class="sxs-lookup"><span data-stu-id="a84f5-145">If a Help file is specified in `HelpFile`, the `HelpContext` property is used to automatically display the Help file identified.</span></span> <span data-ttu-id="a84f5-146">如果 `HelpFile` 和 `HelpContext` 属性都为空，则检查属性的值 <xref:Microsoft.VisualBasic.ErrObject.Number%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-146">If both the `HelpFile` and `HelpContext` properties are empty, the value of the <xref:Microsoft.VisualBasic.ErrObject.Number%2A> property  is checked.</span></span> <span data-ttu-id="a84f5-147">如果属性的值 `Number` 与 Visual Basic 运行时错误值相对应，则使用错误的 Visual Basic 帮助上下文 ID。</span><span class="sxs-lookup"><span data-stu-id="a84f5-147">If the value of the `Number` property corresponds to a Visual Basic run-time error value, then the Visual Basic Help context ID for the error is used.</span></span> <span data-ttu-id="a84f5-148">如果属性的值 `Number` 不对应于 Visual Basic 错误，则会显示 Visual Basic 帮助文件的内容屏幕。</span><span class="sxs-lookup"><span data-stu-id="a84f5-148">If the value of the `Number` property does not correspond to a Visual Basic error, the contents screen for the Visual Basic Help file is displayed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a84f5-149">应在应用程序中编写例程来处理典型错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-149">You should write routines in your application to handle typical errors.</span></span> <span data-ttu-id="a84f5-150">使用对象进行编程时，可以使用对象的帮助文件来提高错误处理的质量，或者在错误不可恢复时向用户显示一条有意义的消息。</span><span class="sxs-lookup"><span data-stu-id="a84f5-150">When programming with an object, you can use the object's Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-151">此示例使用 `HelpContext` 对象的属性 `Err` 来显示错误的 Visual Basic 帮助主题 `Overflow` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-151">This example uses the `HelpContext` property of the `Err` object to show the Visual Basic Help topic for the `Overflow` error.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a84f5-152">返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="a84f5-152">Returns or sets a <see langword="String" /> expression containing the fully qualified path to a Help file.</span></span> <span data-ttu-id="a84f5-153">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-153">Read/write.</span></span></summary>
        <value><span data-ttu-id="a84f5-154">返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="a84f5-154">Returns or sets a <see langword="String" /> expression containing the fully qualified path to a Help file.</span></span> <span data-ttu-id="a84f5-155">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-155">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-156">如果帮助文件是由属性指定的 `HelpFile` ，则当用户按 "帮助" 键 (或在 "错误消息" 对话框中按 F1 键) 时，将自动调用该帮助文件。</span><span class="sxs-lookup"><span data-stu-id="a84f5-156">If a Help file is specified by the `HelpFile` property, it is automatically called when the user presses the Help key (or the F1 key) in the error message dialog box.</span></span> <span data-ttu-id="a84f5-157">如果 `HelpContext` 属性包含指定文件的有效上下文 ID，则会自动显示该主题。</span><span class="sxs-lookup"><span data-stu-id="a84f5-157">If the `HelpContext` property contains a valid context ID for the specified file, that topic is automatically displayed.</span></span> <span data-ttu-id="a84f5-158">如果未 `HelpFile` 指定，则显示 Visual Basic 帮助文件。</span><span class="sxs-lookup"><span data-stu-id="a84f5-158">If no `HelpFile` is specified, the Visual Basic Help file is displayed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a84f5-159">应在应用程序中编写例程来处理典型错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-159">You should write routines in your application to handle typical errors.</span></span> <span data-ttu-id="a84f5-160">使用对象进行编程时，可以使用对象的帮助文件来提高错误处理的质量，或者在错误不可恢复时向用户显示一条有意义的消息。</span><span class="sxs-lookup"><span data-stu-id="a84f5-160">When programming with an object, you can use the object's Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-161">此示例使用 `HelpFile` 对象的属性 `Err` 来启动帮助系统。</span><span class="sxs-lookup"><span data-stu-id="a84f5-161">This example uses the `HelpFile` property of the `Err` object to start the Help system.</span></span> <span data-ttu-id="a84f5-162">默认情况下， `HelpFile` 属性包含 Visual Basic 帮助文件的名称。</span><span class="sxs-lookup"><span data-stu-id="a84f5-162">By default, the `HelpFile` property contains the name of the Visual Basic Help file.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a84f5-163">获取调用动态链接库 (DLL) 所产生的系统错误代码。</span><span class="sxs-lookup"><span data-stu-id="a84f5-163">Gets a system error code produced by a call to a dynamic-link library (DLL).</span></span></summary>
        <value><span data-ttu-id="a84f5-164"> (DLL) 的动态链接库调用生成的系统错误代码。</span><span class="sxs-lookup"><span data-stu-id="a84f5-164">A system error code produced by a call to a dynamic-link library (DLL).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-165">此 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性仅适用于从 Visual Basic 代码发出的 DLL 调用。</span><span class="sxs-lookup"><span data-stu-id="a84f5-165">The <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property applies only to DLL calls made from Visual Basic code.</span></span> <span data-ttu-id="a84f5-166">进行这样的调用时，被调用的函数通常返回指示成功或失败的代码，并 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 填充属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-166">When such a call is made, the called function usually returns a code indicating success or failure, and the <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property is filled.</span></span> <span data-ttu-id="a84f5-167">查看 DLL 函数的文档，以确定表示成功或失败的返回值。</span><span class="sxs-lookup"><span data-stu-id="a84f5-167">Check the documentation for the DLL's functions to determine the return values that indicate success or failure.</span></span> <span data-ttu-id="a84f5-168">每当返回失败代码时，Visual Basic 应用程序都应立即检查 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-168">Whenever the failure code is returned, the Visual Basic application should immediately check the <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property.</span></span> <span data-ttu-id="a84f5-169">如果设置了属性，则不会引发异常 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-169">No exception is raised when the <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a84f5-170">此 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性受保护 <xref:System.Security.Permissions.SecurityAction.LinkDemand> ，这有助于防止它从不受信任的代码进行访问。</span><span class="sxs-lookup"><span data-stu-id="a84f5-170">The <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property is protected by <xref:System.Security.Permissions.SecurityAction.LinkDemand>, which helps prevent it from being accessed from untrusted code.</span></span> <span data-ttu-id="a84f5-171">但是， <xref:System.Security.Permissions.SecurityAction.LinkDemand> 只要求直接调用方具有 <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> 权限。</span><span class="sxs-lookup"><span data-stu-id="a84f5-171">However, <xref:System.Security.Permissions.SecurityAction.LinkDemand> requires only the immediate caller to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> permission.</span></span> <span data-ttu-id="a84f5-172">如果你的代码可从部分受信任的代码调用， <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 则无需验证即可公开的值会带来安全风险。</span><span class="sxs-lookup"><span data-stu-id="a84f5-172">If your code can be called from partially trusted code, exposing the value of <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> without validation is a security risk.</span></span>  
>   
>  <span data-ttu-id="a84f5-173">有关如何使用成员的重要限制 <xref:System.Security.Permissions.SecurityAction.LinkDemand> ，请参阅 [Demand 与 LinkDemand](/previous-versions/dotnet/netframework-4.0/3ky50t49(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="a84f5-173">For important limitations about how to use the <xref:System.Security.Permissions.SecurityAction.LinkDemand> member, see [Demand vs. LinkDemand](/previous-versions/dotnet/netframework-4.0/3ky50t49(v=vs.100)).</span></span> <span data-ttu-id="a84f5-174">有关权限的详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和 [代码访问权限](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/h846e9b3(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="a84f5-174">For more information about permissions, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/h846e9b3(v=vs.100)).</span></span>  
  
 <span data-ttu-id="a84f5-175">注意对于智能设备，此属性始终返回零。</span><span class="sxs-lookup"><span data-stu-id="a84f5-175">Note   For smart devices this property always returns zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-176">下面的示例演示如何在 `LastDllError` WINDOWS API 中调用函数后使用属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-176">The following example shows how you can use the `LastDllError` property after calling a function in the Windows API.</span></span> <span data-ttu-id="a84f5-177">此 `PrintWindowCoordinates` 过程使用窗口的句柄并调用 `GetWindowRect` 函数。</span><span class="sxs-lookup"><span data-stu-id="a84f5-177">The `PrintWindowCoordinates` procedure takes a handle to a window and calls the `GetWindowRect` function.</span></span> <span data-ttu-id="a84f5-178">`GetWindowRect` 用构成窗口的矩形的边的长度填充 RECT 数据结构。</span><span class="sxs-lookup"><span data-stu-id="a84f5-178">`GetWindowRect` fills the RECT data structure with the lengths of the sides of the rectangle that make up the window.</span></span> <span data-ttu-id="a84f5-179">如果传递的句柄无效，则会出现错误，并且可以通过属性使用错误号 `LastDllError` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-179">If you pass an invalid handle, an error occurs, and the error number is available through the `LastDllError` property.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a84f5-180">返回或设置指定错误的数值。</span><span class="sxs-lookup"><span data-stu-id="a84f5-180">Returns or sets a numeric value specifying an error.</span></span> <span data-ttu-id="a84f5-181">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-181">Read/write.</span></span></summary>
        <value><span data-ttu-id="a84f5-182">返回或设置指定错误的数值。</span><span class="sxs-lookup"><span data-stu-id="a84f5-182">Returns or sets a numeric value specifying an error.</span></span> <span data-ttu-id="a84f5-183">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-183">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-184">`Raise`除之外的所有参数 `Number` 都是可选的。</span><span class="sxs-lookup"><span data-stu-id="a84f5-184">All of the `Raise` arguments except `Number` are optional.</span></span> <span data-ttu-id="a84f5-185">如果省略可选参数，并且对象的属性设置包含尚未 `Err` 清除的值，则这些值将用作错误的值。</span><span class="sxs-lookup"><span data-stu-id="a84f5-185">If you omit optional arguments, and the property settings of the `Err` object contain values that have not been cleared, those values serve as the values for your error.</span></span>  
  
 <span data-ttu-id="a84f5-186">由于 `Err` 对象比你在语句中生成错误时提供了更丰富的信息 `Error` ，因此 `Raise` 对编写类模块时生成错误很有用。</span><span class="sxs-lookup"><span data-stu-id="a84f5-186">Because the `Err` object gives richer information than when you generate errors with the `Error` statement, `Raise` is useful for generating errors when writing class modules.</span></span> <span data-ttu-id="a84f5-187">例如，通过 `Raise` 方法，生成错误的源可以在属性中指定 `Source` ，可以引用错误的联机帮助，等等。</span><span class="sxs-lookup"><span data-stu-id="a84f5-187">For example, with the `Raise` method, the source that generated the error can be specified in the `Source` property, online Help for the error can be referenced, and so on.</span></span>  
  
 <span data-ttu-id="a84f5-188">当从对象返回用户定义的错误时， `Err.Number` 通过将您选择的数字作为错误代码添加到常量中来进行设置 `VbObjectError` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-188">When returning a user-defined error from an object, set `Err.Number` by adding the number you selected as an error code to the `VbObjectError` constant.</span></span> <span data-ttu-id="a84f5-189">例如，使用以下代码将数字1051返回为错误代码：</span><span class="sxs-lookup"><span data-stu-id="a84f5-189">For example, you use the following code to return the number 1051 as an error code:</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-190">此示例演示了 `Number` 错误处理例程中的属性的典型用法。</span><span class="sxs-lookup"><span data-stu-id="a84f5-190">This example illustrates a typical use of the `Number` property in an error-handling routine.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 <span data-ttu-id="a84f5-191">此示例使用 `Err` 对象的 `Raise` 方法在 Visual Basic 编写的函数中生成原始错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-191">This example uses the `Err` object's `Raise` method to generate an original error within a function written in Visual Basic.</span></span> <span data-ttu-id="a84f5-192">调用函数可以捕获并向用户报告错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-192">The calling function can catch the error and report it to the user.</span></span> <span data-ttu-id="a84f5-193">请注意，该过程 `CallingProcedure` 会将你可以从对象派生的信息类型 `Err` 与可从对象派生的信息进行比较 `Exception` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-193">Notice that procedure `CallingProcedure` contrasts the type of information that you can derive from an `Err` object with the information that you can derive from an `Exception` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a84f5-194"><paramref name="Number" /> 大于 65535。</span><span class="sxs-lookup"><span data-stu-id="a84f5-194"><paramref name="Number" /> is greater than 65535.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object? Source = default, object? Description = default, object? HelpFile = default, object? HelpContext = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = Nothing, Optional Description As Object = Nothing, Optional HelpFile As Object = Nothing, Optional HelpContext As Object = Nothing)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = default, object Description = default, object HelpFile = default, object HelpContext = default);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="a84f5-195">必需。</span><span class="sxs-lookup"><span data-stu-id="a84f5-195">Required.</span></span> <span data-ttu-id="a84f5-196">标识错误本质的 <see langword="Long" /> 整数。</span><span class="sxs-lookup"><span data-stu-id="a84f5-196"><see langword="Long" /> integer that identifies the nature of the error.</span></span> <span data-ttu-id="a84f5-197">Visual Basic 错误处于 0 到 65535 的范围内：范围 0 到 512 保留用于系统错误，范围 513 到 65535 则用于用户定义的错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-197">Visual Basic errors are in the range 0-65535; the range 0-512 is reserved for system errors; the range 513-65535 is available for user-defined errors.</span></span> <span data-ttu-id="a84f5-198">当在类模块中将 <see langword="Number" /> 属性设置为您自己的错误代码时，将错误代码号添加到 <see langword="vbObjectError" /> 常数。</span><span class="sxs-lookup"><span data-stu-id="a84f5-198">When setting the <see langword="Number" /> property to your own error code in a class module, you add your error code number to the <see langword="vbObjectError" /> constant.</span></span> <span data-ttu-id="a84f5-199">例如，将 <c>vbObjectError + 513</c> 分配给 <see langword="Number" /> 属性，生成错误号 513。</span><span class="sxs-lookup"><span data-stu-id="a84f5-199">For example, to generate the error number 513, assign <c>vbObjectError + 513</c> to the <see langword="Number" /> property.</span></span></param>
        <param name="Source"><span data-ttu-id="a84f5-200">可选。</span><span class="sxs-lookup"><span data-stu-id="a84f5-200">Optional.</span></span> <span data-ttu-id="a84f5-201"><see langword="String" /> 表达式，用于命名生成错误的对象或应用程序。</span><span class="sxs-lookup"><span data-stu-id="a84f5-201"><see langword="String" /> expression naming the object or application that generated the error.</span></span> <span data-ttu-id="a84f5-202">设置对象的这一属性时，应使用如下形式：<c>project</c>.<c>class</c>。</span><span class="sxs-lookup"><span data-stu-id="a84f5-202">When setting this property for an object, use the form <c>project</c>.<c>class</c>.</span></span> <span data-ttu-id="a84f5-203">如果未指定 <paramref name="Source" />，则使用当前 Visual Basic 项目的进程 ID。</span><span class="sxs-lookup"><span data-stu-id="a84f5-203">If <paramref name="Source" /> is not specified, the process ID of the current Visual Basic project is used.</span></span></param>
        <param name="Description"><span data-ttu-id="a84f5-204">可选。</span><span class="sxs-lookup"><span data-stu-id="a84f5-204">Optional.</span></span> <span data-ttu-id="a84f5-205">描述错误的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="a84f5-205"><see langword="String" /> expression describing the error.</span></span> <span data-ttu-id="a84f5-206">如果未指定，则检查 <see langword="Number" /> 属性值。</span><span class="sxs-lookup"><span data-stu-id="a84f5-206">If unspecified, the value in the <see langword="Number" /> property is examined.</span></span> <span data-ttu-id="a84f5-207">如果它可以映射到 Visual Basic 运行时错误代码，则将 <see langword="Error" /> 函数要返回的字符串用作 <see langword="Description" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-207">If it can be mapped to a Visual Basic run-time error code, the string that would be returned by the <see langword="Error" /> function is used as the <see langword="Description" /> property.</span></span> <span data-ttu-id="a84f5-208">如果没有对应于 <see langword="Number" /> 属性的 Visual Basic 错误，则使用"应用程序定义的错误或对象定义的错误"消息。</span><span class="sxs-lookup"><span data-stu-id="a84f5-208">If there is no Visual Basic error corresponding to the <see langword="Number" /> property, the "Application-defined or object-defined error" message is used.</span></span></param>
        <param name="HelpFile"><span data-ttu-id="a84f5-209">可选。</span><span class="sxs-lookup"><span data-stu-id="a84f5-209">Optional.</span></span> <span data-ttu-id="a84f5-210">帮助文件的完全限定路径，在该文件中可找到有关此错误的帮助信息。</span><span class="sxs-lookup"><span data-stu-id="a84f5-210">The fully qualified path to the Help file in which help on this error can be found.</span></span> <span data-ttu-id="a84f5-211">如果未指定该参数，则 Visual Basic 使用 Visual Basic 帮助文件的完全限定的驱动器、路径和文件名。</span><span class="sxs-lookup"><span data-stu-id="a84f5-211">If unspecified, Visual Basic uses the fully qualified drive, path, and file name of the Visual Basic Help file.</span></span></param>
        <param name="HelpContext"><span data-ttu-id="a84f5-212">可选。</span><span class="sxs-lookup"><span data-stu-id="a84f5-212">Optional.</span></span> <span data-ttu-id="a84f5-213">上下文 ID，用于标识 <paramref name="HelpFile" /> 中提供有关错误的帮助主题。</span><span class="sxs-lookup"><span data-stu-id="a84f5-213">The context ID identifying a topic within <paramref name="HelpFile" /> that provides help for the error.</span></span> <span data-ttu-id="a84f5-214">如果省略该参数，则使用与 <see langword="Number" /> 属性对应的错误的 Visual Basic 帮助文件上下文 ID（如果存在）。</span><span class="sxs-lookup"><span data-stu-id="a84f5-214">If omitted, the Visual Basic Help-file context ID for the error corresponding to the <see langword="Number" /> property is used, if it exists.</span></span></param>
        <summary><span data-ttu-id="a84f5-215">生成一个运行时错误；可以替代 <see langword="Error" /> 语句使用。</span><span class="sxs-lookup"><span data-stu-id="a84f5-215">Generates a run-time error; can be used instead of the <see langword="Error" /> statement.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-216">`Raise`除之外的所有参数 `Number` 都是可选的。</span><span class="sxs-lookup"><span data-stu-id="a84f5-216">All of the `Raise` arguments except `Number` are optional.</span></span> <span data-ttu-id="a84f5-217">如果省略可选参数，并且对象的属性设置包含尚未 `Err` 清除的值，则这些值将用作错误的值。</span><span class="sxs-lookup"><span data-stu-id="a84f5-217">If you omit optional arguments, and the property settings of the `Err` object contain values that have not been cleared, those values serve as the values for your error.</span></span>  
  
 <span data-ttu-id="a84f5-218">由于 `Err` 对象比你在语句中生成错误时提供了更丰富的信息 `Error` ，因此 `Raise` 对编写类模块时生成错误很有用。</span><span class="sxs-lookup"><span data-stu-id="a84f5-218">Because the `Err` object gives richer information than when you generate errors with the `Error` statement, `Raise` is useful for generating errors when writing class modules.</span></span> <span data-ttu-id="a84f5-219">例如，通过 `Raise` 方法，生成错误的源可以在属性中指定 `Source` ，可以引用错误的联机帮助，等等。</span><span class="sxs-lookup"><span data-stu-id="a84f5-219">For example, with the `Raise` method, the source that generated the error can be specified in the `Source` property, online Help for the error can be referenced, and so on.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-220">此示例使用 `Err` 对象的 `Raise` 方法在 Visual Basic 编写的函数中生成错误。</span><span class="sxs-lookup"><span data-stu-id="a84f5-220">This example uses the `Err` object's `Raise` method to generate an error within a function written in Visual Basic.</span></span> <span data-ttu-id="a84f5-221">调用函数可以捕获错误并使用消息框将其报告给用户。</span><span class="sxs-lookup"><span data-stu-id="a84f5-221">The calling function can catch the error and report it to the user with a message box.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/error-statement"><span data-ttu-id="a84f5-222">Error 语句</span><span class="sxs-lookup"><span data-stu-id="a84f5-222">Error Statement</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement"><span data-ttu-id="a84f5-223">On Error 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="a84f5-223">On Error Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a84f5-224">返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。</span><span class="sxs-lookup"><span data-stu-id="a84f5-224">Returns or sets a <see langword="String" /> expression specifying the name of the object or application that originally generated the error.</span></span> <span data-ttu-id="a84f5-225">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-225">Read/write.</span></span></summary>
        <value><span data-ttu-id="a84f5-226">返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。</span><span class="sxs-lookup"><span data-stu-id="a84f5-226">Returns or sets a <see langword="String" /> expression specifying the name of the object or application that originally generated the error.</span></span> <span data-ttu-id="a84f5-227">读/写。</span><span class="sxs-lookup"><span data-stu-id="a84f5-227">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a84f5-228">`Source`属性指定一个 `String` 表达式，该表达式表示生成错误的对象; 该表达式通常是对象的类名或进程 ID。</span><span class="sxs-lookup"><span data-stu-id="a84f5-228">The `Source` property specifies a `String` expression representing the object that generated the error; the expression is usually the object's class name or process ID.</span></span> <span data-ttu-id="a84f5-229">`Source`当代码无法处理在访问的对象中生成的错误时，可以使用属性提供信息。</span><span class="sxs-lookup"><span data-stu-id="a84f5-229">Use the `Source` property to provide information when your code is unable to handle an error generated in an accessed object.</span></span> <span data-ttu-id="a84f5-230">例如，如果您访问 Microsoft Excel 并生成 `Division by zero` 错误，则 Microsoft excel 会将错误 `Err.Number` 代码设置为该错误的错误代码，并将设置 `Source` 为 ""。</span><span class="sxs-lookup"><span data-stu-id="a84f5-230">For example, if you access Microsoft Excel and it generates a `Division by zero` error, Microsoft Excel sets `Err.Number` to its error code for that error and sets `Source` to "Excel.Application".</span></span>  
  
 <span data-ttu-id="a84f5-231">当应用程序从代码生成错误时， `Source` 为你的应用程序的编程 ID。</span><span class="sxs-lookup"><span data-stu-id="a84f5-231">When the application is generating an error from code, `Source` is your application's programmatic ID.</span></span> <span data-ttu-id="a84f5-232">在类中， `Source` 应包含包含窗体 *项目* 的名称。*类*。</span><span class="sxs-lookup"><span data-stu-id="a84f5-232">Within a class, `Source` should contain a name having the form *project*.*class*.</span></span> <span data-ttu-id="a84f5-233">当代码中出现意外错误时， `Source` 会自动填充属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-233">When an unexpected error occurs in your code, the `Source` property is automatically filled in.</span></span> <span data-ttu-id="a84f5-234">对于模块中的错误， `Source` 包含项目名称。</span><span class="sxs-lookup"><span data-stu-id="a84f5-234">For errors in a module, `Source` contains the project name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a84f5-235">此示例演示如何 `Source` 在典型的错误处理例程中使用属性。</span><span class="sxs-lookup"><span data-stu-id="a84f5-235">This example demonstrates the use of the `Source` property in a typical error-handling routine.</span></span> <span data-ttu-id="a84f5-236">当从中引发错误时 `Class1` ，会将该字符串 `"Class1"` 分配给 `Source` 对象的属性 `Err` 。</span><span class="sxs-lookup"><span data-stu-id="a84f5-236">When an error is raised from `Class1`, the string `"Class1"` is assigned to the `Source` property of the `Err` object.</span></span> <span data-ttu-id="a84f5-237">然后，此字符串会显示在说明错误的源和编号的信息性消息中。</span><span class="sxs-lookup"><span data-stu-id="a84f5-237">This string is then displayed in an informative message indicating the source and number of the error.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement"><span data-ttu-id="a84f5-238">On Error 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="a84f5-238">On Error Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
