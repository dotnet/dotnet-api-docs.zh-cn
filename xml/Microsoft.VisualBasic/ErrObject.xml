<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86a6c15985024c0cd54aa10684d9e970b233b682" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83954713" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ErrObject extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see langword="ErrObject" /> 模块包含用于使用 <see langword="Err" /> 对象标识和处理运行时错误的属性和过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject` 模块支持 `Err` 对象。 有关详细信息，请参阅 <xref:Microsoft.VisualBasic.Information.Err%2A>。  
  
   
  
## Examples  
 此示例使用构造错误消息对话框中的 `Err` 对象的属性。 请注意，当您首先使用 `Clear` 方法时，会发生什么情况：在使用 `Raise` 方法生成 Visual Basic 错误时，Visual Basic 的默认值将成为 `Err` 对象的属性。  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement">On Error 语句 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement">Try...Catch...Finally 语句 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/">关键字 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members">Visual Basic 运行时库成员</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除 <see langword="Err" /> 对象的所有属性设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 `Clear` 在错误处理后显式清除 `Err` 对象，例如在将延迟的错误处理用于 `On Error Resume Next`时。 只要执行以下任一语句，就会自动调用 `Clear` 方法：  
  
-   任何类型的 `Resume` 语句  
  
-   `Exit Sub`、`Exit Function` 或 `Exit Property`  
  
-   任何 `On Error` 语句  
  
-   任何 `Try...Catch...Finally` 语句  
  
    > [!NOTE]
    >  处理对其他对象的访问过程中生成的错误时，可能更愿意 `On Error GoTo` `On Error Resume Next` 构造。 检查每个与对象交互后 `Err` 的歧义消除了代码访问了哪个对象的歧义：您可以确保哪个对象将错误代码放在 `Err.Number`中，以及哪个对象最初生成了错误（在 `Err.Source`中指定的对象）。  
  
   
  
## Examples  
 此示例使用 `Err` 对象的 `Clear` 方法将 `Err` 对象的数值属性重置为零，并将其字符串属性重置为零长度字符串。 如果没有对 `Clear`的调用，则对 `MsgBox` 的第二次调用将显示相同的错误消息。  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement">On Error 语句 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。 读/写。</summary>
        <value>返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description` 属性设置包含错误的简短说明。 使用此属性来向用户发出警报，指出您无法或不希望处理的错误。 生成用户定义的错误时，请将错误的简短说明分配给 `Description` 属性。 如果未填充 `Description` 属性，并且 <xref:Microsoft.VisualBasic.ErrObject.Number%2A> 属性的值与 Visual Basic 运行时错误相对应，则生成该错误时，<xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> 函数返回的字符串将在 `Description` 属性中进行设置。  
  
   
  
## Examples  
 此示例将用户定义的消息分配给 `Err` 对象的 `Description` 属性。  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示上一条执行语句的行号的整数。</summary>
        <value>最后执行的语句的行号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 Visual Basic 没有遇到任何行号，则返回0。  
  
   
  
## Examples  
 此示例使用 `Erl` 属性来指示行号。  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetException() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示所发生错误的异常。</summary>
        <returns>表示所发生错误的异常。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException` 函数仅在 `Err` 对象类中可用。 它与 `Err` 对象的 `Exception` 属性一起使用，以显示发生的错误。  
  
   
  
## Examples  
 下面的代码显示分配给 `Err` 对象中的异常的消息：  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。 读/写。</summary>
        <value>返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` 属性用于显示应用程序的上下文相关帮助。 如果在 `HelpFile`中指定了帮助文件，则使用 `HelpContext` 属性自动显示标识的帮助文件。 如果 `HelpFile` 和 `HelpContext` 属性都为空，则将检查 <xref:Microsoft.VisualBasic.ErrObject.Number%2A> 属性的值。 如果 `Number` 属性的值对应于 Visual Basic 运行时错误值，则使用该错误的 Visual Basic 帮助上下文 ID。 如果 `Number` 属性的值不对应于 Visual Basic 错误，则会显示 Visual Basic 帮助文件的内容屏幕。  
  
> [!NOTE]
>  应在应用程序中编写例程来处理典型错误。 使用对象进行编程时，可以使用对象的帮助文件来提高错误处理的质量，或者在错误不可恢复时向用户显示一条有意义的消息。  
  
   
  
## Examples  
 此示例使用 `Err` 对象的 `HelpContext` 属性为 `Overflow` 错误显示 Visual Basic 帮助主题。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。 读/写。</summary>
        <value>返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果帮助文件由 `HelpFile` 属性指定，则当用户按 "错误消息" 对话框中的 "帮助" 键（或 F1 键）时，将自动调用该帮助文件。 如果 `HelpContext` 属性包含指定文件的有效上下文 ID，则会自动显示该主题。 如果未指定 `HelpFile`，则显示 Visual Basic 帮助文件。  
  
> [!NOTE]
>  应在应用程序中编写例程来处理典型错误。 使用对象进行编程时，可以使用对象的帮助文件来提高错误处理的质量，或者在错误不可恢复时向用户显示一条有意义的消息。  
  
   
  
## Examples  
 此示例使用 `Err` 对象的 `HelpFile` 属性来启动帮助系统。 默认情况下，`HelpFile` 属性包含 Visual Basic 帮助文件的名称。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取调用动态链接库 (DLL) 所产生的系统错误代码。</summary>
        <value>调用动态链接库（DLL）所产生的系统错误代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性仅适用于从 Visual Basic 代码进行的 DLL 调用。 进行这样的调用时，被调用的函数通常返回指示成功或失败的代码，并填充 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性。 查看 DLL 函数的文档，以确定表示成功或失败的返回值。 每当返回失败代码时，Visual Basic 应用程序都应立即检查 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性。 如果设置了 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性，则不会引发异常。  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 属性受 <xref:System.Security.Permissions.SecurityAction.LinkDemand>保护，这有助于防止从不受信任的代码访问它。 但 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 只要求直接调用方具有 <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> 权限。 如果你的代码可从部分受信任的代码调用，则公开不带验证的 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 的值会带来安全风险。  
>   
>  有关如何使用 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 成员的重要限制，请参阅[Demand 与 LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)。 有关权限的详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
 注意对于智能设备，此属性始终返回零。  
  
   
  
## Examples  
 下面的示例演示如何在 Windows API 中调用函数后使用 `LastDllError` 属性。 `PrintWindowCoordinates` 过程使用窗口的句柄，并调用 `GetWindowRect` 函数。 `GetWindowRect` 用构成窗口的矩形的边的长度填充 RECT 数据结构。 如果传递的句柄无效，则会出现错误，并且可通过 `LastDllError` 属性获取错误号。  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定错误的数值。 读/写。</summary>
        <value>返回或设置指定错误的数值。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除 `Number` 之外的所有 `Raise` 参数都是可选的。 如果省略可选参数，并且 `Err` 对象的属性设置包含尚未清除的值，则这些值将用作错误的值。  
  
 由于 `Err` 对象比在 `Error` 语句生成错误时提供了更丰富的信息，`Raise` 在编写类模块时生成错误就很有用。 例如，对于 `Raise` 方法，生成错误的源可以在 `Source` 属性中指定，可以引用错误的联机帮助，等等。  
  
 从对象返回用户定义的错误时，通过将您选择的数字作为错误代码添加到 `VbObjectError` 常量来设置 `Err.Number`。 例如，使用以下代码将数字1051返回为错误代码：  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 此示例演示了错误处理例程中的 `Number` 属性的典型用法。  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 此示例使用 `Err` 对象的 `Raise` 方法在用 Visual Basic 编写的函数中生成原始错误。 调用函数可以捕获并向用户报告错误。 请注意，过程 `CallingProcedure` 会将您可以从 `Err` 对象派生的信息的类型与可以从 `Exception` 对象派生的信息进行比较。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 大于 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = default, object Description = default, object HelpFile = default, object HelpContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 标识错误本质的 <see langword="Long" /> 整数。 Visual Basic 错误处于 0 到 65535 的范围内：范围 0 到 512 保留用于系统错误，范围 513 到 65535 则用于用户定义的错误。 当在类模块中将 <see langword="Number" /> 属性设置为您自己的错误代码时，将错误代码号添加到 <see langword="vbObjectError" /> 常数。 例如，将 <c>vbObjectError + 513</c> 分配给 <see langword="Number" /> 属性，生成错误号 513。</param>
        <param name="Source">可选。 <see langword="String" /> 表达式，用于命名生成错误的对象或应用程序。 设置对象的这一属性时，应使用如下形式：<c>project</c>.<c>class</c>。 如果未指定 <paramref name="Source" />，则使用当前 Visual Basic 项目的进程 ID。</param>
        <param name="Description">可选。 描述错误的 <see langword="String" /> 表达式。 如果未指定，则检查 <see langword="Number" /> 属性值。 如果它可以映射到 Visual Basic 运行时错误代码，则将 <see langword="Error" /> 函数要返回的字符串用作 <see langword="Description" /> 属性。 如果没有对应于 <see langword="Number" /> 属性的 Visual Basic 错误，则使用"应用程序定义的错误或对象定义的错误"消息。</param>
        <param name="HelpFile">可选。 帮助文件的完全限定路径，在该文件中可找到有关此错误的帮助信息。 如果未指定该参数，则 Visual Basic 使用 Visual Basic 帮助文件的完全限定的驱动器、路径和文件名。</param>
        <param name="HelpContext">可选。 上下文 ID，用于标识 <paramref name="HelpFile" /> 中提供有关错误的帮助主题。 如果省略该参数，则使用与 <see langword="Number" /> 属性对应的错误的 Visual Basic 帮助文件上下文 ID（如果存在）。</param>
        <summary>生成一个运行时错误；可以替代 <see langword="Error" /> 语句使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除 `Number` 之外的所有 `Raise` 参数都是可选的。 如果省略可选参数，并且 `Err` 对象的属性设置包含尚未清除的值，则这些值将用作错误的值。  
  
 由于 `Err` 对象比在 `Error` 语句生成错误时提供了更丰富的信息，`Raise` 在编写类模块时生成错误就很有用。 例如，对于 `Raise` 方法，生成错误的源可以在 `Source` 属性中指定，可以引用错误的联机帮助，等等。  
  
   
  
## Examples  
 此示例使用 `Err` 对象的 `Raise` 方法在 Visual Basic 编写的函数中生成错误。 调用函数可以捕获错误并使用消息框将其报告给用户。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/error-statement">Error 语句</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement">On Error 语句 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。 读/写。</summary>
        <value>返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` 属性指定表示生成错误的对象的 `String` 表达式;表达式通常是对象的类名或进程 ID。 当代码无法处理在访问的对象中生成的错误时，使用 `Source` 属性可提供信息。 例如，如果您访问 Microsoft Excel 并生成了一个 `Division by zero` 错误，则 Microsoft Excel 会将 `Err.Number` 设置为该错误的错误代码，并将 `Source` 设置为 ""。  
  
 当应用程序从代码生成错误时，`Source` 是应用程序的编程 ID。 在类中，`Source` 应包含具有窗体*项目*的名称。*类*。 当代码中出现意外错误时，将自动填充 "`Source`" 属性。 对于模块中的错误，`Source` 包含项目名称。  
  
   
  
## Examples  
 此示例演示如何使用典型的错误处理例程中的 `Source` 属性。 如果 `Class1`引发错误，则会将字符串 `"Class1"` 分配给 `Err` 对象的 `Source` 属性。 然后，此字符串会显示在说明错误的源和编号的信息性消息中。  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/on-error-statement">On Error 语句 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
