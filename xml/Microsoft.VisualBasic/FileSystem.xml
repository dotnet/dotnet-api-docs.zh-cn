<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a69fc5838ab40f621f3f6fbd0826f964f5d9a4a" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90796159" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed FileSystem extends System.Object" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.VisualBasic.CompilerServices.StandardModule]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.VisualBasic.CompilerServices.StandardModule&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dc0e7-101"><see langword="FileSystem" /> 模块包含用于执行文件、目录或文件夹以及系统操作的过程。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="dc0e7-102">与使用 <see langword="My" /> 模块相比，<see langword="FileSystem" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="dc0e7-103">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-104">此模块支持访问文件和文件夹的 Visual Basic 语言关键字和运行库成员。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-105">此示例使用 `GetAttr` 函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/directories-and-files-summary"><span data-ttu-id="dc0e7-106">目录和文件摘要</span><span class="sxs-lookup"><span data-stu-id="dc0e7-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/input-and-output-summary"><span data-ttu-id="dc0e7-107">输入和输出摘要</span><span class="sxs-lookup"><span data-stu-id="dc0e7-107">Input and Output Summary</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/"><span data-ttu-id="dc0e7-108">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members"><span data-ttu-id="dc0e7-109">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="dc0e7-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDir(string Path) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="dc0e7-110">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-110">Required.</span></span> <span data-ttu-id="dc0e7-111">一个字符串表达式，用于标识哪个目录或文件夹将成为新的默认目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="dc0e7-112"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="dc0e7-113">如果未指定驱动器，则 <see langword="ChDir" /> 更改当前驱动器上的默认目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-114">更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-114">Changes the current directory or folder.</span></span> <span data-ttu-id="dc0e7-115">与 <see langword="My" /> 函数相比，<see langword="ChDir" /> 功能在文件 I/O 操作方面可提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="dc0e7-116">有关更多信息，请参见<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-117">`ChDir`函数会更改默认目录，但不会更改默认的驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="dc0e7-118">例如，如果默认驱动器是 C，则以下语句将更改驱动器 D 上的默认目录，但 C 仍是默认驱动器：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="dc0e7-119">可以通过键入两个句点来进行相对目录更改，如下所示：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-120">`ChDir`函数需要非托管代码权限，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="dc0e7-121">有关详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-122">此示例使用 `ChDir` 函数更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-123"><paramref name="Path" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-124">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths"><span data-ttu-id="dc0e7-125">如何：在 Visual Basic 中分析文件路径</span><span class="sxs-lookup"><span data-stu-id="dc0e7-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories"><span data-ttu-id="dc0e7-126">创建、删除和移动文件和目录 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-127">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(char Drive) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="dc0e7-128">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-128">Required.</span></span> <span data-ttu-id="dc0e7-129">指定现有驱动器的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="dc0e7-130">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="dc0e7-131">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="dc0e7-132">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-133">`ChDrive`函数需要非托管代码权限，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="dc0e7-134">有关详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和 [代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-135">此示例使用 `ChDrive` 函数更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="dc0e7-136">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-137">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-138">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(string Drive) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="dc0e7-139">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-139">Required.</span></span> <span data-ttu-id="dc0e7-140">指定现有驱动器的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="dc0e7-141">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="dc0e7-142">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="dc0e7-143">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-144">`ChDrive`函数需要非托管代码权限，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="dc0e7-145">有关详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和 [代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-146">此示例使用 `ChDrive` 函数更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="dc0e7-147">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-148">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-149">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-150">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-150">Returns a string representing the current path.</span></span> <span data-ttu-id="dc0e7-151">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="dc0e7-152">有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc0e7-153">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-153">Returns a string representing the current path.</span></span> <span data-ttu-id="dc0e7-154">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="dc0e7-155">有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-156">表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc0e7-157">此示例使用 `CurDir` 函数返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir(char Drive) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="dc0e7-158">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-158">Optional.</span></span> <span data-ttu-id="dc0e7-159">指定现有驱动器的 <see langword="Char" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="dc0e7-160">如果未指定驱动器或 <paramref name="Drive" /> 是长度为零的字符串 ("")，则 <see langword="CurDir" /> 返回当前驱动器的路径。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-161">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-161">Returns a string representing the current path.</span></span> <span data-ttu-id="dc0e7-162">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="dc0e7-163">有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-164">表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc0e7-165">此示例使用 `CurDir` 函数返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-166">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="dc0e7-167">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="dc0e7-168">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc0e7-169">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="dc0e7-170">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="dc0e7-171">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-172">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-173">`Dir`函数支持使用多字符 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="dc0e7-174">`VbVolume` 返回驱动器的卷标，而不是特定的文件名。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="dc0e7-175">`PathName`第一次调用函数时，必须提供 `Dir` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="dc0e7-176">若要检索下一项，可以对 `Dir` 不带参数的函数进行后续调用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-177">若要正确运行，该 `Dir` 函数要求将 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 标志 <xref:System.Security.Permissions.FileIOPermission> 授予执行代码。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="dc0e7-178">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermission> 、 <xref:System.Security.SecurityException> 和 [代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="dc0e7-179">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="dc0e7-180">“值”</span><span class="sxs-lookup"><span data-stu-id="dc0e7-180">Value</span></span>|<span data-ttu-id="dc0e7-181">返回的常量</span><span class="sxs-lookup"><span data-stu-id="dc0e7-181">Constant</span></span>|<span data-ttu-id="dc0e7-182">描述</span><span class="sxs-lookup"><span data-stu-id="dc0e7-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="dc0e7-183">默认。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-183">Default.</span></span> <span data-ttu-id="dc0e7-184">指定没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="dc0e7-185">指定只读文件以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="dc0e7-186">指定隐藏的文件，还指定没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="dc0e7-187">指定系统文件以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="dc0e7-188">指定卷标;如果指定任何其他属性， `vbVolume` 则将忽略。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="dc0e7-189">指定目录或文件夹以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="dc0e7-190">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="dc0e7-191">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-192">这些枚举由 Visual Basic 语言指定，可用于代码中的任何位置，而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-193">此示例使用 `Dir` 函数检查是否存在特定的文件和目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="dc0e7-194">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-194">Optional.</span></span> <span data-ttu-id="dc0e7-195">一个字符串表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="dc0e7-196">如果未找到 <paramref name="PathName" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="dc0e7-197">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-197">Optional.</span></span> <span data-ttu-id="dc0e7-198">一个字符串表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="dc0e7-199">如果未找到 <paramref name="Pathname" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="dc0e7-200">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-200">Optional.</span></span> <span data-ttu-id="dc0e7-201">其值指定文件特性的枚举或数值表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="dc0e7-202">如果省略，则 <see langword="Dir" /> 将返回与 <paramref name="Pathname" /> 匹配但不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="dc0e7-203">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="dc0e7-204">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="dc0e7-205">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-206">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-207">`Dir`函数支持使用多字符 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
 <span data-ttu-id="dc0e7-208">`VbVolume` 返回驱动器的卷标，而不是特定的文件名。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
 <span data-ttu-id="dc0e7-209">`PathName`第一次调用函数时，必须提供 `Dir` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="dc0e7-210">若要检索下一项，可以对 `Dir` 不带参数的函数进行后续调用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-211">若要正确运行，该 `Dir` 函数要求将 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 标志 <xref:System.Security.Permissions.FileIOPermission> 授予执行代码。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="dc0e7-212">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermission> 、 <xref:System.Security.SecurityException> 和 [代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
 <span data-ttu-id="dc0e7-213">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-213">The `Attributes` argument enumeration values are as follows:</span></span>  
|<span data-ttu-id="dc0e7-214">“值”</span><span class="sxs-lookup"><span data-stu-id="dc0e7-214">Value</span></span>|<span data-ttu-id="dc0e7-215">返回的常量</span><span class="sxs-lookup"><span data-stu-id="dc0e7-215">Constant</span></span>|<span data-ttu-id="dc0e7-216">描述</span><span class="sxs-lookup"><span data-stu-id="dc0e7-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="dc0e7-217">默认。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-217">Default.</span></span> <span data-ttu-id="dc0e7-218">指定没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="dc0e7-219">指定只读文件以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="dc0e7-220">除了指定没有属性的文件，还指定隐藏文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="dc0e7-221">除了指定没有属性的文件，还指定系统文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="dc0e7-222">指定卷标;如果指定任何其他属性， `vbVolume` 则将忽略。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="dc0e7-223">指定目录或文件夹，以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="dc0e7-224">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="dc0e7-225">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-225">File has a different name.</span></span>|  
> [!NOTE]
>  <span data-ttu-id="dc0e7-226">这些枚举由 Visual Basic 语言指定，并且可以在代码中的任何位置使用来代替实际值。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
## Examples  
 <span data-ttu-id="dc0e7-227">此示例使用 `Dir` 函数检查是否存在特定的文件和目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-228">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-228">Required.</span></span> <span data-ttu-id="dc0e7-229">一个包含任何有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-230">当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-231">当达到为进行 <see langword="Random" /> 或顺序 <see langword="Input" /> 而打开的文件的结尾时，为布尔值 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-232">使用 `EOF` 可避免由于尝试获取超过文件结尾的输入而生成的错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="dc0e7-233">`EOF`函数将返回， `False` 直到到达文件末尾。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="dc0e7-234">对于打开 `Random` 或访问的文件 `Binary` ， `EOF` 返回 `False` 直到最后执行的 `FileGet` 函数无法读取整个记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="dc0e7-235">使用打开的文件进行 `Binary` 访问时，在返回之前，尝试使用函数读取文件将 `Input` `EOF` `True` 生成错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="dc0e7-236">使用 `LOF` 和 `Loc` 函数（而不是 `EOF` 读取二进制文件时使用 `Input` ），或使用 `Get` 函数时使用 `EOF` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="dc0e7-237">对于为打开的文件 `Output` ， `EOF` 始终返回 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-238">此示例使用 `EOF` 函数来检测文件的结尾。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="dc0e7-239">此示例假设 `Testfile` 是包含多行文本的文本文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-240">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-241">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-241">Required.</span></span> <span data-ttu-id="dc0e7-242"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-242"><see langword="Integer" />.</span></span> <span data-ttu-id="dc0e7-243">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-244">返回一个枚举，该枚举表示使用 <see langword="FileOpen" /> 函数打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-245">与 <see langword="FileAttr" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="dc0e7-246">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-247">以下值之一：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-247">One of the following values:</span></span> 
 <list type="table"><listheader><term><span data-ttu-id="dc0e7-248">“值”</span><span class="sxs-lookup"><span data-stu-id="dc0e7-248">Value</span></span></term><description><span data-ttu-id="dc0e7-249">文件访问模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-249">File access mode</span></span></description></listheader><item><term><span data-ttu-id="dc0e7-250">1</span><span class="sxs-lookup"><span data-stu-id="dc0e7-250">1</span></span></term><description><see langword="OpenMode.Input" /></description></item><item><term><span data-ttu-id="dc0e7-251">2</span><span class="sxs-lookup"><span data-stu-id="dc0e7-251">2</span></span></term><description><see langword="OpenMode.Output" /></description></item><item><term><span data-ttu-id="dc0e7-252">4</span><span class="sxs-lookup"><span data-stu-id="dc0e7-252">4</span></span></term><description><see langword="OpenMode.Random" /></description></item><item><term><span data-ttu-id="dc0e7-253">8</span><span class="sxs-lookup"><span data-stu-id="dc0e7-253">8</span></span></term><description><see langword="OpenMode.Append" /></description></item><item><term><span data-ttu-id="dc0e7-254">32</span><span class="sxs-lookup"><span data-stu-id="dc0e7-254">32</span></span></term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-255">此函数返回一个枚举，该枚举表示使用函数打开的文件的文件模式 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>
  
## Examples  
 <span data-ttu-id="dc0e7-256">此示例使用 `FileAttr` 函数返回打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-257">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="dc0e7-258">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-258">Optional.</span></span> <span data-ttu-id="dc0e7-259">要关闭的 0 个或多个信道的参数数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="dc0e7-260">关闭对用 <see langword="FileOpen" /> 函数打开的文件的输入/输出 (I/O)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-261"><see langword="My" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="dc0e7-262">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-263">`FileClose`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-264">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-265">有关详细信息，请参阅 [如何：使用 StreamReader 读取文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader)中的文本、 [如何：使用 StreamWriter 向文件中写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter)和 [演练：操作 Visual Basic 中的文件和目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-265">For more information, see [How to: Read Text from Files with a StreamReader](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader), [How to: Write Text to Files with a StreamWriter](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter), and [Walkthrough: Manipulating Files and Directories in Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories).</span></span>  
  
 <span data-ttu-id="dc0e7-266">如果省略 `FileNumbers` ，则函数打开的所有活动文件 `FileOpen` 都将关闭。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="dc0e7-267">关闭已为或打开的文件时 `Output` `Append` ，最终的输出缓冲区会写入该文件的操作系统缓冲区。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="dc0e7-268">与关闭的文件关联的所有缓冲区空间都将释放。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="dc0e7-269">`FileClose`执行函数时，文件与文件编号的关联将结束。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-270">此示例使用 `FileClose` 函数关闭为打开的文件 `Input` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-271"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/end-statement"><span data-ttu-id="dc0e7-272">End 语句</span><span class="sxs-lookup"><span data-stu-id="dc0e7-272">End Statement</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/stop-statement"><span data-ttu-id="dc0e7-273">Stop 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-274">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="dc0e7-275">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-275">Required.</span></span> <span data-ttu-id="dc0e7-276">指定要复制的文件的名称的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="dc0e7-277"><paramref name="Source" /> 可以包含源文件的驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="dc0e7-278">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-278">Required.</span></span> <span data-ttu-id="dc0e7-279">指定目标文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="dc0e7-280"><paramref name="Destination" /> 可包含目标文件的驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="dc0e7-281">复制文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-281">Copies a file.</span></span> <span data-ttu-id="dc0e7-282">与 <see langword="FileCopy" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="dc0e7-283">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-284">如果尝试对 `FileCopy` 当前打开的文件使用函数，则会发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="dc0e7-285">`FileCopy` 需要完全信任才能在本地驱动器上工作。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-286">此示例使用 `FileCopy` 函数将一个文件复制到另一个文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="dc0e7-287">出于本示例的目的，假定 `SrcFile` 是包含数据的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-288"><paramref name="Source" /> 或 <paramref name="Destination" /> 无效或未指定。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-289">文件已打开。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-290">文件不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory"><span data-ttu-id="dc0e7-291">如何：在 Visual Basic 中在不同的目录中创建文件的副本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory"><span data-ttu-id="dc0e7-292">如何：在同一目录中创建文件副本 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory"><span data-ttu-id="dc0e7-293">如何：在 Visual Basic 中将一个目录复制到另一个目录</span><span class="sxs-lookup"><span data-stu-id="dc0e7-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="dc0e7-294">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-294">Required.</span></span> <span data-ttu-id="dc0e7-295">指定一个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="dc0e7-296"><paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-297">返回一个 <see langword="Date" /> 值，该值指示写入文件的日期和时间。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="dc0e7-298">相比 <see langword="FileDateTime" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="dc0e7-299">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="dc0e7-300"><see langword="Date" /> 值，该值指示文件的创建日期和时间或上次修改日期和时间。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc0e7-301">此示例使用 `FileDateTime` 函数来确定文件的创建日期和时间或上次修改日期和时间。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="dc0e7-302">显示的日期和时间的格式基于系统的区域设置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-303"><paramref name="PathName" /> 无效或包含通配符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-304">目标文件不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-305">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-306">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-307">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-308">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-309">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-309">Required.</span></span> <span data-ttu-id="dc0e7-310">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-311">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-311">Required.</span></span> <span data-ttu-id="dc0e7-312">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-313">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-313">Optional.</span></span> <span data-ttu-id="dc0e7-314">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-315">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-316">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-317">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-318">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-319">使用读取的数据 `FileGet` 通常写入到文件 `FilePut` 中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-320">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-321">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-322">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-323">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-324">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-324">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-325">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-326">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-327">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-328">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-329">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-330">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-331">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-332">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-333">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-334">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-335">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-336">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-337">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-338">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-339">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-340">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-341">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-342">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-343">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-344">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-345">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-346">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-347">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-348">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-349">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-350">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-351">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-352">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-352">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-353">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-354">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-355">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-356">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-357">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-358">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-359">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-360">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-361">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-362"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-363">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-364">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-365">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-366">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-366">Required.</span></span> <span data-ttu-id="dc0e7-367">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-368">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-368">Required.</span></span> <span data-ttu-id="dc0e7-369">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-370">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-370">Optional.</span></span> <span data-ttu-id="dc0e7-371">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-372">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-373">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-374">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-375">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-376">使用读取的数据 `FileGet` 通常写入到文件 `FilePut` 中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-377">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-378">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-379">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-380">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-381">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-381">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-382">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-383">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-384">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-385">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-386">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-387">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-388">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-389">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-390">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-391">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-392">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-393">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-394">如果未使用描述符，则为。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-394">If the descriptor is not used.</span></span> <span data-ttu-id="dc0e7-395">然后，传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-396">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-397">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-398">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-399">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-400">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-401">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-402">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-403">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-404">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-405">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-406">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-407">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-408">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-409">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-410">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-410">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-411">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-412">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-413">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-414">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-415">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-416">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-417">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-418">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-419">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-420"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-421">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-422">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-423">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-424">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-424">Required.</span></span> <span data-ttu-id="dc0e7-425">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-426">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-426">Required.</span></span> <span data-ttu-id="dc0e7-427">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-428">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-428">Optional.</span></span> <span data-ttu-id="dc0e7-429">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-430">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-431">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-432">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-433">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-434">使用读取的数据 `FileGet` 通常写入到文件 `FilePut` 中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-435">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-436">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-437">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-438">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-439">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-439">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-440">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-441">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-442">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-443">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-444">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-445">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-446">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-447">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-448">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-449">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-450">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-451">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-452">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-453">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-454">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-455">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-456">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-457">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-458">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-459">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-460">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-461">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-462">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-463">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-464">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-465">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-466">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-467">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-467">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-468">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-469">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-470">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-471">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-472">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-473">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-474">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-475">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-476">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-477"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-478">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-479">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-480">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-481">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-481">Required.</span></span> <span data-ttu-id="dc0e7-482">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-483">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-483">Required.</span></span> <span data-ttu-id="dc0e7-484">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-485">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-485">Optional.</span></span> <span data-ttu-id="dc0e7-486">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-487">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-488">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-489">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-490">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-491">使用读取的数据 `FileGet` 通常写入到文件 `FilePut` 中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-492">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-493">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-494">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-495">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-496">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-496">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-497">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-498">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-499">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-500">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-501">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-502">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-503">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-504">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-505">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-506">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-507">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-508">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-509">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-510">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-511">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-512">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-513">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-514">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-515">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-516">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-517">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-518">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-519">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-520">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-521">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-522">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-523">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-524">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-524">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-525">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-526">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-527">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-528">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-529">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-530">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-531">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-532">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-533">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-534"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-535">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-536">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-537">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-538">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-538">Required.</span></span> <span data-ttu-id="dc0e7-539">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-540">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-540">Required.</span></span> <span data-ttu-id="dc0e7-541">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-542">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-542">Optional.</span></span> <span data-ttu-id="dc0e7-543">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-544">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-545">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-546">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-547">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-548">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-549">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-550">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-551">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-552">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-553">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-553">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-554">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-555">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-556">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-557">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-558">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-559">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-560">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-561">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-562">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-563">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-564">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-565">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-566">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-567">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-568">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-569">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-570">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-571">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-572">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-573">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-574">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-575">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-576">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-577">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-578">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-579">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-580">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-581">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-581">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-582">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-583">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-584">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-585">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-586">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-587">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-588">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-589">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-590">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-591"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-592">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-593">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-594">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-595">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-595">Required.</span></span> <span data-ttu-id="dc0e7-596">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-597">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-597">Required.</span></span> <span data-ttu-id="dc0e7-598">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-599">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-599">Optional.</span></span> <span data-ttu-id="dc0e7-600">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-601">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-602">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-603">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-604">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-605">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-606">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-607">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-608">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-609">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-610">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-610">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-611">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-612">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-613">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-614">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-615">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-616">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-617">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-618">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-619">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-620">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-621">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-622">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-623">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-624">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-625">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-626">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-627">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-628">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-629">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-630">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-631">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-632">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-633">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-634">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-635">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-636">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-637">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-638">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-638">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-639">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-640">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-641">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-642">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-643">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-644">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-645">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-646">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-647">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-648"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-649">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-650">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-651">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-652">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-652">Required.</span></span> <span data-ttu-id="dc0e7-653">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-654">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-654">Required.</span></span> <span data-ttu-id="dc0e7-655">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-656">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-656">Optional.</span></span> <span data-ttu-id="dc0e7-657">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-658">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-659">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-660">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-661">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-662">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-663">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-664">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-665">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-666">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-667">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-667">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-668">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-669">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-670">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-671">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-672">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-673">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-674">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-675">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-676">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-677">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-678">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-679">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-680">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-681">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-682">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-683">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-684">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-685">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-686">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-687">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-688">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-689">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-690">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-691">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-692">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-693">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-694">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-695">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-695">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-696">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-697">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-698">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-699">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-700">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-701">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-702">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-703">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-704">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-705"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-706">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-707">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-708">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-709">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-709">Required.</span></span> <span data-ttu-id="dc0e7-710">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-711">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-711">Required.</span></span> <span data-ttu-id="dc0e7-712">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-713">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-713">Optional.</span></span> <span data-ttu-id="dc0e7-714">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-715">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-716">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-717">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-718">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-719">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-720">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-721">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-722">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-723">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-724">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-724">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-725">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-726">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-727">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-728">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-729">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-730">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-731">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-732">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-733">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-734">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-735">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-736">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-737">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-738">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-739">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-740">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-741">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-742">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-743">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-744">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-745">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-746">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-747">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-748">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-749">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-750">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-751">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-752">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-752">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-753">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-754">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-755">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-756">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-757">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-758">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-759">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-760">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-761">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-762"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-763">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-764">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-765">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-766">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-766">Required.</span></span> <span data-ttu-id="dc0e7-767">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-768">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-768">Required.</span></span> <span data-ttu-id="dc0e7-769">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-770">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-770">Optional.</span></span> <span data-ttu-id="dc0e7-771">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-772">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-773">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-774">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-775">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-776">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-777">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-778">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-779">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-780">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-781">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-781">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-782">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-783">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-784">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-785">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-786">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-787">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-788">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-789">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-790">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-791">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-792">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-793">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-794">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-795">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-796">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-797">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-798">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-799">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-800">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-801">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-802">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-803">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-804">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-805">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-806">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-807">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-808">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-809">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-809">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-810">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-811">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-812">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-813">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-814">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-815">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-816">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-817">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-818">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-819"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-820">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-821">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-822">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-823">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-823">Required.</span></span> <span data-ttu-id="dc0e7-824">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-825">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-825">Required.</span></span> <span data-ttu-id="dc0e7-826">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-827">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-827">Optional.</span></span> <span data-ttu-id="dc0e7-828">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-829">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-830">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-831">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-832">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-833">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-834">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-835">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-836">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-837">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-838">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-838">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-839">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-840">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-841">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-842">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-843">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-844">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-845">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-846">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-847">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-848">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-849">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-850">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-851">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-852">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-853">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-854">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-855">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-856">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-857">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-858">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-859">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-860">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-861">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-862">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-863">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-864">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-865">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-866">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-866">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-867">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-868">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-869">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-870">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-871">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-872">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-873">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-874">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-875">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-876"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-877">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-878">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-879">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-880">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-880">Required.</span></span> <span data-ttu-id="dc0e7-881">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-882">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-882">Required.</span></span> <span data-ttu-id="dc0e7-883">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-884">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-884">Optional.</span></span> <span data-ttu-id="dc0e7-885">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-886">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-887">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-888">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-889">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-890">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-891">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-892">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-893">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-894">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-895">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-895">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-896">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-897">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-898">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-899">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-900">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-901">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-902">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-903">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-904">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-905">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-906">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-907">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-908">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-909">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-910">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-911">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-912">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-913">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-914">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-915">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-916">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-917">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-918">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-919">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-920">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-921">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-922">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-923">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-923">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-924">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-925">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-926">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-927">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-928">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-929">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-930">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-931">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-932">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-933"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-934">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-935">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-936">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-937">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-937">Required.</span></span> <span data-ttu-id="dc0e7-938">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-939">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-939">Required.</span></span> <span data-ttu-id="dc0e7-940">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-941">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-941">Optional.</span></span> <span data-ttu-id="dc0e7-942">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="dc0e7-943">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-943">Optional.</span></span> <span data-ttu-id="dc0e7-944">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-944">Applies only when writing a string.</span></span> <span data-ttu-id="dc0e7-945">指定是否为描述长度的字符串写入一个双字节说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="dc0e7-946">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="dc0e7-947">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-948">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-949">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-950">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-951">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-952">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-953">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-954">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-955">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-956">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-956">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-957">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-958">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-959">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-960">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-961">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-962">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-963">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-964">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-965">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-966">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-967">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-968">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-969">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-970">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-971">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-972">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-973">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-974">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-975">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-976">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-977">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-978">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-979">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-980">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-981">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-982">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-983">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-984">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-984">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-985">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-986">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-987">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-988">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-989">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-990">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-991">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-992">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-993">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-994"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-995">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-996">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-997">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-998">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-998">Required.</span></span> <span data-ttu-id="dc0e7-999">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1000">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1000">Required.</span></span> <span data-ttu-id="dc0e7-1001">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1002">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1002">Optional.</span></span> <span data-ttu-id="dc0e7-1003">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="dc0e7-1004">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1004">Optional.</span></span> <span data-ttu-id="dc0e7-1005">仅当写入数组时使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1005">Applies only when writing an array.</span></span> <span data-ttu-id="dc0e7-1006">指定是否将数组视为动态数组，以及是否需要描述数组大小和边界的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="dc0e7-1007">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1007">Optional.</span></span> <span data-ttu-id="dc0e7-1008">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1008">Applies only when writing a string.</span></span> <span data-ttu-id="dc0e7-1009">指定是否为描述长度的字符串写入一个双字节说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="dc0e7-1010">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1011">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="dc0e7-1012">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="dc0e7-1013">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1014">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1015">使用读取的数据 `FileGet` 通常通过使用写入到文件 `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="dc0e7-1016">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1017">如果省略 `RecordNumber` ，则读取最后一个函数或函数之后的下一个记录或字节 `FileGet` `FilePut` (或最后一个 `Seek` 函数) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-1018">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-1019">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1020">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1020">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1021">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1022">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGet` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1023">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1024">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-1025">默认情况下，如果要读入的变量是字符串，则 `FileGet` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1026">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1027">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-1028">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1029">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="dc0e7-1030">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1031">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="dc0e7-1032">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="dc0e7-1033">如果未使用该说明符，则传递到的数组的大小和界限 `FileGet` 确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="dc0e7-1034">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1035">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1036">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1037">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="dc0e7-1038">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="dc0e7-1039">描述符的18个字节： (2 + 8 \* 2) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="dc0e7-1040">200字节用于数据： (5 \* 10 \* 4) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-1041">如果读入的变量是 (不是可变长度字符串或对象) 的任何其他类型的变量，则 `FileGet` 只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="dc0e7-1042">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-1043">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1044">在磁盘上，用户定义类型中的动态数组 (用) 编写， `FilePut` 其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1045">函数中的子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="dc0e7-1046">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-1047">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1048">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1048">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1049">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1050">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1051">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1052">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1053">对于结构中除数组以外的任何数组， `FileGet` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="dc0e7-1054">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="dc0e7-1055">`FileGet` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1056">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="dc0e7-1057">使用函数从文件读取 `FileGet` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1058"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1059">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-1060">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1061">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1062">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1062">Required.</span></span> <span data-ttu-id="dc0e7-1063">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1064">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1064">Required.</span></span> <span data-ttu-id="dc0e7-1065">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1066">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1066">Optional.</span></span> <span data-ttu-id="dc0e7-1067">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1068">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="dc0e7-1069">相比 <see langword="FileGetObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="dc0e7-1070">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1071">`FileGetObject` `FileGet` 如果 `Object` 返回类型而不是另一种类型（如、、等），则使用函数而不是以避免编译时的歧义 `Integer` `Long` `Short` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="dc0e7-1072">如果打算写出 `Variant` 类型， `FileGetObject` 则是必需的。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="dc0e7-1073">当不确定时，如果使用第二个参数的对象，则始终建议使用 `FilePutObject` 和 `FileGetObject` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="dc0e7-1074">`FileGetObject` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1075">用读取的数据 `FileGetObject` 通常用来编写 `FilePutObject` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="dc0e7-1076">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1077">如果省略 `RecordNumber` ，则 `FileGetObject` 读取最后一个 or 函数之后的记录或字节 `FileGetObject` `FilePutObject` (或最后一个 `Seek` 函数) 指向的。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1078">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1078">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1079">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1080">如果读取的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FileGetObject` 读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1081">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1082">由于无法精确确定填充数据量，因此最好让记录长度与所读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="dc0e7-1083">如果读入的变量是一个字符串，则默认情况下会 `FileGetObject` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1084">因此，函数的子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为大于字符串实际长度的两个字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1085">Visual Basic 6.0 及更早版本支持固定长度字符串，读取文件时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="dc0e7-1086">如果要读取没有说明符的字符串，应传递 `True` 到 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1087">如果读入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1088">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1089">其长度等于2再加上维度数的8倍： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="dc0e7-1090">例如，当数组写入磁盘时，以下数组声明需要218字节：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="dc0e7-1091">分发了 218 个字节，如下所示：为描述符分发了 18 个字节 (2 + 8 \* 2)，为数据分发了 100 个字节 (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="dc0e7-1092">`FileGetObject` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1093">在磁盘上，用户定义类型中的动态数组 (使用) 编写， `FilePutObject` 其长度等于2再加上维度数的8倍： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="dc0e7-1094">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于读取单个元素所需的所有字节的总和，包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="dc0e7-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>类可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1096">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1096">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1097">对于以模式打开的文件 `Binary` ，所有 `Random` 规则均适用，但有以下例外：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="dc0e7-1098">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1099">`FileGetObject` 连续读取磁盘中的所有变量，即没有记录之间的空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1100">对于结构中除数组以外的任何数组， `FileGetObject` 只读取数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="dc0e7-1101">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="dc0e7-1102">`FileGetObject` 读取长度可变的字符串，该字符串不是结构的元素，不需要双字节长度说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1103">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-1104">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-1105">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1106">下面的示例将记录读入测试文件中，然后检索该记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-1107">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1108">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FileLen(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="dc0e7-1109">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1109">Required.</span></span> <span data-ttu-id="dc0e7-1110">指定一个文件的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="dc0e7-1111"><paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1112">返回一个值，该值以字节为单位指定文件长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="dc0e7-1113">相比 <see langword="FileLen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="dc0e7-1114">有关详细信息，请参阅 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-1115">文件的长度（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1116">如果调用函数时指定的文件处于打开状态 `FileLen` ，则返回的值表示文件在打开时的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-1117">若要获取打开文件的当前长度，请使用 `LOF` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1118">此示例使用 `FileLen` 函数返回文件的长度（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="dc0e7-1119">出于本示例的目的，假定 `TestFile` 是包含一些数据的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-1120">文件不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-1121">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1122">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1122">Required.</span></span> <span data-ttu-id="dc0e7-1123">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1123">Any valid file number.</span></span> <span data-ttu-id="dc0e7-1124">可使用 <see langword="FreeFile" /> 函数获取下一个可用的文件号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="dc0e7-1125">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1125">Required.</span></span> <span data-ttu-id="dc0e7-1126">一个指定文件名的字符串表达式，其中可包含目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="dc0e7-1127">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1127">Required.</span></span> <span data-ttu-id="dc0e7-1128">指定文件模式的枚举：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="dc0e7-1129">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="dc0e7-1130">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1130">Optional.</span></span> <span data-ttu-id="dc0e7-1131">一个枚举，它指定对打开的文件所允许进行的操作：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="dc0e7-1132">默认为 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="dc0e7-1133">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="dc0e7-1134">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1134">Optional.</span></span> <span data-ttu-id="dc0e7-1135">一个枚举，它指定不允许其他进程对打开的文件所进行的操作：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="dc0e7-1136">默认为 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="dc0e7-1137">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="dc0e7-1138">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1138">Optional.</span></span> <span data-ttu-id="dc0e7-1139">小于或等于 32,767（字节）的数字。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="dc0e7-1140">对于为进行随机访问而打开的文件，此值是记录的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="dc0e7-1141">对于顺序文件，此值是缓冲的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1142">打开一个文件以进行输入或输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1142">Opens a file for input or output.</span></span> <span data-ttu-id="dc0e7-1143">相比 <see langword="FileOpen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="dc0e7-1144">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1145">`FileOpen`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-1146">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-1147">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1147">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-1148">必须先打开文件，然后才能对其执行任何 i/o 操作。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="dc0e7-1149">`FileOpen` 为文件的 i/o 分配一个缓冲区，并确定与该缓冲区一起使用的访问模式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-1150">写入文件时，如果尝试写入文件的文件不存在，则应用程序可能需要创建一个文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="dc0e7-1151">为此，需要对要在其中创建文件的目录具有权限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="dc0e7-1152">但是，如果由指定的文件 `FileName` 存在，则应用程序 `Write` 只需要文件本身的权限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="dc0e7-1153">如果可能，在部署过程中创建文件并仅授予对 `Write` 该文件的权限（而不是整个目录），以帮助提高安全性。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="dc0e7-1154">为了帮助提高安全性，请将数据写入用户目录，而不是写入到根目录或 Program Files 目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="dc0e7-1155">可以通过使用函数找到要打开的通道 `FreeFile()` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-1156">`FileOpen`函数需要 `Read` 从 `FileIOPermissionAccess` 枚举访问，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="dc0e7-1157">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1158">此示例演示了如何使用 `FileOpen` 函数来启用文件的输入和输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="dc0e7-1159">下面的代码 `TestFile` 在 `Input` 模式下打开文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="dc0e7-1160">此示例将在模式中打开文件 `Binary` ，仅用于写入操作。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="dc0e7-1161">下面的示例在 `Random` 模式下打开文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="dc0e7-1162">文件包含结构的记录 `Person` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="dc0e7-1163">此代码示例在 `Output` 模式下打开文件; 任何进程都可以读取或写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="dc0e7-1164">此代码示例在 `Binary` 读取模式下打开文件; 其他进程无法读取文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1165">记录长度是负数（并且不等于 -1）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1166"><paramref name="FileName" /> 已经打开，或 <paramref name="FileName" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-1167">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1168">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-1169">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1170">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1171">有关更多信息，请参见 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1172">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1172">Required.</span></span> <span data-ttu-id="dc0e7-1173">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1174">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1174">Required.</span></span> <span data-ttu-id="dc0e7-1175">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1176">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1176">Optional.</span></span> <span data-ttu-id="dc0e7-1177">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1178">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1179">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1180">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1181">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1182">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1183">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1184">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1185">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1186">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1187">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1188">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1188">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1189">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1190">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1191">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1192">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1193">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1194">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1195">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1196">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1197">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1198">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1199">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1200">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1201">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1202">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1203">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1204">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1205">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1206">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1207">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1208">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1209">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1210">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1211">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1212">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1213">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1214">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1215">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1216">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1216">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1217">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1218">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1219">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1220">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1221">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1222">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1223">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1224">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1225">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1226">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1227">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1228">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1229"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1230">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1231">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1232">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1232">Required.</span></span> <span data-ttu-id="dc0e7-1233">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1234">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1234">Required.</span></span> <span data-ttu-id="dc0e7-1235">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1236">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1236">Optional.</span></span> <span data-ttu-id="dc0e7-1237">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1238">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1239">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1240">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1241">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1242">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1243">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1244">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1245">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1246">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1247">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1248">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1248">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1249">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1250">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1251">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1252">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1253">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1254">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1255">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1256">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1257">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1258">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1259">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1260">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1261">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1262">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1263">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1264">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1265">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1266">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1267">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1268">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1269">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1270">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1271">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1272">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1273">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1274">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1275">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1276">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1276">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1277">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1278">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1279">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1280">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1281">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1282">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1283">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1284">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1285">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1286">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1287">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1288">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1289"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1290">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1291">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1292">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1292">Required.</span></span> <span data-ttu-id="dc0e7-1293">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1294">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1294">Required.</span></span> <span data-ttu-id="dc0e7-1295">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1296">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1296">Optional.</span></span> <span data-ttu-id="dc0e7-1297">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1298">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1299">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1300">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1301">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1302">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1303">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1304">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1305">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1306">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1307">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1308">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1308">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1309">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1310">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1311">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1312">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1313">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1314">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1315">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1316">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1317">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1318">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1319">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1320">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1321">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1322">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1323">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1324">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1325">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1326">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1327">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1328">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1329">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1330">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1331">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1332">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1333">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1334">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1335">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1336">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1336">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1337">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1338">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1339">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1340">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1341">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1342">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1343">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1344">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1345">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1346">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1347">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1348">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1349"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1350">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1351">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1352">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1352">Required.</span></span> <span data-ttu-id="dc0e7-1353">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1354">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1354">Required.</span></span> <span data-ttu-id="dc0e7-1355">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1356">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1356">Optional.</span></span> <span data-ttu-id="dc0e7-1357">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1358">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1359">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1360">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1361">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1362">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1363">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1364">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1365">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1366">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1367">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1368">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1368">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1369">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1370">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1371">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1372">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1373">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1374">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1375">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1376">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1377">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1378">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1379">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1380">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1381">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1382">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1383">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1384">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1385">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1386">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1387">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1388">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1389">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1390">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1391">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1392">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1393">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1394">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1395">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1396">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1396">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1397">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1398">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1399">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1400">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1401">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1402">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1403">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1404">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1405">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1406">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1407">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1408">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1409"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1410">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1411">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1412">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1412">Required.</span></span> <span data-ttu-id="dc0e7-1413">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1414">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1414">Required.</span></span> <span data-ttu-id="dc0e7-1415">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1416">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1416">Optional.</span></span> <span data-ttu-id="dc0e7-1417">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1418">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1419">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1420">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1421">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1422">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1423">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1424">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1425">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1426">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1427">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1428">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1428">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1429">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1430">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1431">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1432">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1433">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1434">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1435">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1436">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1437">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1438">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1439">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1440">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1441">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1442">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1443">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1444">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1445">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1446">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1447">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1448">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1449">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1450">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1451">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1452">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1453">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1454">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1455">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1456">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1456">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1457">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1458">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1459">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1460">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1461">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1462">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1463">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1464">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1465">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1466">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1467">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1468">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1469"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1470">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1471">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1472">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1472">Required.</span></span> <span data-ttu-id="dc0e7-1473">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1474">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1474">Required.</span></span> <span data-ttu-id="dc0e7-1475">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1476">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1476">Optional.</span></span> <span data-ttu-id="dc0e7-1477">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1478">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1479">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1480">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1481">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1482">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1483">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1484">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1485">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1486">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1487">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1488">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1488">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1489">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1490">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1491">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1492">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1493">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1494">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1495">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1496">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1497">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1498">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1499">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1500">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1501">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1502">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1503">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1504">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1505">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1506">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1507">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1508">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1509">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1510">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1511">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1512">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1513">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1514">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1515">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1516">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1516">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1517">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1518">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1519">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1520">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1521">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1522">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1523">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1524">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1525">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1526">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1527">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1528">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1529"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1530">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1531">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1532">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1532">Required.</span></span> <span data-ttu-id="dc0e7-1533">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1534">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1534">Required.</span></span> <span data-ttu-id="dc0e7-1535">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1536">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1536">Optional.</span></span> <span data-ttu-id="dc0e7-1537">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1538">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1539">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1540">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1541">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1542">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1543">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1544">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1545">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1546">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1547">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1548">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1548">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1549">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1550">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1551">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1552">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1553">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1554">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1555">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1556">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1557">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1558">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1559">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1560">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1561">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1562">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1563">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1564">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1565">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1566">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1567">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1568">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1569">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1570">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1571">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1572">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1573">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1574">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1575">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1576">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1576">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1577">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1578">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1579">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1580">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1581">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1582">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1583">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1584">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1585">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1586">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1587">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1588">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1589"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1590">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1591">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1592">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1592">Required.</span></span> <span data-ttu-id="dc0e7-1593">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1594">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1594">Required.</span></span> <span data-ttu-id="dc0e7-1595">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1596">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1596">Optional.</span></span> <span data-ttu-id="dc0e7-1597">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1598">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1599">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1600">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1601">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1602">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1603">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1604">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1605">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1606">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1607">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1608">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1608">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1609">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1610">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1611">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1612">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1613">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1614">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1615">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1616">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1617">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1618">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1619">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1620">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1621">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1622">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1623">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1624">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1625">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1626">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1627">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1628">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1629">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1630">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1631">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1632">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1633">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1634">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1635">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1636">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1636">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1637">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1638">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1639">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1640">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1641">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1642">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1643">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1644">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1645">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1646">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1647">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1648">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1649"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1650">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1651">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1652">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1652">Required.</span></span> <span data-ttu-id="dc0e7-1653">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1654">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1654">Required.</span></span> <span data-ttu-id="dc0e7-1655">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1656">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1656">Optional.</span></span> <span data-ttu-id="dc0e7-1657">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1658">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1659">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1660">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1661">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1662">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1663">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1664">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1665">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1666">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1667">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1668">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1668">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1669">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1670">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1671">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1672">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1673">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1674">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1675">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1676">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1677">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1678">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1679">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1680">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1681">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1682">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1683">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1684">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1685">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1686">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1687">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1688">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1689">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1690">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1691">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1692">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1693">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1694">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1695">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1696">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1696">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1697">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1698">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1699">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1700">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1701">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1702">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1703">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1704">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1705">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1706">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1707">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1708">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1709"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1710">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1711">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1712">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1712">Required.</span></span> <span data-ttu-id="dc0e7-1713">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1714">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1714">Required.</span></span> <span data-ttu-id="dc0e7-1715">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1716">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1716">Optional.</span></span> <span data-ttu-id="dc0e7-1717">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1718">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1719">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1720">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1721">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1722">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1723">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1724">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1725">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1726">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1727">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1728">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1728">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1729">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1730">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1731">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1732">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1733">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1734">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1735">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1736">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1737">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1738">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1739">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1740">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1741">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1742">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1743">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1744">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1745">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1746">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1747">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1748">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1749">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1750">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1751">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1752">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1753">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1754">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1755">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1756">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1756">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1757">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1758">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1759">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1760">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1761">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1762">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1763">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1764">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1765">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1766">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1767">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1768">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1769"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1770">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1771">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1772">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1772">Required.</span></span> <span data-ttu-id="dc0e7-1773">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1774">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1774">Required.</span></span> <span data-ttu-id="dc0e7-1775">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1776">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1776">Optional.</span></span> <span data-ttu-id="dc0e7-1777">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1778">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1779">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1780">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1781">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1782">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1783">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1784">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1785">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1786">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1787">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1788">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1788">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1789">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1790">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1791">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1792">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1793">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1794">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1795">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1796">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1797">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1798">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1799">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1800">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1801">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1802">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1803">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1804">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1805">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1806">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1807">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1808">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1809">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1810">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1811">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1812">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1813">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1814">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1815">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1816">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1816">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1817">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1818">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1819">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1820">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1821">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1822">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1823">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1824">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1825">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1826">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1827">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1828">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1829"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1830">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1831">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, RecordNumber As Object)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FilePut(System::Object ^ FileNumber, System::Object ^ Value, System::Object ^ RecordNumber);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1832">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1832">Required.</span></span> <span data-ttu-id="dc0e7-1833">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1834">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1834">Required.</span></span> <span data-ttu-id="dc0e7-1835">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1836">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1836">Optional.</span></span> <span data-ttu-id="dc0e7-1837">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1838">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1839">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1840">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1841">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1842">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1843">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1844">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1845">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1846">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1847">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1848">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1848">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1849">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1850">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1851">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1852">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1853">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1854">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1855">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1856">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1857">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1858">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1859">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1860">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1861">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1862">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1863">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1864">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1865">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1866">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1867">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1868">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1869">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1870">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1871">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1872">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1873">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1874">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1875">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1876">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1876">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1877">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1878">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1879">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1880">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1881">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1882">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1883">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1884">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1885">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1886">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1887">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1888">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1889"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1890">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1891">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1892">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1892">Required.</span></span> <span data-ttu-id="dc0e7-1893">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1894">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1894">Required.</span></span> <span data-ttu-id="dc0e7-1895">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1896">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1896">Optional.</span></span> <span data-ttu-id="dc0e7-1897">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="dc0e7-1898">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1898">Optional.</span></span> <span data-ttu-id="dc0e7-1899">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1899">Applies only when writing a string.</span></span> <span data-ttu-id="dc0e7-1900">指定是否将字符串的双字节字符串长度说明符写入文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="dc0e7-1901">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1902">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1903">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1904">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1905">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1906">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1907">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1908">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1909">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1910">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1911">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1912">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1912">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1913">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1914">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1915">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1916">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1917">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1918">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1919">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1920">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1921">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1922">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1923">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1924">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1925">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1926">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1927">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1928">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1929">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1930">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1931">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1932">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-1933">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-1934">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-1935">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-1936">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1937">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-1938">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-1939">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-1940">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1940">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-1941">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-1942">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-1943">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-1944">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-1945">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-1946">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-1947">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-1948">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-1949">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-1950">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-1951">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-1952">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-1953"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-1954">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-1955">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-1956">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1956">Required.</span></span> <span data-ttu-id="dc0e7-1957">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-1958">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1958">Required.</span></span> <span data-ttu-id="dc0e7-1959">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-1960">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1960">Optional.</span></span> <span data-ttu-id="dc0e7-1961">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="dc0e7-1962">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1962">Optional.</span></span> <span data-ttu-id="dc0e7-1963">仅当写入数组时使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1963">Applies only when writing an array.</span></span> <span data-ttu-id="dc0e7-1964">指定是否将数组视为动态数组，以及是否写入用于描述字符串长度的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="dc0e7-1965">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1965">Optional.</span></span> <span data-ttu-id="dc0e7-1966">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1966">Applies only when writing a string.</span></span> <span data-ttu-id="dc0e7-1967">指定是否将字符串的双字节字符串长度说明符写入文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="dc0e7-1968">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="dc0e7-1969">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="dc0e7-1970">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="dc0e7-1971">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-1972">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-1973">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="dc0e7-1974">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-1975">如果省略，则写入最后一个 `RecordNumber` `FileGet` 或 `FilePut` 函数后面或最后一个函数指向的下一个记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="dc0e7-1976">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-1977">`FilePut` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-1978">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePut` ，则必须使用来执行相同操作 `FileGet` ，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-1979">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1979">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-1980">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-1981">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePut` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-1982">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-1983">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-1984">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-1985">如果写入的变量是字符串，则 `FilePut` 写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="dc0e7-1986">因此，函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="dc0e7-1987">如果写入的变量是包含数值类型的对象，则会 `FilePut` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-1988">例如，在编写包含整数的对象时，将 `FilePut` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-1989">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-1990">如果要写入的变量是包含字符串的对象，则 `FilePut` 写入一个两个字节说明符，该说明符标识 `VarType(8)` 对象的，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-1991">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-1992">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-1993">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="dc0e7-1994">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="dc0e7-1995">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="dc0e7-1996">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="dc0e7-1997">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="dc0e7-1998">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-1999">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="dc0e7-2000">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-2001">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="dc0e7-2002">如果写入的变量是任何其他类型的变量 (不是可变长度字符串或对象) ，则 `FilePut` 只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="dc0e7-2003">函数中子句指定的记录长度 `RecordLength` `FileOpen` 必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="dc0e7-2004">`FilePut` 编写结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="dc0e7-2005">`VBFixedString`特性可应用到结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dc0e7-2006">写入磁盘时，具有超过特性指定的字节数的字符串字段 `VBFixedString` 将被截断。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-2007">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2007">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-2008">对于以模式打开的文件 `Binary` ，大部分 `Random` 模式规则均适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="dc0e7-2009">在模式下打开的文件的以下规则 `Binary` 不同于模式的规则 `Random` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="dc0e7-2010">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-2011">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="dc0e7-2012">对于结构中除数组以外的任何数组， `FilePut` 只写入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="dc0e7-2013">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-2014">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="dc0e7-2015">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="dc0e7-2016">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="dc0e7-2017">使用函数写入文件 `FilePut` 需要 `Write` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2018">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="dc0e7-2019">将结构的五个记录 `Person` 写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-2020"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2021">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-2022">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2023">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2023">Required.</span></span> <span data-ttu-id="dc0e7-2024">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2025">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2025">Required.</span></span> <span data-ttu-id="dc0e7-2026">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="dc0e7-2027">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2027">Optional.</span></span> <span data-ttu-id="dc0e7-2028">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2029">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="dc0e7-2030">相比 <see langword="FilePutObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="dc0e7-2031">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2032">`FilePutObject` `FilePut` 如果 `Object` 传递类型而不是另一种类型（如、、等），则使用函数而不是来避免编译时出现歧义 `Integer` `Long` `Short` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="dc0e7-2033">`FilePutObject` 写入和读取描述对象的描述符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="dc0e7-2034">如果打算写出 `Variant` 类型， `FilePutObject` 则是必需的。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="dc0e7-2035">当不确定时，如果使用第二个参数的对象，我们建议始终使用 `FilePutObject` 和 `FileGetObject` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="dc0e7-2036">`FilePutObject` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-2037">通常使用 `FileGetObject` 从文件中读取使用 `FilePutObject` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="dc0e7-2038">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="dc0e7-2039">如果省略，则在 `RecordNumber` `FilePutObject` 最后一个 `FileGetObject` 或 `FilePutObject` 函数 (或最后一个函数) 指向的记录或字节后写入下一条记录或字节 `Seek` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="dc0e7-2040">`StringIsFixedLength`参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="dc0e7-2041">`FilePutObject` 当参数为时，不写入长度说明符 `True` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="dc0e7-2042">如果将 `StringIsFixedLength`  =  `True` 与结合使用 `FilePutObject` ，则必须使用来执行相同操作 `FileGetObject` ，并且还必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="dc0e7-2043">随机模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2043">Random Mode</span></span>  
 <span data-ttu-id="dc0e7-2044">对于以模式打开的文件 `Random` ，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="dc0e7-2045">如果写入的数据的长度小于函数的子句中指定的长度，则 `RecordLength` `FileOpen` `FilePutObject` 写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="dc0e7-2046">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="dc0e7-2047">由于不能准确确定填充数据量，因此最好将记录长度与所写入数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="dc0e7-2048">如果写入的数据的长度大于函数的子句中指定的长度，则 `RecordLength` `FileOpen` 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="dc0e7-2049">如果写入的变量是包含数值类型的对象，则会 `FilePutObject` 写入两个字节，用于标识对象的， `VarType` 然后写入变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="dc0e7-2050">例如，在编写包含整数的对象时，将 `FilePutObject` 写入六个字节：两个字节，用于将对象标识为 `VarType(3)` (`Integer`) 和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="dc0e7-2051">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为两个字节，大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="dc0e7-2052">如果写入的变量是包含字符串的对象，则 `FilePutObject` 写入一个双字节说明符，该说明符标识 `VarType(8)` 对象的，两个字节的说明符指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="dc0e7-2053">函数中参数指定的记录长度 `RecordLength` `FileOpen` 必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="dc0e7-2054">如果要在不包含说明符的情况下放置字符串，则应将传递 `True` 给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="dc0e7-2055">如果写入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="dc0e7-2056">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="dc0e7-2057">其长度等于2再加上维度数的8倍： (2 + 8 \* NumberOfDimensions) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="dc0e7-2058">二进制模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2058">Binary Mode</span></span>  
 <span data-ttu-id="dc0e7-2059">对于以模式打开的文件 `Binary` ，所有 `Random` 模式规则均适用，但以下情况除外：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="dc0e7-2060">`RecordLength`函数中的子句无效 `FileOpen` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="dc0e7-2061">`FilePutObject` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2062">此示例使用 `FilePutObject` 函数将字符串写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-2063">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2064">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2064">Required.</span></span> <span data-ttu-id="dc0e7-2065">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="dc0e7-2066">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2066">Required.</span></span> <span data-ttu-id="dc0e7-2067">0 到 255（包括 0 和 255）范围内的数值表达式，它表示在开始新一行前每一行中所显示的字符数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="dc0e7-2068">如果 <paramref name="RecordWidth" /> 等于 0，则行的长度没有限制。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="dc0e7-2069"><paramref name="RecordWidth" /> 的默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2070">为用 <see langword="FileOpen" /> 函数打开的文件分配输出行宽。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc0e7-2071">此示例使用 `FileWidth` 函数设置文件的输出行宽度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2072">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2073">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FreeFile() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc0e7-2074">返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2075">一个整数值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2076">使用 `FreeFile` 可提供尚未使用的文件号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2077">此示例使用 `FreeFile` 函数返回下一个可用的文件号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="dc0e7-2078">为循环内的输出打开5个文件，并将一些示例数据写入每个文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2079">正在使用的文件数超过 255。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-2080">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="dc0e7-2081">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2081">Required.</span></span> <span data-ttu-id="dc0e7-2082">指定一个文件名、目录名或文件夹名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="dc0e7-2083"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2084">返回一个表示文件、目录或文件夹的特性的 <see langword="FileAttribute" /> 值。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="dc0e7-2085">相比 <see langword="FileAttribute" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="dc0e7-2086">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2087">枚举值的按位组合。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2087">A bitwise combination of the enumeration values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2088">若要确定设置了哪些特性，请使用 `And` 运算符来执行函数返回的值的按位比较 `GetAttr` 以及所需的单个文件特性的值。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2088">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="dc0e7-2089">如果结果不为零，则为命名文件设置该属性。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2089">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="dc0e7-2090">例如， `And` 如果未设置该属性，则以下表达式的返回值为零 `Archive` ：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2090">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="dc0e7-2091">如果设置了属性，则返回一个非零值 `Archive` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2091">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2092">此示例使用 `GetAttr` 函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2092">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2093"><paramref name="Pathname" /> 无效或包含通配符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2093"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-2094">目标文件不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2094">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/and-operator"><span data-ttu-id="dc0e7-2095">And 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2095">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2096">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2096">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-2097">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2097">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2098">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2098">Required.</span></span> <span data-ttu-id="dc0e7-2099">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2099">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2100">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2100">Required.</span></span> <span data-ttu-id="dc0e7-2101">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2101">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2102">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2102">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2103">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2103">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2104">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2104">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2105">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2105">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2106">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2106">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2107">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2107">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2108">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2108">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2109">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2109">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2110">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2110">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2111">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2111">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2112">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2112">Data</span></span>|<span data-ttu-id="dc0e7-2113">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2113">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2114">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2114">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2115">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2115">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2116">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2116">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2117">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2117">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2118">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2118">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2119">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2119">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2120">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2120">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2121">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2121">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2122">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2122">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2123">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2123">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2124">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2124">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2125">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2125">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2126">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2126">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2127">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2127">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2128">此示例假定 `TestFile` 是一个文件，它使用函数向其写入了一些数据行 `Write` ，每行包含一个引号中的字符串和一个逗号分隔的数字，例如： ( "Hello"、234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2128">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2129">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2129">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2130">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2130">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2131">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2131">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2132">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2132">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * byte -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2133">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2133">Required.</span></span> <span data-ttu-id="dc0e7-2134">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2134">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2135">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2135">Required.</span></span> <span data-ttu-id="dc0e7-2136">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2136">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2137">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2137">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2138">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2138">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2139">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2139">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2140">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2140">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2141">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2141">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2142">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2142">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2143">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2143">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2144">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2144">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2145">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2145">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2146">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2146">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2147">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2147">Data</span></span>|<span data-ttu-id="dc0e7-2148">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2148">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2149">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2149">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2150">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2150">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2151">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2151">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2152">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2152">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2153">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2153">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2154">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2154">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2155">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2155">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2156">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2156">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2157">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2157">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2158">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2158">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2159">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2159">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2160">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2160">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2161">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2161">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2162">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2162">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2163">此示例假定 `TestFile` 是一个文件，它使用函数向其写入了一些数据行 `Write` ，每行包含一个引号中的字符串和一个逗号分隔的数字，例如： ( "Hello"、234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2163">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2164">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2164">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2165">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2165">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2166">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2166">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2167">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2167">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2168">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2168">Required.</span></span> <span data-ttu-id="dc0e7-2169">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2169">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2170">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2170">Required.</span></span> <span data-ttu-id="dc0e7-2171">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2171">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2172">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2172">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2173">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2173">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2174">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2174">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2175">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2175">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2176">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2176">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2177">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2177">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2178">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2178">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2179">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2179">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2180">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2180">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2181">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2181">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2182">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2182">Data</span></span>|<span data-ttu-id="dc0e7-2183">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2183">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2184">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2184">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2185">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2185">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2186">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2186">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2187">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2187">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2188">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2188">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2189">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2189">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2190">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2190">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2191">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2191">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2192">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2192">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2193">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2193">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2194">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2194">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2195">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2195">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2196">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2196">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2197">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2197">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2198">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2198">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2199">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2199">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2200">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2200">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2201">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2201">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2202">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2202">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * DateTime -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2203">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2203">Required.</span></span> <span data-ttu-id="dc0e7-2204">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2204">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2205">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2205">Required.</span></span> <span data-ttu-id="dc0e7-2206">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2206">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2207">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2207">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2208">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2208">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2209">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2209">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2210">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2210">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2211">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2211">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2212">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2212">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2213">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2213">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2214">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2214">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2215">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2215">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2216">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2216">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2217">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2217">Data</span></span>|<span data-ttu-id="dc0e7-2218">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2218">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2219">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2219">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2220">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2220">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2221">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2221">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2222">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2222">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2223">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2223">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2224">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2224">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2225">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2225">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2226">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2226">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2227">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2227">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2228">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2228">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2229">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2229">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2230">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2230">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2231">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2231">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2232">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2232">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2233">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2233">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2234">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2234">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2235">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2235">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2236">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2236">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2237">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2237">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * decimal -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2238">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2238">Required.</span></span> <span data-ttu-id="dc0e7-2239">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2239">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2240">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2240">Required.</span></span> <span data-ttu-id="dc0e7-2241">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2241">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2242">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2242">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2243">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2243">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2244">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2244">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2245">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2245">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2246">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2246">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2247">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2247">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2248">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2248">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2249">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2249">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2250">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2250">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2251">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2251">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2252">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2252">Data</span></span>|<span data-ttu-id="dc0e7-2253">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2253">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2254">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2254">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2255">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2255">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2256">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2256">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2257">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2257">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2258">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2258">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2259">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2259">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2260">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2260">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2261">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2261">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2262">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2262">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2263">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2263">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2264">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2264">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2265">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2265">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2266">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2266">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2267">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2267">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2268">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2268">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2269">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2269">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2270">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2270">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2271">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2271">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2272">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2272">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * double -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2273">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2273">Required.</span></span> <span data-ttu-id="dc0e7-2274">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2274">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2275">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2275">Required.</span></span> <span data-ttu-id="dc0e7-2276">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2276">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2277">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2277">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2278">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2278">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2279">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2279">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2280">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2280">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2281">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2281">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2282">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2282">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2283">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2283">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2284">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2284">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2285">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2285">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2286">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2286">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2287">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2287">Data</span></span>|<span data-ttu-id="dc0e7-2288">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2288">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2289">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2289">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2290">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2290">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2291">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2291">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2292">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2292">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2293">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2293">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2294">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2294">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2295">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2295">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2296">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2296">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2297">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2297">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2298">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2298">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2299">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2299">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2300">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2300">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2301">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2301">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2302">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2302">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2303">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2303">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2304">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2304">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2305">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2305">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2306">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2306">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2307">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2307">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int16 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2308">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2308">Required.</span></span> <span data-ttu-id="dc0e7-2309">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2309">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2310">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2310">Required.</span></span> <span data-ttu-id="dc0e7-2311">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2311">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2312">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2312">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2313">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2313">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2314">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2314">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2315">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2315">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2316">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2316">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2317">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2317">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2318">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2318">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2319">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2319">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2320">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2320">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2321">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2321">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2322">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2322">Data</span></span>|<span data-ttu-id="dc0e7-2323">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2323">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2324">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2324">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2325">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2325">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2326">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2326">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2327">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2327">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2328">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2328">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2329">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2329">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2330">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2330">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2331">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2331">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2332">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2332">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2333">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2333">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2334">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2334">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2335">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2335">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2336">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2336">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2337">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2337">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2338">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2338">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2339">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2339">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2340">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2340">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2341">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2341">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2342">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2342">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2343">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2343">Required.</span></span> <span data-ttu-id="dc0e7-2344">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2344">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2345">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2345">Required.</span></span> <span data-ttu-id="dc0e7-2346">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2346">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2347">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2347">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2348">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2348">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2349">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2349">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2350">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2350">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2351">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2351">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2352">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2352">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2353">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2353">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2354">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2354">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2355">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2355">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2356">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2356">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2357">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2357">Data</span></span>|<span data-ttu-id="dc0e7-2358">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2358">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2359">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2359">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2360">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2360">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2361">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2361">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2362">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2362">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2363">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2363">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2364">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2364">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2365">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2365">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2366">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2366">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2367">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2367">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2368">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2368">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2369">例如，在德语版本中，如果输入14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2369">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2370">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2370">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2371">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2371">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2372">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2372">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2373">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2373">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2374">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2374">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2375">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2375">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2376">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2376">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2377">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2377">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2378">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2378">Required.</span></span> <span data-ttu-id="dc0e7-2379">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2379">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2380">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2380">Required.</span></span> <span data-ttu-id="dc0e7-2381">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2381">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2382">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2382">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2383">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2383">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2384">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2384">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2385">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2385">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2386">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2386">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2387">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2387">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2388">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2388">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2389">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2389">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2390">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2390">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2391">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2391">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2392">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2392">Data</span></span>|<span data-ttu-id="dc0e7-2393">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2393">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2394">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2394">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2395">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2395">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2396">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2396">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2397">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2397">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2398">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2398">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2399">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2399">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2400">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2400">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2401">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2401">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2402">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2402">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2403">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2403">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2404">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2404">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2405">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2405">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2406">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2406">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2407">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2407">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2408">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2408">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2409">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2409">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2410">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2410">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2411">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2411">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2412">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2412">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2413">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2413">Required.</span></span> <span data-ttu-id="dc0e7-2414">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2414">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2415">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2415">Required.</span></span> <span data-ttu-id="dc0e7-2416">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2416">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2417">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2417">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2418">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2418">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2419">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2419">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2420">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2420">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2421">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2421">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2422">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2422">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2423">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2423">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2424">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2424">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2425">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2425">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2426">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2426">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2427">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2427">Data</span></span>|<span data-ttu-id="dc0e7-2428">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2428">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2429">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2429">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2430">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2430">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2431">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2431">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2432">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2432">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2433">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2433">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2434">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2434">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2435">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2435">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2436">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2436">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2437">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2437">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2438">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2438">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2439">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2439">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2440">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2440">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2441">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2441">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2442">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2442">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2443">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2443">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2444">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2444">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2445">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2445">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2446">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2446">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2447">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2447">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * single -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2448">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2448">Required.</span></span> <span data-ttu-id="dc0e7-2449">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2449">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2450">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2450">Required.</span></span> <span data-ttu-id="dc0e7-2451">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2451">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2452">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2452">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2453">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2453">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2454">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2454">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2455">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2455">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2456">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2456">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2457">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2457">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2458">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2458">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2459">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2459">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2460">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2460">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2461">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2461">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2462">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2462">Data</span></span>|<span data-ttu-id="dc0e7-2463">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2463">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2464">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2464">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2465">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2465">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2466">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2466">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2467">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2467">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2468">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2468">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2469">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2469">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2470">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2470">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2471">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2471">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2472">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2472">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2473">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2473">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2474">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2474">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2475">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2475">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2476">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2476">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2477">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2477">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2478">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2478">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2479">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2479">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2480">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2480">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2481">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2481">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2482">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2482">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2483">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2483">Required.</span></span> <span data-ttu-id="dc0e7-2484">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2484">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="dc0e7-2485">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2485">Required.</span></span> <span data-ttu-id="dc0e7-2486">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2486">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2487">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2487">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2488">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2488">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2489">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2489">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2490">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2490">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2491">使用读取的数据 `Input` 通常通过使用写入到文件 `Write` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2491">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="dc0e7-2492">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2492">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2493">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2493">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2494">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2494">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2495">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2495">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="dc0e7-2496">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2496">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="dc0e7-2497">数据</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2497">Data</span></span>|<span data-ttu-id="dc0e7-2498">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2498">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="dc0e7-2499">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2499">Delimiting comma or blank line</span></span>|<span data-ttu-id="dc0e7-2500">空</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2500">Empty</span></span>|  
|<span data-ttu-id="dc0e7-2501">#NULL#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2501">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="dc0e7-2502">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2502">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="dc0e7-2503">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2503">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="dc0e7-2504">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2504">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="dc0e7-2505">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2505">#ERROR `errornumber`#</span></span>|<span data-ttu-id="dc0e7-2506">`errornumber` (变量是标记为错误的对象) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2506">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="dc0e7-2507">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2507">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2508">`Input`函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2508">The `Input` function is not localized.</span></span> <span data-ttu-id="dc0e7-2509">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2509">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2510">使用函数从文件读取 `Input` 需要 `Read` 从 `FileIOPermissionAccess` 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2510">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2511">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2511">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2512">此示例使用 `Input` 函数将文件中的数据读入两个变量中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2512">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="dc0e7-2513">此示例假定 `TestFile` 是一个文件，它使用函数向其中写入多行数据 `Write` ，每行包含一个字符串，引号和一个用逗号分隔的数字，例如： ( "Hello"，234) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2513">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2514">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2514">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2515">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2515">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2516">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2516">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2517">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2517">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2518">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2518">Required.</span></span> <span data-ttu-id="dc0e7-2519">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2519">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="dc0e7-2520">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2520">Required.</span></span> <span data-ttu-id="dc0e7-2521">用于指定要读取的字符数的任何有效数值表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2521">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2522">返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2522">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="dc0e7-2523">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2523">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="dc0e7-2524">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2524">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2525">一个字符串，该字符串包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2525">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="dc0e7-2526">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2526">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2527">`InputString`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2527">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2528">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2528">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2529">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2529">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2530">使用函数读取的数据 `InputString` 通常使用或写入文件 `Print` `FilePut` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2530">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="dc0e7-2531">仅将此函数用于以或模式打开的文件 `Input` `Binary` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2531">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="dc0e7-2532">与 `Input` 函数不同， `InputString` 函数返回它读取的所有字符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2532">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="dc0e7-2533">这包括逗号、回车符、换行符、引号和前导空格。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2533">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="dc0e7-2534">使用打开的文件进行 `Binary` 访问时，在返回之前，尝试使用函数读取文件将 `InputString` `EOF` `True` 生成错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2534">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="dc0e7-2535">使用 `LOF` 和 `Loc` 函数（而不是 `EOF` ）通过使用读取二进制文件时使用 `InputString` ，或使用 `FileGet` 函数时使用 `EOF` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2535">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2536">在从文件中读取时，不要根据文件扩展名对文件内容做出安全决策。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2536">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2537">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2537">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2538">此示例使用 `InputString` 函数从文件中一次读取一个字符，然后将其打印到窗口中 `Output` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2538">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="dc0e7-2539">此示例假设 `MyFile` 是包含多行示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2539">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2540"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2540"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-2541"><paramref name="CharCount" />&lt; 0 或 &gt; 214。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2541"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2542">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2542">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2543">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2543">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2544">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2544">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Kill(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="dc0e7-2545">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2545">Required.</span></span> <span data-ttu-id="dc0e7-2546">指定要删除的一个或多个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2546">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="dc0e7-2547"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2547"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2548">从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2548">Deletes files from a disk.</span></span> <span data-ttu-id="dc0e7-2549">相比 <see langword="Kill" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2549">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="dc0e7-2550">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2550">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2551">`Kill` 支持使用多字符 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2551">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="dc0e7-2552">**安全说明** 若要执行，该 `Kill` 函数需要 `Read` 和 `PathDiscovery` 的标志才能 <xref:System.Security.Permissions.FileIOPermission> 向执行代码授予。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2552">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="dc0e7-2553">有关详细信息，请参阅 <xref:System.Security.SecurityException> [代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2553">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2554">此示例使用 `Kill` 函数从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2554">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2555">目标文件打开。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2555">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-2556">目标文件未找到。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2556">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="dc0e7-2557">权限被拒绝。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2557">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2558">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2558">Required.</span></span> <span data-ttu-id="dc0e7-2559">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2559">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2560">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2560">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2561">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2561">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2562">`LineInput`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2562">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2563">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2563">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2564">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2564">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2565">使用读取的数据 `LineInput` 通常通过使用写入到文件 `Print` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2565">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2566">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2566">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="dc0e7-2567">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2567">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="dc0e7-2568">`LineInput`函数每次从一个文件中读取一个字符，直到它遇到 `Chr(13)`) 或回车符/换行符 () 序列的 (回车符 `Chr(13) + Chr(10)` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2568">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="dc0e7-2569">将跳过回车符/换行符，而不是追加到字符串。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2569">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2570">使用函数从文件读取 `LineInput` 需要 `Read` 从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2570">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2571">此示例使用 `LineInput` 函数从顺序文件中读取一行，并将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2571">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="dc0e7-2572">此示例假设 `TestFile` 是包含多行示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2572">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="dc0e7-2573">到达文件末尾。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2573">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2574"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2574"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2575">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2575">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2576">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2576">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2577">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2577">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2578">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2578">Required.</span></span> <span data-ttu-id="dc0e7-2579">任何有效的 <see langword="Integer" /> 文件号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2579">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2580">返回指定打开文件中当前读/写位置的值。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2580">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2581">打开文件中当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2581">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2582">`Loc`函数从零开始; 使用它检索文件中的第一个字节时，将返回0。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2582">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="dc0e7-2583">`Loc`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2583">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2584">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2584">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2585">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2585">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2586">下面说明了每个文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2586">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="dc0e7-2587">模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2587">Mode</span></span>|<span data-ttu-id="dc0e7-2588">返回值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2588">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="dc0e7-2589">读取或写入文件的最后一条记录的编号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2589">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="dc0e7-2590">文件中的当前字节位置除以128。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2590">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="dc0e7-2591">但是，不 `Loc` 使用也不需要为顺序文件返回的信息。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2591">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="dc0e7-2592">上次读取或写入字节的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2592">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2593">此示例使用 `Loc` 函数返回打开的文件中的当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2593">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="dc0e7-2594">此示例假设 `MyFile` 是包含多行示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2594">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2595">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2595">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-2596">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2596">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2597">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2597">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2598">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2598">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2599">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2599">Required.</span></span> <span data-ttu-id="dc0e7-2600">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2600">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2601">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2601">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2602">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2603">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2604">`Lock`和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2604">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="dc0e7-2605">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2605">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="dc0e7-2606">和的参数 `Lock` `Unlock` 必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2606">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="dc0e7-2607">如果 `Record` `FromRecord` 未提供、或且 `ToRecord` 未提供，则将为整个文件锁定。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2607">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="dc0e7-2608">如果 `Record` 单独指定，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2608">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="dc0e7-2609">如果文件已打开以进行顺序输入或输出，则 `Lock` `Unlock` 会影响整个文件，而不考虑和指定的范围 `FromRecord` `ToRecord` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2609">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2610">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2610">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="dc0e7-2611">此示例假定 `People.txt` 是包含结构的记录的文件 `Person` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2611">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2612">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2612">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2613">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2613">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2614">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2614">Required.</span></span> <span data-ttu-id="dc0e7-2615">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2615">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="dc0e7-2616">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2616">Optional.</span></span> <span data-ttu-id="dc0e7-2617">唯一要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2617">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2618">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2618">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2619">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2620">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2621">`Lock`和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2621">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="dc0e7-2622">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2622">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="dc0e7-2623">和的参数 `Lock` `Unlock` 必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2623">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="dc0e7-2624">如果 `Record` `FromRecord` 未提供、或且 `ToRecord` 未提供，则将为整个文件锁定。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2624">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="dc0e7-2625">如果 `Record` 单独指定，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2625">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="dc0e7-2626">如果文件已打开以进行顺序输入或输出，则 `Lock` `Unlock` 会影响整个文件，而不考虑和指定的范围 `FromRecord` `ToRecord` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2626">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2627">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2627">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="dc0e7-2628">此示例假定 `People.txt` 是包含结构的记录的文件 `Person` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2628">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2629">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2629">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2630">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2630">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2631">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2631">Required.</span></span> <span data-ttu-id="dc0e7-2632">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2632">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="dc0e7-2633">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2633">Optional.</span></span> <span data-ttu-id="dc0e7-2634">第一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2634">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="dc0e7-2635">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2635">Optional.</span></span> <span data-ttu-id="dc0e7-2636">最后一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2636">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2637">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2637">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2638">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2638">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2639">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2639">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2640">`Lock`和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2640">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="dc0e7-2641">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2641">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="dc0e7-2642">和的参数 `Lock` `Unlock` 必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2642">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="dc0e7-2643">如果 `Record` `FromRecord` 未提供、或且 `ToRecord` 未提供，则将为整个文件锁定。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2643">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="dc0e7-2644">如果 `Record` 单独指定，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2644">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="dc0e7-2645">如果文件已打开以进行顺序输入或输出，则 `Lock` `Unlock` 会影响整个文件，而不考虑和指定的范围 `FromRecord` `ToRecord` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2645">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2646">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2646">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="dc0e7-2647">此示例假定 `People.txt` 是包含结构的记录的文件 `Person` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2647">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2648">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2648">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2649">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2649">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2650">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2650">Required.</span></span> <span data-ttu-id="dc0e7-2651">一个包含有效文件号的整数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2651">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2652">返回使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2652">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-2653">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="dc0e7-2654">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2655">使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2655">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-2656">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2657">使用 `FileLen` 函数可获取未打开的文件的长度。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2657">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2658">此示例使用 `LOF` 函数来确定打开的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2658">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="dc0e7-2659">此示例假设 `TestFile` 是包含示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2659">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2660">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-2661">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2661">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-2662">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2662">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MkDir(string Path) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="dc0e7-2663">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2663">Required.</span></span> <span data-ttu-id="dc0e7-2664">标识要创建的目录的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2664">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="dc0e7-2665"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2665">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="dc0e7-2666">如果未指定驱动器，则 <see langword="MkDir" /> 在当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2666">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2667">新建目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2667">Creates a new directory.</span></span> <span data-ttu-id="dc0e7-2668">相比 <see langword="MkDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="dc0e7-2669">有关详细信息，请参阅 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2669">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2670">此函数创建一个新目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2670">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2671">此示例使用 `MkDir` 函数来创建目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2671">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="dc0e7-2672">如果未指定驱动器，则将在当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2672">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-2673"><paramref name="Path" /> 未指定或为空。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2673"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="dc0e7-2674">权限被拒绝。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2674">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2675">目录已存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2675">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory"><span data-ttu-id="dc0e7-2676">如何：在 Visual Basic 中创建目录</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2676">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2677">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2677">Required.</span></span> <span data-ttu-id="dc0e7-2678">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2678">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="dc0e7-2679">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2679">Optional.</span></span> <span data-ttu-id="dc0e7-2680">要写入文件的零个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2680">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="dc0e7-2681"><paramref name="Output" /> 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2681">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="dc0e7-2682"><see langword="T:System.IO.IOException" />：文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2682"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="dc0e7-2683"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2684">将已设置显示格式的数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2684">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2685">`Print`提供和 `PrintLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2685">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2686">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2686">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2687">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2687">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2688">`Print` 不在行尾包含换行符;不过， `PrintLine` 确实包含换行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2688">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="dc0e7-2689">`Print`通常使用或从文件中读取使用编写的数据 `LineInput` `Input` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2689">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="dc0e7-2690">如果省略 `Output` 了 `PrintLine` ，则会在文件中打印空白行; 对于 `Print` ，不会输出任何内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2690">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="dc0e7-2691">用逗号分隔的多个表达式将在制表符边界上对齐，但混合使用逗号， `TAB` 可能导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2691">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="dc0e7-2692">对于 `Boolean` 数据，可以是 `True` 或 `False` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2692">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="dc0e7-2693">`True` `False` 不会转换和关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2693">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="dc0e7-2694">使用系统识别的标准短日期格式将日期数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2694">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="dc0e7-2695">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2695">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="dc0e7-2696">如果数据为空，则不向文件写入任何内容 `Output` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2696">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="dc0e7-2697">但是，如果 `Output` 列表数据为 `DBNull` ， `Null` 将写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2697">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="dc0e7-2698">对于 `Error` 数据，输出显示为 `Error errorcode` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2698">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="dc0e7-2699">`Error`无论区域设置如何，都不会转换关键字。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2699">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="dc0e7-2700">使用写入到文件中的所有数据 `Print` 都是可以识别的，也就是说，使用适当的小数点分隔符正确设置数据的格式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2700">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="dc0e7-2701">如果用户希望输出由多个区域设置使用的数据，则 `Write` 应使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2701">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="dc0e7-2702">使用 `Print` 或函数写入文件 `PrintLine` 需要 `Write` 枚举中的访问权限 `FileIOPermissionAccess` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2702">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2703">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2703">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2704">此示例使用 `Print` 和 `PrintLine` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2704">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2705">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2705">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2706">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2706">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2707">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2707">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2708">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2708">Required.</span></span> <span data-ttu-id="dc0e7-2709">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2709">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="dc0e7-2710">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2710">Optional.</span></span> <span data-ttu-id="dc0e7-2711">要写入文件的零个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2711">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="dc0e7-2712"><paramref name="Output" /> 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2712">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="dc0e7-2713"><see langword="T:System.IO.IOException" />：文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2713"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="dc0e7-2714"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2715">将已设置显示格式的数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2715">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2716">`Print`提供和 `PrintLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2716">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2717">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2717">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2718">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2718">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2719">`Print` 不在行尾包含换行符;不过， `PrintLine` 确实包含换行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2719">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="dc0e7-2720">`Print`通常使用或从文件中读取使用编写的数据 `LineInput` `Input` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2720">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="dc0e7-2721">如果省略 `Output` 了 `PrintLine` ，则会在文件中打印空白行; 对于 `Print` ，不会输出任何内容。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2721">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="dc0e7-2722">用逗号分隔的多个表达式将在制表符边界上对齐，但混合使用逗号， `TAB` 可能导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2722">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="dc0e7-2723">对于 `Boolean` 数据，可以是 `True` 或 `False` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2723">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="dc0e7-2724">`True` `False` 不会转换和关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2724">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="dc0e7-2725">使用系统识别的标准短日期格式将日期数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2725">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="dc0e7-2726">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2726">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="dc0e7-2727">如果数据为空，则不向文件写入任何内容 `Output` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2727">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="dc0e7-2728">但是，如果 `Output` 列表数据为 `DBNull` ， `Null` 将写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2728">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="dc0e7-2729">对于 `Error` 数据，输出显示为 `Error errorcode` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2729">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="dc0e7-2730">`Error`无论区域设置如何，都不会转换关键字。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2730">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="dc0e7-2731">使用写入到文件中的所有数据 `Print` 都是可以识别的，也就是说，使用适当的小数点分隔符正确设置数据的格式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2731">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="dc0e7-2732">如果用户希望输出由多个区域设置使用的数据，则 `Write` 应使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2732">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="dc0e7-2733">使用 `Print` 或函数写入文件 `PrintLine` 需要 `Write` 枚举中的访问权限 `FileIOPermissionAccess` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2733">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2734">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2734">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2735">此示例使用 `Print` 和 `PrintLine` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2735">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2736">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2736">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2737">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2737">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2738">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2738">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="dc0e7-2739">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2739">Required.</span></span> <span data-ttu-id="dc0e7-2740">指定现有文件名和位置的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2740">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="dc0e7-2741"><paramref name="OldPath" /> 可包含文件的目录和驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2741"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="dc0e7-2742">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2742">Required.</span></span> <span data-ttu-id="dc0e7-2743">指定新文件名和位置的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2743">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="dc0e7-2744"><paramref name="NewPath" /> 可包含目标位置的目录和驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2744"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="dc0e7-2745"><paramref name="NewPath" /> 指定的文件名不能是已存在的文件名。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2745">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2746">重命名磁盘文件或目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2746">Renames a disk file or directory.</span></span> <span data-ttu-id="dc0e7-2747">相比 <see langword="Rename" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2747">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="dc0e7-2748">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2748">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2749">`Rename`如果需要，函数将重命名文件并将其移动到不同的目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2749">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="dc0e7-2750">`Rename`函数可以跨驱动器移动文件，但它只能在 `NewPath` 和 `OldPath` 位于同一驱动器上时重命名现有的目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2750">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="dc0e7-2751">`Rename` 无法创建新的文件或目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2751">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="dc0e7-2752">`Rename`对打开的文件使用函数会产生错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2752">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="dc0e7-2753">在重命名之前，必须先关闭打开的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2753">You must close an open file before renaming it.</span></span> <span data-ttu-id="dc0e7-2754">`Rename` 参数不能包含多字符 ( \* ) 和单字符 (？ ) 通配符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2754">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc0e7-2755">当使用将 `Rename` 不受保护的位置中的文件复制到受保护的位置时，该文件将保留有限的权限。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2755">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="dc0e7-2756">请检查以确保未引入可能的安全风险。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2756">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2757">此示例使用 `Rename` 函数重命名文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2757">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="dc0e7-2758">出于本示例的目的，假定指定的目录已存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2758">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-2759">路径无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2759">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-2760"><paramref name="OldPath" /> 文件不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2760"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2761">无法重命名为不同的设备。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2761">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file"><span data-ttu-id="dc0e7-2762">如何：在 Visual Basic 中重命名文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2762">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reset() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc0e7-2763">关闭所有使用 <see langword="FileOpen" /> 函数打开的磁盘文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2763">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-2764">相比 <see langword="Reset" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2764">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="dc0e7-2765">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2765">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2766">`Reset`函数将关闭该函数打开的所有活动文件 `FileOpen` ，并且该函数与 `FileClose()` 不带任何参数的函数相同。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2766">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2767">此示例使用 `Reset` 函数关闭所有打开的文件，并将所有文件缓冲区的内容写入磁盘。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2767">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="dc0e7-2768">请注意，使用 `Object` 变量 `FileNumber` 作为字符串和数字。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2768">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/end-statement"><span data-ttu-id="dc0e7-2769">End 语句</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2769">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RmDir(string Path) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="dc0e7-2770">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2770">Required.</span></span> <span data-ttu-id="dc0e7-2771">标识要移除的目录或文件夹的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2771">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="dc0e7-2772"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2772"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="dc0e7-2773">如果未指定驱动器，则 <see langword="RmDir" /> 移除当前驱动器上的目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2773">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2774">移除现有目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2774">Removes an existing directory.</span></span> <span data-ttu-id="dc0e7-2775">相比 <see langword="RmDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="dc0e7-2776">有关详细信息，请参阅 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2776">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2777">如果尝试对 `RmDir` 包含文件的目录使用，则会出现错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2777">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="dc0e7-2778">在 `Kill` 尝试删除目录之前，请使用函数删除所有文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2778">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2779">此示例使用 `RmDir` 函数来删除现有目录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2779">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-2780"><paramref name="Path" /> 未指定或为空。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2780"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2781">目标目录包含文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2781">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="dc0e7-2782">目录不存在。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2782">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-2783">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2783">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-2784">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="dc0e7-2785">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2785">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2786">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2786">Required.</span></span> <span data-ttu-id="dc0e7-2787">一个包含有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2787">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2788">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2788">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-2789">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2789">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="dc0e7-2790">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2790">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2791">一个 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2791">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2792">`Seek` 返回一个介于1和2147483647之间的值 (等效于 2 ^ 31-1) （包括这两个值）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2792">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="dc0e7-2793">下面说明了每个文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2793">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="dc0e7-2794">模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2794">Mode</span></span>|<span data-ttu-id="dc0e7-2795">返回值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2795">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="dc0e7-2796">读取或写入的下一个记录的编号</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2796">Number of the next record read or written</span></span>|  
|<span data-ttu-id="dc0e7-2797">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2797">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="dc0e7-2798">发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2798">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="dc0e7-2799">文件中的第一个字节的位置为1，第二个字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2799">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2800">此示例使用 `Seek` 函数返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2800">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="dc0e7-2801">该示例假设 `TestFile` 是包含结构的记录的文件 `Record` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2801">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="dc0e7-2802">对于以模式打开的文件 `Random` ， `Seek` 返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2802">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="dc0e7-2803">对于以模式之外的模式打开的文件 `Random` ， `Seek` 返回发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2803">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="dc0e7-2804">假设 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2804">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="dc0e7-2805">此示例使用 `Seek` 函数来设置文件中下一次读取或写入的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2805">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="dc0e7-2806">对于以模式之外的模式打开的文件 `Random` ， `Seek` 将设置下一操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2806">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="dc0e7-2807">假设 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2807">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2808">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2808">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-2809">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2809">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-2810">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2810">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2811">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2811">Required.</span></span> <span data-ttu-id="dc0e7-2812">一个包含有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2812">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="dc0e7-2813">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2813">Required.</span></span> <span data-ttu-id="dc0e7-2814">一个 1 到 2,147,483,647 范围内（包括 1 和 2,147,483,647）的数字，用于指示下一个读取/写入操作应该发生的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2814">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2815">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2815">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="dc0e7-2816">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2816">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="dc0e7-2817">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2817">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2818">`Seek` 返回一个介于1和2147483647之间的值 (等效于 2 ^ 31-1) （包括这两个值）。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2818">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="dc0e7-2819">下面说明了每个文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2819">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="dc0e7-2820">模式</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2820">Mode</span></span>|<span data-ttu-id="dc0e7-2821">返回值</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2821">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="dc0e7-2822">读取或写入的下一个记录的编号</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2822">Number of the next record read or written</span></span>|  
|<span data-ttu-id="dc0e7-2823">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2823">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="dc0e7-2824">发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2824">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="dc0e7-2825">文件中的第一个字节的位置为1，第二个字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2825">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2826">此示例使用 `Seek` 函数返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2826">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="dc0e7-2827">该示例假设 `TestFile` 是包含结构的记录的文件 `Record` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2827">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="dc0e7-2828">对于以模式打开的文件 `Random` ， `Seek` 返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2828">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="dc0e7-2829">对于以模式之外的模式打开的文件 `Random` ， `Seek` 返回发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2829">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="dc0e7-2830">假设 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2830">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="dc0e7-2831">此示例使用 `Seek` 函数来设置文件中下一次读取或写入的位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2831">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="dc0e7-2832">对于以模式之外的模式打开的文件 `Random` ， `Seek` 将设置下一操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2832">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="dc0e7-2833">假设 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2833">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2834">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2834">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="dc0e7-2835">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2835">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="dc0e7-2836">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2836">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="dc0e7-2837">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2837">Required.</span></span> <span data-ttu-id="dc0e7-2838">指定一个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2838">A string expression that specifies a file name.</span></span> <span data-ttu-id="dc0e7-2839"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2839"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="dc0e7-2840">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2840">Required.</span></span> <span data-ttu-id="dc0e7-2841">常量或数值表达式，所有这些值一起指定文件特性。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2841">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2842">设置文件的特性信息。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2842">Sets attribute information for a file.</span></span> <span data-ttu-id="dc0e7-2843">相比 <see langword="SetAttr" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2843">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="dc0e7-2844">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2844">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2845">如果尝试设置打开的文件的属性，则会发生运行时错误。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2845">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="dc0e7-2846">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2846">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="dc0e7-2847">“值”</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2847">Value</span></span>|<span data-ttu-id="dc0e7-2848">返回的常量</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2848">Constant</span></span>|<span data-ttu-id="dc0e7-2849">描述</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2849">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="dc0e7-2850">正常 (默认) 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2850">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="dc0e7-2851">只读。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2851">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="dc0e7-2852">隐藏。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2852">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="dc0e7-2853">系统文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2853">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="dc0e7-2854">卷标</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2854">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="dc0e7-2855">目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2855">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="dc0e7-2856">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2856">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="dc0e7-2857">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2857">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2858">这些枚举是由 Visual Basic 语言指定的。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2858">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="dc0e7-2859">可以在代码中的任何位置使用这些名称，而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2859">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2860">此示例使用 `SetAttr` 函数为文件设置属性。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2860">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc0e7-2861"><paramref name="Attribute" /> 类型无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2861"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="dc0e7-2862">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2862">Required.</span></span> <span data-ttu-id="dc0e7-2863">在显示或输出列表中下一个表达式之前要插入的空格数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2863">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2864">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2864">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2865">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2865">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2866">如果 `Count` 小于输出行宽度，则下一个打印位置紧跟打印的空格数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2866">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="dc0e7-2867">如果 `Count` 大于输出行宽度，则 `SPC` 使用公式计算下一个打印位置：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2867">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="dc0e7-2868">`currentprintposition` (+ (`Count``Mod``width`) # A3</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2868">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="dc0e7-2869">例如，如果当前打印位置为24，则输出行宽度为80，并且您指定 `SPC(90)` ，下一次打印将从位置34开始 (当前打印位置 + 90/80) 的剩余部分。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2869">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="dc0e7-2870">如果当前打印位置与输出行宽度之间的差异小于 `Count` (或 `Count` `Mod` *width*) ，则 `SPC` 函数将跳到下一行的开头，并生成等于 `Count` - (*width*  -  *currentprintposition*) 的空格。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2870">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2871">请确保表格列宽度足以允许宽信。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2871">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2872">此示例使用 `SPC` 函数将输出定位于文件和 **输出** 窗口中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2872">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/mod-operator"><span data-ttu-id="dc0e7-2873">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2873">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-2874">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc0e7-2875">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2875">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2876">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2877">如果当前行上的当前打印位置大于 `Column` ，则 `TAB` 跳到 `Column` 下一个输出行的列值等于。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2877">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="dc0e7-2878">如果 `Column` 小于1，则 `TAB` 将打印位置移动到第1列。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2878">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="dc0e7-2879">如果大于 `Column` 输出行宽度，则 `TAB` 使用公式计算下一个打印位置：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2879">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="dc0e7-2880">列 Mod 宽度</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2880">Column Mod width</span></span>  
  
 <span data-ttu-id="dc0e7-2881">例如，如果 *width* 为80，并且您指定 `TAB(90)` 了，则下一次打印将从第10列开始 (90/80) 的剩余部分。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2881">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="dc0e7-2882">如果 `Column` 小于当前打印位置，则打印将从计算的打印位置的下一行开始。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2882">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="dc0e7-2883">如果计算出的打印位置大于当前打印位置，则打印在同一行的计算打印位置处开始打印。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2883">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="dc0e7-2884">输出行上最左侧的打印位置始终为1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2884">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="dc0e7-2885">使用 `Print` 或 `PrintLine` 函数打印到文件时，最右侧的打印位置是输出文件的当前宽度，可以使用函数进行设置 `FileWidth` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2885">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="dc0e7-2886">`TAB`函数还可用于 `WriteLine` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2886">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="dc0e7-2887">它不能与或一起使用 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2887">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2888">请确保表格列的宽度足以容纳宽信。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2888">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2889">此示例使用 `TAB` 函数将输出定位于文件和 **输出** 窗口中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2889">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/mod-operator"><span data-ttu-id="dc0e7-2890">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2890">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="dc0e7-2891">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2891">Optional.</span></span> <span data-ttu-id="dc0e7-2892">在显示或输出列表中下一个表达式之前要移动到的列号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2892">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="dc0e7-2893">如果省略它，则 <see langword="TAB" /> 将插入点移动到下一个打印区域的开始位置。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2893">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2894">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2894">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="dc0e7-2895">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2895">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2896">如果当前行上的当前打印位置大于 `Column` ，则 `TAB` 跳到 `Column` 下一个输出行的列值等于。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2896">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="dc0e7-2897">如果 `Column` 小于1，则 `TAB` 将打印位置移动到第1列。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2897">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="dc0e7-2898">如果 `Column` 大于输出行宽度，则 `TAB` 使用公式计算下一个打印位置：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2898">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="dc0e7-2899">列 Mod 宽度</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2899">Column Mod width</span></span>  
  
 <span data-ttu-id="dc0e7-2900">例如，如果 *width* 为80，并且您指定 `TAB(90)` 了，则下一次打印将从第10列开始 (90/80) 的剩余部分。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2900">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="dc0e7-2901">如果 `Column` 小于当前打印位置，则打印将从计算的打印位置的下一行开始。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2901">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="dc0e7-2902">如果计算出的打印位置大于当前打印位置，则打印在同一行的计算打印位置处开始打印。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2902">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="dc0e7-2903">输出行上最左侧的打印位置始终为1。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2903">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="dc0e7-2904">使用 `Print` 或 `PrintLine` 函数打印到文件时，最右侧的打印位置是输出文件的当前宽度，可以使用函数进行设置 `FileWidth` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2904">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="dc0e7-2905">`TAB`函数还可用于 `WriteLine` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2905">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="dc0e7-2906">它不能与或一起使用 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2906">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc0e7-2907">请确保表格列的宽度足以容纳宽信。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2907">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2908">此示例使用 `TAB` 函数将输出定位于文件和 **输出** 窗口中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2908">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/mod-operator"><span data-ttu-id="dc0e7-2909">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2909">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc0e7-2910">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2910">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2911">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2911">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2912">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2912">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2913">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2913">Required.</span></span> <span data-ttu-id="dc0e7-2914">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2914">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2915">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2915">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2916">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2916">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2917">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2917">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2918">`Lock`和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2918">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="dc0e7-2919">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2919">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="dc0e7-2920">和的参数 `Lock` `Unlock` 必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2920">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="dc0e7-2921">如果 `Record` `FromRecord` 未提供、或且 `ToRecord` 未提供，则将为整个文件锁定。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2921">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="dc0e7-2922">如果 `Record` 单独指定，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2922">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="dc0e7-2923">如果文件已打开以进行顺序输入或输出，则 `Lock` `Unlock` 会影响整个文件，而不考虑和指定的范围 `FromRecord` `ToRecord` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2923">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2924">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2924">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="dc0e7-2925">此示例假定 `People.txt` 是包含结构的记录的文件 `Person` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2925">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2926">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2926">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2927">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2927">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2928">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2928">Required.</span></span> <span data-ttu-id="dc0e7-2929">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2929">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="dc0e7-2930">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2930">Optional.</span></span> <span data-ttu-id="dc0e7-2931">唯一要锁定或取消锁定的记录号或字节数</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2931">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="dc0e7-2932">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2932">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2933">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2933">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2934">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2934">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2935">`Lock`和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2935">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="dc0e7-2936">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2936">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="dc0e7-2937">和的参数 `Lock` `Unlock` 必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2937">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="dc0e7-2938">如果 `Record` `FromRecord` 未提供、或且 `ToRecord` 未提供，则将为整个文件锁定。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2938">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="dc0e7-2939">如果 `Record` 单独指定，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2939">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="dc0e7-2940">如果文件已打开以进行顺序输入或输出，则 `Lock` `Unlock` 会影响整个文件，而不考虑和指定的范围 `FromRecord` `ToRecord` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2940">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2941">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2941">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="dc0e7-2942">此示例假定 `People.txt` 是包含结构的记录的文件 `Person` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2942">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2943">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2943">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2944">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2944">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2945">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2945">Required.</span></span> <span data-ttu-id="dc0e7-2946">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2946">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="dc0e7-2947">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2947">Optional.</span></span> <span data-ttu-id="dc0e7-2948">第一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2948">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="dc0e7-2949">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2949">Optional.</span></span> <span data-ttu-id="dc0e7-2950">最后一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2950">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2951">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2951">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="dc0e7-2952">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2952">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="dc0e7-2953">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2953">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2954">`Lock`和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2954">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="dc0e7-2955">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2955">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="dc0e7-2956">和的参数 `Lock` `Unlock` 必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2956">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="dc0e7-2957">如果 `Record` `FromRecord` 未提供、或且 `ToRecord` 未提供，则将为整个文件锁定。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2957">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="dc0e7-2958">如果 `Record` 单独指定，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2958">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="dc0e7-2959">如果文件已打开以进行顺序输入或输出，则 `Lock` `Unlock` 会影响整个文件，而不考虑和指定的范围 `FromRecord` `ToRecord` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2959">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2960">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2960">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="dc0e7-2961">此示例假定 `People.txt` 是包含结构的记录的文件 `Person` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2961">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2962">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2962">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2963">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2963">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2964">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2964">Required.</span></span> <span data-ttu-id="dc0e7-2965">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2965">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="dc0e7-2966">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2966">Optional.</span></span> <span data-ttu-id="dc0e7-2967">要写入文件的一个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2967">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="dc0e7-2968">将数据写入一个顺序文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2968">Writes data to a sequential file.</span></span> <span data-ttu-id="dc0e7-2969">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2969">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-2970">`Write`提供和 `WriteLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2970">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-2971">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2971">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-2972">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2972">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-2973">如果省略 `Output` ，则会在文件中打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2973">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="dc0e7-2974">多个表达式可以用逗号分隔。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2974">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="dc0e7-2975">与 `Print` 函数不同， `Write` 函数在写入到文件中时，在字符串中的项和引号之间插入逗号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2975">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="dc0e7-2976">不需要在列表中放置显式分隔符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2976">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="dc0e7-2977">`Write`使用将数据写入文件时，仅支持数字、 `Boolean` 、日期、null 和 `Error` 数据格式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2977">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="dc0e7-2978">遵循以下通用假设 `Input` ，这样无论区域设置如何，都可以使用读取和正确地解释数据：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2978">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="dc0e7-2979">始终使用句点作为小数点分隔符来编写数值数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2979">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="dc0e7-2980">对于 `Boolean` 数据，可以是 `#TRUE#` 或 `#FALSE#` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2980">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="dc0e7-2981">`True` `False` 不会转换和关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2981">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="dc0e7-2982">使用通用日期格式将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2982">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="dc0e7-2983">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2983">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="dc0e7-2984">如果数据为空，则不向文件写入任何内容 `Output` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2984">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="dc0e7-2985">但对于空数据， `#NULL#` 将写入。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2985">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-2986">对于 `Error` 数据，输出显示为 `#ERROR errorcode#` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2986">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="dc0e7-2987">`Error`不转换关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2987">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="dc0e7-2988">`WriteLine``Chr(13) + Chr(10)`在将最后一个字符写入到文件中后，将换行符 (为、回车符/换行符或) `Output` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2988">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="dc0e7-2989">您可以通过使用双引号或 "" 在字符串中嵌入引号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2989">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="dc0e7-2990">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2990">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="dc0e7-2991">返回值为的字符串 `Double quotation marks aren't "difficult" to handle` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2991">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="dc0e7-2992">使用 `Write` 或函数写入文件 `WriteLine` 需要 `Append` 枚举中的访问权限 `FileIOPermissionAccess` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2992">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-2993">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2993">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-2994">此示例使用 `Write` 函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2994">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="dc0e7-2995">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-2996">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2996">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-2997">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2997">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-2998">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-2998">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="dc0e7-2999">必需。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-2999">Required.</span></span> <span data-ttu-id="dc0e7-3000">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3000">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="dc0e7-3001">可选。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3001">Optional.</span></span> <span data-ttu-id="dc0e7-3002">要写入文件的一个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3002">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="dc0e7-3003">将数据写入一个顺序文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3003">Writes data to a sequential file.</span></span> <span data-ttu-id="dc0e7-3004">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3004">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc0e7-3005">`Write`提供和 `WriteLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3005">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="dc0e7-3006">对于非旧版应用程序， `My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3006">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="dc0e7-3007">有关详细信息，请参阅 [使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3007">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="dc0e7-3008">如果省略 `Output` ，则会在文件中打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3008">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="dc0e7-3009">多个表达式可以用逗号分隔。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3009">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="dc0e7-3010">与 `Print` 函数不同， `Write` 函数在写入到文件中时，在字符串中的项和引号之间插入逗号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3010">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="dc0e7-3011">不需要在列表中放置显式分隔符。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3011">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="dc0e7-3012">`Write`使用将数据写入文件时，仅支持数字、 `Boolean` 、日期、null 和 `Error` 数据格式。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3012">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="dc0e7-3013">遵循以下通用假设 `Input` ，这样无论区域设置如何，都可以使用读取和正确地解释数据：</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3013">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="dc0e7-3014">始终使用句点作为小数点分隔符来编写数值数据。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3014">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="dc0e7-3015">对于 `Boolean` 数据，可以是 `#TRUE#` 或 `#FALSE#` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3015">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="dc0e7-3016">`True` `False` 不会转换和关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3016">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="dc0e7-3017">使用通用日期格式将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3017">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="dc0e7-3018">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3018">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="dc0e7-3019">如果数据为空，则不向文件写入任何内容 `Output` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3019">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="dc0e7-3020">但对于空数据， `#NULL#` 将写入。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3020">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="dc0e7-3021">对于 `Error` 数据，输出显示为 `#ERROR errorcode#` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3021">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="dc0e7-3022">`Error`不转换关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3022">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="dc0e7-3023">`WriteLine``Chr(13) + Chr(10)`在将最后一个字符写入到文件中后，将换行符 (为、回车符/换行符或) `Output` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3023">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="dc0e7-3024">您可以通过使用双引号或 "" 在字符串中嵌入引号。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3024">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="dc0e7-3025">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3025">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="dc0e7-3026">返回值为的字符串 `Double quotation marks aren't "difficult" to handle` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3026">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="dc0e7-3027">使用 `Write` 或函数写入文件 `WriteLine` 需要 `Append` 枚举中的访问权限 `FileIOPermissionAccess` 。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3027">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="dc0e7-3028">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3028">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc0e7-3029">此示例使用 `Write` 函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3029">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="dc0e7-3030">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3030">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="dc0e7-3031">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="dc0e7-3031">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="dc0e7-3032">如何：使用 Streamwriter (Visual Basic 将文本写入文件) </span><span class="sxs-lookup"><span data-stu-id="dc0e7-3032">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
